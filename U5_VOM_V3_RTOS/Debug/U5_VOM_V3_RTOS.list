
U5_VOM_V3_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002d5c4  08000240  08000240  00001240  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000311f  0802d804  0802d804  0002e804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00009da2  08030924  08030924  00031924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000004c8  0803a6c8  0803a6c8  0003b6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000008c  0803ab90  0803ab90  0003bb90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000018  0803ac1c  0803ac1c  0003bc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  0803ac34  0803ac34  0003bc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  0803ac40  0003c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 TouchGFX_ScratchbufferA 00000100  20000120  0803ad48  0003c120  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 TouchGFX_ScratchbufferB 00000100  20000220  0803ae48  0003c220  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012b24  20000320  0803af48  0003c320  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20012e44  0803af48  0003ce44  2**0
                  ALLOC
 13 .ARM.attributes 00000036  00000000  00000000  0003c320  2**0
                  CONTENTS, READONLY
 14 .debug_info   000a097e  00000000  00000000  0003c356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00010842  00000000  00000000  000dccd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003da0  00000000  00000000  000ed518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002e41  00000000  00000000  000f12b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e3d7  00000000  00000000  000f40f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00046419  00000000  00000000  001324d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00174050  00000000  00000000  001788e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c2  00000000  00000000  002ec939  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00010f5c  00000000  00000000  002ec9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000065  00000000  00000000  002fd958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000240 <__do_global_dtors_aux>:
 8000240:	b510      	push	{r4, lr}
 8000242:	4c05      	ldr	r4, [pc, #20]	@ (8000258 <__do_global_dtors_aux+0x18>)
 8000244:	7823      	ldrb	r3, [r4, #0]
 8000246:	b933      	cbnz	r3, 8000256 <__do_global_dtors_aux+0x16>
 8000248:	4b04      	ldr	r3, [pc, #16]	@ (800025c <__do_global_dtors_aux+0x1c>)
 800024a:	b113      	cbz	r3, 8000252 <__do_global_dtors_aux+0x12>
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <__do_global_dtors_aux+0x20>)
 800024e:	f3af 8000 	nop.w
 8000252:	2301      	movs	r3, #1
 8000254:	7023      	strb	r3, [r4, #0]
 8000256:	bd10      	pop	{r4, pc}
 8000258:	20000320 	.word	0x20000320
 800025c:	00000000 	.word	0x00000000
 8000260:	0802d7ec 	.word	0x0802d7ec

08000264 <frame_dummy>:
 8000264:	b508      	push	{r3, lr}
 8000266:	4b03      	ldr	r3, [pc, #12]	@ (8000274 <frame_dummy+0x10>)
 8000268:	b11b      	cbz	r3, 8000272 <frame_dummy+0xe>
 800026a:	4903      	ldr	r1, [pc, #12]	@ (8000278 <frame_dummy+0x14>)
 800026c:	4803      	ldr	r0, [pc, #12]	@ (800027c <frame_dummy+0x18>)
 800026e:	f3af 8000 	nop.w
 8000272:	bd08      	pop	{r3, pc}
 8000274:	00000000 	.word	0x00000000
 8000278:	20000324 	.word	0x20000324
 800027c:	0802d7ec 	.word	0x0802d7ec

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  /* creation of myQueueUI */
  myQueueUIHandle = osMessageQueueNew (200, sizeof(uint16_t), &myQueueUI_attributes);
 8000284:	4a10      	ldr	r2, [pc, #64]	@ (80002c8 <MX_FREERTOS_Init+0x48>)
 8000286:	2102      	movs	r1, #2
 8000288:	20c8      	movs	r0, #200	@ 0xc8
 800028a:	f00a fc4f 	bl	800ab2c <osMessageQueueNew>
 800028e:	4603      	mov	r3, r0
 8000290:	4a0e      	ldr	r2, [pc, #56]	@ (80002cc <MX_FREERTOS_Init+0x4c>)
 8000292:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000294:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <MX_FREERTOS_Init+0x50>)
 8000296:	2100      	movs	r1, #0
 8000298:	480e      	ldr	r0, [pc, #56]	@ (80002d4 <MX_FREERTOS_Init+0x54>)
 800029a:	f00a fa89 	bl	800a7b0 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a0d      	ldr	r2, [pc, #52]	@ (80002d8 <MX_FREERTOS_Init+0x58>)
 80002a2:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 80002a4:	4a0d      	ldr	r2, [pc, #52]	@ (80002dc <MX_FREERTOS_Init+0x5c>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	480d      	ldr	r0, [pc, #52]	@ (80002e0 <MX_FREERTOS_Init+0x60>)
 80002aa:	f00a fa81 	bl	800a7b0 <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a0c      	ldr	r2, [pc, #48]	@ (80002e4 <MX_FREERTOS_Init+0x64>)
 80002b2:	6013      	str	r3, [r2, #0]

  /* creation of myAdcTask */
  myAdcTaskHandle = osThreadNew(StartAdcTask, NULL, &myAdcTask_attributes);
 80002b4:	4a0c      	ldr	r2, [pc, #48]	@ (80002e8 <MX_FREERTOS_Init+0x68>)
 80002b6:	2100      	movs	r1, #0
 80002b8:	480c      	ldr	r0, [pc, #48]	@ (80002ec <MX_FREERTOS_Init+0x6c>)
 80002ba:	f00a fa79 	bl	800a7b0 <osThreadNew>
 80002be:	4603      	mov	r3, r0
 80002c0:	4a0b      	ldr	r2, [pc, #44]	@ (80002f0 <MX_FREERTOS_Init+0x70>)
 80002c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	0802ecf4 	.word	0x0802ecf4
 80002cc:	20000348 	.word	0x20000348
 80002d0:	0802ec88 	.word	0x0802ec88
 80002d4:	080002f5 	.word	0x080002f5
 80002d8:	2000033c 	.word	0x2000033c
 80002dc:	0802ecac 	.word	0x0802ecac
 80002e0:	0800ddc7 	.word	0x0800ddc7
 80002e4:	20000340 	.word	0x20000340
 80002e8:	0802ecd0 	.word	0x0802ecd0
 80002ec:	08000315 	.word	0x08000315
 80002f0:	20000344 	.word	0x20000344

080002f4 <StartDefaultTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	//Start convert the first time.
  /* Infinite loop */

	for(;;)
	{
		if(ADC_Conv_Done == 2)
 80002fc:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <StartDefaultTask+0x1c>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b02      	cmp	r3, #2
 8000302:	d101      	bne.n	8000308 <StartDefaultTask+0x14>
		{
			Convert_ADC_Buffer_To_Voltage();
 8000304:	f000 fc40 	bl	8000b88 <Convert_ADC_Buffer_To_Voltage>
		}
		osDelay(60);
 8000308:	203c      	movs	r0, #60	@ 0x3c
 800030a:	f00a fae2 	bl	800a8d2 <osDelay>
		if(ADC_Conv_Done == 2)
 800030e:	e7f5      	b.n	80002fc <StartDefaultTask+0x8>
 8000310:	200007f0 	.word	0x200007f0

08000314 <StartAdcTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAdcTask */
void StartAdcTask(void *argument)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myAdcTask */
  /* Infinite loop */
  for(;;)
  {
  	if(osMessageQueueGetSpace(myQueueUIHandle) == ADC_MAX_BUFFER && ADC_Conv_Done == 0)
 800031c:	4b0a      	ldr	r3, [pc, #40]	@ (8000348 <StartAdcTask+0x34>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4618      	mov	r0, r3
 8000322:	f00a fd27 	bl	800ad74 <osMessageQueueGetSpace>
 8000326:	4603      	mov	r3, r0
 8000328:	2bc8      	cmp	r3, #200	@ 0xc8
 800032a:	d108      	bne.n	800033e <StartAdcTask+0x2a>
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <StartAdcTask+0x38>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d104      	bne.n	800033e <StartAdcTask+0x2a>
  	{
  		ADC_Conv_Done = 1;
 8000334:	4b05      	ldr	r3, [pc, #20]	@ (800034c <StartAdcTask+0x38>)
 8000336:	2201      	movs	r2, #1
 8000338:	701a      	strb	r2, [r3, #0]
  		Start_ADC_DMA();
 800033a:	f000 f83f 	bl	80003bc <Start_ADC_DMA>
  	}
  	osDelay(5000);
 800033e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000342:	f00a fac6 	bl	800a8d2 <osDelay>
  	if(osMessageQueueGetSpace(myQueueUIHandle) == ADC_MAX_BUFFER && ADC_Conv_Done == 0)
 8000346:	e7e9      	b.n	800031c <StartAdcTask+0x8>
 8000348:	20000348 	.word	0x20000348
 800034c:	200007f0 	.word	0x200007f0

08000350 <LL_ADC_DisableIT_OVR>:
  * @rmtoll IER      OVRIE          LL_ADC_DisableIT_OVR
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_OVR);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f023 0210 	bic.w	r2, r3, #16
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	605a      	str	r2, [r3, #4]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <Start_Generate_PWM_OutputOnTim4Channel1_PB6>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Variable containing ADC conversions data */

void Start_Generate_PWM_OutputOnTim4Channel1_PB6() {
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
	//Timer4 use to generate PWM output.
	if (HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1) != HAL_OK) {
 8000374:	2100      	movs	r1, #0
 8000376:	4805      	ldr	r0, [pc, #20]	@ (800038c <Start_Generate_PWM_OutputOnTim4Channel1_PB6+0x1c>)
 8000378:	f008 fd96 	bl	8008ea8 <HAL_TIM_PWM_Start_IT>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <Start_Generate_PWM_OutputOnTim4Channel1_PB6+0x16>
		Error_Handler();
 8000382:	f000 fc6d 	bl	8000c60 <Error_Handler>
	}
}
 8000386:	bf00      	nop
 8000388:	bd80      	pop	{r7, pc}
 800038a:	bf00      	nop
 800038c:	20000614 	.word	0x20000614

08000390 <Setup_LCD_For_TouchGFX>:

void Setup_LCD_For_TouchGFX() {
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	Displ_Init(Displ_Orientat_0); // initialize the display and set the initial display orientation (here is orientaton: 0°) - THIS FUNCTION MUST PRECEED ANY OTHER DISPLAY FUNCTION CALL.
 8000394:	2000      	movs	r0, #0
 8000396:	f001 fabf 	bl	8001918 <Displ_Init>
	Displ_BackLight('1');  	// initialize backlight and turn it on at init level
 800039a:	2031      	movs	r0, #49	@ 0x31
 800039c:	f001 fb50 	bl	8001a40 <Displ_BackLight>
	touchgfxSignalVSync();
 80003a0:	f014 fce8 	bl	8014d74 <touchgfxSignalVSync>
	if (HAL_TIM_Base_Start_IT(&TGFX_T) != HAL_OK) {
 80003a4:	4804      	ldr	r0, [pc, #16]	@ (80003b8 <Setup_LCD_For_TouchGFX+0x28>)
 80003a6:	f008 fc87 	bl	8008cb8 <HAL_TIM_Base_Start_IT>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <Setup_LCD_For_TouchGFX+0x24>
		Error_Handler();
 80003b0:	f000 fc56 	bl	8000c60 <Error_Handler>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	200005c8 	.word	0x200005c8

080003bc <Start_ADC_DMA>:
void Start_ADC_DMA() {
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, (void*) adc_val, ADC_MAX_BUFFER)) {
 80003c0:	22c8      	movs	r2, #200	@ 0xc8
 80003c2:	4905      	ldr	r1, [pc, #20]	@ (80003d8 <Start_ADC_DMA+0x1c>)
 80003c4:	4805      	ldr	r0, [pc, #20]	@ (80003dc <Start_ADC_DMA+0x20>)
 80003c6:	f002 fab3 	bl	8002930 <HAL_ADC_Start_DMA>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <Start_ADC_DMA+0x18>
		Error_Handler();
 80003d0:	f000 fc46 	bl	8000c60 <Error_Handler>
	}
}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000660 	.word	0x20000660
 80003dc:	2000034c 	.word	0x2000034c

080003e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e4:	f001 fc1c 	bl	8001c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e8:	f000 f840 	bl	800046c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80003ec:	f000 f89f 	bl	800052e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f000 fb04 	bl	80009fc <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80003f4:	f000 f958 	bl	80006a8 <MX_GPDMA1_Init>
  MX_SPI1_Init();
 80003f8:	f000 f98a 	bl	8000710 <MX_SPI1_Init>
  MX_TIM3_Init();
 80003fc:	f000 fa4a 	bl	8000894 <MX_TIM3_Init>
  MX_CRC_Init();
 8000400:	f000 f930 	bl	8000664 <MX_CRC_Init>
  MX_ICACHE_Init();
 8000404:	f000 f970 	bl	80006e8 <MX_ICACHE_Init>
  MX_TIM4_Init();
 8000408:	f000 fa92 	bl	8000930 <MX_TIM4_Init>
  MX_ADC1_Init();
 800040c:	f000 f8b8 	bl	8000580 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000410:	f000 f9ee 	bl	80007f0 <MX_TIM1_Init>
  MX_TouchGFX_Init();
 8000414:	f00d fccf 	bl	800ddb6 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000418:	f00d fcc6 	bl	800dda8 <MX_TouchGFX_PreOSInit>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800041c:	f000 f893 	bl	8000546 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	Setup_LCD_For_TouchGFX();
 8000420:	f7ff ffb6 	bl	8000390 <Setup_LCD_For_TouchGFX>
	//Gen PWM_PB0
	Start_Generate_PWM_OutputOnTim4Channel1_PB6();
 8000424:	f7ff ffa4 	bl	8000370 <Start_Generate_PWM_OutputOnTim4Channel1_PB6>
	/* Perform ADC calibration */

	if (HAL_OK != HAL_TIM_Base_Start_IT(&htim1)) {
 8000428:	480e      	ldr	r0, [pc, #56]	@ (8000464 <main+0x84>)
 800042a:	f008 fc45 	bl	8008cb8 <HAL_TIM_Base_Start_IT>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <main+0x58>
		Error_Handler();
 8000434:	f000 fc14 	bl	8000c60 <Error_Handler>
	}
	if(HAL_OK != HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED))
 8000438:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800043c:	2100      	movs	r1, #0
 800043e:	480a      	ldr	r0, [pc, #40]	@ (8000468 <main+0x88>)
 8000440:	f003 fbbc 	bl	8003bbc <HAL_ADCEx_Calibration_Start>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <main+0x6e>
	{
		Error_Handler();
 800044a:	f000 fc09 	bl	8000c60 <Error_Handler>
	//HAL_Delay(10);
	//Start_ADC_DMA();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800044e:	f00a f95f 	bl	800a710 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000452:	f7ff ff15 	bl	8000280 <MX_FREERTOS_Init>

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000456:	2000      	movs	r0, #0
 8000458:	f001 fb88 	bl	8001b6c <BSP_LED_Init>

  /* Start scheduler */
  osKernelStart();
 800045c:	f00a f97e 	bl	800a75c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <main+0x80>
 8000464:	2000057c 	.word	0x2000057c
 8000468:	2000034c 	.word	0x2000034c

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b09e      	sub	sp, #120	@ 0x78
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0318 	add.w	r3, r7, #24
 8000476:	2260      	movs	r2, #96	@ 0x60
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f02c fb35 	bl	802caea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	463b      	mov	r3, r7
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
 800048e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000490:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000494:	f005 f934 	bl	8005700 <HAL_PWREx_ControlVoltageScaling>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800049e:	f000 fbdf 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
 80004a2:	2350      	movs	r3, #80	@ 0x50
 80004a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004a6:	2301      	movs	r3, #1
 80004a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80004aa:	2310      	movs	r3, #16
 80004ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_4;
 80004b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80004b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 80004b8:	2310      	movs	r3, #16
 80004ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004bc:	2302      	movs	r3, #2
 80004be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80004c0:	2301      	movs	r3, #1
 80004c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80004c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80004ca:	2303      	movs	r3, #3
 80004cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004ce:	2308      	movs	r3, #8
 80004d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004d2:	2302      	movs	r3, #2
 80004d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80004da:	2301      	movs	r3, #1
 80004dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80004de:	230c      	movs	r3, #12
 80004e0:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0318 	add.w	r3, r7, #24
 80004ea:	4618      	mov	r0, r3
 80004ec:	f005 f9f4 	bl	80058d8 <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004f6:	f000 fbb3 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	231f      	movs	r3, #31
 80004fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	2303      	movs	r3, #3
 8000500:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000512:	463b      	mov	r3, r7
 8000514:	2103      	movs	r1, #3
 8000516:	4618      	mov	r0, r3
 8000518:	f006 f8ba 	bl	8006690 <HAL_RCC_ClockConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000522:	f000 fb9d 	bl	8000c60 <Error_Handler>
  }
}
 8000526:	bf00      	nop
 8000528:	3778      	adds	r7, #120	@ 0x78
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000532:	2002      	movs	r0, #2
 8000534:	f005 f970 	bl	8005818 <HAL_PWREx_ConfigSupply>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemPower_Config+0x14>
  {
    Error_Handler();
 800053e:	f000 fb8f 	bl	8000c60 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}

08000546 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2105      	movs	r1, #5
 800054e:	203b      	movs	r0, #59	@ 0x3b
 8000550:	f003 fd42 	bl	8003fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000554:	203b      	movs	r0, #59	@ 0x3b
 8000556:	f003 fd59 	bl	800400c <HAL_NVIC_EnableIRQ>
  /* GPDMA1_Channel11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GPDMA1_Channel11_IRQn, 5, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2105      	movs	r1, #5
 800055e:	2053      	movs	r0, #83	@ 0x53
 8000560:	f003 fd3a 	bl	8003fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GPDMA1_Channel11_IRQn);
 8000564:	2053      	movs	r0, #83	@ 0x53
 8000566:	f003 fd51 	bl	800400c <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2105      	movs	r1, #5
 800056e:	202e      	movs	r0, #46	@ 0x2e
 8000570:	f003 fd32 	bl	8003fd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000574:	202e      	movs	r0, #46	@ 0x2e
 8000576:	f003 fd49 	bl	800400c <HAL_NVIC_EnableIRQ>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000586:	463b      	mov	r3, r7
 8000588:	2220      	movs	r2, #32
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f02c faac 	bl	802caea <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000592:	4b31      	ldr	r3, [pc, #196]	@ (8000658 <MX_ADC1_Init+0xd8>)
 8000594:	4a31      	ldr	r2, [pc, #196]	@ (800065c <MX_ADC1_Init+0xdc>)
 8000596:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000598:	4b2f      	ldr	r3, [pc, #188]	@ (8000658 <MX_ADC1_Init+0xd8>)
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 800059e:	4b2e      	ldr	r3, [pc, #184]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80005a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005aa:	4b2b      	ldr	r3, [pc, #172]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005b0:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b6:	4b28      	ldr	r3, [pc, #160]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005b8:	2204      	movs	r2, #4
 80005ba:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005bc:	4b26      	ldr	r3, [pc, #152]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005be:	2200      	movs	r2, #0
 80005c0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c2:	4b25      	ldr	r3, [pc, #148]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80005ca:	4b23      	ldr	r3, [pc, #140]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d0:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005da:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 80005de:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005f0:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005f6:	4b18      	ldr	r3, [pc, #96]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005fc:	4b16      	ldr	r3, [pc, #88]	@ (8000658 <MX_ADC1_Init+0xd8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <MX_ADC1_Init+0xd8>)
 8000604:	2201      	movs	r2, #1
 8000606:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000608:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <MX_ADC1_Init+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000610:	4811      	ldr	r0, [pc, #68]	@ (8000658 <MX_ADC1_Init+0xd8>)
 8000612:	f001 fec3 	bl	800239c <HAL_ADC_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800061c:	f000 fb20 	bl	8000c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_ADC1_Init+0xe0>)
 8000622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000624:	2306      	movs	r3, #6
 8000626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000630:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000632:	2304      	movs	r3, #4
 8000634:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <MX_ADC1_Init+0xd8>)
 8000640:	f002 fa8a 	bl	8002b58 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800064a:	f000 fb09 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000034c 	.word	0x2000034c
 800065c:	42028000 	.word	0x42028000
 8000660:	04000002 	.word	0x04000002

08000664 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <MX_CRC_Init+0x3c>)
 800066a:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <MX_CRC_Init+0x40>)
 800066c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_CRC_Init+0x3c>)
 8000670:	2200      	movs	r2, #0
 8000672:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <MX_CRC_Init+0x3c>)
 8000676:	2200      	movs	r2, #0
 8000678:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_CRC_Init+0x3c>)
 800067c:	2200      	movs	r2, #0
 800067e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <MX_CRC_Init+0x3c>)
 8000682:	2200      	movs	r2, #0
 8000684:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_CRC_Init+0x3c>)
 8000688:	2201      	movs	r2, #1
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_CRC_Init+0x3c>)
 800068e:	f003 fd23 	bl	80040d8 <HAL_CRC_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000698:	f000 fae2 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	20000450 	.word	0x20000450
 80006a4:	40023000 	.word	0x40023000

080006a8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_GPDMA1_Init+0x3c>)
 80006b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b4:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <MX_GPDMA1_Init+0x3c>)
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_GPDMA1_Init+0x3c>)
 80006c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel10_IRQn, 5, 0);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2105      	movs	r1, #5
 80006d0:	2052      	movs	r0, #82	@ 0x52
 80006d2:	f003 fc81 	bl	8003fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel10_IRQn);
 80006d6:	2052      	movs	r0, #82	@ 0x52
 80006d8:	f003 fc98 	bl	800400c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN GPDMA1_Init 2 */
	//handle_GPDMA1_Channel11.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
	//handle_GPDMA1_Channel11.Init.DestDataWidth  = DMA_SRC_DATAWIDTH_BYTE;
  /* USER CODE END GPDMA1_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	46020c00 	.word	0x46020c00

080006e8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80006ec:	2000      	movs	r0, #0
 80006ee:	f004 ffd7 	bl	80056a0 <HAL_ICACHE_ConfigAssociativityMode>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80006f8:	f000 fab2 	bl	8000c60 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006fc:	f004 fff0 	bl	80056e0 <HAL_ICACHE_Enable>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000706:	f000 faab 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b31      	ldr	r3, [pc, #196]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000722:	4a32      	ldr	r2, [pc, #200]	@ (80007ec <MX_SPI1_Init+0xdc>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b30      	ldr	r3, [pc, #192]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000728:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800072e:	4b2e      	ldr	r3, [pc, #184]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000730:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000734:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000736:	4b2c      	ldr	r3, [pc, #176]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000738:	2207      	movs	r2, #7
 800073a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073c:	4b2a      	ldr	r3, [pc, #168]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 800073e:	2200      	movs	r2, #0
 8000740:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000742:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000744:	2200      	movs	r2, #0
 8000746:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 800074a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800074e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000750:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000756:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000758:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000760:	2200      	movs	r2, #0
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000764:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000766:	2200      	movs	r2, #0
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 800076c:	2207      	movs	r2, #7
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b1d      	ldr	r3, [pc, #116]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000772:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000776:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 800077a:	2200      	movs	r2, #0
 800077c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000780:	2200      	movs	r2, #0
 8000782:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000786:	2200      	movs	r2, #0
 8000788:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 800078c:	2200      	movs	r2, #0
 800078e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000792:	2200      	movs	r2, #0
 8000794:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 8000798:	2200      	movs	r2, #0
 800079a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 80007b0:	f007 f9bc 	bl	8007b2c <HAL_SPI_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80007ba:	f000 fa51 	bl	8000c60 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80007c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007c6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_SPI1_Init+0xd8>)
 80007d2:	f008 f9d8 	bl	8008b86 <HAL_SPIEx_SetConfigAutonomousMode>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 80007dc:	f000 fa40 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000474 	.word	0x20000474
 80007ec:	40013000 	.word	0x40013000

080007f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_TIM1_Init+0x9c>)
 8000810:	4a1f      	ldr	r2, [pc, #124]	@ (8000890 <MX_TIM1_Init+0xa0>)
 8000812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 128-1;
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <MX_TIM1_Init+0x9c>)
 8000816:	227f      	movs	r2, #127	@ 0x7f
 8000818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_TIM1_Init+0x9c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <MX_TIM1_Init+0x9c>)
 8000822:	2263      	movs	r2, #99	@ 0x63
 8000824:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000826:	4b19      	ldr	r3, [pc, #100]	@ (800088c <MX_TIM1_Init+0x9c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800082c:	4b17      	ldr	r3, [pc, #92]	@ (800088c <MX_TIM1_Init+0x9c>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000832:	4b16      	ldr	r3, [pc, #88]	@ (800088c <MX_TIM1_Init+0x9c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000838:	4814      	ldr	r0, [pc, #80]	@ (800088c <MX_TIM1_Init+0x9c>)
 800083a:	f008 f9e5 	bl	8008c08 <HAL_TIM_Base_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 fa0c 	bl	8000c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	4619      	mov	r1, r3
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <MX_TIM1_Init+0x9c>)
 8000856:	f008 ff2b 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000860:	f000 f9fe 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000864:	2320      	movs	r3, #32
 8000866:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_TIM1_Init+0x9c>)
 8000876:	f009 fdd9 	bl	800a42c <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000880:	f000 f9ee 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000057c 	.word	0x2000057c
 8000890:	40012c00 	.word	0x40012c00

08000894 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_TIM3_Init+0x94>)
 80008b4:	4a1d      	ldr	r2, [pc, #116]	@ (800092c <MX_TIM3_Init+0x98>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 128-1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <MX_TIM3_Init+0x94>)
 80008ba:	227f      	movs	r2, #127	@ 0x7f
 80008bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_TIM3_Init+0x94>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 40000-1;
 80008c4:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <MX_TIM3_Init+0x94>)
 80008c6:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80008ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <MX_TIM3_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <MX_TIM3_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008d8:	4813      	ldr	r0, [pc, #76]	@ (8000928 <MX_TIM3_Init+0x94>)
 80008da:	f008 f995 	bl	8008c08 <HAL_TIM_Base_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80008e4:	f000 f9bc 	bl	8000c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <MX_TIM3_Init+0x94>)
 80008f6:	f008 fedb 	bl	80096b0 <HAL_TIM_ConfigClockSource>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 f9ae 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_TIM3_Init+0x94>)
 8000912:	f009 fd8b 	bl	800a42c <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800091c:	f000 f9a0 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	200005c8 	.word	0x200005c8
 800092c:	40000400 	.word	0x40000400

08000930 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]
 8000952:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000954:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <MX_TIM4_Init+0xbc>)
 8000956:	4a26      	ldr	r2, [pc, #152]	@ (80009f0 <MX_TIM4_Init+0xc0>)
 8000958:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 128-1;
 800095a:	4b24      	ldr	r3, [pc, #144]	@ (80009ec <MX_TIM4_Init+0xbc>)
 800095c:	227f      	movs	r2, #127	@ 0x7f
 800095e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000960:	4b22      	ldr	r3, [pc, #136]	@ (80009ec <MX_TIM4_Init+0xbc>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999999;
 8000966:	4b21      	ldr	r3, [pc, #132]	@ (80009ec <MX_TIM4_Init+0xbc>)
 8000968:	4a22      	ldr	r2, [pc, #136]	@ (80009f4 <MX_TIM4_Init+0xc4>)
 800096a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <MX_TIM4_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000972:	4b1e      	ldr	r3, [pc, #120]	@ (80009ec <MX_TIM4_Init+0xbc>)
 8000974:	2280      	movs	r2, #128	@ 0x80
 8000976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000978:	481c      	ldr	r0, [pc, #112]	@ (80009ec <MX_TIM4_Init+0xbc>)
 800097a:	f008 fa3d 	bl	8008df8 <HAL_TIM_PWM_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000984:	f000 f96c 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4815      	ldr	r0, [pc, #84]	@ (80009ec <MX_TIM4_Init+0xbc>)
 8000998:	f009 fd48 	bl	800a42c <HAL_TIMEx_MasterConfigSynchronization>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80009a2:	f000 f95d 	bl	8000c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a6:	2360      	movs	r3, #96	@ 0x60
 80009a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500000;
 80009aa:	4b13      	ldr	r3, [pc, #76]	@ (80009f8 <MX_TIM4_Init+0xc8>)
 80009ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b6:	463b      	mov	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	4619      	mov	r1, r3
 80009bc:	480b      	ldr	r0, [pc, #44]	@ (80009ec <MX_TIM4_Init+0xbc>)
 80009be:	f008 fd63 	bl	8009488 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80009c8:	f000 f94a 	bl	8000c60 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 80009cc:	4b07      	ldr	r3, [pc, #28]	@ (80009ec <MX_TIM4_Init+0xbc>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	699a      	ldr	r2, [r3, #24]
 80009d2:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <MX_TIM4_Init+0xbc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f022 0208 	bic.w	r2, r2, #8
 80009da:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_TIM4_Init+0xbc>)
 80009de:	f000 fb47 	bl	8001070 <HAL_TIM_MspPostInit>

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	@ 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000614 	.word	0x20000614
 80009f0:	40000800 	.word	0x40000800
 80009f4:	000f423f 	.word	0x000f423f
 80009f8:	0007a120 	.word	0x0007a120

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 030c 	add.w	r3, r7, #12
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b44      	ldr	r3, [pc, #272]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a18:	4a42      	ldr	r2, [pc, #264]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a1a:	f043 0304 	orr.w	r3, r3, #4
 8000a1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a22:	4b40      	ldr	r3, [pc, #256]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a30:	4b3c      	ldr	r3, [pc, #240]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a36:	4a3b      	ldr	r2, [pc, #236]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a40:	4b38      	ldr	r3, [pc, #224]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b35      	ldr	r3, [pc, #212]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a54:	4a33      	ldr	r2, [pc, #204]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a5e:	4b31      	ldr	r3, [pc, #196]	@ (8000b24 <MX_GPIO_Init+0x128>)
 8000a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPL_LED_Pin|DISPL_CS_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2111      	movs	r1, #17
 8000a70:	482d      	ldr	r0, [pc, #180]	@ (8000b28 <MX_GPIO_Init+0x12c>)
 8000a72:	f004 fde3 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_RST_GPIO_Port, DISPL_RST_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2101      	movs	r1, #1
 8000a7a:	482c      	ldr	r0, [pc, #176]	@ (8000b2c <MX_GPIO_Init+0x130>)
 8000a7c:	f004 fdde 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, GPIO_PIN_RESET);
 8000a80:	2200      	movs	r2, #0
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	482a      	ldr	r0, [pc, #168]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000a86:	f004 fdd9 	bl	800563c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DISPL_LED_Pin */
  GPIO_InitStruct.Pin = DISPL_LED_Pin;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_LED_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4821      	ldr	r0, [pc, #132]	@ (8000b28 <MX_GPIO_Init+0x12c>)
 8000aa2:	f004 fbf3 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_CS_Pin */
  GPIO_InitStruct.Pin = DISPL_CS_Pin;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_CS_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	4619      	mov	r1, r3
 8000abc:	481a      	ldr	r0, [pc, #104]	@ (8000b28 <MX_GPIO_Init+0x12c>)
 8000abe:	f004 fbe5 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_RST_Pin */
  GPIO_InitStruct.Pin = DISPL_RST_Pin;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_RST_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4814      	ldr	r0, [pc, #80]	@ (8000b2c <MX_GPIO_Init+0x130>)
 8000ada:	f004 fbd7 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <MX_GPIO_Init+0x130>)
 8000afc:	f004 fbc6 	bl	800528c <HAL_GPIO_Init>

  /*Configure GPIO pin : DISPL_DC_Pin */
  GPIO_InitStruct.Pin = DISPL_DC_Pin;
 8000b00:	2380      	movs	r3, #128	@ 0x80
 8000b02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISPL_DC_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	@ (8000b30 <MX_GPIO_Init+0x134>)
 8000b18:	f004 fbb8 	bl	800528c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1c:	bf00      	nop
 8000b1e:	3720      	adds	r7, #32
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	46020c00 	.word	0x46020c00
 8000b28:	42020000 	.word	0x42020000
 8000b2c:	42020400 	.word	0x42020400
 8000b30:	42020800 	.word	0x42020800

08000b34 <Adc_Convert_To_mV>:

/* USER CODE BEGIN 4 */
uint16_t Adc_Convert_To_mV(uint16_t val)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80fb      	strh	r3, [r7, #6]
	return (__LL_ADC_CALC_DATA_TO_VOLTAGE(hadc1.Instance, 3300UL, val, LL_ADC_RESOLUTION_14B));
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000b44:	fb02 f303 	mul.w	r3, r2, r3
 8000b48:	4a06      	ldr	r2, [pc, #24]	@ (8000b64 <Adc_Convert_To_mV+0x30>)
 8000b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4e:	441a      	add	r2, r3
 8000b50:	1352      	asrs	r2, r2, #13
 8000b52:	17db      	asrs	r3, r3, #31
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	b29b      	uxth	r3, r3
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	80020009 	.word	0x80020009

08000b68 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	/* Note: Disable ADC interruption that caused this error before entering in
	 infinite loop below. */

	/* In case of error due to overrun: Disable ADC group regular overrun interruption */
	LL_ADC_DisableIT_OVR(ADC1);
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <HAL_ADC_ErrorCallback+0x1c>)
 8000b72:	f7ff fbed 	bl	8000350 <LL_ADC_DisableIT_OVR>

	/* Error reporting */
	Error_Handler();
 8000b76:	f000 f873 	bl	8000c60 <Error_Handler>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	42028000 	.word	0x42028000

08000b88 <Convert_ADC_Buffer_To_Voltage>:
uint16_t *pAdc_val = NULL;
void Convert_ADC_Buffer_To_Voltage()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
//			if(osMessageQueueGetSpace(myQueueUIHandle) > 0)
//			{
//				osMessageQueuePut(myQueueUIHandle, (void*)&adc_val[i], 0, 0);
//			}
//		}
	if(pAdc_val == NULL){
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <Convert_ADC_Buffer_To_Voltage+0x44>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d019      	beq.n	8000bc8 <Convert_ADC_Buffer_To_Voltage+0x40>
		return;
	}
	else {
		if(pAdc_val < (adc_val+ADC_MAX_BUFFER))
 8000b94:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <Convert_ADC_Buffer_To_Voltage+0x44>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <Convert_ADC_Buffer_To_Voltage+0x48>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d20d      	bcs.n	8000bba <Convert_ADC_Buffer_To_Voltage+0x32>
		{
			osMessageQueuePut(myQueueUIHandle, (void*)pAdc_val, 0, 0);
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <Convert_ADC_Buffer_To_Voltage+0x4c>)
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <Convert_ADC_Buffer_To_Voltage+0x44>)
 8000ba4:	6819      	ldr	r1, [r3, #0]
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f00a f831 	bl	800ac10 <osMessageQueuePut>
			pAdc_val++;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <Convert_ADC_Buffer_To_Voltage+0x44>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <Convert_ADC_Buffer_To_Voltage+0x44>)
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	e007      	b.n	8000bca <Convert_ADC_Buffer_To_Voltage+0x42>
		}
		else
		{
			ADC_Conv_Done = 0;
 8000bba:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <Convert_ADC_Buffer_To_Voltage+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
			pAdc_val = NULL;
 8000bc0:	4b02      	ldr	r3, [pc, #8]	@ (8000bcc <Convert_ADC_Buffer_To_Voltage+0x44>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e000      	b.n	8000bca <Convert_ADC_Buffer_To_Voltage+0x42>
		return;
 8000bc8:	bf00      	nop
		}
	}
}
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200007f4 	.word	0x200007f4
 8000bd0:	200007f0 	.word	0x200007f0
 8000bd4:	20000348 	.word	0x20000348
 8000bd8:	200007f0 	.word	0x200007f0

08000bdc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	ADC_Conv_Done = 2;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_ADC_ConvCpltCallback+0x20>)
 8000be6:	2202      	movs	r2, #2
 8000be8:	701a      	strb	r2, [r3, #0]
	pAdc_val = adc_val;
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_ADC_ConvCpltCallback+0x24>)
 8000bec:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <HAL_ADC_ConvCpltCallback+0x28>)
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	200007f0 	.word	0x200007f0
 8000c00:	200007f4 	.word	0x200007f4
 8000c04:	20000660 	.word	0x20000660

08000c08 <HAL_TIM_PWM_PulseFinishedCallback>:

int count_125hz = 0; //use to toggle LED_GREEN to make sure the freq of PWM output.
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == PWM_PB6_TIMER) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d102      	bne.n	8000c20 <HAL_TIM_PWM_PulseFinishedCallback+0x18>
		//if (count_125hz++ == 1)
		{
			BSP_LED_Toggle(LED_GREEN);
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	f000 ffe2 	bl	8001be4 <BSP_LED_Toggle>
			//count_125hz = 0;
		}
	}

}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40000800 	.word	0x40000800

08000c2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM15) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d102      	bne.n	8000c44 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8000c3e:	f001 f81f 	bl	8001c80 <HAL_IncTick>
		//count_1s = 0;
		//}
	}

  /* USER CODE END Callback 1 */
}
 8000c42:	e005      	b.n	8000c50 <HAL_TIM_PeriodElapsedCallback+0x24>
	else if (htim == &TGFX_T) {
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a05      	ldr	r2, [pc, #20]	@ (8000c5c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d101      	bne.n	8000c50 <HAL_TIM_PeriodElapsedCallback+0x24>
		touchgfxSignalVSync();
 8000c4c:	f014 f892 	bl	8014d74 <touchgfxSignalVSync>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40014000 	.word	0x40014000
 8000c5c:	200005c8 	.word	0x200005c8

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <HAL_MspInit+0x3c>)
 8000c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca8 <HAL_MspInit+0x3c>)
 8000c7a:	f043 0304 	orr.w	r3, r3, #4
 8000c7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <HAL_MspInit+0x3c>)
 8000c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000c90:	f004 fe12 	bl	80058b8 <HAL_PWREx_EnableVddA>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	210f      	movs	r1, #15
 8000c98:	f06f 0001 	mvn.w	r0, #1
 8000c9c:	f003 f99c 	bl	8003fd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	46020c00 	.word	0x46020c00

08000cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0ba      	sub	sp, #232	@ 0xe8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	22c0      	movs	r2, #192	@ 0xc0
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f02b ff0c 	bl	802caea <memset>
  if(hadc->Instance==ADC1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a46      	ldr	r2, [pc, #280]	@ (8000df0 <HAL_ADC_MspInit+0x144>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	f040 8084 	bne.w	8000de6 <HAL_ADC_MspInit+0x13a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000cde:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ce2:	f04f 0300 	mov.w	r3, #0
 8000ce6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_MSIK;
 8000cea:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f006 f8aa 	bl	8006e50 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8000d02:	f7ff ffad 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d06:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <HAL_ADC_MspInit+0x148>)
 8000d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d0c:	4a39      	ldr	r2, [pc, #228]	@ (8000df4 <HAL_ADC_MspInit+0x148>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d12:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d16:	4b37      	ldr	r3, [pc, #220]	@ (8000df4 <HAL_ADC_MspInit+0x148>)
 8000d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	4b33      	ldr	r3, [pc, #204]	@ (8000df4 <HAL_ADC_MspInit+0x148>)
 8000d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2a:	4a32      	ldr	r2, [pc, #200]	@ (8000df4 <HAL_ADC_MspInit+0x148>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d34:	4b2f      	ldr	r3, [pc, #188]	@ (8000df4 <HAL_ADC_MspInit+0x148>)
 8000d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4827      	ldr	r0, [pc, #156]	@ (8000df8 <HAL_ADC_MspInit+0x14c>)
 8000d5c:	f004 fa96 	bl	800528c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* GPDMA1_REQUEST_ADC1 Init */
    handle_GPDMA1_Channel10.Instance = GPDMA1_Channel10;
 8000d60:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d62:	4a27      	ldr	r2, [pc, #156]	@ (8000e00 <HAL_ADC_MspInit+0x154>)
 8000d64:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel10.Init.Request = GPDMA1_REQUEST_ADC1;
 8000d66:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel10.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000d6c:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel10.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d72:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel10.Init.SrcInc = DMA_SINC_FIXED;
 8000d78:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel10.Init.DestInc = DMA_DINC_INCREMENTED;
 8000d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d80:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000d84:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel10.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_HALFWORD;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel10.Init.DestDataWidth = DMA_DEST_DATAWIDTH_HALFWORD;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d92:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel10.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel10.Init.SrcBurstLength = 1;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel10.Init.DestBurstLength = 1;
 8000da0:	4b16      	ldr	r3, [pc, #88]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel10.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel10.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel10.Init.Mode = DMA_NORMAL;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel10) != HAL_OK)
 8000db8:	4810      	ldr	r0, [pc, #64]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000dba:	f003 fa7f 	bl	80042bc <HAL_DMA_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_ADC_MspInit+0x11c>
    {
      Error_Handler();
 8000dc4:	f7ff ff4c 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc, DMA_Handle, handle_GPDMA1_Channel10);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4a0c      	ldr	r2, [pc, #48]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000dcc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel10, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	4809      	ldr	r0, [pc, #36]	@ (8000dfc <HAL_ADC_MspInit+0x150>)
 8000dd8:	f003 fd92 	bl	8004900 <HAL_DMA_ConfigChannelAttributes>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_ADC_MspInit+0x13a>
    {
      Error_Handler();
 8000de2:	f7ff ff3d 	bl	8000c60 <Error_Handler>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000de6:	bf00      	nop
 8000de8:	37e8      	adds	r7, #232	@ 0xe8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	42028000 	.word	0x42028000
 8000df4:	46020c00 	.word	0x46020c00
 8000df8:	42020800 	.word	0x42020800
 8000dfc:	200003d8 	.word	0x200003d8
 8000e00:	40020550 	.word	0x40020550

08000e04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0b      	ldr	r2, [pc, #44]	@ (8000e40 <HAL_CRC_MspInit+0x3c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d10e      	bne.n	8000e34 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_CRC_MspInit+0x40>)
 8000e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1c:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <HAL_CRC_MspInit+0x40>)
 8000e1e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <HAL_CRC_MspInit+0x40>)
 8000e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40023000 	.word	0x40023000
 8000e44:	46020c00 	.word	0x46020c00

08000e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	22c0      	movs	r2, #192	@ 0xc0
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f02b fe3e 	bl	802caea <memset>
  if(hspi->Instance==SPI1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a49      	ldr	r2, [pc, #292]	@ (8000f98 <HAL_SPI_MspInit+0x150>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	f040 808a 	bne.w	8000f8e <HAL_SPI_MspInit+0x146>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e7a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PCLK2;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4618      	mov	r0, r3
 8000e92:	f005 ffdd 	bl	8006e50 <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000e9c:	f7ff fee0 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	@ (8000f9c <HAL_SPI_MspInit+0x154>)
 8000ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ea6:	4a3d      	ldr	r2, [pc, #244]	@ (8000f9c <HAL_SPI_MspInit+0x154>)
 8000ea8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000eb0:	4b3a      	ldr	r3, [pc, #232]	@ (8000f9c <HAL_SPI_MspInit+0x154>)
 8000eb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000eb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	4b37      	ldr	r3, [pc, #220]	@ (8000f9c <HAL_SPI_MspInit+0x154>)
 8000ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec4:	4a35      	ldr	r2, [pc, #212]	@ (8000f9c <HAL_SPI_MspInit+0x154>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ece:	4b33      	ldr	r3, [pc, #204]	@ (8000f9c <HAL_SPI_MspInit+0x154>)
 8000ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000edc:	2382      	movs	r3, #130	@ 0x82
 8000ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ef4:	2305      	movs	r3, #5
 8000ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4827      	ldr	r0, [pc, #156]	@ (8000fa0 <HAL_SPI_MspInit+0x158>)
 8000f02:	f004 f9c3 	bl	800528c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* GPDMA1_REQUEST_SPI1_TX Init */
    handle_GPDMA1_Channel11.Instance = GPDMA1_Channel11;
 8000f06:	4b27      	ldr	r3, [pc, #156]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f08:	4a27      	ldr	r2, [pc, #156]	@ (8000fa8 <HAL_SPI_MspInit+0x160>)
 8000f0a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel11.Init.Request = GPDMA1_REQUEST_SPI1_TX;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f0e:	2207      	movs	r2, #7
 8000f10:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel11.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000f12:	4b24      	ldr	r3, [pc, #144]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel11.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f18:	4b22      	ldr	r3, [pc, #136]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1e:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel11.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000f20:	4b20      	ldr	r3, [pc, #128]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel11.Init.DestInc = DMA_DINC_FIXED;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel11.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel11.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel11.Init.Priority = DMA_LOW_PRIORITY_MID_WEIGHT;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f3a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f3e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel11.Init.SrcBurstLength = 1;
 8000f40:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel11.Init.DestBurstLength = 1;
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel11.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel11.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel11.Init.Mode = DMA_NORMAL;
 8000f58:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel11) != HAL_OK)
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f60:	f003 f9ac 	bl	80042bc <HAL_DMA_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_SPI_MspInit+0x126>
    {
      Error_Handler();
 8000f6a:	f7ff fe79 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi, hdmatx, handle_GPDMA1_Channel11);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a0c      	ldr	r2, [pc, #48]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f76:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel11, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <HAL_SPI_MspInit+0x15c>)
 8000f80:	f003 fcbe 	bl	8004900 <HAL_DMA_ConfigChannelAttributes>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 8000f8a:	f7ff fe69 	bl	8000c60 <Error_Handler>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f8e:	bf00      	nop
 8000f90:	37e8      	adds	r7, #232	@ 0xe8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40013000 	.word	0x40013000
 8000f9c:	46020c00 	.word	0x46020c00
 8000fa0:	42020000 	.word	0x42020000
 8000fa4:	20000504 	.word	0x20000504
 8000fa8:	400205d0 	.word	0x400205d0

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <HAL_TIM_Base_MspInit+0x68>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10f      	bne.n	8000fde <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fbe:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000fc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fc4:	4a14      	ldr	r2, [pc, #80]	@ (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000fc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fca:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000fd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fdc:	e013      	b.n	8001006 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800101c <HAL_TIM_Base_MspInit+0x70>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d10e      	bne.n	8001006 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fee:	4a0a      	ldr	r2, [pc, #40]	@ (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000ff8:	4b07      	ldr	r3, [pc, #28]	@ (8001018 <HAL_TIM_Base_MspInit+0x6c>)
 8000ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
}
 8001006:	bf00      	nop
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40012c00 	.word	0x40012c00
 8001018:	46020c00 	.word	0x46020c00
 800101c:	40000400 	.word	0x40000400

08001020 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <HAL_TIM_PWM_MspInit+0x48>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d116      	bne.n	8001060 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001032:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <HAL_TIM_PWM_MspInit+0x4c>)
 8001034:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001038:	4a0c      	ldr	r2, [pc, #48]	@ (800106c <HAL_TIM_PWM_MspInit+0x4c>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_TIM_PWM_MspInit+0x4c>)
 8001044:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2105      	movs	r1, #5
 8001054:	202f      	movs	r0, #47	@ 0x2f
 8001056:	f002 ffbf 	bl	8003fd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800105a:	202f      	movs	r0, #47	@ 0x2f
 800105c:	f002 ffd6 	bl	800400c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40000800 	.word	0x40000800
 800106c:	46020c00 	.word	0x46020c00

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <HAL_TIM_MspPostInit+0x68>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11e      	bne.n	80010d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_TIM_MspPostInit+0x6c>)
 8001094:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001098:	4a10      	ldr	r2, [pc, #64]	@ (80010dc <HAL_TIM_MspPostInit+0x6c>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_TIM_MspPostInit+0x6c>)
 80010a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010b0:	2340      	movs	r3, #64	@ 0x40
 80010b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_TIM_MspPostInit+0x70>)
 80010cc:	f004 f8de 	bl	800528c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40000800 	.word	0x40000800
 80010dc:	46020c00 	.word	0x46020c00
 80010e0:	42020400 	.word	0x42020400

080010e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08e      	sub	sp, #56	@ 0x38
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM15 clock */
  __HAL_RCC_TIM15_CLK_ENABLE();
 80010f4:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <HAL_InitTick+0xcc>)
 80010f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010fa:	4a2d      	ldr	r2, [pc, #180]	@ (80011b0 <HAL_InitTick+0xcc>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001100:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001104:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <HAL_InitTick+0xcc>)
 8001106:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800110a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001112:	f107 0210 	add.w	r2, r7, #16
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f005 fdd9 	bl	8006cd4 <HAL_RCC_GetClockConfig>
  /* Compute TIM15 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001122:	f005 fdc3 	bl	8006cac <HAL_RCC_GetPCLK2Freq>
 8001126:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM15 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800112a:	4a22      	ldr	r2, [pc, #136]	@ (80011b4 <HAL_InitTick+0xd0>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	0c9b      	lsrs	r3, r3, #18
 8001132:	3b01      	subs	r3, #1
 8001134:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM15 */
  htim15.Instance = TIM15;
 8001136:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <HAL_InitTick+0xd4>)
 8001138:	4a20      	ldr	r2, [pc, #128]	@ (80011bc <HAL_InitTick+0xd8>)
 800113a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM15CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim15.Init.Period = (1000000U / 1000U) - 1U;
 800113c:	4b1e      	ldr	r3, [pc, #120]	@ (80011b8 <HAL_InitTick+0xd4>)
 800113e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001142:	60da      	str	r2, [r3, #12]
  htim15.Init.Prescaler = uwPrescalerValue;
 8001144:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <HAL_InitTick+0xd4>)
 8001146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001148:	6053      	str	r3, [r2, #4]
  htim15.Init.ClockDivision = 0;
 800114a:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_InitTick+0xd4>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <HAL_InitTick+0xd4>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim15);
 8001156:	4818      	ldr	r0, [pc, #96]	@ (80011b8 <HAL_InitTick+0xd4>)
 8001158:	f007 fd56 	bl	8008c08 <HAL_TIM_Base_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001162:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001166:	2b00      	cmp	r3, #0
 8001168:	d118      	bne.n	800119c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim15);
 800116a:	4813      	ldr	r0, [pc, #76]	@ (80011b8 <HAL_InitTick+0xd4>)
 800116c:	f007 fda4 	bl	8008cb8 <HAL_TIM_Base_Start_IT>
 8001170:	4603      	mov	r3, r0
 8001172:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001176:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10e      	bne.n	800119c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b0f      	cmp	r3, #15
 8001182:	d808      	bhi.n	8001196 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM15 global Interrupt */
        HAL_NVIC_SetPriority(TIM15_IRQn, TickPriority, 0U);
 8001184:	2200      	movs	r2, #0
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	2045      	movs	r0, #69	@ 0x45
 800118a:	f002 ff25 	bl	8003fd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118e:	4a0c      	ldr	r2, [pc, #48]	@ (80011c0 <HAL_InitTick+0xdc>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	e002      	b.n	800119c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM15 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800119c:	2045      	movs	r0, #69	@ 0x45
 800119e:	f002 ff35 	bl	800400c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80011a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3738      	adds	r7, #56	@ 0x38
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	46020c00 	.word	0x46020c00
 80011b4:	431bde83 	.word	0x431bde83
 80011b8:	200007f8 	.word	0x200007f8
 80011bc:	40014000 	.word	0x40014000
 80011c0:	20000010 	.word	0x20000010

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <NMI_Handler+0x4>

080011cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <HardFault_Handler+0x4>

080011d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <MemManage_Handler+0x4>

080011dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001200:	4802      	ldr	r0, [pc, #8]	@ (800120c <TIM3_IRQHandler+0x10>)
 8001202:	f007 fff1 	bl	80091e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200005c8 	.word	0x200005c8

08001210 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <TIM4_IRQHandler+0x10>)
 8001216:	f007 ffe7 	bl	80091e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000614 	.word	0x20000614

08001224 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001228:	4802      	ldr	r0, [pc, #8]	@ (8001234 <SPI1_IRQHandler+0x10>)
 800122a:	f007 f959 	bl	80084e0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000474 	.word	0x20000474

08001238 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <TIM15_IRQHandler+0x10>)
 800123e:	f007 ffd3 	bl	80091e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200007f8 	.word	0x200007f8

0800124c <GPDMA1_Channel10_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 10 global interrupt.
  */
void GPDMA1_Channel10_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 0 */

  /* USER CODE END GPDMA1_Channel10_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel10);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <GPDMA1_Channel10_IRQHandler+0x10>)
 8001252:	f003 f9e8 	bl	8004626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel10_IRQn 1 */

  /* USER CODE END GPDMA1_Channel10_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200003d8 	.word	0x200003d8

08001260 <GPDMA1_Channel11_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 11 global interrupt.
  */
void GPDMA1_Channel11_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 0 */

  /* USER CODE END GPDMA1_Channel11_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel11);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <GPDMA1_Channel11_IRQHandler+0x10>)
 8001266:	f003 f9de 	bl	8004626 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel11_IRQn 1 */

  /* USER CODE END GPDMA1_Channel11_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000504 	.word	0x20000504

08001274 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return 1;
 8001278:	2301      	movs	r3, #1
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_kill>:

int _kill(int pid, int sig)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800128e:	f02b fd25 	bl	802ccdc <__errno>
 8001292:	4603      	mov	r3, r0
 8001294:	2216      	movs	r2, #22
 8001296:	601a      	str	r2, [r3, #0]
  return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_exit>:

void _exit (int status)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ffe7 	bl	8001284 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b6:	bf00      	nop
 80012b8:	e7fd      	b.n	80012b6 <_exit+0x12>

080012ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	60f8      	str	r0, [r7, #12]
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	e00a      	b.n	80012e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012cc:	f3af 8000 	nop.w
 80012d0:	4601      	mov	r1, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	60ba      	str	r2, [r7, #8]
 80012d8:	b2ca      	uxtb	r2, r1
 80012da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3301      	adds	r3, #1
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	dbf0      	blt.n	80012cc <_read+0x12>
  }

  return len;
 80012ea:	687b      	ldr	r3, [r7, #4]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e009      	b.n	800131a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	429a      	cmp	r2, r3
 8001320:	dbf1      	blt.n	8001306 <_write+0x12>
  }
  return len;
 8001322:	687b      	ldr	r3, [r7, #4]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_close>:

int _close(int file)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001334:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001354:	605a      	str	r2, [r3, #4]
  return 0;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_isatty>:

int _isatty(int file)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137a:	b480      	push	{r7}
 800137c:	b085      	sub	sp, #20
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800139c:	4a14      	ldr	r2, [pc, #80]	@ (80013f0 <_sbrk+0x5c>)
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <_sbrk+0x60>)
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d102      	bne.n	80013b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b0:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <_sbrk+0x64>)
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <_sbrk+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <_sbrk+0x64>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d207      	bcs.n	80013d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c4:	f02b fc8a 	bl	802ccdc <__errno>
 80013c8:	4603      	mov	r3, r0
 80013ca:	220c      	movs	r2, #12
 80013cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e009      	b.n	80013e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d4:	4b08      	ldr	r3, [pc, #32]	@ (80013f8 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013da:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <_sbrk+0x64>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <_sbrk+0x64>)
 80013e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e6:	68fb      	ldr	r3, [r7, #12]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3718      	adds	r7, #24
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20040000 	.word	0x20040000
 80013f4:	00000400 	.word	0x00000400
 80013f8:	20000844 	.word	0x20000844
 80013fc:	20012e48 	.word	0x20012e48

08001400 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001404:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <SystemInit+0x68>)
 8001406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <SystemInit+0x68>)
 800140c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001410:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <SystemInit+0x6c>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <SystemInit+0x6c>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <SystemInit+0x6c>)
 8001422:	2200      	movs	r2, #0
 8001424:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <SystemInit+0x6c>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <SystemInit+0x6c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0e      	ldr	r2, [pc, #56]	@ (800146c <SystemInit+0x6c>)
 8001432:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001436:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800143a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800143c:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <SystemInit+0x6c>)
 800143e:	2200      	movs	r2, #0
 8001440:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <SystemInit+0x6c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a09      	ldr	r2, [pc, #36]	@ (800146c <SystemInit+0x6c>)
 8001448:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800144c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800144e:	4b07      	ldr	r3, [pc, #28]	@ (800146c <SystemInit+0x6c>)
 8001450:	2200      	movs	r2, #0
 8001452:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001454:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <SystemInit+0x68>)
 8001456:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800145a:	609a      	str	r2, [r3, #8]
  #endif
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00
 800146c:	46020c00 	.word	0x46020c00

08001470 <Displ_Transmit>:
 * 			data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **************************/
void Displ_Transmit(GPIO_PinState DC_Status, uint8_t *data, uint16_t dataSize,
		uint8_t isTouchGFXBuffer) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6039      	str	r1, [r7, #0]
 8001478:	4611      	mov	r1, r2
 800147a:	461a      	mov	r2, r3
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	460b      	mov	r3, r1
 8001482:	80bb      	strh	r3, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]

	while (!Displ_SpiAvailable) {
 8001488:	bf00      	nop
 800148a:	4b2b      	ldr	r3, [pc, #172]	@ (8001538 <Displ_Transmit+0xc8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0fa      	beq.n	800148a <Displ_Transmit+0x1a>
	}; // waiting for a free SPI port. Flag is set to 1 by transmission-complete interrupt callback

	//Displ_Select();
	CS_L();
 8001494:	2200      	movs	r2, #0
 8001496:	2110      	movs	r1, #16
 8001498:	4828      	ldr	r0, [pc, #160]	@ (800153c <Displ_Transmit+0xcc>)
 800149a:	f004 f8cf 	bl	800563c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISPL_DC_GPIO_Port, DISPL_DC_Pin, DC_Status);
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	461a      	mov	r2, r3
 80014a2:	2180      	movs	r1, #128	@ 0x80
 80014a4:	4826      	ldr	r0, [pc, #152]	@ (8001540 <Displ_Transmit+0xd0>)
 80014a6:	f004 f8c9 	bl	800563c <HAL_GPIO_WritePin>

	if (isTouchGFXBuffer) {
 80014aa:	79bb      	ldrb	r3, [r7, #6]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d016      	beq.n	80014de <Displ_Transmit+0x6e>
#ifdef Z_RGB565
//if color format is RGB565 just swap even and odd bytes correcting endianess for ILI driver
		uint32_t *limit = (uint32_t*) (data + dataSize);
 80014b0:	88bb      	ldrh	r3, [r7, #4]
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e00b      	b.n	80014d6 <Displ_Transmit+0x66>
			*data32 = __REV16(*data32);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	ba5b      	rev16	r3, r3
 80014c8:	60bb      	str	r3, [r7, #8]
  return result;
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]
		for (uint32_t *data32 = (uint32_t*) data; data32 < limit; data32++) {
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3304      	adds	r3, #4
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3ef      	bcc.n	80014be <Displ_Transmit+0x4e>
		if(HAL_SPI_Transmit_IT(&DISPL_SPI_PORT , data, dataSize) != HAL_OK){
			while(Displ_SpiAvailable == 0);
		}
#else
#ifdef DISPLAY_SPI_DMA_MODE
	if (dataSize < DISPL_DMA_CUTOFF) {
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	2b13      	cmp	r3, #19
 80014e2:	d817      	bhi.n	8001514 <Displ_Transmit+0xa4>
#endif //DISPLAY_SPI_DMA_MODE
		Displ_SpiAvailable = 0;
 80014e4:	4b14      	ldr	r3, [pc, #80]	@ (8001538 <Displ_Transmit+0xc8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit(&DISPL_SPI_PORT, data, dataSize, HAL_MAX_DELAY)
 80014ea:	88ba      	ldrh	r2, [r7, #4]
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	6839      	ldr	r1, [r7, #0]
 80014f2:	4814      	ldr	r0, [pc, #80]	@ (8001544 <Displ_Transmit+0xd4>)
 80014f4:	f006 fc30 	bl	8007d58 <HAL_SPI_Transmit>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <Displ_Transmit+0x92>
				!= HAL_OK) {
			while (1)
 80014fe:	bf00      	nop
 8001500:	e7fd      	b.n	80014fe <Displ_Transmit+0x8e>
				;	//trap error.
		}
		Displ_SpiAvailable = 1;
 8001502:	4b0d      	ldr	r3, [pc, #52]	@ (8001538 <Displ_Transmit+0xc8>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
#ifdef DISPLAY_USING_TOUCHGFX
		if (isTouchGFXBuffer) {
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d010      	beq.n	8001530 <Displ_Transmit+0xc0>
			DisplayDriver_TransferCompleteCallback();
 800150e:	f013 fc2b 	bl	8014d68 <DisplayDriver_TransferCompleteCallback>
		Displ_SpiAvailable = 0;
		if (HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize)!= HAL_OK) { while (1);}
	}
#endif //DISPLAY_SPI_DMA_MODE
#endif //DISPLAY_SPI_INTERRUPT_MODE
}
 8001512:	e00d      	b.n	8001530 <Displ_Transmit+0xc0>
		Displ_SpiAvailable = 0;
 8001514:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <Displ_Transmit+0xc8>)
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
		if (HAL_SPI_Transmit_DMA(&DISPL_SPI_PORT, data, dataSize)!= HAL_OK) { while (1);}
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	461a      	mov	r2, r3
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	4808      	ldr	r0, [pc, #32]	@ (8001544 <Displ_Transmit+0xd4>)
 8001522:	f006 fe29 	bl	8008178 <HAL_SPI_Transmit_DMA>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <Displ_Transmit+0xc0>
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <Displ_Transmit+0xbc>
}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000008 	.word	0x20000008
 800153c:	42020000 	.word	0x42020000
 8001540:	42020800 	.word	0x42020800
 8001544:	20000474 	.word	0x20000474

08001548 <Displ_WriteCommand>:

/**********************************
 * @BRIEF	transmit a byte in a SPI_COMMAND format
 **********************************/
void Displ_WriteCommand(uint8_t cmd) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
	//Displ_Transmit(SPI_COMMAND, &cmd, sizeof(cmd),0);
	CS_L();
 8001552:	2200      	movs	r2, #0
 8001554:	2110      	movs	r1, #16
 8001556:	480b      	ldr	r0, [pc, #44]	@ (8001584 <Displ_WriteCommand+0x3c>)
 8001558:	f004 f870 	bl	800563c <HAL_GPIO_WritePin>
	DC_L();
 800155c:	2200      	movs	r2, #0
 800155e:	2180      	movs	r1, #128	@ 0x80
 8001560:	4809      	ldr	r0, [pc, #36]	@ (8001588 <Displ_WriteCommand+0x40>)
 8001562:	f004 f86b 	bl	800563c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DISPL_SPI_PORT, &cmd, 1, 1);
 8001566:	1df9      	adds	r1, r7, #7
 8001568:	2301      	movs	r3, #1
 800156a:	2201      	movs	r2, #1
 800156c:	4807      	ldr	r0, [pc, #28]	@ (800158c <Displ_WriteCommand+0x44>)
 800156e:	f006 fbf3 	bl	8007d58 <HAL_SPI_Transmit>
	CS_H();
 8001572:	2201      	movs	r2, #1
 8001574:	2110      	movs	r1, #16
 8001576:	4803      	ldr	r0, [pc, #12]	@ (8001584 <Displ_WriteCommand+0x3c>)
 8001578:	f004 f860 	bl	800563c <HAL_GPIO_WritePin>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	42020000 	.word	0x42020000
 8001588:	42020800 	.word	0x42020800
 800158c:	20000474 	.word	0x20000474

08001590 <Dislp_WriteData_Single>:

void Dislp_WriteData_Single(uint8_t Data) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	DC_H();
 800159a:	2201      	movs	r2, #1
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	480b      	ldr	r0, [pc, #44]	@ (80015cc <Dislp_WriteData_Single+0x3c>)
 80015a0:	f004 f84c 	bl	800563c <HAL_GPIO_WritePin>
	CS_L();
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <Dislp_WriteData_Single+0x40>)
 80015aa:	f004 f847 	bl	800563c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&DISPL_SPI_PORT, &Data, 1, 1);
 80015ae:	1df9      	adds	r1, r7, #7
 80015b0:	2301      	movs	r3, #1
 80015b2:	2201      	movs	r2, #1
 80015b4:	4807      	ldr	r0, [pc, #28]	@ (80015d4 <Dislp_WriteData_Single+0x44>)
 80015b6:	f006 fbcf 	bl	8007d58 <HAL_SPI_Transmit>
	CS_H();
 80015ba:	2201      	movs	r2, #1
 80015bc:	2110      	movs	r1, #16
 80015be:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <Dislp_WriteData_Single+0x40>)
 80015c0:	f004 f83c 	bl	800563c <HAL_GPIO_WritePin>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	42020800 	.word	0x42020800
 80015d0:	42020000 	.word	0x42020000
 80015d4:	20000474 	.word	0x20000474

080015d8 <Displ_WriteData>:
 * @BRIEF	transmit a set of data in a SPI_DATA format
 * @PARAM 	data		buffer data to send
 * 			dataSize	number of bytes in "data" to be sent
 * 			isTouchGFXBuffer 1 only when called by touchgfxDisplayDriverTransmitBlock (for byte endian conversion). All other cases 0
 **********************************/
void Displ_WriteData(uint8_t *buff, size_t buff_size, uint8_t isTouchGFXBuffer) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	4613      	mov	r3, r2
 80015e4:	71fb      	strb	r3, [r7, #7]
	if (buff_size == 0)
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <Displ_WriteData+0x24>
		return;
	Displ_Transmit(SPI_DATA, buff, buff_size, isTouchGFXBuffer);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	68f9      	ldr	r1, [r7, #12]
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ff3b 	bl	8001470 <Displ_Transmit>
 80015fa:	e000      	b.n	80015fe <Displ_WriteData+0x26>
		return;
 80015fc:	bf00      	nop
}
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <ILI9XXX_Enable>:

void ILI9XXX_Enable() {
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	RST_H();
 8001608:	2201      	movs	r2, #1
 800160a:	2101      	movs	r1, #1
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <ILI9XXX_Enable+0x14>)
 800160e:	f004 f815 	bl	800563c <HAL_GPIO_WritePin>
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	42020400 	.word	0x42020400

0800161c <ILI9XXX_SPI_Init>:
void ILI9XXX_SPI_Init() {
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	CS_L();
 8001620:	2200      	movs	r2, #0
 8001622:	2110      	movs	r1, #16
 8001624:	4802      	ldr	r0, [pc, #8]	@ (8001630 <ILI9XXX_SPI_Init+0x14>)
 8001626:	f004 f809 	bl	800563c <HAL_GPIO_WritePin>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	42020000 	.word	0x42020000

08001634 <ILI9XXX_Reset>:
void ILI9XXX_Reset() {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	RST_H();
 8001638:	2201      	movs	r2, #1
 800163a:	2101      	movs	r1, #1
 800163c:	480a      	ldr	r0, [pc, #40]	@ (8001668 <ILI9XXX_Reset+0x34>)
 800163e:	f003 fffd 	bl	800563c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001642:	20c8      	movs	r0, #200	@ 0xc8
 8001644:	f000 fb3c 	bl	8001cc0 <HAL_Delay>
	CS_L();
 8001648:	2200      	movs	r2, #0
 800164a:	2110      	movs	r1, #16
 800164c:	4807      	ldr	r0, [pc, #28]	@ (800166c <ILI9XXX_Reset+0x38>)
 800164e:	f003 fff5 	bl	800563c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001652:	20c8      	movs	r0, #200	@ 0xc8
 8001654:	f000 fb34 	bl	8001cc0 <HAL_Delay>
	RST_H();
 8001658:	2201      	movs	r2, #1
 800165a:	2101      	movs	r1, #1
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <ILI9XXX_Reset+0x34>)
 800165e:	f003 ffed 	bl	800563c <HAL_GPIO_WritePin>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	42020400 	.word	0x42020400
 800166c:	42020000 	.word	0x42020000

08001670 <ILI9XXX_Init>:
/**********************************
 * @brief	ILIXXX initialization sequence
 **********************************/
void ILI9XXX_Init() {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	ILI9XXX_Enable();
 8001674:	f7ff ffc6 	bl	8001604 <ILI9XXX_Enable>
	ILI9XXX_SPI_Init();
 8001678:	f7ff ffd0 	bl	800161c <ILI9XXX_SPI_Init>
	ILI9XXX_Reset();
 800167c:	f7ff ffda 	bl	8001634 <ILI9XXX_Reset>

	//SOFTWARE RESET
	Displ_WriteCommand(0x01);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff ff61 	bl	8001548 <Displ_WriteCommand>
	HAL_Delay(1000);
 8001686:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800168a:	f000 fb19 	bl	8001cc0 <HAL_Delay>

	//POWER CONTROL A
	Displ_WriteCommand(0xCB);
 800168e:	20cb      	movs	r0, #203	@ 0xcb
 8001690:	f7ff ff5a 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x39);
 8001694:	2039      	movs	r0, #57	@ 0x39
 8001696:	f7ff ff7b 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x2C);
 800169a:	202c      	movs	r0, #44	@ 0x2c
 800169c:	f7ff ff78 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ff75 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x34);
 80016a6:	2034      	movs	r0, #52	@ 0x34
 80016a8:	f7ff ff72 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x02);
 80016ac:	2002      	movs	r0, #2
 80016ae:	f7ff ff6f 	bl	8001590 <Dislp_WriteData_Single>

	//POWER CONTROL B
	Displ_WriteCommand(0xCF);
 80016b2:	20cf      	movs	r0, #207	@ 0xcf
 80016b4:	f7ff ff48 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff ff69 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xC1);
 80016be:	20c1      	movs	r0, #193	@ 0xc1
 80016c0:	f7ff ff66 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x30);
 80016c4:	2030      	movs	r0, #48	@ 0x30
 80016c6:	f7ff ff63 	bl	8001590 <Dislp_WriteData_Single>

	//DRIVER TIMING CONTROL A
	Displ_WriteCommand(0xE8);
 80016ca:	20e8      	movs	r0, #232	@ 0xe8
 80016cc:	f7ff ff3c 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x85);
 80016d0:	2085      	movs	r0, #133	@ 0x85
 80016d2:	f7ff ff5d 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff ff5a 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x78);
 80016dc:	2078      	movs	r0, #120	@ 0x78
 80016de:	f7ff ff57 	bl	8001590 <Dislp_WriteData_Single>

	//DRIVER TIMING CONTROL B
	Displ_WriteCommand(0xEA);
 80016e2:	20ea      	movs	r0, #234	@ 0xea
 80016e4:	f7ff ff30 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff ff51 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff ff4e 	bl	8001590 <Dislp_WriteData_Single>

	//POWER ON SEQUENCE CONTROL
	Displ_WriteCommand(0xED);
 80016f4:	20ed      	movs	r0, #237	@ 0xed
 80016f6:	f7ff ff27 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x64);
 80016fa:	2064      	movs	r0, #100	@ 0x64
 80016fc:	f7ff ff48 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 8001700:	2003      	movs	r0, #3
 8001702:	f7ff ff45 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x12);
 8001706:	2012      	movs	r0, #18
 8001708:	f7ff ff42 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x81);
 800170c:	2081      	movs	r0, #129	@ 0x81
 800170e:	f7ff ff3f 	bl	8001590 <Dislp_WriteData_Single>

	//PUMP RATIO CONTROL
	Displ_WriteCommand(0xF7);
 8001712:	20f7      	movs	r0, #247	@ 0xf7
 8001714:	f7ff ff18 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x20);
 8001718:	2020      	movs	r0, #32
 800171a:	f7ff ff39 	bl	8001590 <Dislp_WriteData_Single>

	//POWER CONTROL,VRH[5:0]
	Displ_WriteCommand(0xC0);
 800171e:	20c0      	movs	r0, #192	@ 0xc0
 8001720:	f7ff ff12 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x23);
 8001724:	2023      	movs	r0, #35	@ 0x23
 8001726:	f7ff ff33 	bl	8001590 <Dislp_WriteData_Single>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	Displ_WriteCommand(0xC1);
 800172a:	20c1      	movs	r0, #193	@ 0xc1
 800172c:	f7ff ff0c 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x10);
 8001730:	2010      	movs	r0, #16
 8001732:	f7ff ff2d 	bl	8001590 <Dislp_WriteData_Single>

	//VCM CONTROL
	Displ_WriteCommand(0xC5);
 8001736:	20c5      	movs	r0, #197	@ 0xc5
 8001738:	f7ff ff06 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x3E);
 800173c:	203e      	movs	r0, #62	@ 0x3e
 800173e:	f7ff ff27 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x28);
 8001742:	2028      	movs	r0, #40	@ 0x28
 8001744:	f7ff ff24 	bl	8001590 <Dislp_WriteData_Single>

	//VCM CONTROL 2
	Displ_WriteCommand(0xC7);
 8001748:	20c7      	movs	r0, #199	@ 0xc7
 800174a:	f7ff fefd 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x86);
 800174e:	2086      	movs	r0, #134	@ 0x86
 8001750:	f7ff ff1e 	bl	8001590 <Dislp_WriteData_Single>

	//MEMORY ACCESS CONTROL
	Displ_WriteCommand(0x36);
 8001754:	2036      	movs	r0, #54	@ 0x36
 8001756:	f7ff fef7 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x48);
 800175a:	2048      	movs	r0, #72	@ 0x48
 800175c:	f7ff ff18 	bl	8001590 <Dislp_WriteData_Single>

	//PIXEL FORMAT
	Displ_WriteCommand(0x3A);
 8001760:	203a      	movs	r0, #58	@ 0x3a
 8001762:	f7ff fef1 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x55);
 8001766:	2055      	movs	r0, #85	@ 0x55
 8001768:	f7ff ff12 	bl	8001590 <Dislp_WriteData_Single>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	Displ_WriteCommand(0xB1);
 800176c:	20b1      	movs	r0, #177	@ 0xb1
 800176e:	f7ff feeb 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff ff0c 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x18);
 8001778:	2018      	movs	r0, #24
 800177a:	f7ff ff09 	bl	8001590 <Dislp_WriteData_Single>

	//DISPLAY FUNCTION CONTROL
	Displ_WriteCommand(0xB6);
 800177e:	20b6      	movs	r0, #182	@ 0xb6
 8001780:	f7ff fee2 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x08);
 8001784:	2008      	movs	r0, #8
 8001786:	f7ff ff03 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x82);
 800178a:	2082      	movs	r0, #130	@ 0x82
 800178c:	f7ff ff00 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x27);
 8001790:	2027      	movs	r0, #39	@ 0x27
 8001792:	f7ff fefd 	bl	8001590 <Dislp_WriteData_Single>

	//3GAMMA FUNCTION DISABLE
	Displ_WriteCommand(0xF2);
 8001796:	20f2      	movs	r0, #242	@ 0xf2
 8001798:	f7ff fed6 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fef7 	bl	8001590 <Dislp_WriteData_Single>

	//GAMMA CURVE SELECTED
	Displ_WriteCommand(0x26);
 80017a2:	2026      	movs	r0, #38	@ 0x26
 80017a4:	f7ff fed0 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x01);
 80017a8:	2001      	movs	r0, #1
 80017aa:	f7ff fef1 	bl	8001590 <Dislp_WriteData_Single>

	//POSITIVE GAMMA CORRECTION
	Displ_WriteCommand(0xE0);
 80017ae:	20e0      	movs	r0, #224	@ 0xe0
 80017b0:	f7ff feca 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x0F);
 80017b4:	200f      	movs	r0, #15
 80017b6:	f7ff feeb 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 80017ba:	2031      	movs	r0, #49	@ 0x31
 80017bc:	f7ff fee8 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x2B);
 80017c0:	202b      	movs	r0, #43	@ 0x2b
 80017c2:	f7ff fee5 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0C);
 80017c6:	200c      	movs	r0, #12
 80017c8:	f7ff fee2 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 80017cc:	200e      	movs	r0, #14
 80017ce:	f7ff fedf 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x08);
 80017d2:	2008      	movs	r0, #8
 80017d4:	f7ff fedc 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x4E);
 80017d8:	204e      	movs	r0, #78	@ 0x4e
 80017da:	f7ff fed9 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xF1);
 80017de:	20f1      	movs	r0, #241	@ 0xf1
 80017e0:	f7ff fed6 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x37);
 80017e4:	2037      	movs	r0, #55	@ 0x37
 80017e6:	f7ff fed3 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x07);
 80017ea:	2007      	movs	r0, #7
 80017ec:	f7ff fed0 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x10);
 80017f0:	2010      	movs	r0, #16
 80017f2:	f7ff fecd 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 80017f6:	2003      	movs	r0, #3
 80017f8:	f7ff feca 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 80017fc:	200e      	movs	r0, #14
 80017fe:	f7ff fec7 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x09);
 8001802:	2009      	movs	r0, #9
 8001804:	f7ff fec4 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f7ff fec1 	bl	8001590 <Dislp_WriteData_Single>

	//NEGATIVE GAMMA CORRECTION
	Displ_WriteCommand(0xE1);
 800180e:	20e1      	movs	r0, #225	@ 0xe1
 8001810:	f7ff fe9a 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(0x00);
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff febb 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0E);
 800181a:	200e      	movs	r0, #14
 800181c:	f7ff feb8 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x14);
 8001820:	2014      	movs	r0, #20
 8001822:	f7ff feb5 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x03);
 8001826:	2003      	movs	r0, #3
 8001828:	f7ff feb2 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x11);
 800182c:	2011      	movs	r0, #17
 800182e:	f7ff feaf 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x07);
 8001832:	2007      	movs	r0, #7
 8001834:	f7ff feac 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 8001838:	2031      	movs	r0, #49	@ 0x31
 800183a:	f7ff fea9 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0xC1);
 800183e:	20c1      	movs	r0, #193	@ 0xc1
 8001840:	f7ff fea6 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x48);
 8001844:	2048      	movs	r0, #72	@ 0x48
 8001846:	f7ff fea3 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x08);
 800184a:	2008      	movs	r0, #8
 800184c:	f7ff fea0 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0F);
 8001850:	200f      	movs	r0, #15
 8001852:	f7ff fe9d 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0C);
 8001856:	200c      	movs	r0, #12
 8001858:	f7ff fe9a 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x31);
 800185c:	2031      	movs	r0, #49	@ 0x31
 800185e:	f7ff fe97 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x36);
 8001862:	2036      	movs	r0, #54	@ 0x36
 8001864:	f7ff fe94 	bl	8001590 <Dislp_WriteData_Single>
	Dislp_WriteData_Single(0x0F);
 8001868:	200f      	movs	r0, #15
 800186a:	f7ff fe91 	bl	8001590 <Dislp_WriteData_Single>

	//EXIT SLEEP
	Displ_WriteCommand(0x11);
 800186e:	2011      	movs	r0, #17
 8001870:	f7ff fe6a 	bl	8001548 <Displ_WriteCommand>
	HAL_Delay(120);
 8001874:	2078      	movs	r0, #120	@ 0x78
 8001876:	f000 fa23 	bl	8001cc0 <HAL_Delay>

	//TURN ON DISPLAY
	Displ_WriteCommand(0x29);
 800187a:	2029      	movs	r0, #41	@ 0x29
 800187c:	f7ff fe64 	bl	8001548 <Displ_WriteCommand>

	Displ_WriteCommand(ILI9XXX_DISPLAY_ON);
	HAL_Delay(5);
#endif

}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}

08001884 <Displ_SetAddressWindow>:
 * 			information
 * @param  x1,y1,x2,y2 top left and bottom
 * 					   right corner of the area
 * 					   to write
 **********************************************/
void Displ_SetAddressWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	461a      	mov	r2, r3
 8001892:	4623      	mov	r3, r4
 8001894:	80fb      	strh	r3, [r7, #6]
 8001896:	4603      	mov	r3, r0
 8001898:	80bb      	strh	r3, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	807b      	strh	r3, [r7, #2]
 800189e:	4613      	mov	r3, r2
 80018a0:	803b      	strh	r3, [r7, #0]
	static uint8_t data[4];

	((uint32_t*) data)[0] = (((x2 & 0xFF) << 24) | ((x2 & 0xFF00) << 8)
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	061a      	lsls	r2, r3, #24
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80018ae:	431a      	orrs	r2, r3
			| ((x1 & 0xFF) << 8) | ((x1 & 0xFF00) >> 8));
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	88fa      	ldrh	r2, [r7, #6]
 80018ba:	0a12      	lsrs	r2, r2, #8
 80018bc:	b292      	uxth	r2, r2
 80018be:	431a      	orrs	r2, r3
	((uint32_t*) data)[0] = (((x2 & 0xFF) << 24) | ((x2 & 0xFF00) << 8)
 80018c0:	4b14      	ldr	r3, [pc, #80]	@ (8001914 <Displ_SetAddressWindow+0x90>)
 80018c2:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_COLUMN_ADDR);
 80018c4:	202a      	movs	r0, #42	@ 0x2a
 80018c6:	f7ff fe3f 	bl	8001548 <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2104      	movs	r1, #4
 80018ce:	4811      	ldr	r0, [pc, #68]	@ (8001914 <Displ_SetAddressWindow+0x90>)
 80018d0:	f7ff fe82 	bl	80015d8 <Displ_WriteData>

	((uint32_t*) data)[0] = (((y2 & 0xFF) << 24) | ((y2 & 0xFF00) << 8)
 80018d4:	883b      	ldrh	r3, [r7, #0]
 80018d6:	061a      	lsls	r2, r3, #24
 80018d8:	883b      	ldrh	r3, [r7, #0]
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80018e0:	431a      	orrs	r2, r3
			| ((y1 & 0xFF) << 8) | ((y1 & 0xFF00) >> 8));
 80018e2:	88bb      	ldrh	r3, [r7, #4]
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4313      	orrs	r3, r2
 80018ea:	88ba      	ldrh	r2, [r7, #4]
 80018ec:	0a12      	lsrs	r2, r2, #8
 80018ee:	b292      	uxth	r2, r2
 80018f0:	431a      	orrs	r2, r3
	((uint32_t*) data)[0] = (((y2 & 0xFF) << 24) | ((y2 & 0xFF00) << 8)
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <Displ_SetAddressWindow+0x90>)
 80018f4:	601a      	str	r2, [r3, #0]
	Displ_WriteCommand(ILI9XXX_PAGE_ADDR);
 80018f6:	202b      	movs	r0, #43	@ 0x2b
 80018f8:	f7ff fe26 	bl	8001548 <Displ_WriteCommand>
	Displ_WriteData(data, 4, 0);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2104      	movs	r1, #4
 8001900:	4804      	ldr	r0, [pc, #16]	@ (8001914 <Displ_SetAddressWindow+0x90>)
 8001902:	f7ff fe69 	bl	80015d8 <Displ_WriteData>
	Displ_WriteCommand(ILI9XXX_MEMWR);
 8001906:	202c      	movs	r0, #44	@ 0x2c
 8001908:	f7ff fe1e 	bl	8001548 <Displ_WriteCommand>
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bd90      	pop	{r4, r7, pc}
 8001914:	20000850 	.word	0x20000850

08001918 <Displ_Init>:

/*****************************************************
 * @brief				first display initialization.
 * @param	orientation	display orientation
 *****************************************************/
void Displ_Init(Displ_Orientat_e orientation) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
//		HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_SET); 		// unselect display (will be selected at writing time)
//		HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_SET);		// unselect touch (will be selected at writing time)
//	} else
	{						// otherwise leave both port permanently selected
		//HAL_GPIO_WritePin(DISPL_CS_GPIO_Port, DISPL_CS_Pin, GPIO_PIN_RESET); // select display
		CS_L();
 8001922:	2200      	movs	r2, #0
 8001924:	2110      	movs	r1, #16
 8001926:	4806      	ldr	r0, [pc, #24]	@ (8001940 <Displ_Init+0x28>)
 8001928:	f003 fe88 	bl	800563c <HAL_GPIO_WritePin>
		//SET_DISPL_SPI_BAUDRATE;
		//HAL_GPIO_WritePin(TOUCH_CS_GPIO_Port, TOUCH_CS_Pin, GPIO_PIN_RESET);	// select touch
		//SET_TOUCH_SPI_BAUDRATE;
	}
	ILI9XXX_Init();
 800192c:	f7ff fea0 	bl	8001670 <ILI9XXX_Init>
	Displ_Orientation(orientation);
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	4618      	mov	r0, r3
 8001934:	f000 f806 	bl	8001944 <Displ_Orientation>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	42020000 	.word	0x42020000

08001944 <Displ_Orientation>:

/**********************************************
 * @brief		set orientation of the display
 * @param  	m	orientation
 **********************************************/
void Displ_Orientation(Displ_Orientat_e orientation) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
	//static uint8_t data[1];
	uint8_t data = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
	switch (orientation) {
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d833      	bhi.n	80019c0 <Displ_Orientation+0x7c>
 8001958:	a201      	add	r2, pc, #4	@ (adr r2, 8001960 <Displ_Orientation+0x1c>)
 800195a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195e:	bf00      	nop
 8001960:	08001971 	.word	0x08001971
 8001964:	08001985 	.word	0x08001985
 8001968:	08001999 	.word	0x08001999
 800196c:	080019ad 	.word	0x080019ad
	case Displ_Orientat_0:
		data = ILI9XXX_MADCTL_0DEG;
 8001970:	2388      	movs	r3, #136	@ 0x88
 8001972:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_HEIGHT;
 8001974:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <Displ_Orientation+0x98>)
 8001976:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800197a:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <Displ_Orientation+0x9c>)
 800197e:	22f0      	movs	r2, #240	@ 0xf0
 8001980:	801a      	strh	r2, [r3, #0]
		break;
 8001982:	e01d      	b.n	80019c0 <Displ_Orientation+0x7c>
	case Displ_Orientat_90:
		data = ILI9XXX_MADCTL_90DEG;
 8001984:	23e8      	movs	r3, #232	@ 0xe8
 8001986:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_WIDTH;
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <Displ_Orientation+0x98>)
 800198a:	22f0      	movs	r2, #240	@ 0xf0
 800198c:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <Displ_Orientation+0x9c>)
 8001990:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001994:	801a      	strh	r2, [r3, #0]
		break;
 8001996:	e013      	b.n	80019c0 <Displ_Orientation+0x7c>
	case Displ_Orientat_180:
		data = ILI9XXX_MADCTL_180DEG;
 8001998:	2348      	movs	r3, #72	@ 0x48
 800199a:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_HEIGHT;
 800199c:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <Displ_Orientation+0x98>)
 800199e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019a2:	801a      	strh	r2, [r3, #0]
		_width = DISPL_WIDTH;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <Displ_Orientation+0x9c>)
 80019a6:	22f0      	movs	r2, #240	@ 0xf0
 80019a8:	801a      	strh	r2, [r3, #0]
		break;
 80019aa:	e009      	b.n	80019c0 <Displ_Orientation+0x7c>
	case Displ_Orientat_270:
		data = ILI9XXX_MADCTL_270DEG;
 80019ac:	2328      	movs	r3, #40	@ 0x28
 80019ae:	73fb      	strb	r3, [r7, #15]
		_height = DISPL_WIDTH;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <Displ_Orientation+0x98>)
 80019b2:	22f0      	movs	r2, #240	@ 0xf0
 80019b4:	801a      	strh	r2, [r3, #0]
		_width = DISPL_HEIGHT;
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <Displ_Orientation+0x9c>)
 80019b8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80019bc:	801a      	strh	r2, [r3, #0]
		break;
 80019be:	bf00      	nop
	}
	Displ_WriteCommand(ILI9XXX_MADCTL);
 80019c0:	2036      	movs	r0, #54	@ 0x36
 80019c2:	f7ff fdc1 	bl	8001548 <Displ_WriteCommand>
	Dislp_WriteData_Single(data);
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fde1 	bl	8001590 <Dislp_WriteData_Single>
	current_orientation = orientation; //stores active orientation into a global variable for touch routines
 80019ce:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <Displ_Orientation+0xa0>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	7013      	strb	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2000084c 	.word	0x2000084c
 80019e0:	2000084a 	.word	0x2000084a
 80019e4:	20000848 	.word	0x20000848

080019e8 <HAL_SPI_ErrorCallback>:

void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a05      	ldr	r2, [pc, #20]	@ (8001a0c <HAL_SPI_ErrorCallback+0x24>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d102      	bne.n	8001a00 <HAL_SPI_ErrorCallback+0x18>
		Displ_SpiAvailable = 1;
 80019fa:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_SPI_ErrorCallback+0x28>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	701a      	strb	r2, [r3, #0]
	}
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40013000 	.word	0x40013000
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == DISPL_SPI) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a05      	ldr	r2, [pc, #20]	@ (8001a38 <HAL_SPI_TxCpltCallback+0x24>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d104      	bne.n	8001a30 <HAL_SPI_TxCpltCallback+0x1c>
		Displ_SpiAvailable = 1;
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_SPI_TxCpltCallback+0x28>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]

#ifdef DISPLAY_USING_TOUCHGFX
		DisplayDriver_TransferCompleteCallback();
 8001a2c:	f013 f99c 	bl	8014d68 <DisplayDriver_TransferCompleteCallback>
#endif
		//spiDmaTransferComplete = 0;
	}
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40013000 	.word	0x40013000
 8001a3c:	20000008 	.word	0x20000008

08001a40 <Displ_BackLight>:
 *				'0'		set the display level to 0 (off)
 *				'I'		'Initialize'  IT MUST BE in dimming mode
 *              'Q'		do nothing, just return current level
 * @return		current backlight level
 **************************************/
uint32_t Displ_BackLight(uint8_t cmd) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]

#ifdef DISPLAY_DIMMING_MODE
	static uint16_t memCCR1=0;  			//it stores CCR1 value while in stand-by
#endif

	switch (cmd) {
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	2b51      	cmp	r3, #81	@ 0x51
 8001a4e:	d00a      	beq.n	8001a66 <Displ_BackLight+0x26>
 8001a50:	2b51      	cmp	r3, #81	@ 0x51
 8001a52:	dc16      	bgt.n	8001a82 <Displ_BackLight+0x42>
 8001a54:	2b46      	cmp	r3, #70	@ 0x46
 8001a56:	d008      	beq.n	8001a6a <Displ_BackLight+0x2a>
 8001a58:	2b46      	cmp	r3, #70	@ 0x46
 8001a5a:	dc12      	bgt.n	8001a82 <Displ_BackLight+0x42>
 8001a5c:	2b30      	cmp	r3, #48	@ 0x30
 8001a5e:	d00a      	beq.n	8001a76 <Displ_BackLight+0x36>
 8001a60:	2b31      	cmp	r3, #49	@ 0x31
 8001a62:	d002      	beq.n	8001a6a <Displ_BackLight+0x2a>
	  	HAL_TIM_PWM_Start(&BKLIT_T, BKLIT_CHANNEL);
		BKLIT_TIMER->BKLIT_CCR=BKLIT_INIT_LEVEL;
		break;
#endif
	default:
		break;
 8001a64:	e00d      	b.n	8001a82 <Displ_BackLight+0x42>
		__NOP();
 8001a66:	bf00      	nop
		break;
 8001a68:	e00c      	b.n	8001a84 <Displ_BackLight+0x44>
		LED_H();
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	480a      	ldr	r0, [pc, #40]	@ (8001a98 <Displ_BackLight+0x58>)
 8001a70:	f003 fde4 	bl	800563c <HAL_GPIO_WritePin>
		break;
 8001a74:	e006      	b.n	8001a84 <Displ_BackLight+0x44>
		LED_L();
 8001a76:	2200      	movs	r2, #0
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4807      	ldr	r0, [pc, #28]	@ (8001a98 <Displ_BackLight+0x58>)
 8001a7c:	f003 fdde 	bl	800563c <HAL_GPIO_WritePin>
		break;
 8001a80:	e000      	b.n	8001a84 <Displ_BackLight+0x44>
		break;
 8001a82:	bf00      	nop
	}
#ifndef DISPLAY_DIMMING_MODE
	LED_H();
 8001a84:	2201      	movs	r2, #1
 8001a86:	2101      	movs	r1, #1
 8001a88:	4803      	ldr	r0, [pc, #12]	@ (8001a98 <Displ_BackLight+0x58>)
 8001a8a:	f003 fdd7 	bl	800563c <HAL_GPIO_WritePin>
	return 0;
 8001a8e:	2300      	movs	r3, #0
#else
	return (BKLIT_TIMER->BKLIT_CCR);
#endif
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	42020000 	.word	0x42020000

08001a9c <touchgfxDisplayDriverTransmitActive>:
 * @brief	TouchGFX integration: returns status of
 * 			communication to the display
 * @return	1 = there is a transmission running
 * 			0 = no transmission
 *********************************************************/
int touchgfxDisplayDriverTransmitActive() {
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	// using the flag indicating SPI port availability
	// already used to drive communication via DMA
	return (!Displ_SpiAvailable);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <touchgfxDisplayDriverTransmitActive+0x20>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	bf0c      	ite	eq
 8001aaa:	2301      	moveq	r3, #1
 8001aac:	2300      	movne	r3, #0
 8001aae:	b2db      	uxtb	r3, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000008 	.word	0x20000008

08001ac0 <touchgfxDisplayDriverTransmitBlock>:
/*********************************************************
 * @brief	TouchGFX integration: write to display the
 * 			block indicated by parameters
 *********************************************************/
void touchgfxDisplayDriverTransmitBlock(const uint8_t *pixels, uint16_t x,
		uint16_t y, uint16_t w, uint16_t h) {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	817b      	strh	r3, [r7, #10]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	813b      	strh	r3, [r7, #8]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	80fb      	strh	r3, [r7, #6]
	//START WRITING TO DISPLAY
	Displ_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001ada:	897a      	ldrh	r2, [r7, #10]
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	4413      	add	r3, r2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29c      	uxth	r4, r3
 8001ae6:	893a      	ldrh	r2, [r7, #8]
 8001ae8:	8c3b      	ldrh	r3, [r7, #32]
 8001aea:	4413      	add	r3, r2
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	8939      	ldrh	r1, [r7, #8]
 8001af4:	8978      	ldrh	r0, [r7, #10]
 8001af6:	4622      	mov	r2, r4
 8001af8:	f7ff fec4 	bl	8001884 <Displ_SetAddressWindow>
	Displ_WriteData((uint8_t*) pixels, ((w * h) << 1), 1);
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	8c3a      	ldrh	r2, [r7, #32]
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2201      	movs	r2, #1
 8001b08:	4619      	mov	r1, r3
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f7ff fd64 	bl	80015d8 <Displ_WriteData>
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b18:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b1c:	f7ff fc70 	bl	8001400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	@ (8001b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	@ (8001b5c <LoopForever+0xe>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	@ (8001b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	@ (8001b64 <LoopForever+0x16>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b46:	f02b f8cf 	bl	802cce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b4a:	f7fe fc49 	bl	80003e0 <main>

08001b4e <LoopForever>:

LoopForever:
    b LoopForever
 8001b4e:	e7fe      	b.n	8001b4e <LoopForever>
  ldr   r0, =_estack
 8001b50:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001b5c:	0803ac40 	.word	0x0803ac40
  ldr r2, =_sbss
 8001b60:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8001b64:	20012e44 	.word	0x20012e44

08001b68 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_IRQHandler>
	...

08001b6c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	@ 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <BSP_LED_Init+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001b80:	f06f 0301 	mvn.w	r3, #1
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b86:	e023      	b.n	8001bd0 <BSP_LED_Init+0x64>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10e      	bne.n	8001bac <BSP_LED_Init+0x40>
    {
      LED2_GPIO_CLK_ENABLE();
 8001b8e:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <BSP_LED_Init+0x70>)
 8001b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b94:	4a11      	ldr	r2, [pc, #68]	@ (8001bdc <BSP_LED_Init+0x70>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <BSP_LED_Init+0x70>)
 8001ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]

      LED3_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001bac:	2320      	movs	r3, #32
 8001bae:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <BSP_LED_Init+0x74>)
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	f107 0210 	add.w	r2, r7, #16
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 fb5e 	bl	800528c <HAL_GPIO_Init>
  }

  return ret;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3728      	adds	r7, #40	@ 0x28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	46020c00 	.word	0x46020c00
 8001be0:	2000000c 	.word	0x2000000c

08001be4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <BSP_LED_Toggle+0x1c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001bf8:	f06f 0301 	mvn.w	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e008      	b.n	8001c12 <BSP_LED_Toggle+0x2e>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	4a06      	ldr	r2, [pc, #24]	@ (8001c1c <BSP_LED_Toggle+0x38>)
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	2220      	movs	r2, #32
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fd2d 	bl	800566c <HAL_GPIO_TogglePin>
  }

  return ret;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c24:	4b12      	ldr	r3, [pc, #72]	@ (8001c70 <HAL_Init+0x50>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a11      	ldr	r2, [pc, #68]	@ (8001c70 <HAL_Init+0x50>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f002 f9c6 	bl	8003fc2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c36:	f004 ff1d 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c74 <HAL_Init+0x54>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	490c      	ldr	r1, [pc, #48]	@ (8001c78 <HAL_Init+0x58>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c7c <HAL_Init+0x5c>)
 8001c4e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c50:	2004      	movs	r0, #4
 8001c52:	f002 f9e9 	bl	8004028 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c56:	2004      	movs	r0, #4
 8001c58:	f7ff fa44 	bl	80010e4 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e002      	b.n	8001c6c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c66:	f7ff f801 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40022000 	.word	0x40022000
 8001c74:	46020c00 	.word	0x46020c00
 8001c78:	0802ed0c 	.word	0x0802ed0c
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c84:	4b06      	ldr	r3, [pc, #24]	@ (8001ca0 <HAL_IncTick+0x20>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_IncTick+0x24>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <HAL_IncTick+0x24>)
 8001c92:	6013      	str	r3, [r2, #0]
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000014 	.word	0x20000014
 8001ca4:	20000854 	.word	0x20000854

08001ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b03      	ldr	r3, [pc, #12]	@ (8001cbc <HAL_GetTick+0x14>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000854 	.word	0x20000854

08001cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc8:	f7ff ffee 	bl	8001ca8 <HAL_GetTick>
 8001ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd8:	d005      	beq.n	8001ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <HAL_Delay+0x44>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce6:	bf00      	nop
 8001ce8:	f7ff ffde 	bl	8001ca8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d8f7      	bhi.n	8001ce8 <HAL_Delay+0x28>
  {
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000014 	.word	0x20000014

08001d08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001d0c:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <HAL_GetREVID+0x18>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	b29b      	uxth	r3, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e0044000 	.word	0xe0044000

08001d24 <LL_ADC_SetCommonClock>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	601a      	str	r2, [r3, #0]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_ADC_SetCommonPathInternalCh>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	601a      	str	r2, [r3, #0]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_GetCommonPathInternalCh>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_SetResolution>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <LL_ADC_SetResolution+0x3c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d104      	bne.n	8001dac <LL_ADC_SetResolution+0x20>
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	f003 030c 	and.w	r3, r3, #12
 8001daa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f023 020c 	bic.w	r2, r3, #12
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60da      	str	r2, [r3, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	46021000 	.word	0x46021000

08001dcc <LL_ADC_SetOffset>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b087      	sub	sp, #28
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	3360      	adds	r3, #96	@ 0x60
 8001dde:	461a      	mov	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	f003 4178 	and.w	r1, r3, #4160749568	@ 0xf8000000
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	601a      	str	r2, [r3, #0]
}
 8001e02:	bf00      	nop
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_ADC_GetOffsetChannel>:
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3360      	adds	r3, #96	@ 0x60
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 4378 	and.w	r3, r3, #4160749568	@ 0xf8000000
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_ADC_SetOffsetSign>:
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b087      	sub	sp, #28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3360      	adds	r3, #96	@ 0x60
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_SetOffsetSignedSaturation>:
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3360      	adds	r3, #96	@ 0x60
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetOffsetUnsignedSaturation>:
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3360      	adds	r3, #96	@ 0x60
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <LL_ADC_SetGainCompensation>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001eee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001efe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	2a00      	cmp	r2, #0
 8001f06:	d002      	beq.n	8001f0e <LL_ADC_SetGainCompensation+0x32>
 8001f08:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_SetGainCompensation+0x34>
 8001f0e:	2200      	movs	r2, #0
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_SetSamplingTimeCommonChannels>:
{
 8001f22:	b480      	push	{r7}
 8001f24:	b085      	sub	sp, #20
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2107      	movs	r1, #7
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	401a      	ands	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	615a      	str	r2, [r3, #20]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_REG_IsTriggerSourceSWStart>:
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <LL_ADC_REG_SetSequencerRanks>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a2b      	ldr	r2, [pc, #172]	@ (8002044 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d020      	beq.n	8001fde <LL_ADC_REG_SetSequencerRanks+0x56>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3330      	adds	r3, #48	@ 0x30
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
    MODIFY_REG(*preg,
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	211f      	movs	r1, #31
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	f003 011f 	and.w	r1, r3, #31
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	601a      	str	r2, [r3, #0]
}
 8001fdc:	e02b      	b.n	8002036 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	210f      	movs	r1, #15
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d104      	bne.n	8002006 <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0e9b      	lsrs	r3, r3, #26
 8002000:	f003 031f 	and.w	r3, r3, #31
 8002004:	e010      	b.n	8002028 <LL_ADC_REG_SetSequencerRanks+0xa0>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	613b      	str	r3, [r7, #16]
  return result;
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 800201c:	2320      	movs	r3, #32
 800201e:	e003      	b.n	8002028 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	f001 011f 	and.w	r1, r1, #31
 800202e:	408b      	lsls	r3, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002036:	bf00      	nop
 8002038:	3724      	adds	r7, #36	@ 0x24
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	46021000 	.word	0x46021000

08002048 <LL_ADC_REG_SetSequencerChAdd>:
{
 8002048:	b480      	push	{r7}
 800204a:	b087      	sub	sp, #28
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <LL_ADC_REG_SetSequencerChAdd+0x24>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2201      	movs	r2, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	e015      	b.n	8002098 <LL_ADC_REG_SetSequencerChAdd+0x50>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	60fb      	str	r3, [r7, #12]
  return result;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8002082:	2320      	movs	r3, #32
 8002084:	e003      	b.n	800208e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	2201      	movs	r2, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <LL_ADC_REG_SetSequencerChRem>:
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	0e9b      	lsrs	r3, r3, #26
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2101      	movs	r1, #1
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <LL_ADC_SetChannelSamplingTime>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b08b      	sub	sp, #44	@ 0x2c
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4a2d      	ldr	r2, [pc, #180]	@ (80021a4 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d042      	beq.n	800217a <LL_ADC_SetChannelSamplingTime+0x9a>
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d104      	bne.n	8002108 <LL_ADC_SetChannelSamplingTime+0x28>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	f003 021f 	and.w	r2, r3, #31
 8002106:	e011      	b.n	800212c <LL_ADC_SetChannelSamplingTime+0x4c>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	fa93 f3a3 	rbit	r3, r3
 8002112:	617b      	str	r3, [r7, #20]
  return result;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 800211e:	2320      	movs	r3, #32
 8002120:	e003      	b.n	800212a <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fab3 f383 	clz	r3, r3
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	0e5b      	lsrs	r3, r3, #25
 8002130:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8002134:	460b      	mov	r3, r1
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	1ad2      	subs	r2, r2, r3
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3314      	adds	r3, #20
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	0e5b      	lsrs	r3, r3, #25
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	4413      	add	r3, r2
 8002158:	623b      	str	r3, [r7, #32]
    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2107      	movs	r1, #7
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	fa01 f303 	lsl.w	r3, r1, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	401a      	ands	r2, r3
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	431a      	orrs	r2, r3
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	e00e      	b.n	8002198 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	43db      	mvns	r3, r3
 8002184:	401a      	ands	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	0219      	lsls	r1, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	400b      	ands	r3, r1
 800218e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002192:	431a      	orrs	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	615a      	str	r2, [r3, #20]
}
 8002198:	bf00      	nop
 800219a:	372c      	adds	r7, #44	@ 0x2c
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	46021000 	.word	0x46021000

080021a8 <LL_ADC_SetChannelSingleDiff>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021c0:	43db      	mvns	r3, r3
 80021c2:	401a      	ands	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0318 	and.w	r3, r3, #24
 80021ca:	4908      	ldr	r1, [pc, #32]	@ (80021ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80021cc:	40d9      	lsrs	r1, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	400b      	ands	r3, r1
 80021d2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021d6:	431a      	orrs	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	000fffff 	.word	0x000fffff

080021f0 <LL_ADC_DisableDeepPowerDown>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002200:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6093      	str	r3, [r2, #8]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_IsDeepPowerDownEnabled>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002228:	d101      	bne.n	800222e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_EnableInternalRegulator>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800224c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002250:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	609a      	str	r2, [r3, #8]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_IsInternalRegulatorEnabled>:
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002278:	d101      	bne.n	800227e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <LL_ADC_Enable>:
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADEN);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800229c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022a0:	f043 0201 	orr.w	r2, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	609a      	str	r2, [r3, #8]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_Disable>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADDIS);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c8:	f043 0202 	orr.w	r2, r3, #2
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	609a      	str	r2, [r3, #8]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_ADC_IsEnabled>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <LL_ADC_IsEnabled+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_ADC_IsEnabled+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_ADC_IsDisableOngoing>:
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b02      	cmp	r3, #2
 8002314:	d101      	bne.n	800231a <LL_ADC_IsDisableOngoing+0x18>
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <LL_ADC_IsDisableOngoing+0x1a>
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_REG_StartConversion>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADSTART);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002338:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800233c:	f043 0204 	orr.w	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	609a      	str	r2, [r3, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_REG_IsConversionOngoing>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b04      	cmp	r3, #4
 8002362:	d101      	bne.n	8002368 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_INJ_IsConversionOngoing>:
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b08      	cmp	r3, #8
 8002388:	d101      	bne.n	800238e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08a      	sub	sp, #40	@ 0x28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e2b3      	b.n	8002924 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a8b      	ldr	r2, [pc, #556]	@ (80025f8 <HAL_ADC_Init+0x25c>)
 80023ca:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe fc69 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff11 	bl	8002214 <LL_ADC_IsDeepPowerDownEnabled>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fef7 	bl	80021f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff2c 	bl	8002264 <LL_ADC_IsInternalRegulatorEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff10 	bl	800223c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800241c:	4b77      	ldr	r3, [pc, #476]	@ (80025fc <HAL_ADC_Init+0x260>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	099b      	lsrs	r3, r3, #6
 8002422:	4a77      	ldr	r2, [pc, #476]	@ (8002600 <HAL_ADC_Init+0x264>)
 8002424:	fba2 2303 	umull	r2, r3, r2, r3
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002430:	e002      	b.n	8002438 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3b01      	subs	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f9      	bne.n	8002432 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff ff0e 	bl	8002264 <LL_ADC_IsInternalRegulatorEnabled>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10e      	bne.n	800246c <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002452:	f043 0210 	orr.w	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800245e:	f043 0201 	orr.w	r2, r3, #1
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff6d 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 8002476:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 8244 	bne.w	800290e <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	f040 8240 	bne.w	800290e <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002492:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002496:	f043 0202 	orr.w	r2, r3, #2
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff1a 	bl	80022dc <LL_ADC_IsEnabled>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d140      	bne.n	8002530 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a51      	ldr	r2, [pc, #324]	@ (80025f8 <HAL_ADC_Init+0x25c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d028      	beq.n	800250a <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a51      	ldr	r2, [pc, #324]	@ (8002604 <HAL_ADC_Init+0x268>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d109      	bne.n	80024d6 <HAL_ADC_Init+0x13a>
 80024c2:	4850      	ldr	r0, [pc, #320]	@ (8002604 <HAL_ADC_Init+0x268>)
 80024c4:	f7ff ff0a 	bl	80022dc <LL_ADC_IsEnabled>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	e008      	b.n	80024e8 <HAL_ADC_Init+0x14c>
 80024d6:	4848      	ldr	r0, [pc, #288]	@ (80025f8 <HAL_ADC_Init+0x25c>)
 80024d8:	f7ff ff00 	bl	80022dc <LL_ADC_IsEnabled>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	bf0c      	ite	eq
 80024e2:	2301      	moveq	r3, #1
 80024e4:	2300      	movne	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d021      	beq.n	8002530 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a44      	ldr	r2, [pc, #272]	@ (8002604 <HAL_ADC_Init+0x268>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_ADC_Init+0x15e>
 80024f6:	4a44      	ldr	r2, [pc, #272]	@ (8002608 <HAL_ADC_Init+0x26c>)
 80024f8:	e000      	b.n	80024fc <HAL_ADC_Init+0x160>
 80024fa:	4a44      	ldr	r2, [pc, #272]	@ (800260c <HAL_ADC_Init+0x270>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f7ff fc0e 	bl	8001d24 <LL_ADC_SetCommonClock>
 8002508:	e012      	b.n	8002530 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	4619      	mov	r1, r3
 8002514:	4610      	mov	r0, r2
 8002516:	f7ff fc39 	bl	8001d8c <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 800251a:	4b3c      	ldr	r3, [pc, #240]	@ (800260c <HAL_ADC_Init+0x270>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800252a:	4938      	ldr	r1, [pc, #224]	@ (800260c <HAL_ADC_Init+0x270>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a30      	ldr	r2, [pc, #192]	@ (80025f8 <HAL_ADC_Init+0x25c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d010      	beq.n	800255c <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002540:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002546:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 800254c:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002554:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8002556:	4313      	orrs	r3, r2
 8002558:	623b      	str	r3, [r7, #32]
 800255a:	e030      	b.n	80025be <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7f1b      	ldrb	r3, [r3, #28]
 8002560:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002568:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800256a:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002570:	2a00      	cmp	r2, #0
 8002572:	d002      	beq.n	800257a <HAL_ADC_Init+0x1de>
 8002574:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002578:	e000      	b.n	800257c <HAL_ADC_Init+0x1e0>
 800257a:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800257c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002582:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	da04      	bge.n	8002596 <HAL_ADC_Init+0x1fa>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002594:	e001      	b.n	800259a <HAL_ADC_Init+0x1fe>
 8002596:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 800259a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4918      	ldr	r1, [pc, #96]	@ (8002604 <HAL_ADC_Init+0x268>)
 80025a2:	428b      	cmp	r3, r1
 80025a4:	d103      	bne.n	80025ae <HAL_ADC_Init+0x212>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025ac:	e003      	b.n	80025b6 <HAL_ADC_Init+0x21a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025b4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 80025b6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025b8:	6a3a      	ldr	r2, [r7, #32]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d12f      	bne.n	8002628 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <HAL_ADC_Init+0x25c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d007      	beq.n	80025e2 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	3b01      	subs	r3, #1
 80025d8:	045b      	lsls	r3, r3, #17
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	4313      	orrs	r3, r2
 80025de:	623b      	str	r3, [r7, #32]
 80025e0:	e022      	b.n	8002628 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	e018      	b.n	8002628 <HAL_ADC_Init+0x28c>
 80025f6:	bf00      	nop
 80025f8:	46021000 	.word	0x46021000
 80025fc:	20000004 	.word	0x20000004
 8002600:	053e2d63 	.word	0x053e2d63
 8002604:	42028000 	.word	0x42028000
 8002608:	42028308 	.word	0x42028308
 800260c:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a92      	ldr	r2, [pc, #584]	@ (8002878 <HAL_ADC_Init+0x4dc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d018      	beq.n	8002664 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002646:	4313      	orrs	r3, r2
 8002648:	6a3a      	ldr	r2, [r7, #32]
 800264a:	4313      	orrs	r3, r2
 800264c:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	4b89      	ldr	r3, [pc, #548]	@ (800287c <HAL_ADC_Init+0x4e0>)
 8002656:	4013      	ands	r3, r2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	6a39      	ldr	r1, [r7, #32]
 800265e:	430b      	orrs	r3, r1
 8002660:	60d3      	str	r3, [r2, #12]
 8002662:	e031      	b.n	80026c8 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002670:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002678:	4313      	orrs	r3, r2
 800267a:	6a3a      	ldr	r2, [r7, #32]
 800267c:	4313      	orrs	r3, r2
 800267e:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	4b7e      	ldr	r3, [pc, #504]	@ (8002880 <HAL_ADC_Init+0x4e4>)
 8002688:	4013      	ands	r3, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	6a39      	ldr	r1, [r7, #32]
 8002690:	430b      	orrs	r3, r1
 8002692:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1a      	ldr	r2, [r3, #32]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a6a      	ldr	r2, [pc, #424]	@ (8002878 <HAL_ADC_Init+0x4dc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	f000 8093 	beq.w	80027fa <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fe39 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 80026de:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fe46 	bl	8002376 <LL_ADC_INJ_IsConversionOngoing>
 80026ea:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d161      	bne.n	80027b6 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d15e      	bne.n	80027b6 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7f1b      	ldrb	r3, [r3, #28]
 80026fc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4960      	ldr	r1, [pc, #384]	@ (8002884 <HAL_ADC_Init+0x4e8>)
 8002704:	428b      	cmp	r3, r1
 8002706:	d102      	bne.n	800270e <HAL_ADC_Init+0x372>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	e002      	b.n	8002714 <HAL_ADC_Init+0x378>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002712:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002714:	4313      	orrs	r3, r2
 8002716:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	6a39      	ldr	r1, [r7, #32]
 800272c:	430b      	orrs	r3, r1
 800272e:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4619      	mov	r1, r3
 8002742:	4610      	mov	r0, r2
 8002744:	f7ff fbca 	bl	8001edc <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800274e:	2b01      	cmp	r3, #1
 8002750:	d11e      	bne.n	8002790 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002756:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691a      	ldr	r2, [r3, #16]
 800275e:	4b4a      	ldr	r3, [pc, #296]	@ (8002888 <HAL_ADC_Init+0x4ec>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002766:	0411      	lsls	r1, r2, #16
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002778:	4311      	orrs	r1, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800277e:	0892      	lsrs	r2, r2, #2
 8002780:	430a      	orrs	r2, r1
 8002782:	431a      	orrs	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	611a      	str	r2, [r3, #16]
 800278e:	e007      	b.n	80027a0 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d10c      	bne.n	80027d8 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	f023 010f 	bic.w	r1, r3, #15
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027cc:	1e5a      	subs	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80027d6:	e007      	b.n	80027e8 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 020f 	bic.w	r2, r2, #15
 80027e6:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027ec:	f023 0303 	bic.w	r3, r3, #3
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027f8:	e092      	b.n	8002920 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002800:	2b01      	cmp	r3, #1
 8002802:	d111      	bne.n	8002828 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800280c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002812:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002818:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	4313      	orrs	r3, r2
 800281e:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	4b17      	ldr	r3, [pc, #92]	@ (800288c <HAL_ADC_Init+0x4f0>)
 8002830:	4013      	ands	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	69f9      	ldr	r1, [r7, #28]
 8002838:	430b      	orrs	r3, r1
 800283a:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002844:	461a      	mov	r2, r3
 8002846:	2100      	movs	r1, #0
 8002848:	f7ff fb6b 	bl	8001f22 <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002854:	461a      	mov	r2, r3
 8002856:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 800285a:	f7ff fb62 	bl	8001f22 <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d114      	bne.n	8002890 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f062 020f 	orn	r2, r2, #15
 8002874:	629a      	str	r2, [r3, #40]	@ 0x28
 8002876:	e024      	b.n	80028c2 <HAL_ADC_Init+0x526>
 8002878:	46021000 	.word	0x46021000
 800287c:	fff0c013 	.word	0xfff0c013
 8002880:	ffde800d 	.word	0xffde800d
 8002884:	42028000 	.word	0x42028000
 8002888:	fc00f81e 	.word	0xfc00f81e
 800288c:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002898:	d113      	bne.n	80028c2 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	3b01      	subs	r3, #1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	f003 031c 	and.w	r3, r3, #28
 80028ac:	f06f 020f 	mvn.w	r2, #15
 80028b0:	fa02 f103 	lsl.w	r1, r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68da      	ldr	r2, [r3, #12]
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <HAL_ADC_Init+0x590>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	6a3a      	ldr	r2, [r7, #32]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d10b      	bne.n	80028ea <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028dc:	f023 0303 	bic.w	r3, r3, #3
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028e8:	e01a      	b.n	8002920 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028ee:	f023 0312 	bic.w	r3, r3, #18
 80028f2:	f043 0210 	orr.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800290c:	e008      	b.n	8002920 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002924:	4618      	mov	r0, r3
 8002926:	3728      	adds	r7, #40	@ 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	833ffff3 	.word	0x833ffff3

08002930 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b0a2      	sub	sp, #136	@ 0x88
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fd05 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	f040 80e9 	bne.w	8002b20 <HAL_ADC_Start_DMA+0x1f0>
  {
    __HAL_LOCK(hadc);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <HAL_ADC_Start_DMA+0x2c>
 8002958:	2302      	movs	r3, #2
 800295a:	e0e6      	b.n	8002b2a <HAL_ADC_Start_DMA+0x1fa>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 ff87 	bl	8003878 <ADC_Enable>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002970:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 80ce 	bne.w	8002b16 <HAL_ADC_Start_DMA+0x1e6>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800297e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002982:	f023 0301 	bic.w	r3, r3, #1
 8002986:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	679a      	str	r2, [r3, #120]	@ 0x78
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

        if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a68      	ldr	r2, [pc, #416]	@ (8002b34 <HAL_ADC_Start_DMA+0x204>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d010      	beq.n	80029ba <HAL_ADC_Start_DMA+0x8a>
          {
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
          }
#endif /* ADC_MULTIMODE_SUPPORT */
          /* Check if a conversion is on going on ADC group injected */
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800299c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d006      	beq.n	80029b2 <HAL_ADC_Start_DMA+0x82>
          {
            /* Reset ADC error code fields related to regular conversions only */
            CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029a8:	f023 0206 	bic.w	r2, r3, #6
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029b0:	e006      	b.n	80029c0 <HAL_ADC_Start_DMA+0x90>
          }
          else
          {
            /* Reset all ADC error code fields */
            ADC_CLEAR_ERRORCODE(hadc);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029b8:	e002      	b.n	80029c0 <HAL_ADC_Start_DMA+0x90>
          }
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	4a5c      	ldr	r2, [pc, #368]	@ (8002b38 <HAL_ADC_Start_DMA+0x208>)
 80029c6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029cc:	4a5b      	ldr	r2, [pc, #364]	@ (8002b3c <HAL_ADC_Start_DMA+0x20c>)
 80029ce:	665a      	str	r2, [r3, #100]	@ 0x64

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d4:	4a5a      	ldr	r2, [pc, #360]	@ (8002b40 <HAL_ADC_Start_DMA+0x210>)
 80029d6:	669a      	str	r2, [r3, #104]	@ 0x68
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	221c      	movs	r2, #28
 80029de:	601a      	str	r2, [r3, #0]

        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0210 	orr.w	r2, r2, #16
 80029f6:	605a      	str	r2, [r3, #4]

        if (hadc->Instance == ADC4)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002b34 <HAL_ADC_Start_DMA+0x204>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d107      	bne.n	8002a12 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Enable ADC DMA mode */
          hadc->Instance->CFGR1 |= ADC4_CFGR1_DMAEN;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	60da      	str	r2, [r3, #12]
        }

        /* Start the DMA channel */
        /* Check linkedlist mode */
        if ((hadc->DMA_Handle->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d04f      	beq.n	8002ac0 <HAL_ADC_Start_DMA+0x190>
        {
          if ((hadc->DMA_Handle->LinkedListQueue != NULL) && (hadc->DMA_Handle->LinkedListQueue->Head != NULL))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d046      	beq.n	8002ab8 <HAL_ADC_Start_DMA+0x188>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d040      	beq.n	8002ab8 <HAL_ADC_Start_DMA+0x188>
          {
            /* Length should be converted to number of bytes */
            if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hadc->DMA_Handle->LinkedListQueue->Head) != HAL_OK)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f107 0314 	add.w	r3, r7, #20
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fad1 	bl	8004fec <HAL_DMAEx_List_GetNodeConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_ADC_Start_DMA+0x124>
            {
              return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e06a      	b.n	8002b2a <HAL_ADC_Start_DMA+0x1fa>
            }

            /* Length should be converted to number of bytes */
            if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d104      	bne.n	8002a64 <HAL_ADC_Start_DMA+0x134>
            {
              /* Word -> Bytes */
              LengthInBytes = Length * 4U;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a62:	e00a      	b.n	8002a7a <HAL_ADC_Start_DMA+0x14a>
            }
            else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d104      	bne.n	8002a74 <HAL_ADC_Start_DMA+0x144>
            {
              /* Halfword -> Bytes */
              LengthInBytes = Length * 2U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a72:	e002      	b.n	8002a7a <HAL_ADC_Start_DMA+0x14a>
            }
            else /* Bytes */
            {
              /* Same size already expressed in Bytes */
              LengthInBytes = Length;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
            }

            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (uint32_t)LengthInBytes;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a86:	609a      	str	r2, [r3, #8]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
                (uint32_t)&hadc->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f103 0240 	add.w	r2, r3, #64	@ 0x40
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =                  \
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60da      	str	r2, [r3, #12]
            hadc->DMA_Handle->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	611a      	str	r2, [r3, #16]
            tmp_hal_status = HAL_DMAEx_List_Start_IT(hadc->DMA_Handle);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fa0a 	bl	8004ec4 <HAL_DMAEx_List_Start_IT>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002ab6:	e028      	b.n	8002b0a <HAL_ADC_Start_DMA+0x1da>
          }
          else
          {
            tmp_hal_status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002abe:	e024      	b.n	8002b0a <HAL_ADC_Start_DMA+0x1da>
          }
        }
        else
        {
          /* Length should be converted to number of bytes */
          if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d104      	bne.n	8002ad4 <HAL_ADC_Start_DMA+0x1a4>
          {
            /* Word -> Bytes */
            LengthInBytes = Length * 4U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ad2:	e00c      	b.n	8002aee <HAL_ADC_Start_DMA+0x1be>
          }
          else if (hadc->DMA_Handle->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d104      	bne.n	8002ae8 <HAL_ADC_Start_DMA+0x1b8>
          {
            /* Halfword -> Bytes */
            LengthInBytes = Length * 2U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ae6:	e002      	b.n	8002aee <HAL_ADC_Start_DMA+0x1be>
          }
          else /* Bytes */
          {
            /* Same size already expressed in Bytes */
            LengthInBytes = Length;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
          }

          tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData,        \
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3340      	adds	r3, #64	@ 0x40
 8002af8:	4619      	mov	r1, r3
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b00:	f001 fd08 	bl	8004514 <HAL_DMA_Start_IT>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fc0a 	bl	8002328 <LL_ADC_REG_StartConversion>
 8002b14:	e007      	b.n	8002b26 <HAL_ADC_Start_DMA+0x1f6>
      }
      else
      {
        __HAL_UNLOCK(hadc);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 8002b1e:	e002      	b.n	8002b26 <HAL_ADC_Start_DMA+0x1f6>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  return tmp_hal_status;
 8002b26:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3788      	adds	r7, #136	@ 0x88
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	46021000 	.word	0x46021000
 8002b38:	08003a17 	.word	0x08003a17
 8002b3c:	08003aef 	.word	0x08003aef
 8002b40:	08003b0b 	.word	0x08003b0b

08002b44 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b0bc      	sub	sp, #240	@ 0xf0
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4aa8      	ldr	r2, [pc, #672]	@ (8002e14 <HAL_ADC_ConfigChannel+0x2bc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d103      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d102      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x36>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	f000 be6d 	b.w	8003868 <HAL_ADC_ConfigChannel+0xd10>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fbd8 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 864d 	bne.w	8003842 <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a99      	ldr	r2, [pc, #612]	@ (8002e14 <HAL_ADC_ConfigChannel+0x2bc>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	f000 83ea 	beq.w	8003388 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d108      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x7a>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	f003 031f 	and.w	r3, r3, #31
 8002bca:	2201      	movs	r2, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	e01d      	b.n	8002c0e <HAL_ADC_ConfigChannel+0xb6>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  return result;
 8002be6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002bea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  if (value == 0U)
 8002bee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	e004      	b.n	8002c04 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8002bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2201      	movs	r2, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	69d1      	ldr	r1, [r2, #28]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f7ff f9ad 	bl	8001f88 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fb8c 	bl	8002350 <LL_ADC_REG_IsConversionOngoing>
 8002c38:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fb98 	bl	8002376 <LL_ADC_INJ_IsConversionOngoing>
 8002c46:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f040 81ed 	bne.w	800302e <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f040 81e8 	bne.w	800302e <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f7ff fa38 	bl	80020e0 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d046      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6919      	ldr	r1, [r3, #16]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ca2:	f7ff f893 	bl	8001dcc <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6818      	ldr	r0, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6919      	ldr	r1, [r3, #16]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f7ff f8c1 	bl	8001e3a <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	7e9b      	ldrb	r3, [r3, #26]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d11e      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x17e>
 8002cd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cd4:	e000      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x180>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f7ff f8e4 	bl	8001ea6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d102      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x19c>
 8002cee:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cf2:	e000      	b.n	8002cf6 <HAL_ADC_ConfigChannel+0x19e>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f7ff f8ba 	bl	8001e70 <LL_ADC_SetOffsetSignedSaturation>
 8002cfc:	e197      	b.n	800302e <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	2200      	movs	r2, #0
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f7ff f8cc 	bl	8001ea6 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2200      	movs	r2, #0
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f7ff f8a9 	bl	8001e70 <LL_ADC_SetOffsetSignedSaturation>
 8002d1e:	e186      	b.n	800302e <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff f871 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1f4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f866 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	f003 021f 	and.w	r2, r3, #31
 8002d4a:	e01e      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x232>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2100      	movs	r1, #0
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f85b 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 8002d6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8002d72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002d7a:	2320      	movs	r3, #32
 8002d7c:	e004      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 8002d7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d82:	fab3 f383 	clz	r3, r3
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x24a>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	e018      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x27c>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dae:	fa93 f3a3 	rbit	r3, r3
 8002db2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8002db6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002dba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8002dbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e004      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 8002dca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2300      	movs	r3, #0
 8002de2:	2100      	movs	r1, #0
 8002de4:	f7fe fff2 	bl	8001dcc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff f80d 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10c      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x2c0>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff f802 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	f003 021f 	and.w	r2, r3, #31
 8002e12:	e020      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x2fe>
 8002e14:	46021000 	.word	0x46021000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe fff5 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002e3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002e46:	2320      	movs	r3, #32
 8002e48:	e004      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002e4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d105      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x316>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	e018      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x348>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002e82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002e86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002e8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e004      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e9a:	fab3 f383 	clz	r3, r3
 8002e9e:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	2300      	movs	r3, #0
 8002eae:	2101      	movs	r1, #1
 8002eb0:	f7fe ff8c 	bl	8001dcc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2102      	movs	r1, #2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe ffa7 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x388>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2102      	movs	r1, #2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe ff9c 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	f003 021f 	and.w	r2, r3, #31
 8002ede:	e01e      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x3c6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe ff91 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002f06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e004      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x3de>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	0e9b      	lsrs	r3, r3, #26
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	e018      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x410>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e004      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 8002f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d107      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2300      	movs	r3, #0
 8002f76:	2102      	movs	r1, #2
 8002f78:	f7fe ff28 	bl	8001dcc <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2103      	movs	r1, #3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe ff43 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x450>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2103      	movs	r1, #3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe ff38 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	f003 021f 	and.w	r2, r3, #31
 8002fa6:	e01a      	b.n	8002fde <HAL_ADC_ConfigChannel+0x486>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2103      	movs	r1, #3
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe ff2d 	bl	8001e0e <LL_ADC_GetOffsetChannel>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002fc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 8002fce:	2320      	movs	r3, #32
 8002fd0:	e004      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d105      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x49e>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	0e9b      	lsrs	r3, r3, #26
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	e011      	b.n	800301a <HAL_ADC_ConfigChannel+0x4c2>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003004:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003006:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003008:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e003      	b.n	800301a <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8003012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800301a:	429a      	cmp	r2, r3
 800301c:	d107      	bne.n	800302e <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2300      	movs	r3, #0
 8003028:	2103      	movs	r1, #3
 800302a:	f7fe fecf 	bl	8001dcc <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f952 	bl	80022dc <LL_ADC_IsEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 840e 	bne.w	800385c <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	461a      	mov	r2, r3
 800304e:	f7ff f8ab 	bl	80021a8 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800305a:	f040 80d6 	bne.w	800320a <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10b      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x52a>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	0e9b      	lsrs	r3, r3, #26
 8003070:	3301      	adds	r3, #1
 8003072:	f003 031f 	and.w	r3, r3, #31
 8003076:	2b09      	cmp	r3, #9
 8003078:	bf94      	ite	ls
 800307a:	2301      	movls	r3, #1
 800307c:	2300      	movhi	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	e019      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x55e>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8003090:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003092:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003094:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e003      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 800309e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	2b09      	cmp	r3, #9
 80030ae:	bf94      	ite	ls
 80030b0:	2301      	movls	r3, #1
 80030b2:	2300      	movhi	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d04d      	beq.n	8003156 <HAL_ADC_ConfigChannel+0x5fe>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d107      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x57e>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	0e9b      	lsrs	r3, r3, #26
 80030cc:	3301      	adds	r3, #1
 80030ce:	069b      	lsls	r3, r3, #26
 80030d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80030d4:	e015      	b.n	8003102 <HAL_ADC_ConfigChannel+0x5aa>
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80030e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80030e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 80030ee:	2320      	movs	r3, #32
 80030f0:	e003      	b.n	80030fa <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80030f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f4:	fab3 f383 	clz	r3, r3
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	3301      	adds	r3, #1
 80030fc:	069b      	lsls	r3, r3, #26
 80030fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x5ca>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0e9b      	lsrs	r3, r3, #26
 8003114:	3301      	adds	r3, #1
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	2101      	movs	r1, #1
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	e017      	b.n	8003152 <HAL_ADC_ConfigChannel+0x5fa>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003128:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003132:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 800313a:	2320      	movs	r3, #32
 800313c:	e003      	b.n	8003146 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 800313e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f303 	lsl.w	r3, r1, r3
 8003152:	4313      	orrs	r3, r2
 8003154:	e04e      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x69c>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x61a>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0e9b      	lsrs	r3, r3, #26
 8003168:	3301      	adds	r3, #1
 800316a:	069b      	lsls	r3, r3, #26
 800316c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003170:	e015      	b.n	800319e <HAL_ADC_ConfigChannel+0x646>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003182:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 800318a:	2320      	movs	r3, #32
 800318c:	e003      	b.n	8003196 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 800318e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003190:	fab3 f383 	clz	r3, r3
 8003194:	b2db      	uxtb	r3, r3
 8003196:	3301      	adds	r3, #1
 8003198:	069b      	lsls	r3, r3, #26
 800319a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_ADC_ConfigChannel+0x666>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	e017      	b.n	80031ee <HAL_ADC_ConfigChannel+0x696>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80031d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 80031d6:	2320      	movs	r3, #32
 80031d8:	e003      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 80031da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f003 031f 	and.w	r3, r3, #31
 80031e8:	2101      	movs	r1, #1
 80031ea:	fa01 f303 	lsl.w	r3, r1, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6818      	ldr	r0, [r3, #0]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	461a      	mov	r2, r3
 8003202:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8003206:	f7fe ff6b 	bl	80020e0 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f280 8324 	bge.w	800385c <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a99      	ldr	r2, [pc, #612]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x6ca>
 800321e:	4b99      	ldr	r3, [pc, #612]	@ (8003484 <HAL_ADC_ConfigChannel+0x92c>)
 8003220:	e000      	b.n	8003224 <HAL_ADC_ConfigChannel+0x6cc>
 8003222:	4b99      	ldr	r3, [pc, #612]	@ (8003488 <HAL_ADC_ConfigChannel+0x930>)
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fda3 	bl	8001d70 <LL_ADC_GetCommonPathInternalCh>
 800322a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a93      	ldr	r2, [pc, #588]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d109      	bne.n	800324c <HAL_ADC_ConfigChannel+0x6f4>
 8003238:	4891      	ldr	r0, [pc, #580]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 800323a:	f7ff f84f 	bl	80022dc <LL_ADC_IsEnabled>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e008      	b.n	800325e <HAL_ADC_ConfigChannel+0x706>
 800324c:	488f      	ldr	r0, [pc, #572]	@ (800348c <HAL_ADC_ConfigChannel+0x934>)
 800324e:	f7ff f845 	bl	80022dc <LL_ADC_IsEnabled>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8088 	beq.w	8003374 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a89      	ldr	r2, [pc, #548]	@ (8003490 <HAL_ADC_ConfigChannel+0x938>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d132      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800326e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d12c      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a80      	ldr	r2, [pc, #512]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d005      	beq.n	8003290 <HAL_ADC_ConfigChannel+0x738>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a80      	ldr	r2, [pc, #512]	@ (800348c <HAL_ADC_ConfigChannel+0x934>)
 800328a:	4293      	cmp	r3, r2
 800328c:	f040 82e3 	bne.w	8003856 <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a7a      	ldr	r2, [pc, #488]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x746>
 800329a:	4a7a      	ldr	r2, [pc, #488]	@ (8003484 <HAL_ADC_ConfigChannel+0x92c>)
 800329c:	e000      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x748>
 800329e:	4a7a      	ldr	r2, [pc, #488]	@ (8003488 <HAL_ADC_ConfigChannel+0x930>)
 80032a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032a8:	4619      	mov	r1, r3
 80032aa:	4610      	mov	r0, r2
 80032ac:	f7fe fd4d 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b0:	4b78      	ldr	r3, [pc, #480]	@ (8003494 <HAL_ADC_ConfigChannel+0x93c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	4a78      	ldr	r2, [pc, #480]	@ (8003498 <HAL_ADC_ConfigChannel+0x940>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	3301      	adds	r3, #1
 80032c0:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80032c2:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80032c4:	e002      	b.n	80032cc <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f9      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032d2:	e2c0      	b.n	8003856 <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a70      	ldr	r2, [pc, #448]	@ (800349c <HAL_ADC_ConfigChannel+0x944>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d121      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11b      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a64      	ldr	r2, [pc, #400]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d005      	beq.n	8003300 <HAL_ADC_ConfigChannel+0x7a8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a64      	ldr	r2, [pc, #400]	@ (800348c <HAL_ADC_ConfigChannel+0x934>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	f040 82ad 	bne.w	800385a <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a5e      	ldr	r2, [pc, #376]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d101      	bne.n	800330e <HAL_ADC_ConfigChannel+0x7b6>
 800330a:	4a5e      	ldr	r2, [pc, #376]	@ (8003484 <HAL_ADC_ConfigChannel+0x92c>)
 800330c:	e000      	b.n	8003310 <HAL_ADC_ConfigChannel+0x7b8>
 800330e:	4a5e      	ldr	r2, [pc, #376]	@ (8003488 <HAL_ADC_ConfigChannel+0x930>)
 8003310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003314:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f7fe fd15 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003320:	e29b      	b.n	800385a <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a5e      	ldr	r2, [pc, #376]	@ (80034a0 <HAL_ADC_ConfigChannel+0x948>)
 8003328:	4293      	cmp	r3, r2
 800332a:	f040 8297 	bne.w	800385c <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003336:	2b00      	cmp	r3, #0
 8003338:	f040 8290 	bne.w	800385c <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a4f      	ldr	r2, [pc, #316]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d005      	beq.n	8003352 <HAL_ADC_ConfigChannel+0x7fa>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a50      	ldr	r2, [pc, #320]	@ (800348c <HAL_ADC_ConfigChannel+0x934>)
 800334c:	4293      	cmp	r3, r2
 800334e:	f040 8285 	bne.w	800385c <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a4a      	ldr	r2, [pc, #296]	@ (8003480 <HAL_ADC_ConfigChannel+0x928>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x808>
 800335c:	4a49      	ldr	r2, [pc, #292]	@ (8003484 <HAL_ADC_ConfigChannel+0x92c>)
 800335e:	e000      	b.n	8003362 <HAL_ADC_ConfigChannel+0x80a>
 8003360:	4a49      	ldr	r2, [pc, #292]	@ (8003488 <HAL_ADC_ConfigChannel+0x930>)
 8003362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003366:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800336a:	4619      	mov	r1, r3
 800336c:	4610      	mov	r0, r2
 800336e:	f7fe fcec 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
 8003372:	e273      	b.n	800385c <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003378:	f043 0220 	orr.w	r2, r3, #32
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	679a      	str	r2, [r3, #120]	@ 0x78

            tmp_hal_status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8003386:	e269      	b.n	800385c <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f000 8191 	beq.w	80036bc <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033a2:	d004      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80033a8:	4a3e      	ldr	r2, [pc, #248]	@ (80034a4 <HAL_ADC_ConfigChannel+0x94c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d107      	bne.n	80033be <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fe fe46 	bl	8002048 <LL_ADC_REG_SetSequencerChAdd>
 80033bc:	e0b0      	b.n	8003520 <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	210f      	movs	r1, #15
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	401a      	ands	r2, r3
 80033d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033da:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d105      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x896>
 80033e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033e6:	0e9b      	lsrs	r3, r3, #26
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	e011      	b.n	8003412 <HAL_ADC_ConfigChannel+0x8ba>
 80033ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80033f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f6:	fa93 f3a3 	rbit	r3, r3
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 8003406:	2320      	movs	r3, #32
 8003408:	e003      	b.n	8003412 <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	b2db      	uxtb	r3, r3
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	6849      	ldr	r1, [r1, #4]
 8003416:	f001 011f 	and.w	r1, r1, #31
 800341a:	408b      	lsls	r3, r1
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003430:	429a      	cmp	r2, r3
 8003432:	d875      	bhi.n	8003520 <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8003434:	f7fe fc68 	bl	8001d08 <HAL_GetREVID>
 8003438:	4603      	mov	r3, r0
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343e:	d866      	bhi.n	800350e <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8003440:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003444:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x90a>
 800344c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003450:	0e9b      	lsrs	r3, r3, #26
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2b13      	cmp	r3, #19
 8003458:	bf8c      	ite	hi
 800345a:	2301      	movhi	r3, #1
 800345c:	2300      	movls	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	e02b      	b.n	80034ba <HAL_ADC_ConfigChannel+0x962>
 8003462:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003466:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	61bb      	str	r3, [r7, #24]
  return result;
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 800347a:	2320      	movs	r3, #32
 800347c:	e018      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x958>
 800347e:	bf00      	nop
 8003480:	42028000 	.word	0x42028000
 8003484:	42028308 	.word	0x42028308
 8003488:	46021308 	.word	0x46021308
 800348c:	46021000 	.word	0x46021000
 8003490:	ce080000 	.word	0xce080000
 8003494:	20000004 	.word	0x20000004
 8003498:	053e2d63 	.word	0x053e2d63
 800349c:	ca040000 	.word	0xca040000
 80034a0:	80000001 	.word	0x80000001
 80034a4:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b13      	cmp	r3, #19
 80034b2:	bf8c      	ite	hi
 80034b4:	2301      	movhi	r3, #1
 80034b6:	2300      	movls	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d027      	beq.n	800350e <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 80034be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80034c2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_ADC_ConfigChannel+0x986>
 80034ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80034ce:	0e9b      	lsrs	r3, r3, #26
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	3b09      	subs	r3, #9
 80034d6:	2201      	movs	r2, #1
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	e015      	b.n	800350a <HAL_ADC_ConfigChannel+0x9b2>
 80034de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80034e2:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	60fb      	str	r3, [r7, #12]
  return result;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 80034f6:	2320      	movs	r3, #32
 80034f8:	e003      	b.n	8003502 <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	b2db      	uxtb	r3, r3
 8003502:	3b09      	subs	r3, #9
 8003504:	2201      	movs	r2, #1
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 800351a:	4619      	mov	r1, r3
 800351c:	f7fe fd34 	bl	8001f88 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	461a      	mov	r2, r3
 800352a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800352e:	f7fe fdd7 	bl	80020e0 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	f280 8190 	bge.w	800385c <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a97      	ldr	r2, [pc, #604]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x9f2>
 8003546:	4b97      	ldr	r3, [pc, #604]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 8003548:	e000      	b.n	800354c <HAL_ADC_ConfigChannel+0x9f4>
 800354a:	4b97      	ldr	r3, [pc, #604]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fc0f 	bl	8001d70 <LL_ADC_GetCommonPathInternalCh>
 8003552:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a94      	ldr	r2, [pc, #592]	@ (80037ac <HAL_ADC_ConfigChannel+0xc54>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d126      	bne.n	80035ae <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003564:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d120      	bne.n	80035ae <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a8b      	ldr	r2, [pc, #556]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <HAL_ADC_ConfigChannel+0xa22>
 8003576:	4a8b      	ldr	r2, [pc, #556]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 8003578:	e000      	b.n	800357c <HAL_ADC_ConfigChannel+0xa24>
 800357a:	4a8b      	ldr	r2, [pc, #556]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003580:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003584:	4619      	mov	r1, r3
 8003586:	4610      	mov	r0, r2
 8003588:	f7fe fbdf 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800358c:	4b88      	ldr	r3, [pc, #544]	@ (80037b0 <HAL_ADC_ConfigChannel+0xc58>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	099b      	lsrs	r3, r3, #6
 8003592:	4a88      	ldr	r2, [pc, #544]	@ (80037b4 <HAL_ADC_ConfigChannel+0xc5c>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800359e:	e002      	b.n	80035a6 <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1f9      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 80035ac:	e067      	b.n	800367e <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a81      	ldr	r2, [pc, #516]	@ (80037b8 <HAL_ADC_ConfigChannel+0xc60>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d116      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d110      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a75      	ldr	r2, [pc, #468]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0xa7a>
 80035ce:	4a75      	ldr	r2, [pc, #468]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 80035d0:	e000      	b.n	80035d4 <HAL_ADC_ConfigChannel+0xa7c>
 80035d2:	4a75      	ldr	r2, [pc, #468]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f7fe fbb3 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
 80035e4:	e04b      	b.n	800367e <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a74      	ldr	r2, [pc, #464]	@ (80037bc <HAL_ADC_ConfigChannel+0xc64>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d116      	bne.n	800361e <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80035f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d110      	bne.n	800361e <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a67      	ldr	r2, [pc, #412]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_ADC_ConfigChannel+0xab2>
 8003606:	4a67      	ldr	r2, [pc, #412]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 8003608:	e000      	b.n	800360c <HAL_ADC_ConfigChannel+0xab4>
 800360a:	4a67      	ldr	r2, [pc, #412]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003610:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003614:	4619      	mov	r1, r3
 8003616:	4610      	mov	r0, r2
 8003618:	f7fe fb97 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
 800361c:	e02f      	b.n	800367e <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a67      	ldr	r2, [pc, #412]	@ (80037c0 <HAL_ADC_ConfigChannel+0xc68>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d12a      	bne.n	800367e <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d124      	bne.n	800367e <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a62      	ldr	r2, [pc, #392]	@ (80037c4 <HAL_ADC_ConfigChannel+0xc6c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d11f      	bne.n	800367e <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a57      	ldr	r2, [pc, #348]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0xaf4>
 8003648:	4a56      	ldr	r2, [pc, #344]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 800364a:	e000      	b.n	800364e <HAL_ADC_ConfigChannel+0xaf6>
 800364c:	4a56      	ldr	r2, [pc, #344]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 800364e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003652:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7fe fb76 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 800365e:	f7fe fb53 	bl	8001d08 <HAL_GetREVID>
 8003662:	4603      	mov	r3, r0
 8003664:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003668:	d809      	bhi.n	800367e <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800367e:	f7fe fb43 	bl	8001d08 <HAL_GetREVID>
 8003682:	4603      	mov	r3, r0
 8003684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003688:	f040 80e8 	bne.w	800385c <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a4d      	ldr	r2, [pc, #308]	@ (80037c8 <HAL_ADC_ConfigChannel+0xc70>)
 8003692:	4293      	cmp	r3, r2
 8003694:	f040 80e2 	bne.w	800385c <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 80db 	bne.w	800385c <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80036ba:	e0cf      	b.n	800385c <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036c4:	d004      	beq.n	80036d0 <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80036ca:	4a40      	ldr	r2, [pc, #256]	@ (80037cc <HAL_ADC_ConfigChannel+0xc74>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d106      	bne.n	80036de <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fce8 	bl	80020ae <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f280 80ba 	bge.w	800385c <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a2c      	ldr	r2, [pc, #176]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0xb9e>
 80036f2:	4b2c      	ldr	r3, [pc, #176]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 80036f4:	e000      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xba0>
 80036f6:	4b2c      	ldr	r3, [pc, #176]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe fb39 	bl	8001d70 <LL_ADC_GetCommonPathInternalCh>
 80036fe:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a32      	ldr	r2, [pc, #200]	@ (80037d0 <HAL_ADC_ConfigChannel+0xc78>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d110      	bne.n	800372e <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0xbc2>
 8003716:	4a23      	ldr	r2, [pc, #140]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 8003718:	e000      	b.n	800371c <HAL_ADC_ConfigChannel+0xbc4>
 800371a:	4a23      	ldr	r2, [pc, #140]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 800371c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003720:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003724:	4619      	mov	r1, r3
 8003726:	4610      	mov	r0, r2
 8003728:	f7fe fb0f 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
 800372c:	e06d      	b.n	800380a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a28      	ldr	r2, [pc, #160]	@ (80037d4 <HAL_ADC_ConfigChannel+0xc7c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d110      	bne.n	800375a <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a18      	ldr	r2, [pc, #96]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_ADC_ConfigChannel+0xbee>
 8003742:	4a18      	ldr	r2, [pc, #96]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 8003744:	e000      	b.n	8003748 <HAL_ADC_ConfigChannel+0xbf0>
 8003746:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 8003748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003750:	4619      	mov	r1, r3
 8003752:	4610      	mov	r0, r2
 8003754:	f7fe faf9 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
 8003758:	e057      	b.n	800380a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a17      	ldr	r2, [pc, #92]	@ (80037bc <HAL_ADC_ConfigChannel+0xc64>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d110      	bne.n	8003786 <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a0d      	ldr	r2, [pc, #52]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0xc1a>
 800376e:	4a0d      	ldr	r2, [pc, #52]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 8003770:	e000      	b.n	8003774 <HAL_ADC_ConfigChannel+0xc1c>
 8003772:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <HAL_ADC_ConfigChannel+0xc50>)
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003778:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f7fe fae3 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
 8003784:	e041      	b.n	800380a <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a0d      	ldr	r2, [pc, #52]	@ (80037c0 <HAL_ADC_ConfigChannel+0xc68>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d13c      	bne.n	800380a <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a02      	ldr	r2, [pc, #8]	@ (80037a0 <HAL_ADC_ConfigChannel+0xc48>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d11e      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0xc80>
 800379a:	4a02      	ldr	r2, [pc, #8]	@ (80037a4 <HAL_ADC_ConfigChannel+0xc4c>)
 800379c:	e01d      	b.n	80037da <HAL_ADC_ConfigChannel+0xc82>
 800379e:	bf00      	nop
 80037a0:	42028000 	.word	0x42028000
 80037a4:	42028308 	.word	0x42028308
 80037a8:	46021308 	.word	0x46021308
 80037ac:	b6002000 	.word	0xb6002000
 80037b0:	20000004 	.word	0x20000004
 80037b4:	053e2d63 	.word	0x053e2d63
 80037b8:	ba004000 	.word	0xba004000
 80037bc:	80000001 	.word	0x80000001
 80037c0:	b2001000 	.word	0xb2001000
 80037c4:	46021000 	.word	0x46021000
 80037c8:	d7200000 	.word	0xd7200000
 80037cc:	80000010 	.word	0x80000010
 80037d0:	ce080000 	.word	0xce080000
 80037d4:	ca040000 	.word	0xca040000
 80037d8:	4a25      	ldr	r2, [pc, #148]	@ (8003870 <HAL_ADC_ConfigChannel+0xd18>)
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037de:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80037e2:	4619      	mov	r1, r3
 80037e4:	4610      	mov	r0, r2
 80037e6:	f7fe fab0 	bl	8001d4a <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 80037ea:	f7fe fa8d 	bl	8001d08 <HAL_GetREVID>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f4:	d809      	bhi.n	800380a <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 800380a:	f7fe fa7d 	bl	8001d08 <HAL_GetREVID>
 800380e:	4603      	mov	r3, r0
 8003810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003814:	d122      	bne.n	800385c <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a16      	ldr	r2, [pc, #88]	@ (8003874 <HAL_ADC_ConfigChannel+0xd1c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d11d      	bne.n	800385c <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d117      	bne.n	800385c <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 8003840:	e00c      	b.n	800385c <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	679a      	str	r2, [r3, #120]	@ 0x78
    tmp_hal_status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef
 8003854:	e002      	b.n	800385c <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800385a:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8003864:	f897 30ef 	ldrb.w	r3, [r7, #239]	@ 0xef
}
 8003868:	4618      	mov	r0, r3
 800386a:	37f0      	adds	r7, #240	@ 0xf0
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	46021308 	.word	0x46021308
 8003874:	d7200000 	.word	0xd7200000

08003878 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fe fd29 	bl	80022dc <LL_ADC_IsEnabled>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d15a      	bne.n	8003946 <ADC_Enable+0xce>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	4b2e      	ldr	r3, [pc, #184]	@ (8003950 <ADC_Enable+0xd8>)
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	679a      	str	r2, [r3, #120]	@ 0x78

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e046      	b.n	8003948 <ADC_Enable+0xd0>
    }

    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_RDY);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2201      	movs	r2, #1
 80038c0:	601a      	str	r2, [r3, #0]

    LL_ADC_Enable(hadc->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fce0 	bl	800228c <LL_ADC_Enable>

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if ((hadc->Init.LowPowerAutoPowerOff == ADC_LOW_POWER_NONE) || (hadc->Instance != ADC4))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <ADC_Enable+0x66>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <ADC_Enable+0xdc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d033      	beq.n	8003946 <ADC_Enable+0xce>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80038de:	f7fe f9e3 	bl	8001ca8 <HAL_GetTick>
 80038e2:	60f8      	str	r0, [r7, #12]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
         )
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038e4:	e028      	b.n	8003938 <ADC_Enable+0xc0>
              The workaround is to continue setting ADEN until ADRDY is becomes 1.
              Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
              4 ADC clock cycle duration */
          /* Note: Test of ADC enabled required due to hardware constraint to     */
          /*       not enable ADC if already enabled.                             */
          if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fcf6 	bl	80022dc <LL_ADC_IsEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <ADC_Enable+0x88>
          {
            LL_ADC_Enable(hadc->Instance);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fcc6 	bl	800228c <LL_ADC_Enable>
          }

          if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003900:	f7fe f9d2 	bl	8001ca8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d914      	bls.n	8003938 <ADC_Enable+0xc0>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b01      	cmp	r3, #1
 800391a:	d00d      	beq.n	8003938 <ADC_Enable+0xc0>
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003920:	f043 0210 	orr.w	r2, r3, #16
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	679a      	str	r2, [r3, #120]	@ 0x78

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800392c:	f043 0201 	orr.w	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	67da      	str	r2, [r3, #124]	@ 0x7c

              return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e007      	b.n	8003948 <ADC_Enable+0xd0>
        while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b01      	cmp	r3, #1
 8003944:	d1cf      	bne.n	80038e6 <ADC_Enable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	8000003f 	.word	0x8000003f
 8003954:	46021000 	.word	0x46021000

08003958 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe fccc 	bl	8002302 <LL_ADC_IsDisableOngoing>
 800396a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fcb3 	bl	80022dc <LL_ADC_IsEnabled>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d047      	beq.n	8003a0c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d144      	bne.n	8003a0c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030d 	and.w	r3, r3, #13
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10c      	bne.n	80039aa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fc8d 	bl	80022b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2203      	movs	r2, #3
 80039a0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039a2:	f7fe f981 	bl	8001ca8 <HAL_GetTick>
 80039a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039a8:	e029      	b.n	80039fe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ae:	f043 0210 	orr.w	r2, r3, #16
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	679a      	str	r2, [r3, #120]	@ 0x78
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	67da      	str	r2, [r3, #124]	@ 0x7c
      return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e023      	b.n	8003a0e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039c6:	f7fe f96f 	bl	8001ca8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d914      	bls.n	80039fe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039e6:	f043 0210 	orr.w	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039f2:	f043 0201 	orr.w	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	67da      	str	r2, [r3, #124]	@ 0x7c

          return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e007      	b.n	8003a0e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1dc      	bne.n	80039c6 <ADC_Disable+0x6e>
        }
      }
    }
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d14b      	bne.n	8003ac8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a34:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d021      	beq.n	8003a8e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fa86 	bl	8001f60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d032      	beq.n	8003ac0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_CONT) == 0UL)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d12b      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	679a      	str	r2, [r3, #120]	@ 0x78
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d11f      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a84:	f043 0201 	orr.w	r2, r3, #1
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	679a      	str	r2, [r3, #120]	@ 0x78
 8003a8c:	e018      	b.n	8003ac0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMNGT) == 0UL)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d111      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aa0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	679a      	str	r2, [r3, #120]	@ 0x78
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ab8:	f043 0201 	orr.w	r2, r3, #1
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7fd f88b 	bl	8000bdc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ac6:	e00e      	b.n	8003ae6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f7fd f847 	bl	8000b68 <HAL_ADC_ErrorCallback>
}
 8003ada:	e004      	b.n	8003ae6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff f821 	bl	8002b44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b28:	f043 0204 	orr.w	r2, r3, #4
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7fd f819 	bl	8000b68 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b36:	bf00      	nop
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <LL_ADC_StartCalibration>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b8c <LL_ADC_StartCalibration+0x4c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00c      	beq.n	8003b6c <LL_ADC_StartCalibration+0x2c>
    MODIFY_REG(ADCx->CR,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <LL_ADC_StartCalibration+0x50>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	f402 3280 	and.w	r2, r2, #65536	@ 0x10000
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
}
 8003b6a:	e009      	b.n	8003b80 <LL_ADC_StartCalibration+0x40>
    MODIFY_REG(ADCx->CR,  ADC_CR_BITS_PROPERTY_RS,    ADC_CR_ADCAL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b78:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	46021000 	.word	0x46021000
 8003b90:	7ffeffc0 	.word	0x7ffeffc0

08003b94 <LL_ADC_IsCalibrationOnGoing>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ba8:	d101      	bne.n	8003bae <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	@ 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  __HAL_LOCK(hadc);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <HAL_ADCEx_Calibration_Start+0x1e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e138      	b.n	8003e4c <HAL_ADCEx_Calibration_Start+0x290>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff feb8 	bl	8003958 <ADC_Disable>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003bee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 811e 	bne.w	8003e34 <HAL_ADCEx_Calibration_Start+0x278>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_BUSY_INTERNAL);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bfc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c00:	f023 0302 	bic.w	r3, r3, #2
 8003c04:	f043 0202 	orr.w	r2, r3, #2
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hadc->Instance == ADC4)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a90      	ldr	r2, [pc, #576]	@ (8003e54 <HAL_ADCEx_Calibration_Start+0x298>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d150      	bne.n	8003cb8 <HAL_ADCEx_Calibration_Start+0xfc>
      /* Note: Specificity of this STM32 series: Calibration factor is          */
      /*       available in data register and also transferred by DMA.          */
      /*       To not insert ADC calibration factor among ADC conversion data   */
      /*       in array variable, DMA transfer must be disabled during          */
      /*       calibration.                                                     */
      backup_setting_pwrr  = READ_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
      backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	617b      	str	r3, [r7, #20]
      CLEAR_BIT(hadc->Instance->CFGR1, ADC4_CFGR1_DMAEN | ADC4_CFGR1_DMACFG);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0203 	bic.w	r2, r2, #3
 8003c3c:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(hadc->Instance->PWRR, ADC4_PWRR_AUTOFF);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Start ADC calibration in mode single-ended */
      LL_ADC_StartCalibration(hadc->Instance, LL_ADC_CALIB_OFFSET);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff ff73 	bl	8003b40 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c5a:	e014      	b.n	8003c86 <HAL_ADCEx_Calibration_Start+0xca>
      {
        wait_loop_index++;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	613b      	str	r3, [r7, #16]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4a7c      	ldr	r2, [pc, #496]	@ (8003e58 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d90d      	bls.n	8003c86 <HAL_ADCEx_Calibration_Start+0xca>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c6e:	f023 0312 	bic.w	r3, r3, #18
 8003c72:	f043 0210 	orr.w	r2, r3, #16
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	679a      	str	r2, [r3, #120]	@ 0x78

          __HAL_UNLOCK(hadc);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0e2      	b.n	8003e4c <HAL_ADCEx_Calibration_Start+0x290>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7ff ff82 	bl	8003b94 <LL_ADC_IsCalibrationOnGoing>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1e2      	bne.n	8003c5c <HAL_ADCEx_Calibration_Start+0xa0>
        }
      }

      /* Restore configuration after calibration */
      SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68d9      	ldr	r1, [r3, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	60da      	str	r2, [r3, #12]
      SET_BIT(hadc->Instance->PWRR, backup_setting_pwrr);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003cb6:	e0b4      	b.n	8003e22 <HAL_ADCEx_Calibration_Start+0x266>
    }
    else /* ADC instance ADC1 or ADC2 */
    {
      /* Get device information */
      uint32_t dev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID);
 8003cb8:	4b68      	ldr	r3, [pc, #416]	@ (8003e5c <HAL_ADCEx_Calibration_Start+0x2a0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc0:	623b      	str	r3, [r7, #32]
      uint32_t rev_id = READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos;
 8003cc2:	4b66      	ldr	r3, [pc, #408]	@ (8003e5c <HAL_ADCEx_Calibration_Start+0x2a0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	61fb      	str	r3, [r7, #28]

      /* Assess whether extended calibration is available on the selected device */
      if ((dev_id == 0x455UL) || (dev_id == 0x476UL)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f240 4255 	movw	r2, #1109	@ 0x455
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d012      	beq.n	8003cfc <HAL_ADCEx_Calibration_Start+0x140>
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	f240 4276 	movw	r2, #1142	@ 0x476
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00d      	beq.n	8003cfc <HAL_ADCEx_Calibration_Start+0x140>
          || (((dev_id == 0x481UL) || (dev_id == 0x482UL)) && (rev_id >= 0x3000UL)))
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	f240 4281 	movw	r2, #1153	@ 0x481
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_ADCEx_Calibration_Start+0x138>
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	f240 4282 	movw	r2, #1154	@ 0x482
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d172      	bne.n	8003dda <HAL_ADCEx_Calibration_Start+0x21e>
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003cfa:	d36e      	bcc.n	8003dda <HAL_ADCEx_Calibration_Start+0x21e>
      {
        /* Perform extended calibration */
        /* Refer to ref manual for extended calibration procedure details */
        tmp_hal_status = ADC_Enable(hadc);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff fdbb 	bl	8003878 <ADC_Enable>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (tmp_hal_status == HAL_OK)
 8003d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 8088 	bne.w	8003e22 <HAL_ADCEx_Calibration_Start+0x266>
        {
          /* Use a Data Memory Barrier instruction to avoid synchronization issues when accessing ADC registers */
          MODIFY_REG(hadc->Instance->CR, ADC_CR_CALINDEX, 0x9UL << ADC_CR_CALINDEX_Pos);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 6210 	orr.w	r2, r2, #150994944	@ 0x9000000
 8003d24:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8003d26:	f3bf 8f5f 	dmb	sy
}
 8003d2a:	bf00      	nop
          __DMB();
          MODIFY_REG(hadc->Instance->CALFACT2, 0xFFFFFF00UL, 0x03021100UL);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003d34:	b2d9      	uxtb	r1, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b49      	ldr	r3, [pc, #292]	@ (8003e60 <HAL_ADCEx_Calibration_Start+0x2a4>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
  __ASM volatile ("dmb 0xF":::"memory");
 8003d42:	f3bf 8f5f 	dmb	sy
}
 8003d46:	bf00      	nop
          __DMB();
          SET_BIT(hadc->Instance->CALFACT, ADC_CALFACT_LATCH_COEF);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003d58:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

          tmp_hal_status = ADC_Disable(hadc);
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff fdfb 	bl	8003958 <ADC_Disable>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

          if (CalibrationMode == ADC_CALIB_OFFSET_LINEARITY)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8003d6e:	d109      	bne.n	8003d84 <HAL_ADCEx_Calibration_Start+0x1c8>
          {
            MODIFY_REG(hadc->Instance->CR, ADC_CR_ADCALLIN | ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCALLIN);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689a      	ldr	r2, [r3, #8]
 8003d76:	4b3b      	ldr	r3, [pc, #236]	@ (8003e64 <HAL_ADCEx_Calibration_Start+0x2a8>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d82:	6093      	str	r3, [r2, #8]
          }

          MODIFY_REG(hadc->Instance->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADCAL);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d8e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d9a:	6093      	str	r3, [r2, #8]

          /* Wait for calibration completion */
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d9c:	e014      	b.n	8003dc8 <HAL_ADCEx_Calibration_Start+0x20c>
          {
            wait_loop_index++;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	3301      	adds	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
            if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e58 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d90d      	bls.n	8003dc8 <HAL_ADCEx_Calibration_Start+0x20c>
            {
              /* Update ADC state machine to error */
              ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db0:	f023 0312 	bic.w	r3, r3, #18
 8003db4:	f043 0210 	orr.w	r2, r3, #16
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	679a      	str	r2, [r3, #120]	@ 0x78

              __HAL_UNLOCK(hadc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

              return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e041      	b.n	8003e4c <HAL_ADCEx_Calibration_Start+0x290>
          while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fee1 	bl	8003b94 <LL_ADC_IsCalibrationOnGoing>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e2      	bne.n	8003d9e <HAL_ADCEx_Calibration_Start+0x1e2>
        if (tmp_hal_status == HAL_OK)
 8003dd8:	e023      	b.n	8003e22 <HAL_ADCEx_Calibration_Start+0x266>
        }
      }
      else
      {
        /* Start ADC calibration in mode single-ended or differential */
        LL_ADC_StartCalibration(hadc->Instance, CalibrationMode);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fead 	bl	8003b40 <LL_ADC_StartCalibration>

        /* Wait for calibration completion */
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003de6:	e014      	b.n	8003e12 <HAL_ADCEx_Calibration_Start+0x256>
        {
          wait_loop_index++;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3301      	adds	r3, #1
 8003dec:	613b      	str	r3, [r7, #16]
          if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4a19      	ldr	r2, [pc, #100]	@ (8003e58 <HAL_ADCEx_Calibration_Start+0x29c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d90d      	bls.n	8003e12 <HAL_ADCEx_Calibration_Start+0x256>
          {
            /* Update ADC state machine to error */
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dfa:	f023 0312 	bic.w	r3, r3, #18
 8003dfe:	f043 0210 	orr.w	r2, r3, #16
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	679a      	str	r2, [r3, #120]	@ 0x78

            __HAL_UNLOCK(hadc);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

            return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e01c      	b.n	8003e4c <HAL_ADCEx_Calibration_Start+0x290>
        while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff febc 	bl	8003b94 <LL_ADC_IsCalibrationOnGoing>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e2      	bne.n	8003de8 <HAL_ADCEx_Calibration_Start+0x22c>
        }
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	679a      	str	r2, [r3, #120]	@ 0x78
 8003e32:	e005      	b.n	8003e40 <HAL_ADCEx_Calibration_Start+0x284>
  }
  else /* ADC not disabled */
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e38:	f043 0210 	orr.w	r2, r3, #16
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return tmp_hal_status;
 8003e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3728      	adds	r7, #40	@ 0x28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	46021000 	.word	0x46021000
 8003e58:	022b6b7f 	.word	0x022b6b7f
 8003e5c:	e0044000 	.word	0xe0044000
 8003e60:	03021100 	.word	0x03021100
 8003e64:	7ffeffc0 	.word	0x7ffeffc0

08003e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f003 0307 	and.w	r3, r3, #7
 8003e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e78:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <__NVIC_SetPriorityGrouping+0x44>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e84:	4013      	ands	r3, r2
 8003e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e9a:	4a04      	ldr	r2, [pc, #16]	@ (8003eac <__NVIC_SetPriorityGrouping+0x44>)
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	60d3      	str	r3, [r2, #12]
}
 8003ea0:	bf00      	nop
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eb4:	4b04      	ldr	r3, [pc, #16]	@ (8003ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	0a1b      	lsrs	r3, r3, #8
 8003eba:	f003 0307 	and.w	r3, r3, #7
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	db0b      	blt.n	8003ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	f003 021f 	and.w	r2, r3, #31
 8003ee4:	4907      	ldr	r1, [pc, #28]	@ (8003f04 <__NVIC_EnableIRQ+0x38>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2001      	movs	r0, #1
 8003eee:	fa00 f202 	lsl.w	r2, r0, r2
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000e100 	.word	0xe000e100

08003f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	6039      	str	r1, [r7, #0]
 8003f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	db0a      	blt.n	8003f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	490c      	ldr	r1, [pc, #48]	@ (8003f54 <__NVIC_SetPriority+0x4c>)
 8003f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f26:	0112      	lsls	r2, r2, #4
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f30:	e00a      	b.n	8003f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	b2da      	uxtb	r2, r3
 8003f36:	4908      	ldr	r1, [pc, #32]	@ (8003f58 <__NVIC_SetPriority+0x50>)
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3b04      	subs	r3, #4
 8003f40:	0112      	lsls	r2, r2, #4
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	440b      	add	r3, r1
 8003f46:	761a      	strb	r2, [r3, #24]
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	e000e100 	.word	0xe000e100
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	@ 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f1c3 0307 	rsb	r3, r3, #7
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	bf28      	it	cs
 8003f7a:	2304      	movcs	r3, #4
 8003f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	3304      	adds	r3, #4
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d902      	bls.n	8003f8c <NVIC_EncodePriority+0x30>
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3b03      	subs	r3, #3
 8003f8a:	e000      	b.n	8003f8e <NVIC_EncodePriority+0x32>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	f04f 32ff 	mov.w	r2, #4294967295
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	43d9      	mvns	r1, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fb4:	4313      	orrs	r3, r2
         );
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3724      	adds	r7, #36	@ 0x24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff ff4c 	bl	8003e68 <__NVIC_SetPriorityGrouping>
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
 8003fe4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fe6:	f7ff ff63 	bl	8003eb0 <__NVIC_GetPriorityGrouping>
 8003fea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	6978      	ldr	r0, [r7, #20]
 8003ff2:	f7ff ffb3 	bl	8003f5c <NVIC_EncodePriority>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff82 	bl	8003f08 <__NVIC_SetPriority>
}
 8004004:	bf00      	nop
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b082      	sub	sp, #8
 8004010:	af00      	add	r7, sp, #0
 8004012:	4603      	mov	r3, r0
 8004014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff56 	bl	8003ecc <__NVIC_EnableIRQ>
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b04      	cmp	r3, #4
 8004034:	d844      	bhi.n	80040c0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004036:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403c:	0800405f 	.word	0x0800405f
 8004040:	0800407d 	.word	0x0800407d
 8004044:	0800409f 	.word	0x0800409f
 8004048:	080040c1 	.word	0x080040c1
 800404c:	08004051 	.word	0x08004051
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004050:	4b1f      	ldr	r3, [pc, #124]	@ (80040d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1e      	ldr	r2, [pc, #120]	@ (80040d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004056:	f043 0304 	orr.w	r3, r3, #4
 800405a:	6013      	str	r3, [r2, #0]
      break;
 800405c:	e031      	b.n	80040c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800405e:	4b1c      	ldr	r3, [pc, #112]	@ (80040d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1b      	ldr	r2, [pc, #108]	@ (80040d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 800406a:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800406c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004070:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004072:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004076:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800407a:	e022      	b.n	80040c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800407c:	4b14      	ldr	r3, [pc, #80]	@ (80040d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a13      	ldr	r2, [pc, #76]	@ (80040d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004082:	f023 0304 	bic.w	r3, r3, #4
 8004086:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004088:	4b12      	ldr	r3, [pc, #72]	@ (80040d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800408a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800408e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004092:	4a10      	ldr	r2, [pc, #64]	@ (80040d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004094:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 800409c:	e011      	b.n	80040c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800409e:	4b0c      	ldr	r3, [pc, #48]	@ (80040d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a0b      	ldr	r2, [pc, #44]	@ (80040d0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80040a4:	f023 0304 	bic.w	r3, r3, #4
 80040a8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80040aa:	4b0a      	ldr	r3, [pc, #40]	@ (80040d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80040ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040b0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80040b4:	4a07      	ldr	r2, [pc, #28]	@ (80040d4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80040b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80040be:	e000      	b.n	80040c2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80040c0:	bf00      	nop
  }
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e010 	.word	0xe000e010
 80040d4:	46020c00 	.word	0x46020c00

080040d8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e054      	b.n	8004194 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	7f5b      	ldrb	r3, [r3, #29]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fc fe82 	bl	8000e04 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	791b      	ldrb	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10c      	bne.n	8004128 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a22      	ldr	r2, [pc, #136]	@ (800419c <HAL_CRC_Init+0xc4>)
 8004114:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0218 	bic.w	r2, r2, #24
 8004124:	609a      	str	r2, [r3, #8]
 8004126:	e00c      	b.n	8004142 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	461a      	mov	r2, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f834 	bl	80041a0 <HAL_CRCEx_Polynomial_Set>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e028      	b.n	8004194 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	795b      	ldrb	r3, [r3, #5]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	611a      	str	r2, [r3, #16]
 8004154:	e004      	b.n	8004160 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6912      	ldr	r2, [r2, #16]
 800415e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695a      	ldr	r2, [r3, #20]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699a      	ldr	r2, [r3, #24]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	04c11db7 	.word	0x04c11db7

080041a0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80041b0:	231f      	movs	r3, #31
 80041b2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d102      	bne.n	80041c4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
 80041c2:	e063      	b.n	800428c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80041c4:	bf00      	nop
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1e5a      	subs	r2, r3, #1
 80041ca:	613a      	str	r2, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_CRCEx_Polynomial_Set+0x44>
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f003 031f 	and.w	r3, r3, #31
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b18      	cmp	r3, #24
 80041e8:	d846      	bhi.n	8004278 <HAL_CRCEx_Polynomial_Set+0xd8>
 80041ea:	a201      	add	r2, pc, #4	@ (adr r2, 80041f0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	0800427f 	.word	0x0800427f
 80041f4:	08004279 	.word	0x08004279
 80041f8:	08004279 	.word	0x08004279
 80041fc:	08004279 	.word	0x08004279
 8004200:	08004279 	.word	0x08004279
 8004204:	08004279 	.word	0x08004279
 8004208:	08004279 	.word	0x08004279
 800420c:	08004279 	.word	0x08004279
 8004210:	0800426d 	.word	0x0800426d
 8004214:	08004279 	.word	0x08004279
 8004218:	08004279 	.word	0x08004279
 800421c:	08004279 	.word	0x08004279
 8004220:	08004279 	.word	0x08004279
 8004224:	08004279 	.word	0x08004279
 8004228:	08004279 	.word	0x08004279
 800422c:	08004279 	.word	0x08004279
 8004230:	08004261 	.word	0x08004261
 8004234:	08004279 	.word	0x08004279
 8004238:	08004279 	.word	0x08004279
 800423c:	08004279 	.word	0x08004279
 8004240:	08004279 	.word	0x08004279
 8004244:	08004279 	.word	0x08004279
 8004248:	08004279 	.word	0x08004279
 800424c:	08004279 	.word	0x08004279
 8004250:	08004255 	.word	0x08004255
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d913      	bls.n	8004282 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800425e:	e010      	b.n	8004282 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b07      	cmp	r3, #7
 8004264:	d90f      	bls.n	8004286 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800426a:	e00c      	b.n	8004286 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	2b0f      	cmp	r3, #15
 8004270:	d90b      	bls.n	800428a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004276:	e008      	b.n	800428a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	75fb      	strb	r3, [r7, #23]
        break;
 800427c:	e006      	b.n	800428c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800427e:	bf00      	nop
 8004280:	e004      	b.n	800428c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004282:	bf00      	nop
 8004284:	e002      	b.n	800428c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004286:	bf00      	nop
 8004288:	e000      	b.n	800428c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800428a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10d      	bne.n	80042ae <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 0118 	bic.w	r1, r3, #24
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	371c      	adds	r7, #28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80042c4:	f7fd fcf0 	bl	8001ca8 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0db      	b.n	800448c <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004494 <HAL_DMA_Init+0x1d8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	f000 809f 	beq.w	800441e <HAL_DMA_Init+0x162>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6c      	ldr	r2, [pc, #432]	@ (8004498 <HAL_DMA_Init+0x1dc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f000 8099 	beq.w	800441e <HAL_DMA_Init+0x162>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a6a      	ldr	r2, [pc, #424]	@ (800449c <HAL_DMA_Init+0x1e0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	f000 8093 	beq.w	800441e <HAL_DMA_Init+0x162>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a68      	ldr	r2, [pc, #416]	@ (80044a0 <HAL_DMA_Init+0x1e4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	f000 808d 	beq.w	800441e <HAL_DMA_Init+0x162>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a66      	ldr	r2, [pc, #408]	@ (80044a4 <HAL_DMA_Init+0x1e8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	f000 8087 	beq.w	800441e <HAL_DMA_Init+0x162>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a64      	ldr	r2, [pc, #400]	@ (80044a8 <HAL_DMA_Init+0x1ec>)
 8004316:	4293      	cmp	r3, r2
 8004318:	f000 8081 	beq.w	800441e <HAL_DMA_Init+0x162>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a62      	ldr	r2, [pc, #392]	@ (80044ac <HAL_DMA_Init+0x1f0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d07b      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a61      	ldr	r2, [pc, #388]	@ (80044b0 <HAL_DMA_Init+0x1f4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d076      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a5f      	ldr	r2, [pc, #380]	@ (80044b4 <HAL_DMA_Init+0x1f8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d071      	beq.n	800441e <HAL_DMA_Init+0x162>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a5e      	ldr	r2, [pc, #376]	@ (80044b8 <HAL_DMA_Init+0x1fc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d06c      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a5c      	ldr	r2, [pc, #368]	@ (80044bc <HAL_DMA_Init+0x200>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d067      	beq.n	800441e <HAL_DMA_Init+0x162>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a5b      	ldr	r2, [pc, #364]	@ (80044c0 <HAL_DMA_Init+0x204>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d062      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a59      	ldr	r2, [pc, #356]	@ (80044c4 <HAL_DMA_Init+0x208>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d05d      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a58      	ldr	r2, [pc, #352]	@ (80044c8 <HAL_DMA_Init+0x20c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d058      	beq.n	800441e <HAL_DMA_Init+0x162>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a56      	ldr	r2, [pc, #344]	@ (80044cc <HAL_DMA_Init+0x210>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d053      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a55      	ldr	r2, [pc, #340]	@ (80044d0 <HAL_DMA_Init+0x214>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d04e      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a53      	ldr	r2, [pc, #332]	@ (80044d4 <HAL_DMA_Init+0x218>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d049      	beq.n	800441e <HAL_DMA_Init+0x162>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a52      	ldr	r2, [pc, #328]	@ (80044d8 <HAL_DMA_Init+0x21c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d044      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a50      	ldr	r2, [pc, #320]	@ (80044dc <HAL_DMA_Init+0x220>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d03f      	beq.n	800441e <HAL_DMA_Init+0x162>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a4f      	ldr	r2, [pc, #316]	@ (80044e0 <HAL_DMA_Init+0x224>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d03a      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a4d      	ldr	r2, [pc, #308]	@ (80044e4 <HAL_DMA_Init+0x228>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d035      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a4c      	ldr	r2, [pc, #304]	@ (80044e8 <HAL_DMA_Init+0x22c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d030      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a4a      	ldr	r2, [pc, #296]	@ (80044ec <HAL_DMA_Init+0x230>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d02b      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a49      	ldr	r2, [pc, #292]	@ (80044f0 <HAL_DMA_Init+0x234>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d026      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a47      	ldr	r2, [pc, #284]	@ (80044f4 <HAL_DMA_Init+0x238>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d021      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a46      	ldr	r2, [pc, #280]	@ (80044f8 <HAL_DMA_Init+0x23c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d01c      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a44      	ldr	r2, [pc, #272]	@ (80044fc <HAL_DMA_Init+0x240>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d017      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a43      	ldr	r2, [pc, #268]	@ (8004500 <HAL_DMA_Init+0x244>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d012      	beq.n	800441e <HAL_DMA_Init+0x162>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a41      	ldr	r2, [pc, #260]	@ (8004504 <HAL_DMA_Init+0x248>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00d      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a40      	ldr	r2, [pc, #256]	@ (8004508 <HAL_DMA_Init+0x24c>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d008      	beq.n	800441e <HAL_DMA_Init+0x162>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a3e      	ldr	r2, [pc, #248]	@ (800450c <HAL_DMA_Init+0x250>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <HAL_DMA_Init+0x162>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a3d      	ldr	r2, [pc, #244]	@ (8004510 <HAL_DMA_Init+0x254>)
 800441c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0206 	orr.w	r2, r2, #6
 800443c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800443e:	e00f      	b.n	8004460 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004440:	f7fd fc32 	bl	8001ca8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b05      	cmp	r3, #5
 800444c:	d908      	bls.n	8004460 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2210      	movs	r2, #16
 8004452:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2203      	movs	r2, #3
 8004458:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e015      	b.n	800448c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e8      	bne.n	8004440 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 faa8 	bl	80049c4 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40020050 	.word	0x40020050
 8004498:	50020050 	.word	0x50020050
 800449c:	400200d0 	.word	0x400200d0
 80044a0:	500200d0 	.word	0x500200d0
 80044a4:	40020150 	.word	0x40020150
 80044a8:	50020150 	.word	0x50020150
 80044ac:	400201d0 	.word	0x400201d0
 80044b0:	500201d0 	.word	0x500201d0
 80044b4:	40020250 	.word	0x40020250
 80044b8:	50020250 	.word	0x50020250
 80044bc:	400202d0 	.word	0x400202d0
 80044c0:	500202d0 	.word	0x500202d0
 80044c4:	40020350 	.word	0x40020350
 80044c8:	50020350 	.word	0x50020350
 80044cc:	400203d0 	.word	0x400203d0
 80044d0:	500203d0 	.word	0x500203d0
 80044d4:	40020450 	.word	0x40020450
 80044d8:	50020450 	.word	0x50020450
 80044dc:	400204d0 	.word	0x400204d0
 80044e0:	500204d0 	.word	0x500204d0
 80044e4:	40020550 	.word	0x40020550
 80044e8:	50020550 	.word	0x50020550
 80044ec:	400205d0 	.word	0x400205d0
 80044f0:	500205d0 	.word	0x500205d0
 80044f4:	40020650 	.word	0x40020650
 80044f8:	50020650 	.word	0x50020650
 80044fc:	400206d0 	.word	0x400206d0
 8004500:	500206d0 	.word	0x500206d0
 8004504:	40020750 	.word	0x40020750
 8004508:	50020750 	.word	0x50020750
 800450c:	400207d0 	.word	0x400207d0
 8004510:	500207d0 	.word	0x500207d0

08004514 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e04f      	b.n	80045cc <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_DMA_Start_IT+0x26>
 8004536:	2302      	movs	r3, #2
 8004538:	e048      	b.n	80045cc <HAL_DMA_Start_IT+0xb8>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d136      	bne.n	80045bc <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	68b9      	ldr	r1, [r7, #8]
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fa08 	bl	8004978 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695a      	ldr	r2, [r3, #20]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004576:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695a      	ldr	r2, [r3, #20]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800458e:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045a6:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0201 	orr.w	r2, r2, #1
 80045b6:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	e007      	b.n	80045cc <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2240      	movs	r2, #64	@ 0x40
 80045c0:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e019      	b.n	800461a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d004      	beq.n	80045fc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2220      	movs	r2, #32
 80045f6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e00e      	b.n	800461a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2204      	movs	r2, #4
 8004600:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004612:	f043 0304 	orr.w	r3, r3, #4
 8004616:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b086      	sub	sp, #24
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004636:	f023 030f 	bic.w	r3, r3, #15
 800463a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	3b50      	subs	r3, #80	@ 0x50
 8004646:	09db      	lsrs	r3, r3, #7
 8004648:	f003 031f 	and.w	r3, r3, #31
 800464c:	2201      	movs	r2, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 813b 	beq.w	80048dc <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800468a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d011      	beq.n	80046ca <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80046bc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c2:	f043 0202 	orr.w	r2, r3, #2
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d011      	beq.n	80046fc <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80046ee:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f4:	f043 0204 	orr.w	r2, r3, #4
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d011      	beq.n	800472e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	695b      	ldr	r3, [r3, #20]
 8004710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004720:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004726:	f043 0208 	orr.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004738:	2b00      	cmp	r3, #0
 800473a:	d013      	beq.n	8004764 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00c      	beq.n	8004764 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004752:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d04c      	beq.n	800480c <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d045      	beq.n	800480c <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004788:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b04      	cmp	r3, #4
 8004794:	d12e      	bne.n	80047f4 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695a      	ldr	r2, [r3, #20]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047a4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0202 	orr.w	r2, r2, #2
 80047b4:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ce:	2201      	movs	r2, #1
 80047d0:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d07a      	beq.n	80048e0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	4798      	blx	r3
        }

        return;
 80047f2:	e075      	b.n	80048e0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2205      	movs	r2, #5
 80047f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d039      	beq.n	800488e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d032      	beq.n	800488e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004830:	2b00      	cmp	r3, #0
 8004832:	d012      	beq.n	800485a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d116      	bne.n	800486c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004844:	2b00      	cmp	r3, #0
 8004846:	d111      	bne.n	800486c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004854:	2201      	movs	r2, #1
 8004856:	731a      	strb	r2, [r3, #12]
 8004858:	e008      	b.n	800486c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004860:	2b00      	cmp	r3, #0
 8004862:	d103      	bne.n	800486c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004874:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004892:	2b00      	cmp	r3, #0
 8004894:	d025      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695a      	ldr	r2, [r3, #20]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0202 	orr.w	r2, r2, #2
 80048a4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048be:	2201      	movs	r2, #1
 80048c0:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
 80048da:	e002      	b.n	80048e2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80048dc:	bf00      	nop
 80048de:	e000      	b.n	80048e2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80048e0:	bf00      	nop
    }
  }
}
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_DMA_GetError>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA Error Code.
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef const *const hdma)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel error code */
  return hdma->ErrorCode;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e02b      	b.n	800496c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800491c:	f023 030f 	bic.w	r3, r3, #15
 8004920:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800492a:	3b50      	subs	r3, #80	@ 0x50
 800492c:	09db      	lsrs	r3, r3, #7
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2201      	movs	r2, #1
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	2b00      	cmp	r3, #0
 8004942:	d012      	beq.n	800496a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f003 0311 	and.w	r3, r3, #17
 800494a:	2b11      	cmp	r3, #17
 800494c:	d106      	bne.n	800495c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	431a      	orrs	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	e006      	b.n	800496a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	43db      	mvns	r3, r3
 8004964:	401a      	ands	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	b291      	uxth	r1, r2
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	6812      	ldr	r2, [r2, #0]
 8004998:	430b      	orrs	r3, r1
 800499a:	6493      	str	r3, [r2, #72]	@ 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f44f 42fe 	mov.w	r2, #32512	@ 0x7f00
 80049a4:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	695a      	ldr	r2, [r3, #20]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a53      	ldr	r2, [pc, #332]	@ (8004b50 <DMA_Init+0x18c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	f000 80a0 	beq.w	8004b4a <DMA_Init+0x186>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a51      	ldr	r2, [pc, #324]	@ (8004b54 <DMA_Init+0x190>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	f000 809a 	beq.w	8004b4a <DMA_Init+0x186>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a4f      	ldr	r2, [pc, #316]	@ (8004b58 <DMA_Init+0x194>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f000 8094 	beq.w	8004b4a <DMA_Init+0x186>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a4d      	ldr	r2, [pc, #308]	@ (8004b5c <DMA_Init+0x198>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	f000 808e 	beq.w	8004b4a <DMA_Init+0x186>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4b      	ldr	r2, [pc, #300]	@ (8004b60 <DMA_Init+0x19c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	f000 8088 	beq.w	8004b4a <DMA_Init+0x186>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a49      	ldr	r2, [pc, #292]	@ (8004b64 <DMA_Init+0x1a0>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	f000 8082 	beq.w	8004b4a <DMA_Init+0x186>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a47      	ldr	r2, [pc, #284]	@ (8004b68 <DMA_Init+0x1a4>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d07c      	beq.n	8004b4a <DMA_Init+0x186>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a45      	ldr	r2, [pc, #276]	@ (8004b6c <DMA_Init+0x1a8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d077      	beq.n	8004b4a <DMA_Init+0x186>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a44      	ldr	r2, [pc, #272]	@ (8004b70 <DMA_Init+0x1ac>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d072      	beq.n	8004b4a <DMA_Init+0x186>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a42      	ldr	r2, [pc, #264]	@ (8004b74 <DMA_Init+0x1b0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d06d      	beq.n	8004b4a <DMA_Init+0x186>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a41      	ldr	r2, [pc, #260]	@ (8004b78 <DMA_Init+0x1b4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d068      	beq.n	8004b4a <DMA_Init+0x186>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b7c <DMA_Init+0x1b8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d063      	beq.n	8004b4a <DMA_Init+0x186>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a3e      	ldr	r2, [pc, #248]	@ (8004b80 <DMA_Init+0x1bc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d05e      	beq.n	8004b4a <DMA_Init+0x186>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a3c      	ldr	r2, [pc, #240]	@ (8004b84 <DMA_Init+0x1c0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d059      	beq.n	8004b4a <DMA_Init+0x186>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8004b88 <DMA_Init+0x1c4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d054      	beq.n	8004b4a <DMA_Init+0x186>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a39      	ldr	r2, [pc, #228]	@ (8004b8c <DMA_Init+0x1c8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d04f      	beq.n	8004b4a <DMA_Init+0x186>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a38      	ldr	r2, [pc, #224]	@ (8004b90 <DMA_Init+0x1cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d04a      	beq.n	8004b4a <DMA_Init+0x186>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a36      	ldr	r2, [pc, #216]	@ (8004b94 <DMA_Init+0x1d0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d045      	beq.n	8004b4a <DMA_Init+0x186>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a35      	ldr	r2, [pc, #212]	@ (8004b98 <DMA_Init+0x1d4>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d040      	beq.n	8004b4a <DMA_Init+0x186>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a33      	ldr	r2, [pc, #204]	@ (8004b9c <DMA_Init+0x1d8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d03b      	beq.n	8004b4a <DMA_Init+0x186>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a32      	ldr	r2, [pc, #200]	@ (8004ba0 <DMA_Init+0x1dc>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d036      	beq.n	8004b4a <DMA_Init+0x186>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a30      	ldr	r2, [pc, #192]	@ (8004ba4 <DMA_Init+0x1e0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d031      	beq.n	8004b4a <DMA_Init+0x186>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a2f      	ldr	r2, [pc, #188]	@ (8004ba8 <DMA_Init+0x1e4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d02c      	beq.n	8004b4a <DMA_Init+0x186>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a2d      	ldr	r2, [pc, #180]	@ (8004bac <DMA_Init+0x1e8>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d027      	beq.n	8004b4a <DMA_Init+0x186>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb0 <DMA_Init+0x1ec>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d022      	beq.n	8004b4a <DMA_Init+0x186>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	@ (8004bb4 <DMA_Init+0x1f0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01d      	beq.n	8004b4a <DMA_Init+0x186>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a29      	ldr	r2, [pc, #164]	@ (8004bb8 <DMA_Init+0x1f4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d018      	beq.n	8004b4a <DMA_Init+0x186>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a27      	ldr	r2, [pc, #156]	@ (8004bbc <DMA_Init+0x1f8>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d013      	beq.n	8004b4a <DMA_Init+0x186>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a26      	ldr	r2, [pc, #152]	@ (8004bc0 <DMA_Init+0x1fc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00e      	beq.n	8004b4a <DMA_Init+0x186>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a24      	ldr	r2, [pc, #144]	@ (8004bc4 <DMA_Init+0x200>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d009      	beq.n	8004b4a <DMA_Init+0x186>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a23      	ldr	r2, [pc, #140]	@ (8004bc8 <DMA_Init+0x204>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d004      	beq.n	8004b4a <DMA_Init+0x186>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a21      	ldr	r2, [pc, #132]	@ (8004bcc <DMA_Init+0x208>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d142      	bne.n	8004bd0 <DMA_Init+0x20c>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e041      	b.n	8004bd2 <DMA_Init+0x20e>
 8004b4e:	bf00      	nop
 8004b50:	40020050 	.word	0x40020050
 8004b54:	50020050 	.word	0x50020050
 8004b58:	400200d0 	.word	0x400200d0
 8004b5c:	500200d0 	.word	0x500200d0
 8004b60:	40020150 	.word	0x40020150
 8004b64:	50020150 	.word	0x50020150
 8004b68:	400201d0 	.word	0x400201d0
 8004b6c:	500201d0 	.word	0x500201d0
 8004b70:	40020250 	.word	0x40020250
 8004b74:	50020250 	.word	0x50020250
 8004b78:	400202d0 	.word	0x400202d0
 8004b7c:	500202d0 	.word	0x500202d0
 8004b80:	40020350 	.word	0x40020350
 8004b84:	50020350 	.word	0x50020350
 8004b88:	400203d0 	.word	0x400203d0
 8004b8c:	500203d0 	.word	0x500203d0
 8004b90:	40020450 	.word	0x40020450
 8004b94:	50020450 	.word	0x50020450
 8004b98:	400204d0 	.word	0x400204d0
 8004b9c:	500204d0 	.word	0x500204d0
 8004ba0:	40020550 	.word	0x40020550
 8004ba4:	50020550 	.word	0x50020550
 8004ba8:	400205d0 	.word	0x400205d0
 8004bac:	500205d0 	.word	0x500205d0
 8004bb0:	40020650 	.word	0x40020650
 8004bb4:	50020650 	.word	0x50020650
 8004bb8:	400206d0 	.word	0x400206d0
 8004bbc:	500206d0 	.word	0x500206d0
 8004bc0:	40020750 	.word	0x40020750
 8004bc4:	50020750 	.word	0x50020750
 8004bc8:	400207d0 	.word	0x400207d0
 8004bcc:	500207d0 	.word	0x500207d0
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d012      	beq.n	8004bfc <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	3b01      	subs	r3, #1
 8004be0:	051b      	lsls	r3, r3, #20
 8004be2:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004be6:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bec:	3b01      	subs	r3, #1
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004bf4:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c2e:	f040 80b0 	bne.w	8004d92 <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a82      	ldr	r2, [pc, #520]	@ (8004e40 <DMA_Init+0x47c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	f000 80a0 	beq.w	8004d7e <DMA_Init+0x3ba>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a80      	ldr	r2, [pc, #512]	@ (8004e44 <DMA_Init+0x480>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	f000 809a 	beq.w	8004d7e <DMA_Init+0x3ba>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e48 <DMA_Init+0x484>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	f000 8094 	beq.w	8004d7e <DMA_Init+0x3ba>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e4c <DMA_Init+0x488>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	f000 808e 	beq.w	8004d7e <DMA_Init+0x3ba>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a7a      	ldr	r2, [pc, #488]	@ (8004e50 <DMA_Init+0x48c>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	f000 8088 	beq.w	8004d7e <DMA_Init+0x3ba>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a78      	ldr	r2, [pc, #480]	@ (8004e54 <DMA_Init+0x490>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f000 8082 	beq.w	8004d7e <DMA_Init+0x3ba>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a76      	ldr	r2, [pc, #472]	@ (8004e58 <DMA_Init+0x494>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d07c      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a74      	ldr	r2, [pc, #464]	@ (8004e5c <DMA_Init+0x498>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d077      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a73      	ldr	r2, [pc, #460]	@ (8004e60 <DMA_Init+0x49c>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d072      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a71      	ldr	r2, [pc, #452]	@ (8004e64 <DMA_Init+0x4a0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d06d      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a70      	ldr	r2, [pc, #448]	@ (8004e68 <DMA_Init+0x4a4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d068      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8004e6c <DMA_Init+0x4a8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d063      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a6d      	ldr	r2, [pc, #436]	@ (8004e70 <DMA_Init+0x4ac>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d05e      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a6b      	ldr	r2, [pc, #428]	@ (8004e74 <DMA_Init+0x4b0>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d059      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a6a      	ldr	r2, [pc, #424]	@ (8004e78 <DMA_Init+0x4b4>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d054      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a68      	ldr	r2, [pc, #416]	@ (8004e7c <DMA_Init+0x4b8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04f      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a67      	ldr	r2, [pc, #412]	@ (8004e80 <DMA_Init+0x4bc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a65      	ldr	r2, [pc, #404]	@ (8004e84 <DMA_Init+0x4c0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a64      	ldr	r2, [pc, #400]	@ (8004e88 <DMA_Init+0x4c4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a62      	ldr	r2, [pc, #392]	@ (8004e8c <DMA_Init+0x4c8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a61      	ldr	r2, [pc, #388]	@ (8004e90 <DMA_Init+0x4cc>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a5f      	ldr	r2, [pc, #380]	@ (8004e94 <DMA_Init+0x4d0>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a5e      	ldr	r2, [pc, #376]	@ (8004e98 <DMA_Init+0x4d4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a5c      	ldr	r2, [pc, #368]	@ (8004e9c <DMA_Init+0x4d8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a5b      	ldr	r2, [pc, #364]	@ (8004ea0 <DMA_Init+0x4dc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a59      	ldr	r2, [pc, #356]	@ (8004ea4 <DMA_Init+0x4e0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a58      	ldr	r2, [pc, #352]	@ (8004ea8 <DMA_Init+0x4e4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a56      	ldr	r2, [pc, #344]	@ (8004eac <DMA_Init+0x4e8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a55      	ldr	r2, [pc, #340]	@ (8004eb0 <DMA_Init+0x4ec>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a53      	ldr	r2, [pc, #332]	@ (8004eb4 <DMA_Init+0x4f0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a52      	ldr	r2, [pc, #328]	@ (8004eb8 <DMA_Init+0x4f4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <DMA_Init+0x3ba>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a50      	ldr	r2, [pc, #320]	@ (8004ebc <DMA_Init+0x4f8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <DMA_Init+0x3be>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <DMA_Init+0x3c0>
 8004d82:	2300      	movs	r3, #0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00d      	beq.n	8004da4 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e008      	b.n	8004da4 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d9a:	d103      	bne.n	8004da4 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004da2:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004daa:	4b45      	ldr	r3, [pc, #276]	@ (8004ec0 <DMA_Init+0x4fc>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a36      	ldr	r2, [pc, #216]	@ (8004ea0 <DMA_Init+0x4dc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d022      	beq.n	8004e10 <DMA_Init+0x44c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a35      	ldr	r2, [pc, #212]	@ (8004ea4 <DMA_Init+0x4e0>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d01d      	beq.n	8004e10 <DMA_Init+0x44c>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a33      	ldr	r2, [pc, #204]	@ (8004ea8 <DMA_Init+0x4e4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d018      	beq.n	8004e10 <DMA_Init+0x44c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a32      	ldr	r2, [pc, #200]	@ (8004eac <DMA_Init+0x4e8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d013      	beq.n	8004e10 <DMA_Init+0x44c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a30      	ldr	r2, [pc, #192]	@ (8004eb0 <DMA_Init+0x4ec>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00e      	beq.n	8004e10 <DMA_Init+0x44c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb4 <DMA_Init+0x4f0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d009      	beq.n	8004e10 <DMA_Init+0x44c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb8 <DMA_Init+0x4f4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d004      	beq.n	8004e10 <DMA_Init+0x44c>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8004ebc <DMA_Init+0x4f8>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d101      	bne.n	8004e14 <DMA_Init+0x450>
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <DMA_Init+0x452>
 8004e14:	2300      	movs	r3, #0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2200      	movs	r2, #0
 8004e28:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004e32:	bf00      	nop
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40020050 	.word	0x40020050
 8004e44:	50020050 	.word	0x50020050
 8004e48:	400200d0 	.word	0x400200d0
 8004e4c:	500200d0 	.word	0x500200d0
 8004e50:	40020150 	.word	0x40020150
 8004e54:	50020150 	.word	0x50020150
 8004e58:	400201d0 	.word	0x400201d0
 8004e5c:	500201d0 	.word	0x500201d0
 8004e60:	40020250 	.word	0x40020250
 8004e64:	50020250 	.word	0x50020250
 8004e68:	400202d0 	.word	0x400202d0
 8004e6c:	500202d0 	.word	0x500202d0
 8004e70:	40020350 	.word	0x40020350
 8004e74:	50020350 	.word	0x50020350
 8004e78:	400203d0 	.word	0x400203d0
 8004e7c:	500203d0 	.word	0x500203d0
 8004e80:	40020450 	.word	0x40020450
 8004e84:	50020450 	.word	0x50020450
 8004e88:	400204d0 	.word	0x400204d0
 8004e8c:	500204d0 	.word	0x500204d0
 8004e90:	40020550 	.word	0x40020550
 8004e94:	50020550 	.word	0x50020550
 8004e98:	400205d0 	.word	0x400205d0
 8004e9c:	500205d0 	.word	0x500205d0
 8004ea0:	40020650 	.word	0x40020650
 8004ea4:	50020650 	.word	0x50020650
 8004ea8:	400206d0 	.word	0x400206d0
 8004eac:	500206d0 	.word	0x500206d0
 8004eb0:	40020750 	.word	0x40020750
 8004eb4:	50020750 	.word	0x50020750
 8004eb8:	400207d0 	.word	0x400207d0
 8004ebc:	500207d0 	.word	0x500207d0
 8004ec0:	3cc03180 	.word	0x3cc03180

08004ec4 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_DMAEx_List_Start_IT+0x16>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e082      	b.n	8004fe4 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004ee4:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef0:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004ef2:	7dfb      	ldrb	r3, [r7, #23]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d005      	beq.n	8004f04 <HAL_DMAEx_List_Start_IT+0x40>
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d16a      	bne.n	8004fd4 <HAL_DMAEx_List_Start_IT+0x110>
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d067      	beq.n	8004fd4 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d157      	bne.n	8004fc0 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d101      	bne.n	8004f1e <HAL_DMAEx_List_Start_IT+0x5a>
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e062      	b.n	8004fe4 <HAL_DMAEx_List_Start_IT+0x120>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2202      	movs	r2, #2
 8004f2a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f32:	2202      	movs	r2, #2
 8004f34:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	659a      	str	r2, [r3, #88]	@ 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f40:	2200      	movs	r2, #0
 8004f42:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	695a      	ldr	r2, [r3, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 42ba 	orr.w	r2, r2, #23808	@ 0x5d00
 8004f52:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6a:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f82:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f107 010c 	add.w	r1, r7, #12
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f94b 	bl	800522c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	0c0b      	lsrs	r3, r1, #16
 8004fa4:	041b      	lsls	r3, r3, #16
 8004fa6:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	430b      	orrs	r3, r1
 8004fbe:	67d3      	str	r3, [r2, #124]	@ 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e007      	b.n	8004fe4 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2240      	movs	r2, #64	@ 0x40
 8004fd8:	659a      	str	r2, [r3, #88]	@ 0x58
    __HAL_UNLOCK(hdma);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <HAL_DMAEx_List_GetNodeConfig+0x16>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e004      	b.n	8005010 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 8005006:	6839      	ldr	r1, [r7, #0]
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f805 	bl	8005018 <DMA_List_GetNodeConfig>

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0208 	and.w	r2, r3, #8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 2200 	and.w	r2, r3, #524288	@ 0x80000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0203 	and.w	r2, r3, #3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8005060:	091b      	lsrs	r3, r3, #4
 8005062:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005066:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	625a      	str	r2, [r3, #36]	@ 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8005070:	0d1b      	lsrs	r3, r3, #20
 8005072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005076:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	629a      	str	r2, [r3, #40]	@ 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 2240 	and.w	r2, r3, #1073758208	@ 0x40004000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b66      	ldr	r3, [pc, #408]	@ (8005228 <DMA_List_GetNodeConfig+0x210>)
 800508e:	4013      	ands	r3, r2
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6393      	str	r3, [r2, #56]	@ 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 52c0 	and.w	r2, r3, #6144	@ 0x1800
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050b2:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050ba:	60da      	str	r2, [r3, #12]
 80050bc:	e013      	b.n	80050e6 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d004      	beq.n	80050e0 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050dc:	60da      	str	r2, [r3, #12]
 80050de:	e002      	b.n	80050e6 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 4240 	and.w	r2, r3, #49152	@ 0xc000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	641a      	str	r2, [r3, #64]	@ 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f003 7240 	and.w	r2, r3, #50331648	@ 0x3000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	645a      	str	r2, [r3, #68]	@ 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 800510e:	0c1b      	lsrs	r3, r3, #16
 8005110:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	649a      	str	r2, [r3, #72]	@ 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	669a      	str	r2, [r3, #104]	@ 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005144:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	64da      	str	r2, [r3, #76]	@ 0x4c
 800514a:	e002      	b.n	8005152 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	661a      	str	r2, [r3, #96]	@ 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	665a      	str	r2, [r3, #100]	@ 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d04a      	beq.n	8005204 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005178:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 800517a:	89fa      	ldrh	r2, [r7, #14]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	651a      	str	r2, [r3, #80]	@ 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	b29b      	uxth	r3, r3
 8005188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800518c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 800518e:	89fa      	ldrh	r2, [r7, #14]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	655a      	str	r2, [r3, #84]	@ 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d004      	beq.n	80051aa <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a4:	425a      	negs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d004      	beq.n	80051c0 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ba:	425a      	negs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 80051c6:	89fa      	ldrh	r2, [r7, #14]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	659a      	str	r2, [r3, #88]	@ 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	0c1b      	lsrs	r3, r3, #16
 80051d2:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 80051d4:	89fa      	ldrh	r2, [r7, #14]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ea:	425a      	negs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da11      	bge.n	800521c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051fc:	425a      	negs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8005202:	e00b      	b.n	800521c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	651a      	str	r2, [r3, #80]	@ 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	655a      	str	r2, [r3, #84]	@ 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	659a      	str	r2, [r3, #88]	@ 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	0c002000 	.word	0x0c002000

0800522c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4a0d      	ldr	r2, [pc, #52]	@ (8005284 <DMA_List_GetCLLRNodeInfo+0x58>)
 800524e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00f      	beq.n	8005276 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2207      	movs	r2, #7
 800525a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 800525c:	e00b      	b.n	8005276 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	4a08      	ldr	r2, [pc, #32]	@ (8005288 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005268:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2205      	movs	r2, #5
 8005274:	601a      	str	r2, [r3, #0]
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	fe010000 	.word	0xfe010000
 8005288:	f8010000 	.word	0xf8010000

0800528c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800528c:	b480      	push	{r7}
 800528e:	b089      	sub	sp, #36	@ 0x24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800529e:	e1ba      	b.n	8005616 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	2101      	movs	r1, #1
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	4013      	ands	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 81aa 	beq.w	8005610 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a55      	ldr	r2, [pc, #340]	@ (8005414 <HAL_GPIO_Init+0x188>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d15d      	bne.n	8005380 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80052ca:	2201      	movs	r2, #1
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f003 0201 	and.w	r2, r3, #1
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80052f4:	4a48      	ldr	r2, [pc, #288]	@ (8005418 <HAL_GPIO_Init+0x18c>)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052fc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80052fe:	4a46      	ldr	r2, [pc, #280]	@ (8005418 <HAL_GPIO_Init+0x18c>)
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	08da      	lsrs	r2, r3, #3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3208      	adds	r2, #8
 8005312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005316:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	220f      	movs	r2, #15
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	4013      	ands	r3, r2
 800532c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	220b      	movs	r2, #11
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	4313      	orrs	r3, r2
 8005340:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	08da      	lsrs	r2, r3, #3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	3208      	adds	r2, #8
 800534a:	69f9      	ldr	r1, [r7, #28]
 800534c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	005b      	lsls	r3, r3, #1
 800535a:	2203      	movs	r2, #3
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	43db      	mvns	r3, r3
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	4013      	ands	r3, r2
 8005366:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	2202      	movs	r2, #2
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	4313      	orrs	r3, r2
 8005376:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	69fa      	ldr	r2, [r7, #28]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e067      	b.n	8005450 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x104>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2b12      	cmp	r3, #18
 800538e:	d145      	bne.n	800541c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	08da      	lsrs	r2, r3, #3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3208      	adds	r2, #8
 8005398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	220f      	movs	r2, #15
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	43db      	mvns	r3, r3
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	4013      	ands	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 020f 	and.w	r2, r3, #15
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	fa02 f303 	lsl.w	r3, r2, r3
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	08da      	lsrs	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3208      	adds	r2, #8
 80053d6:	69f9      	ldr	r1, [r7, #28]
 80053d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	2203      	movs	r2, #3
 80053e8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ec:	43db      	mvns	r3, r3
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	4013      	ands	r3, r2
 80053f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 0203 	and.w	r2, r3, #3
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	4313      	orrs	r3, r2
 8005408:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	e01e      	b.n	8005450 <HAL_GPIO_Init+0x1c4>
 8005412:	bf00      	nop
 8005414:	46020000 	.word	0x46020000
 8005418:	0802ed64 	.word	0x0802ed64
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	2203      	movs	r2, #3
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	4013      	ands	r3, r2
 8005432:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f003 0203 	and.w	r2, r3, #3
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	4313      	orrs	r3, r2
 8005448:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d00b      	beq.n	8005470 <HAL_GPIO_Init+0x1e4>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d007      	beq.n	8005470 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005464:	2b11      	cmp	r3, #17
 8005466:	d003      	beq.n	8005470 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b12      	cmp	r3, #18
 800546e:	d130      	bne.n	80054d2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	2203      	movs	r2, #3
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	43db      	mvns	r3, r3
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	4013      	ands	r3, r2
 8005486:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	69fa      	ldr	r2, [r7, #28]
 8005496:	4313      	orrs	r3, r2
 8005498:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80054a6:	2201      	movs	r2, #1
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	43db      	mvns	r3, r3
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	4013      	ands	r3, r2
 80054b4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	f003 0201 	and.w	r2, r3, #1
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	69fa      	ldr	r2, [r7, #28]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d017      	beq.n	800550a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	2203      	movs	r2, #3
 80054e6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ea:	43db      	mvns	r3, r3
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	4013      	ands	r3, r2
 80054f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	005b      	lsls	r3, r3, #1
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	4313      	orrs	r3, r2
 8005502:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d07c      	beq.n	8005610 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005516:	4a47      	ldr	r2, [pc, #284]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	3318      	adds	r3, #24
 800551e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005522:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	220f      	movs	r2, #15
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	69fa      	ldr	r2, [r7, #28]
 8005536:	4013      	ands	r3, r2
 8005538:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0a9a      	lsrs	r2, r3, #10
 800553e:	4b3e      	ldr	r3, [pc, #248]	@ (8005638 <HAL_GPIO_Init+0x3ac>)
 8005540:	4013      	ands	r3, r2
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	f002 0203 	and.w	r2, r2, #3
 8005548:	00d2      	lsls	r2, r2, #3
 800554a:	4093      	lsls	r3, r2
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	4313      	orrs	r3, r2
 8005550:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005552:	4938      	ldr	r1, [pc, #224]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	089b      	lsrs	r3, r3, #2
 8005558:	3318      	adds	r3, #24
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005560:	4b34      	ldr	r3, [pc, #208]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	43db      	mvns	r3, r3
 800556a:	69fa      	ldr	r2, [r7, #28]
 800556c:	4013      	ands	r3, r2
 800556e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d003      	beq.n	8005584 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005584:	4a2b      	ldr	r2, [pc, #172]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800558a:	4b2a      	ldr	r3, [pc, #168]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	43db      	mvns	r3, r3
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	4013      	ands	r3, r2
 8005598:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80055ae:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80055b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 80055b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	43db      	mvns	r3, r3
 80055c0:	69fa      	ldr	r2, [r7, #28]
 80055c2:	4013      	ands	r3, r2
 80055c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80055da:	4a16      	ldr	r2, [pc, #88]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80055e2:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 80055e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	43db      	mvns	r3, r3
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	4013      	ands	r3, r2
 80055f2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4313      	orrs	r3, r2
 8005606:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005608:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <HAL_GPIO_Init+0x3a8>)
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	3301      	adds	r3, #1
 8005614:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	f47f ae3d 	bne.w	80052a0 <HAL_GPIO_Init+0x14>
  }
}
 8005626:	bf00      	nop
 8005628:	bf00      	nop
 800562a:	3724      	adds	r7, #36	@ 0x24
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	46022000 	.word	0x46022000
 8005638:	002f7f7f 	.word	0x002f7f7f

0800563c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	807b      	strh	r3, [r7, #2]
 8005648:	4613      	mov	r3, r2
 800564a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800564c:	787b      	ldrb	r3, [r7, #1]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d003      	beq.n	800565a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005652:	887a      	ldrh	r2, [r7, #2]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005658:	e002      	b.n	8005660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800565a:	887a      	ldrh	r2, [r7, #2]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800567e:	887a      	ldrh	r2, [r7, #2]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4013      	ands	r3, r2
 8005684:	041a      	lsls	r2, r3, #16
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	43d9      	mvns	r1, r3
 800568a:	887b      	ldrh	r3, [r7, #2]
 800568c:	400b      	ands	r3, r1
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	619a      	str	r2, [r3, #24]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80056ac:	4b0b      	ldr	r3, [pc, #44]	@ (80056dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d002      	beq.n	80056be <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
 80056bc:	e007      	b.n	80056ce <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80056be:	4b07      	ldr	r3, [pc, #28]	@ (80056dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 0204 	bic.w	r2, r3, #4
 80056c6:	4905      	ldr	r1, [pc, #20]	@ (80056dc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	600b      	str	r3, [r1, #0]
  }

  return status;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40030400 	.word	0x40030400

080056e0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80056e4:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <HAL_ICACHE_Enable+0x1c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a04      	ldr	r2, [pc, #16]	@ (80056fc <HAL_ICACHE_Enable+0x1c>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40030400 	.word	0x40030400

08005700 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8005708:	4b39      	ldr	r3, [pc, #228]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005710:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d10b      	bne.n	8005732 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d905      	bls.n	800572e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005722:	4b33      	ldr	r3, [pc, #204]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	4a32      	ldr	r2, [pc, #200]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800572c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e057      	b.n	80057e2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005738:	d90a      	bls.n	8005750 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800573a:	4b2d      	ldr	r3, [pc, #180]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4313      	orrs	r3, r2
 8005746:	4a2a      	ldr	r2, [pc, #168]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005748:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800574c:	60d3      	str	r3, [r2, #12]
 800574e:	e007      	b.n	8005760 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005750:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8005758:	4925      	ldr	r1, [pc, #148]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005760:	4b24      	ldr	r3, [pc, #144]	@ (80057f4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a24      	ldr	r2, [pc, #144]	@ (80057f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005766:	fba2 2303 	umull	r2, r3, r2, r3
 800576a:	099b      	lsrs	r3, r3, #6
 800576c:	2232      	movs	r2, #50	@ 0x32
 800576e:	fb02 f303 	mul.w	r3, r2, r3
 8005772:	4a21      	ldr	r2, [pc, #132]	@ (80057f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	3301      	adds	r3, #1
 800577c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800577e:	e002      	b.n	8005786 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	3b01      	subs	r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005786:	4b1a      	ldr	r3, [pc, #104]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d102      	bne.n	8005798 <HAL_PWREx_ControlVoltageScaling+0x98>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f3      	bne.n	8005780 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d01b      	beq.n	80057d6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800579e:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a15      	ldr	r2, [pc, #84]	@ (80057f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	099b      	lsrs	r3, r3, #6
 80057aa:	2232      	movs	r2, #50	@ 0x32
 80057ac:	fb02 f303 	mul.w	r3, r2, r3
 80057b0:	4a11      	ldr	r2, [pc, #68]	@ (80057f8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80057bc:	e002      	b.n	80057c4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80057c4:	4b0a      	ldr	r3, [pc, #40]	@ (80057f0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80057c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f3      	bne.n	80057be <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e000      	b.n	80057e2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	46020800 	.word	0x46020800
 80057f4:	20000004 	.word	0x20000004
 80057f8:	10624dd3 	.word	0x10624dd3

080057fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8005800:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <HAL_PWREx_GetVoltageRange+0x18>)
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005808:	4618      	mov	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	46020800 	.word	0x46020800

08005818 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005820:	4b22      	ldr	r3, [pc, #136]	@ (80058ac <HAL_PWREx_ConfigSupply+0x94>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a22      	ldr	r2, [pc, #136]	@ (80058b0 <HAL_PWREx_ConfigSupply+0x98>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	099b      	lsrs	r3, r3, #6
 800582c:	2232      	movs	r2, #50	@ 0x32
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	4a1f      	ldr	r2, [pc, #124]	@ (80058b0 <HAL_PWREx_ConfigSupply+0x98>)
 8005834:	fba2 2303 	umull	r2, r3, r2, r3
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d113      	bne.n	800586c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8005844:	4b1b      	ldr	r3, [pc, #108]	@ (80058b4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4a1a      	ldr	r2, [pc, #104]	@ (80058b4 <HAL_PWREx_ConfigSupply+0x9c>)
 800584a:	f023 0302 	bic.w	r3, r3, #2
 800584e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005850:	e002      	b.n	8005858 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3b01      	subs	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005858:	4b16      	ldr	r3, [pc, #88]	@ (80058b4 <HAL_PWREx_ConfigSupply+0x9c>)
 800585a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b02      	cmp	r3, #2
 8005862:	d116      	bne.n	8005892 <HAL_PWREx_ConfigSupply+0x7a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f3      	bne.n	8005852 <HAL_PWREx_ConfigSupply+0x3a>
 800586a:	e012      	b.n	8005892 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800586c:	4b11      	ldr	r3, [pc, #68]	@ (80058b4 <HAL_PWREx_ConfigSupply+0x9c>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	4a10      	ldr	r2, [pc, #64]	@ (80058b4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005872:	f043 0302 	orr.w	r3, r3, #2
 8005876:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005878:	e002      	b.n	8005880 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b01      	subs	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8005880:	4b0c      	ldr	r3, [pc, #48]	@ (80058b4 <HAL_PWREx_ConfigSupply+0x9c>)
 8005882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d102      	bne.n	8005892 <HAL_PWREx_ConfigSupply+0x7a>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f3      	bne.n	800587a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e000      	b.n	800589e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000004 	.word	0x20000004
 80058b0:	10624dd3 	.word	0x10624dd3
 80058b4:	46020800 	.word	0x46020800

080058b8 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 80058b8:	b480      	push	{r7}
 80058ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_PWREx_EnableVddA+0x1c>)
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	4a04      	ldr	r2, [pc, #16]	@ (80058d4 <HAL_PWREx_EnableVddA+0x1c>)
 80058c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058c6:	6113      	str	r3, [r2, #16]
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	46020800 	.word	0x46020800

080058d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b08e      	sub	sp, #56	@ 0x38
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	f000 bec8 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058f2:	4b99      	ldr	r3, [pc, #612]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f003 030c 	and.w	r3, r3, #12
 80058fa:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058fc:	4b96      	ldr	r3, [pc, #600]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 816c 	beq.w	8005bec <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_RCC_OscConfig+0x52>
 800591a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591c:	2b0c      	cmp	r3, #12
 800591e:	f040 80de 	bne.w	8005ade <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005924:	2b01      	cmp	r3, #1
 8005926:	f040 80da 	bne.w	8005ade <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f000 bea5 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800593c:	4b86      	ldr	r3, [pc, #536]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d004      	beq.n	8005952 <HAL_RCC_OscConfig+0x7a>
 8005948:	4b83      	ldr	r3, [pc, #524]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005950:	e005      	b.n	800595e <HAL_RCC_OscConfig+0x86>
 8005952:	4b81      	ldr	r3, [pc, #516]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005958:	041b      	lsls	r3, r3, #16
 800595a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800595e:	4293      	cmp	r3, r2
 8005960:	d255      	bcs.n	8005a0e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10a      	bne.n	800597e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	4618      	mov	r0, r3
 800596e:	f001 f9e9 	bl	8006d44 <RCC_SetFlashLatencyFromMSIRange>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f000 be82 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800597e:	4b76      	ldr	r3, [pc, #472]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	4a75      	ldr	r2, [pc, #468]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005984:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005988:	6093      	str	r3, [r2, #8]
 800598a:	4b73      	ldr	r3, [pc, #460]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	4970      	ldr	r1, [pc, #448]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005998:	4313      	orrs	r3, r2
 800599a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80059a4:	d309      	bcc.n	80059ba <HAL_RCC_OscConfig+0xe2>
 80059a6:	4b6c      	ldr	r3, [pc, #432]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	f023 021f 	bic.w	r2, r3, #31
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	4969      	ldr	r1, [pc, #420]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60cb      	str	r3, [r1, #12]
 80059b8:	e07e      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1e0>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	da0a      	bge.n	80059d8 <HAL_RCC_OscConfig+0x100>
 80059c2:	4b65      	ldr	r3, [pc, #404]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	015b      	lsls	r3, r3, #5
 80059d0:	4961      	ldr	r1, [pc, #388]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60cb      	str	r3, [r1, #12]
 80059d6:	e06f      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1e0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059e0:	d30a      	bcc.n	80059f8 <HAL_RCC_OscConfig+0x120>
 80059e2:	4b5d      	ldr	r3, [pc, #372]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	029b      	lsls	r3, r3, #10
 80059f0:	4959      	ldr	r1, [pc, #356]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60cb      	str	r3, [r1, #12]
 80059f6:	e05f      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1e0>
 80059f8:	4b57      	ldr	r3, [pc, #348]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a1b      	ldr	r3, [r3, #32]
 8005a04:	03db      	lsls	r3, r3, #15
 8005a06:	4954      	ldr	r1, [pc, #336]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60cb      	str	r3, [r1, #12]
 8005a0c:	e054      	b.n	8005ab8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005a0e:	4b52      	ldr	r3, [pc, #328]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	4a51      	ldr	r2, [pc, #324]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a18:	6093      	str	r3, [r2, #8]
 8005a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	494c      	ldr	r1, [pc, #304]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a30:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005a34:	d309      	bcc.n	8005a4a <HAL_RCC_OscConfig+0x172>
 8005a36:	4b48      	ldr	r3, [pc, #288]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f023 021f 	bic.w	r2, r3, #31
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4945      	ldr	r1, [pc, #276]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60cb      	str	r3, [r1, #12]
 8005a48:	e028      	b.n	8005a9c <HAL_RCC_OscConfig+0x1c4>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	da0a      	bge.n	8005a68 <HAL_RCC_OscConfig+0x190>
 8005a52:	4b41      	ldr	r3, [pc, #260]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	015b      	lsls	r3, r3, #5
 8005a60:	493d      	ldr	r1, [pc, #244]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60cb      	str	r3, [r1, #12]
 8005a66:	e019      	b.n	8005a9c <HAL_RCC_OscConfig+0x1c4>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a70:	d30a      	bcc.n	8005a88 <HAL_RCC_OscConfig+0x1b0>
 8005a72:	4b39      	ldr	r3, [pc, #228]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	029b      	lsls	r3, r3, #10
 8005a80:	4935      	ldr	r1, [pc, #212]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60cb      	str	r3, [r1, #12]
 8005a86:	e009      	b.n	8005a9c <HAL_RCC_OscConfig+0x1c4>
 8005a88:	4b33      	ldr	r3, [pc, #204]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	03db      	lsls	r3, r3, #15
 8005a96:	4930      	ldr	r1, [pc, #192]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 f94c 	bl	8006d44 <RCC_SetFlashLatencyFromMSIRange>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f000 bde5 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8005ab8:	f001 f8de 	bl	8006c78 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005abc:	4b27      	ldr	r3, [pc, #156]	@ (8005b5c <HAL_RCC_OscConfig+0x284>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fb fb0f 	bl	80010e4 <HAL_InitTick>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8005acc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 808a 	beq.w	8005bea <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8005ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ada:	f000 bdd2 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d066      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8005ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1b      	ldr	r2, [pc, #108]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005aec:	f043 0301 	orr.w	r3, r3, #1
 8005af0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005af2:	f7fc f8d9 	bl	8001ca8 <HAL_GetTick>
 8005af6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005af8:	e009      	b.n	8005b0e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005afa:	f7fc f8d5 	bl	8001ca8 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d902      	bls.n	8005b0e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	f000 bdba 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005b0e:	4b12      	ldr	r3, [pc, #72]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0304 	and.w	r3, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0ef      	beq.n	8005afa <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b24:	6093      	str	r3, [r2, #8]
 8005b26:	4b0c      	ldr	r3, [pc, #48]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b32:	4909      	ldr	r1, [pc, #36]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005b40:	d30e      	bcc.n	8005b60 <HAL_RCC_OscConfig+0x288>
 8005b42:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f023 021f 	bic.w	r2, r3, #31
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	4902      	ldr	r1, [pc, #8]	@ (8005b58 <HAL_RCC_OscConfig+0x280>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60cb      	str	r3, [r1, #12]
 8005b54:	e04a      	b.n	8005bec <HAL_RCC_OscConfig+0x314>
 8005b56:	bf00      	nop
 8005b58:	46020c00 	.word	0x46020c00
 8005b5c:	20000010 	.word	0x20000010
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	da0a      	bge.n	8005b7e <HAL_RCC_OscConfig+0x2a6>
 8005b68:	4b98      	ldr	r3, [pc, #608]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a1b      	ldr	r3, [r3, #32]
 8005b74:	015b      	lsls	r3, r3, #5
 8005b76:	4995      	ldr	r1, [pc, #596]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60cb      	str	r3, [r1, #12]
 8005b7c:	e036      	b.n	8005bec <HAL_RCC_OscConfig+0x314>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b86:	d30a      	bcc.n	8005b9e <HAL_RCC_OscConfig+0x2c6>
 8005b88:	4b90      	ldr	r3, [pc, #576]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	498d      	ldr	r1, [pc, #564]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60cb      	str	r3, [r1, #12]
 8005b9c:	e026      	b.n	8005bec <HAL_RCC_OscConfig+0x314>
 8005b9e:	4b8b      	ldr	r3, [pc, #556]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	03db      	lsls	r3, r3, #15
 8005bac:	4987      	ldr	r1, [pc, #540]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60cb      	str	r3, [r1, #12]
 8005bb2:	e01b      	b.n	8005bec <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005bb4:	4b85      	ldr	r3, [pc, #532]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a84      	ldr	r2, [pc, #528]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005bc0:	f7fc f872 	bl	8001ca8 <HAL_GetTick>
 8005bc4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005bc6:	e009      	b.n	8005bdc <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bc8:	f7fc f86e 	bl	8001ca8 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d902      	bls.n	8005bdc <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	f000 bd53 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005bdc:	4b7b      	ldr	r3, [pc, #492]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1ef      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x2f0>
 8005be8:	e000      	b.n	8005bec <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005bea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 808b 	beq.w	8005d10 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d005      	beq.n	8005c0c <HAL_RCC_OscConfig+0x334>
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	2b0c      	cmp	r3, #12
 8005c04:	d109      	bne.n	8005c1a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c08:	2b03      	cmp	r3, #3
 8005c0a:	d106      	bne.n	8005c1a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d17d      	bne.n	8005d10 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f000 bd34 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c22:	d106      	bne.n	8005c32 <HAL_RCC_OscConfig+0x35a>
 8005c24:	4b69      	ldr	r3, [pc, #420]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a68      	ldr	r2, [pc, #416]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c2e:	6013      	str	r3, [r2, #0]
 8005c30:	e041      	b.n	8005cb6 <HAL_RCC_OscConfig+0x3de>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c3a:	d112      	bne.n	8005c62 <HAL_RCC_OscConfig+0x38a>
 8005c3c:	4b63      	ldr	r3, [pc, #396]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a62      	ldr	r2, [pc, #392]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	4b60      	ldr	r3, [pc, #384]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a5f      	ldr	r2, [pc, #380]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c4e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	4b5d      	ldr	r3, [pc, #372]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a5c      	ldr	r2, [pc, #368]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	e029      	b.n	8005cb6 <HAL_RCC_OscConfig+0x3de>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005c6a:	d112      	bne.n	8005c92 <HAL_RCC_OscConfig+0x3ba>
 8005c6c:	4b57      	ldr	r3, [pc, #348]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a56      	ldr	r2, [pc, #344]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	4b54      	ldr	r3, [pc, #336]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a53      	ldr	r2, [pc, #332]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c82:	6013      	str	r3, [r2, #0]
 8005c84:	4b51      	ldr	r3, [pc, #324]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a50      	ldr	r2, [pc, #320]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	e011      	b.n	8005cb6 <HAL_RCC_OscConfig+0x3de>
 8005c92:	4b4e      	ldr	r3, [pc, #312]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a4d      	ldr	r2, [pc, #308]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005ca4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b48      	ldr	r3, [pc, #288]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a47      	ldr	r2, [pc, #284]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005cb0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005cb4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d014      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8005cbe:	f7fb fff3 	bl	8001ca8 <HAL_GetTick>
 8005cc2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cc4:	e009      	b.n	8005cda <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cc6:	f7fb ffef 	bl	8001ca8 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b64      	cmp	r3, #100	@ 0x64
 8005cd2:	d902      	bls.n	8005cda <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	f000 bcd4 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cda:	4b3c      	ldr	r3, [pc, #240]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0ef      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x3ee>
 8005ce6:	e013      	b.n	8005d10 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005ce8:	f7fb ffde 	bl	8001ca8 <HAL_GetTick>
 8005cec:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cee:	e009      	b.n	8005d04 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cf0:	f7fb ffda 	bl	8001ca8 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b64      	cmp	r3, #100	@ 0x64
 8005cfc:	d902      	bls.n	8005d04 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	f000 bcbf 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d04:	4b31      	ldr	r3, [pc, #196]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1ef      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d05f      	beq.n	8005ddc <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	2b04      	cmp	r3, #4
 8005d20:	d005      	beq.n	8005d2e <HAL_RCC_OscConfig+0x456>
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	d114      	bne.n	8005d52 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d111      	bne.n	8005d52 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f000 bca3 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005d3c:	4b23      	ldr	r3, [pc, #140]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	4920      	ldr	r1, [pc, #128]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005d50:	e044      	b.n	8005ddc <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d024      	beq.n	8005da4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005d66:	f7fb ff9f 	bl	8001ca8 <HAL_GetTick>
 8005d6a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d6c:	e009      	b.n	8005d82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d6e:	f7fb ff9b 	bl	8001ca8 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d902      	bls.n	8005d82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	f000 bc80 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d82:	4b12      	ldr	r3, [pc, #72]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ef      	beq.n	8005d6e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	041b      	lsls	r3, r3, #16
 8005d9c:	490b      	ldr	r1, [pc, #44]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	610b      	str	r3, [r1, #16]
 8005da2:	e01b      	b.n	8005ddc <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005da4:	4b09      	ldr	r3, [pc, #36]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a08      	ldr	r2, [pc, #32]	@ (8005dcc <HAL_RCC_OscConfig+0x4f4>)
 8005daa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005db0:	f7fb ff7a 	bl	8001ca8 <HAL_GetTick>
 8005db4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005db6:	e00b      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005db8:	f7fb ff76 	bl	8001ca8 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d904      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	f000 bc5b 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
 8005dcc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005dd0:	4baf      	ldr	r3, [pc, #700]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1ed      	bne.n	8005db8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0308 	and.w	r3, r3, #8
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 80c8 	beq.w	8005f7a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005dea:	2300      	movs	r3, #0
 8005dec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005df0:	4ba7      	ldr	r3, [pc, #668]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df6:	f003 0304 	and.w	r3, r3, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d111      	bne.n	8005e22 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfe:	4ba4      	ldr	r3, [pc, #656]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e04:	4aa2      	ldr	r2, [pc, #648]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005e06:	f043 0304 	orr.w	r3, r3, #4
 8005e0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005e0e:	4ba0      	ldr	r3, [pc, #640]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	617b      	str	r3, [r7, #20]
 8005e1a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005e22:	4b9c      	ldr	r3, [pc, #624]	@ (8006094 <HAL_RCC_OscConfig+0x7bc>)
 8005e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d119      	bne.n	8005e62 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005e2e:	4b99      	ldr	r3, [pc, #612]	@ (8006094 <HAL_RCC_OscConfig+0x7bc>)
 8005e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e32:	4a98      	ldr	r2, [pc, #608]	@ (8006094 <HAL_RCC_OscConfig+0x7bc>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e3a:	f7fb ff35 	bl	8001ca8 <HAL_GetTick>
 8005e3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005e40:	e009      	b.n	8005e56 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e42:	f7fb ff31 	bl	8001ca8 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d902      	bls.n	8005e56 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	f000 bc16 	b.w	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005e56:	4b8f      	ldr	r3, [pc, #572]	@ (8006094 <HAL_RCC_OscConfig+0x7bc>)
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0ef      	beq.n	8005e42 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d05f      	beq.n	8005f2a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005e6a:	4b89      	ldr	r3, [pc, #548]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e70:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d037      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d006      	beq.n	8005e98 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e3f4      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d01b      	beq.n	8005eda <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005ea2:	4b7b      	ldr	r3, [pc, #492]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ea8:	4a79      	ldr	r2, [pc, #484]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005eaa:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005eae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8005eb2:	f7fb fef9 	bl	8001ca8 <HAL_GetTick>
 8005eb6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eba:	f7fb fef5 	bl	8001ca8 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b05      	cmp	r3, #5
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e3da      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005ecc:	4b70      	ldr	r3, [pc, #448]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005ece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ed2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1ef      	bne.n	8005eba <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005eda:	4b6d      	ldr	r3, [pc, #436]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ee0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	4969      	ldr	r1, [pc, #420]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005ef0:	4b67      	ldr	r3, [pc, #412]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ef6:	4a66      	ldr	r2, [pc, #408]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005ef8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005efc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005f00:	f7fb fed2 	bl	8001ca8 <HAL_GetTick>
 8005f04:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f08:	f7fb fece 	bl	8001ca8 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b05      	cmp	r3, #5
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e3b3      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d0ef      	beq.n	8005f08 <HAL_RCC_OscConfig+0x630>
 8005f28:	e01b      	b.n	8005f62 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005f2a:	4b59      	ldr	r3, [pc, #356]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f30:	4a57      	ldr	r2, [pc, #348]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005f32:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8005f36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8005f3a:	f7fb feb5 	bl	8001ca8 <HAL_GetTick>
 8005f3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f42:	f7fb feb1 	bl	8001ca8 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b05      	cmp	r3, #5
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e396      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005f54:	4b4e      	ldr	r3, [pc, #312]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ef      	bne.n	8005f42 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f62:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d107      	bne.n	8005f7a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f6a:	4b49      	ldr	r3, [pc, #292]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f70:	4a47      	ldr	r2, [pc, #284]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005f72:	f023 0304 	bic.w	r3, r3, #4
 8005f76:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 8111 	beq.w	80061aa <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f8e:	4b40      	ldr	r3, [pc, #256]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d111      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005fa4:	f043 0304 	orr.w	r3, r3, #4
 8005fa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005fac:	4b38      	ldr	r3, [pc, #224]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8005fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005fc0:	4b34      	ldr	r3, [pc, #208]	@ (8006094 <HAL_RCC_OscConfig+0x7bc>)
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d118      	bne.n	8005ffe <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005fcc:	4b31      	ldr	r3, [pc, #196]	@ (8006094 <HAL_RCC_OscConfig+0x7bc>)
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	4a30      	ldr	r2, [pc, #192]	@ (8006094 <HAL_RCC_OscConfig+0x7bc>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fd8:	f7fb fe66 	bl	8001ca8 <HAL_GetTick>
 8005fdc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005fde:	e008      	b.n	8005ff2 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe0:	f7fb fe62 	bl	8001ca8 <HAL_GetTick>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d901      	bls.n	8005ff2 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e347      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005ff2:	4b28      	ldr	r3, [pc, #160]	@ (8006094 <HAL_RCC_OscConfig+0x7bc>)
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d0f0      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01f      	beq.n	800604a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b00      	cmp	r3, #0
 8006014:	d010      	beq.n	8006038 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006016:	4b1e      	ldr	r3, [pc, #120]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8006018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800601c:	4a1c      	ldr	r2, [pc, #112]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 800601e:	f043 0304 	orr.w	r3, r3, #4
 8006022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006026:	4b1a      	ldr	r3, [pc, #104]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8006028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800602c:	4a18      	ldr	r2, [pc, #96]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 800602e:	f043 0301 	orr.w	r3, r3, #1
 8006032:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006036:	e018      	b.n	800606a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006038:	4b15      	ldr	r3, [pc, #84]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 800603a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800603e:	4a14      	ldr	r2, [pc, #80]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8006040:	f043 0301 	orr.w	r3, r3, #1
 8006044:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006048:	e00f      	b.n	800606a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 800604c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006050:	4a0f      	ldr	r2, [pc, #60]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800605a:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 800605c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006060:	4a0b      	ldr	r2, [pc, #44]	@ (8006090 <HAL_RCC_OscConfig+0x7b8>)
 8006062:	f023 0304 	bic.w	r3, r3, #4
 8006066:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d057      	beq.n	8006122 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006072:	f7fb fe19 	bl	8001ca8 <HAL_GetTick>
 8006076:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006078:	e00e      	b.n	8006098 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607a:	f7fb fe15 	bl	8001ca8 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d905      	bls.n	8006098 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e2f8      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
 8006090:	46020c00 	.word	0x46020c00
 8006094:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006098:	4b9c      	ldr	r3, [pc, #624]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 800609a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0e9      	beq.n	800607a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01b      	beq.n	80060ea <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060b2:	4b96      	ldr	r3, [pc, #600]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80060b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060b8:	4a94      	ldr	r2, [pc, #592]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80060ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060c2:	e00a      	b.n	80060da <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c4:	f7fb fdf0 	bl	8001ca8 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e2d3      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80060da:	4b8c      	ldr	r3, [pc, #560]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80060dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d0ed      	beq.n	80060c4 <HAL_RCC_OscConfig+0x7ec>
 80060e8:	e053      	b.n	8006192 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80060ea:	4b88      	ldr	r3, [pc, #544]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80060ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f0:	4a86      	ldr	r2, [pc, #536]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80060f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80060fa:	e00a      	b.n	8006112 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fc:	f7fb fdd4 	bl	8001ca8 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610a:	4293      	cmp	r3, r2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e2b7      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006112:	4b7e      	ldr	r3, [pc, #504]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1ed      	bne.n	80060fc <HAL_RCC_OscConfig+0x824>
 8006120:	e037      	b.n	8006192 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006122:	f7fb fdc1 	bl	8001ca8 <HAL_GetTick>
 8006126:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006128:	e00a      	b.n	8006140 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fb fdbd 	bl	8001ca8 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e2a0      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006140:	4b72      	ldr	r3, [pc, #456]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006142:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1ed      	bne.n	800612a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800614e:	4b6f      	ldr	r3, [pc, #444]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01a      	beq.n	8006192 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800615c:	4b6b      	ldr	r3, [pc, #428]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 800615e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006162:	4a6a      	ldr	r2, [pc, #424]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006164:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006168:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800616c:	e00a      	b.n	8006184 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800616e:	f7fb fd9b 	bl	8001ca8 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617c:	4293      	cmp	r3, r2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e27e      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006184:	4b61      	ldr	r3, [pc, #388]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800618a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1ed      	bne.n	800616e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006192:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006196:	2b01      	cmp	r3, #1
 8006198:	d107      	bne.n	80061aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800619a:	4b5c      	ldr	r3, [pc, #368]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 800619c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061a0:	4a5a      	ldr	r2, [pc, #360]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80061a2:	f023 0304 	bic.w	r3, r3, #4
 80061a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d036      	beq.n	8006224 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d019      	beq.n	80061f2 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80061be:	4b53      	ldr	r3, [pc, #332]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a52      	ldr	r2, [pc, #328]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80061c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061c8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80061ca:	f7fb fd6d 	bl	8001ca8 <HAL_GetTick>
 80061ce:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061d2:	f7fb fd69 	bl	8001ca8 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e24e      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80061e4:	4b49      	ldr	r3, [pc, #292]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d0f0      	beq.n	80061d2 <HAL_RCC_OscConfig+0x8fa>
 80061f0:	e018      	b.n	8006224 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80061f2:	4b46      	ldr	r3, [pc, #280]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a45      	ldr	r2, [pc, #276]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80061f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80061fe:	f7fb fd53 	bl	8001ca8 <HAL_GetTick>
 8006202:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006206:	f7fb fd4f 	bl	8001ca8 <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e234      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006218:	4b3c      	ldr	r3, [pc, #240]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1f0      	bne.n	8006206 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800622c:	2b00      	cmp	r3, #0
 800622e:	d036      	beq.n	800629e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006234:	2b00      	cmp	r3, #0
 8006236:	d019      	beq.n	800626c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006238:	4b34      	ldr	r3, [pc, #208]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a33      	ldr	r2, [pc, #204]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 800623e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006242:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006244:	f7fb fd30 	bl	8001ca8 <HAL_GetTick>
 8006248:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800624c:	f7fb fd2c 	bl	8001ca8 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e211      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800625e:	4b2b      	ldr	r3, [pc, #172]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCC_OscConfig+0x974>
 800626a:	e018      	b.n	800629e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800626c:	4b27      	ldr	r3, [pc, #156]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a26      	ldr	r2, [pc, #152]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006276:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006278:	f7fb fd16 	bl	8001ca8 <HAL_GetTick>
 800627c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800627e:	e008      	b.n	8006292 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006280:	f7fb fd12 	bl	8001ca8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e1f7      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006292:	4b1e      	ldr	r3, [pc, #120]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1f0      	bne.n	8006280 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d07f      	beq.n	80063aa <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d062      	beq.n	8006378 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80062b2:	4b16      	ldr	r3, [pc, #88]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	4a15      	ldr	r2, [pc, #84]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80062b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80062bc:	6093      	str	r3, [r2, #8]
 80062be:	4b13      	ldr	r3, [pc, #76]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ca:	4910      	ldr	r1, [pc, #64]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80062cc:	4313      	orrs	r3, r2
 80062ce:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80062d8:	d309      	bcc.n	80062ee <HAL_RCC_OscConfig+0xa16>
 80062da:	4b0c      	ldr	r3, [pc, #48]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f023 021f 	bic.w	r2, r3, #31
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	4909      	ldr	r1, [pc, #36]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60cb      	str	r3, [r1, #12]
 80062ec:	e02a      	b.n	8006344 <HAL_RCC_OscConfig+0xa6c>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da0c      	bge.n	8006310 <HAL_RCC_OscConfig+0xa38>
 80062f6:	4b05      	ldr	r3, [pc, #20]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	015b      	lsls	r3, r3, #5
 8006304:	4901      	ldr	r1, [pc, #4]	@ (800630c <HAL_RCC_OscConfig+0xa34>)
 8006306:	4313      	orrs	r3, r2
 8006308:	60cb      	str	r3, [r1, #12]
 800630a:	e01b      	b.n	8006344 <HAL_RCC_OscConfig+0xa6c>
 800630c:	46020c00 	.word	0x46020c00
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006318:	d30a      	bcc.n	8006330 <HAL_RCC_OscConfig+0xa58>
 800631a:	4ba1      	ldr	r3, [pc, #644]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	029b      	lsls	r3, r3, #10
 8006328:	499d      	ldr	r1, [pc, #628]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800632a:	4313      	orrs	r3, r2
 800632c:	60cb      	str	r3, [r1, #12]
 800632e:	e009      	b.n	8006344 <HAL_RCC_OscConfig+0xa6c>
 8006330:	4b9b      	ldr	r3, [pc, #620]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	03db      	lsls	r3, r3, #15
 800633e:	4998      	ldr	r1, [pc, #608]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006340:	4313      	orrs	r3, r2
 8006342:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006344:	4b96      	ldr	r3, [pc, #600]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a95      	ldr	r2, [pc, #596]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800634a:	f043 0310 	orr.w	r3, r3, #16
 800634e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006350:	f7fb fcaa 	bl	8001ca8 <HAL_GetTick>
 8006354:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8006358:	f7fb fca6 	bl	8001ca8 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e18b      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800636a:	4b8d      	ldr	r3, [pc, #564]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0xa80>
 8006376:	e018      	b.n	80063aa <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8006378:	4b89      	ldr	r3, [pc, #548]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a88      	ldr	r2, [pc, #544]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800637e:	f023 0310 	bic.w	r3, r3, #16
 8006382:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006384:	f7fb fc90 	bl	8001ca8 <HAL_GetTick>
 8006388:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800638c:	f7fb fc8c 	bl	8001ca8 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e171      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800639e:	4b80      	ldr	r3, [pc, #512]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8166 	beq.w	8006680 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80063b4:	2300      	movs	r3, #0
 80063b6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063ba:	4b79      	ldr	r3, [pc, #484]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f003 030c 	and.w	r3, r3, #12
 80063c2:	2b0c      	cmp	r3, #12
 80063c4:	f000 80f2 	beq.w	80065ac <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	f040 80c5 	bne.w	800655c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80063d2:	4b73      	ldr	r3, [pc, #460]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a72      	ldr	r2, [pc, #456]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80063d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80063de:	f7fb fc63 	bl	8001ca8 <HAL_GetTick>
 80063e2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e6:	f7fb fc5f 	bl	8001ca8 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e144      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80063f8:	4b69      	ldr	r3, [pc, #420]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1f0      	bne.n	80063e6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006404:	4b66      	ldr	r3, [pc, #408]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800640a:	f003 0304 	and.w	r3, r3, #4
 800640e:	2b00      	cmp	r3, #0
 8006410:	d111      	bne.n	8006436 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006412:	4b63      	ldr	r3, [pc, #396]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006418:	4a61      	ldr	r2, [pc, #388]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800641a:	f043 0304 	orr.w	r3, r3, #4
 800641e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006422:	4b5f      	ldr	r3, [pc, #380]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006428:	f003 0304 	and.w	r3, r3, #4
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8006436:	4b5b      	ldr	r3, [pc, #364]	@ (80065a4 <HAL_RCC_OscConfig+0xccc>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800643e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006442:	d102      	bne.n	800644a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006444:	2301      	movs	r3, #1
 8006446:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800644a:	4b56      	ldr	r3, [pc, #344]	@ (80065a4 <HAL_RCC_OscConfig+0xccc>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	4a55      	ldr	r2, [pc, #340]	@ (80065a4 <HAL_RCC_OscConfig+0xccc>)
 8006450:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006454:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8006456:	4b52      	ldr	r3, [pc, #328]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800645e:	f023 0303 	bic.w	r3, r3, #3
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800646a:	3a01      	subs	r2, #1
 800646c:	0212      	lsls	r2, r2, #8
 800646e:	4311      	orrs	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006474:	430a      	orrs	r2, r1
 8006476:	494a      	ldr	r1, [pc, #296]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006478:	4313      	orrs	r3, r2
 800647a:	628b      	str	r3, [r1, #40]	@ 0x28
 800647c:	4b48      	ldr	r3, [pc, #288]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800647e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006480:	4b49      	ldr	r3, [pc, #292]	@ (80065a8 <HAL_RCC_OscConfig+0xcd0>)
 8006482:	4013      	ands	r3, r2
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006488:	3a01      	subs	r2, #1
 800648a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006492:	3a01      	subs	r2, #1
 8006494:	0252      	lsls	r2, r2, #9
 8006496:	b292      	uxth	r2, r2
 8006498:	4311      	orrs	r1, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800649e:	3a01      	subs	r2, #1
 80064a0:	0412      	lsls	r2, r2, #16
 80064a2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80064a6:	4311      	orrs	r1, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80064ac:	3a01      	subs	r2, #1
 80064ae:	0612      	lsls	r2, r2, #24
 80064b0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80064b4:	430a      	orrs	r2, r1
 80064b6:	493a      	ldr	r1, [pc, #232]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80064bc:	4b38      	ldr	r3, [pc, #224]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	4a37      	ldr	r2, [pc, #220]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80064c2:	f023 0310 	bic.w	r3, r3, #16
 80064c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064cc:	4a34      	ldr	r2, [pc, #208]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80064d2:	4b33      	ldr	r3, [pc, #204]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80064d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d6:	4a32      	ldr	r2, [pc, #200]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80064d8:	f043 0310 	orr.w	r3, r3, #16
 80064dc:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80064de:	4b30      	ldr	r3, [pc, #192]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	f023 020c 	bic.w	r2, r3, #12
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ea:	492d      	ldr	r1, [pc, #180]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80064f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d105      	bne.n	8006504 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80064f8:	4b2a      	ldr	r3, [pc, #168]	@ (80065a4 <HAL_RCC_OscConfig+0xccc>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	4a29      	ldr	r2, [pc, #164]	@ (80065a4 <HAL_RCC_OscConfig+0xccc>)
 80064fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006502:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006504:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006508:	2b01      	cmp	r3, #1
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800650c:	4b24      	ldr	r3, [pc, #144]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800650e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006512:	4a23      	ldr	r2, [pc, #140]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006514:	f023 0304 	bic.w	r3, r3, #4
 8006518:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800651c:	4b20      	ldr	r3, [pc, #128]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006526:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006528:	f7fb fbbe 	bl	8001ca8 <HAL_GetTick>
 800652c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fb fbba 	bl	8001ca8 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e09f      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006542:	4b17      	ldr	r3, [pc, #92]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d0f0      	beq.n	8006530 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800654e:	4b14      	ldr	r3, [pc, #80]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	4a13      	ldr	r2, [pc, #76]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006558:	6293      	str	r3, [r2, #40]	@ 0x28
 800655a:	e091      	b.n	8006680 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800655c:	4b10      	ldr	r3, [pc, #64]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0f      	ldr	r2, [pc, #60]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006566:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006568:	f7fb fb9e 	bl	8001ca8 <HAL_GetTick>
 800656c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800656e:	e008      	b.n	8006582 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006570:	f7fb fb9a 	bl	8001ca8 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e07f      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006582:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1f0      	bne.n	8006570 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800658e:	4b04      	ldr	r3, [pc, #16]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006592:	4a03      	ldr	r2, [pc, #12]	@ (80065a0 <HAL_RCC_OscConfig+0xcc8>)
 8006594:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	6293      	str	r3, [r2, #40]	@ 0x28
 800659e:	e06f      	b.n	8006680 <HAL_RCC_OscConfig+0xda8>
 80065a0:	46020c00 	.word	0x46020c00
 80065a4:	46020800 	.word	0x46020800
 80065a8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80065ac:	4b37      	ldr	r3, [pc, #220]	@ (800668c <HAL_RCC_OscConfig+0xdb4>)
 80065ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80065b2:	4b36      	ldr	r3, [pc, #216]	@ (800668c <HAL_RCC_OscConfig+0xdb4>)
 80065b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d039      	beq.n	8006634 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f003 0203 	and.w	r2, r3, #3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d132      	bne.n	8006634 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	0a1b      	lsrs	r3, r3, #8
 80065d2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80065dc:	429a      	cmp	r2, r3
 80065de:	d129      	bne.n	8006634 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d122      	bne.n	8006634 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f8:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d11a      	bne.n	8006634 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	0a5b      	lsrs	r3, r3, #9
 8006602:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800660a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800660c:	429a      	cmp	r2, r3
 800660e:	d111      	bne.n	8006634 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800661e:	429a      	cmp	r2, r3
 8006620:	d108      	bne.n	8006634 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	0e1b      	lsrs	r3, r3, #24
 8006626:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800662e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006630:	429a      	cmp	r2, r3
 8006632:	d001      	beq.n	8006638 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e024      	b.n	8006682 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006638:	4b14      	ldr	r3, [pc, #80]	@ (800668c <HAL_RCC_OscConfig+0xdb4>)
 800663a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663c:	08db      	lsrs	r3, r3, #3
 800663e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006646:	429a      	cmp	r2, r3
 8006648:	d01a      	beq.n	8006680 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800664a:	4b10      	ldr	r3, [pc, #64]	@ (800668c <HAL_RCC_OscConfig+0xdb4>)
 800664c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664e:	4a0f      	ldr	r2, [pc, #60]	@ (800668c <HAL_RCC_OscConfig+0xdb4>)
 8006650:	f023 0310 	bic.w	r3, r3, #16
 8006654:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006656:	f7fb fb27 	bl	8001ca8 <HAL_GetTick>
 800665a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 800665c:	bf00      	nop
 800665e:	f7fb fb23 	bl	8001ca8 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006666:	4293      	cmp	r3, r2
 8006668:	d0f9      	beq.n	800665e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800666e:	4a07      	ldr	r2, [pc, #28]	@ (800668c <HAL_RCC_OscConfig+0xdb4>)
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006674:	4b05      	ldr	r3, [pc, #20]	@ (800668c <HAL_RCC_OscConfig+0xdb4>)
 8006676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006678:	4a04      	ldr	r2, [pc, #16]	@ (800668c <HAL_RCC_OscConfig+0xdb4>)
 800667a:	f043 0310 	orr.w	r3, r3, #16
 800667e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3738      	adds	r7, #56	@ 0x38
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	46020c00 	.word	0x46020c00

08006690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e1d9      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80066a4:	4b9b      	ldr	r3, [pc, #620]	@ (8006914 <HAL_RCC_ClockConfig+0x284>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d910      	bls.n	80066d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b98      	ldr	r3, [pc, #608]	@ (8006914 <HAL_RCC_ClockConfig+0x284>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 020f 	bic.w	r2, r3, #15
 80066ba:	4996      	ldr	r1, [pc, #600]	@ (8006914 <HAL_RCC_ClockConfig+0x284>)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b94      	ldr	r3, [pc, #592]	@ (8006914 <HAL_RCC_ClockConfig+0x284>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e1c1      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d010      	beq.n	8006702 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695a      	ldr	r2, [r3, #20]
 80066e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80066e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d908      	bls.n	8006702 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80066f0:	4b89      	ldr	r3, [pc, #548]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	4986      	ldr	r1, [pc, #536]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d012      	beq.n	8006734 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	4b81      	ldr	r3, [pc, #516]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	091b      	lsrs	r3, r3, #4
 8006718:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800671c:	429a      	cmp	r2, r3
 800671e:	d909      	bls.n	8006734 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006720:	4b7d      	ldr	r3, [pc, #500]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	497a      	ldr	r1, [pc, #488]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006730:	4313      	orrs	r3, r2
 8006732:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d010      	beq.n	8006762 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	4b74      	ldr	r3, [pc, #464]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800674c:	429a      	cmp	r2, r3
 800674e:	d908      	bls.n	8006762 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006750:	4b71      	ldr	r3, [pc, #452]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	496e      	ldr	r1, [pc, #440]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 800675e:	4313      	orrs	r3, r2
 8006760:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d010      	beq.n	8006790 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	4b69      	ldr	r3, [pc, #420]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	429a      	cmp	r2, r3
 800677c:	d908      	bls.n	8006790 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800677e:	4b66      	ldr	r3, [pc, #408]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	f023 020f 	bic.w	r2, r3, #15
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	4963      	ldr	r1, [pc, #396]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 800678c:	4313      	orrs	r3, r2
 800678e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80d2 	beq.w	8006942 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800679e:	2300      	movs	r3, #0
 80067a0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d143      	bne.n	8006832 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80067ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d110      	bne.n	80067da <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80067b8:	4b57      	ldr	r3, [pc, #348]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80067ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067be:	4a56      	ldr	r2, [pc, #344]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80067c0:	f043 0304 	orr.w	r3, r3, #4
 80067c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80067c8:	4b53      	ldr	r3, [pc, #332]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80067ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	60bb      	str	r3, [r7, #8]
 80067d4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80067d6:	2301      	movs	r3, #1
 80067d8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80067da:	f7fb fa65 	bl	8001ca8 <HAL_GetTick>
 80067de:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80067e0:	4b4e      	ldr	r3, [pc, #312]	@ (800691c <HAL_RCC_ClockConfig+0x28c>)
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80067ec:	e008      	b.n	8006800 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80067ee:	f7fb fa5b 	bl	8001ca8 <HAL_GetTick>
 80067f2:	4602      	mov	r2, r0
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	1ad3      	subs	r3, r2, r3
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d901      	bls.n	8006800 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e12b      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006800:	4b46      	ldr	r3, [pc, #280]	@ (800691c <HAL_RCC_ClockConfig+0x28c>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f0      	beq.n	80067ee <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d107      	bne.n	8006822 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006812:	4b41      	ldr	r3, [pc, #260]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006818:	4a3f      	ldr	r2, [pc, #252]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 800681a:	f023 0304 	bic.w	r3, r3, #4
 800681e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006822:	4b3d      	ldr	r3, [pc, #244]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d121      	bne.n	8006872 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e112      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d107      	bne.n	800684a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800683a:	4b37      	ldr	r3, [pc, #220]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d115      	bne.n	8006872 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e106      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d107      	bne.n	8006862 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006852:	4b31      	ldr	r3, [pc, #196]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e0fa      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006862:	4b2d      	ldr	r3, [pc, #180]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e0f2      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8006872:	4b29      	ldr	r3, [pc, #164]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f023 0203 	bic.w	r2, r3, #3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	4926      	ldr	r1, [pc, #152]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006880:	4313      	orrs	r3, r2
 8006882:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8006884:	f7fb fa10 	bl	8001ca8 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b03      	cmp	r3, #3
 8006890:	d112      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006892:	e00a      	b.n	80068aa <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006894:	f7fb fa08 	bl	8001ca8 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e0d6      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f003 030c 	and.w	r3, r3, #12
 80068b2:	2b0c      	cmp	r3, #12
 80068b4:	d1ee      	bne.n	8006894 <HAL_RCC_ClockConfig+0x204>
 80068b6:	e044      	b.n	8006942 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d112      	bne.n	80068e6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80068c0:	e00a      	b.n	80068d8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068c2:	f7fb f9f1 	bl	8001ca8 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d901      	bls.n	80068d8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e0bf      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80068d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	f003 030c 	and.w	r3, r3, #12
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	d1ee      	bne.n	80068c2 <HAL_RCC_ClockConfig+0x232>
 80068e4:	e02d      	b.n	8006942 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d123      	bne.n	8006936 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80068ee:	e00a      	b.n	8006906 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f0:	f7fb f9da 	bl	8001ca8 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068fe:	4293      	cmp	r3, r2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e0a8      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006906:	4b04      	ldr	r3, [pc, #16]	@ (8006918 <HAL_RCC_ClockConfig+0x288>)
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	f003 030c 	and.w	r3, r3, #12
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1ee      	bne.n	80068f0 <HAL_RCC_ClockConfig+0x260>
 8006912:	e016      	b.n	8006942 <HAL_RCC_ClockConfig+0x2b2>
 8006914:	40022000 	.word	0x40022000
 8006918:	46020c00 	.word	0x46020c00
 800691c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006920:	f7fb f9c2 	bl	8001ca8 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692e:	4293      	cmp	r3, r2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e090      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006936:	4b4a      	ldr	r3, [pc, #296]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f003 030c 	and.w	r3, r3, #12
 800693e:	2b04      	cmp	r3, #4
 8006940:	d1ee      	bne.n	8006920 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d010      	beq.n	8006970 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	4b43      	ldr	r3, [pc, #268]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f003 030f 	and.w	r3, r3, #15
 800695a:	429a      	cmp	r2, r3
 800695c:	d208      	bcs.n	8006970 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800695e:	4b40      	ldr	r3, [pc, #256]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f023 020f 	bic.w	r2, r3, #15
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	493d      	ldr	r1, [pc, #244]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 800696c:	4313      	orrs	r3, r2
 800696e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006970:	4b3c      	ldr	r3, [pc, #240]	@ (8006a64 <HAL_RCC_ClockConfig+0x3d4>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	429a      	cmp	r2, r3
 800697c:	d210      	bcs.n	80069a0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800697e:	4b39      	ldr	r3, [pc, #228]	@ (8006a64 <HAL_RCC_ClockConfig+0x3d4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f023 020f 	bic.w	r2, r3, #15
 8006986:	4937      	ldr	r1, [pc, #220]	@ (8006a64 <HAL_RCC_ClockConfig+0x3d4>)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	4313      	orrs	r3, r2
 800698c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800698e:	4b35      	ldr	r3, [pc, #212]	@ (8006a64 <HAL_RCC_ClockConfig+0x3d4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	429a      	cmp	r2, r3
 800699a:	d001      	beq.n	80069a0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e05b      	b.n	8006a58 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d010      	beq.n	80069ce <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68da      	ldr	r2, [r3, #12]
 80069b0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d208      	bcs.n	80069ce <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80069bc:	4b28      	ldr	r3, [pc, #160]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	4925      	ldr	r1, [pc, #148]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d012      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	4b20      	ldr	r3, [pc, #128]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d209      	bcs.n	8006a00 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80069ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	4919      	ldr	r1, [pc, #100]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0310 	and.w	r3, r3, #16
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d010      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	4b13      	ldr	r3, [pc, #76]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 8006a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d208      	bcs.n	8006a2e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006a1c:	4b10      	ldr	r3, [pc, #64]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	490d      	ldr	r1, [pc, #52]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006a2e:	f000 f821 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8006a32:	4602      	mov	r2, r0
 8006a34:	4b0a      	ldr	r3, [pc, #40]	@ (8006a60 <HAL_RCC_ClockConfig+0x3d0>)
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	490a      	ldr	r1, [pc, #40]	@ (8006a68 <HAL_RCC_ClockConfig+0x3d8>)
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
 8006a44:	4a09      	ldr	r2, [pc, #36]	@ (8006a6c <HAL_RCC_ClockConfig+0x3dc>)
 8006a46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a48:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <HAL_RCC_ClockConfig+0x3e0>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fa fb49 	bl	80010e4 <HAL_InitTick>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]

  return status;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3718      	adds	r7, #24
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	46020c00 	.word	0x46020c00
 8006a64:	40022000 	.word	0x40022000
 8006a68:	0802ed0c 	.word	0x0802ed0c
 8006a6c:	20000004 	.word	0x20000004
 8006a70:	20000010 	.word	0x20000010

08006a74 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b08b      	sub	sp, #44	@ 0x2c
 8006a78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a82:	4b78      	ldr	r3, [pc, #480]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	f003 030c 	and.w	r3, r3, #12
 8006a8a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a8c:	4b75      	ldr	r3, [pc, #468]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a90:	f003 0303 	and.w	r3, r3, #3
 8006a94:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d005      	beq.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	2b0c      	cmp	r3, #12
 8006aa0:	d121      	bne.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d11e      	bne.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8006aa8:	4b6e      	ldr	r3, [pc, #440]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d107      	bne.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8006ab4:	4b6b      	ldr	r3, [pc, #428]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006aba:	0b1b      	lsrs	r3, r3, #12
 8006abc:	f003 030f 	and.w	r3, r3, #15
 8006ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ac2:	e005      	b.n	8006ad0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8006ac4:	4b67      	ldr	r3, [pc, #412]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0f1b      	lsrs	r3, r3, #28
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ad0:	4a65      	ldr	r2, [pc, #404]	@ (8006c68 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ad8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d110      	bne.n	8006b02 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006ae4:	e00d      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f003 030c 	and.w	r3, r3, #12
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d102      	bne.n	8006af8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006af2:	4b5e      	ldr	r3, [pc, #376]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006af4:	623b      	str	r3, [r7, #32]
 8006af6:	e004      	b.n	8006b02 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d101      	bne.n	8006b02 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006afe:	4b5b      	ldr	r3, [pc, #364]	@ (8006c6c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8006b00:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b0c      	cmp	r3, #12
 8006b06:	f040 80a5 	bne.w	8006c54 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006b0a:	4b56      	ldr	r3, [pc, #344]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006b14:	4b53      	ldr	r3, [pc, #332]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b18:	0a1b      	lsrs	r3, r3, #8
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	3301      	adds	r3, #1
 8006b20:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006b22:	4b50      	ldr	r3, [pc, #320]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b26:	091b      	lsrs	r3, r3, #4
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b32:	08db      	lsrs	r3, r3, #3
 8006b34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b46:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d003      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0xe4>
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d022      	beq.n	8006b9c <HAL_RCC_GetSysClockFreq+0x128>
 8006b56:	e043      	b.n	8006be0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006c70 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006b66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006b7a:	ed97 6a01 	vldr	s12, [r7, #4]
 8006b7e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8006c74 <HAL_RCC_GetSysClockFreq+0x200>
 8006b82:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b86:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006b8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b9a:	e046      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006c70 <HAL_RCC_GetSysClockFreq+0x1fc>
 8006baa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bae:	4b2d      	ldr	r3, [pc, #180]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006bbe:	ed97 6a01 	vldr	s12, [r7, #4]
 8006bc2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006c74 <HAL_RCC_GetSysClockFreq+0x200>
 8006bc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006bce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bde:	e024      	b.n	8006c2a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c00:	ee07 3a90 	vmov	s15, r3
 8006c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006c08:	ed97 6a01 	vldr	s12, [r7, #4]
 8006c0c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8006c74 <HAL_RCC_GetSysClockFreq+0x200>
 8006c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006c18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c28:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006c64 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c2e:	0e1b      	lsrs	r3, r3, #24
 8006c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c34:	3301      	adds	r3, #1
 8006c36:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c4e:	ee17 3a90 	vmov	r3, s15
 8006c52:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8006c54:	6a3b      	ldr	r3, [r7, #32]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	372c      	adds	r7, #44	@ 0x2c
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	46020c00 	.word	0x46020c00
 8006c68:	0802ed24 	.word	0x0802ed24
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	4b742400 	.word	0x4b742400
 8006c74:	46000000 	.word	0x46000000

08006c78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006c7c:	f7ff fefa 	bl	8006a74 <HAL_RCC_GetSysClockFreq>
 8006c80:	4602      	mov	r2, r0
 8006c82:	4b07      	ldr	r3, [pc, #28]	@ (8006ca0 <HAL_RCC_GetHCLKFreq+0x28>)
 8006c84:	6a1b      	ldr	r3, [r3, #32]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	4906      	ldr	r1, [pc, #24]	@ (8006ca4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006c8c:	5ccb      	ldrb	r3, [r1, r3]
 8006c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c92:	4a05      	ldr	r2, [pc, #20]	@ (8006ca8 <HAL_RCC_GetHCLKFreq+0x30>)
 8006c94:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8006c96:	4b04      	ldr	r3, [pc, #16]	@ (8006ca8 <HAL_RCC_GetHCLKFreq+0x30>)
 8006c98:	681b      	ldr	r3, [r3, #0]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	46020c00 	.word	0x46020c00
 8006ca4:	0802ed0c 	.word	0x0802ed0c
 8006ca8:	20000004 	.word	0x20000004

08006cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006cb0:	f7ff ffe2 	bl	8006c78 <HAL_RCC_GetHCLKFreq>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	4b05      	ldr	r3, [pc, #20]	@ (8006ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	f003 0307 	and.w	r3, r3, #7
 8006cc0:	4903      	ldr	r1, [pc, #12]	@ (8006cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006cc2:	5ccb      	ldrb	r3, [r1, r3]
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	46020c00 	.word	0x46020c00
 8006cd0:	0802ed1c 	.word	0x0802ed1c

08006cd4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	221f      	movs	r2, #31
 8006ce2:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006ce4:	4b15      	ldr	r3, [pc, #84]	@ (8006d3c <HAL_RCC_GetClockConfig+0x68>)
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	f003 0203 	and.w	r2, r3, #3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006cf0:	4b12      	ldr	r3, [pc, #72]	@ (8006d3c <HAL_RCC_GetClockConfig+0x68>)
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f003 020f 	and.w	r2, r3, #15
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8006d3c <HAL_RCC_GetClockConfig+0x68>)
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006d08:	4b0c      	ldr	r3, [pc, #48]	@ (8006d3c <HAL_RCC_GetClockConfig+0x68>)
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	091b      	lsrs	r3, r3, #4
 8006d0e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006d16:	4b09      	ldr	r3, [pc, #36]	@ (8006d3c <HAL_RCC_GetClockConfig+0x68>)
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d22:	4b07      	ldr	r3, [pc, #28]	@ (8006d40 <HAL_RCC_GetClockConfig+0x6c>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 020f 	and.w	r2, r3, #15
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	601a      	str	r2, [r3, #0]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	46020c00 	.word	0x46020c00
 8006d40:	40022000 	.word	0x40022000

08006d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8006e48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006d5a:	f7fe fd4f 	bl	80057fc <HAL_PWREx_GetVoltageRange>
 8006d5e:	6178      	str	r0, [r7, #20]
 8006d60:	e019      	b.n	8006d96 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d62:	4b39      	ldr	r3, [pc, #228]	@ (8006e48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d68:	4a37      	ldr	r2, [pc, #220]	@ (8006e48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d6a:	f043 0304 	orr.w	r3, r3, #4
 8006d6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8006d72:	4b35      	ldr	r3, [pc, #212]	@ (8006e48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006d80:	f7fe fd3c 	bl	80057fc <HAL_PWREx_GetVoltageRange>
 8006d84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006d86:	4b30      	ldr	r3, [pc, #192]	@ (8006e48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8006e48 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006d8e:	f023 0304 	bic.w	r3, r3, #4
 8006d92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d9c:	d003      	beq.n	8006da6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006da4:	d109      	bne.n	8006dba <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dac:	d202      	bcs.n	8006db4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006dae:	2301      	movs	r3, #1
 8006db0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006db2:	e033      	b.n	8006e1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006db4:	2300      	movs	r3, #0
 8006db6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006db8:	e030      	b.n	8006e1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dc0:	d208      	bcs.n	8006dd4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dc8:	d102      	bne.n	8006dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006dca:	2303      	movs	r3, #3
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	e025      	b.n	8006e1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e035      	b.n	8006e40 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dda:	d90f      	bls.n	8006dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006de8:	d902      	bls.n	8006df0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006dea:	2300      	movs	r3, #0
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e015      	b.n	8006e1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006df0:	2301      	movs	r3, #1
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	e012      	b.n	8006e1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006df6:	2300      	movs	r3, #0
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	e00f      	b.n	8006e1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e02:	d109      	bne.n	8006e18 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e0a:	d102      	bne.n	8006e12 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	e004      	b.n	8006e1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006e12:	2302      	movs	r3, #2
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	e001      	b.n	8006e1c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006e18:	2301      	movs	r3, #1
 8006e1a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f023 020f 	bic.w	r2, r3, #15
 8006e24:	4909      	ldr	r1, [pc, #36]	@ (8006e4c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006e2c:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d001      	beq.n	8006e3e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	46020c00 	.word	0x46020c00
 8006e4c:	40022000 	.word	0x40022000

08006e50 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e54:	b0b6      	sub	sp, #216	@ 0xd8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e62:	2300      	movs	r3, #0
 8006e64:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f002 0401 	and.w	r4, r2, #1
 8006e74:	2500      	movs	r5, #0
 8006e76:	ea54 0305 	orrs.w	r3, r4, r5
 8006e7a:	d00b      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006e7c:	4bc5      	ldr	r3, [pc, #788]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e82:	f023 0103 	bic.w	r1, r3, #3
 8006e86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e8c:	4ac1      	ldr	r2, [pc, #772]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006e8e:	430b      	orrs	r3, r1
 8006e90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f002 0804 	and.w	r8, r2, #4
 8006ea0:	f04f 0900 	mov.w	r9, #0
 8006ea4:	ea58 0309 	orrs.w	r3, r8, r9
 8006ea8:	d00b      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006eaa:	4bba      	ldr	r3, [pc, #744]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006eb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eba:	4ab6      	ldr	r2, [pc, #728]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	f002 0a08 	and.w	sl, r2, #8
 8006ece:	f04f 0b00 	mov.w	fp, #0
 8006ed2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ed6:	d00b      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006ed8:	4bae      	ldr	r3, [pc, #696]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ede:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006ee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ee8:	4aaa      	ldr	r2, [pc, #680]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006eea:	430b      	orrs	r3, r1
 8006eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ef0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef8:	f002 0310 	and.w	r3, r2, #16
 8006efc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f00:	2300      	movs	r3, #0
 8006f02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006f06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	d00b      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006f10:	4ba0      	ldr	r3, [pc, #640]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f20:	4a9c      	ldr	r2, [pc, #624]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006f22:	430b      	orrs	r3, r1
 8006f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	f002 0320 	and.w	r3, r2, #32
 8006f34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	d00b      	beq.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006f48:	4b92      	ldr	r3, [pc, #584]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006f4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f4e:	f023 0107 	bic.w	r1, r3, #7
 8006f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f58:	4a8e      	ldr	r2, [pc, #568]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f68:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f70:	2300      	movs	r3, #0
 8006f72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f76:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f7a:	460b      	mov	r3, r1
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	d00b      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006f80:	4b84      	ldr	r3, [pc, #528]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f86:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8006f8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006f90:	4a80      	ldr	r2, [pc, #512]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006f92:	430b      	orrs	r3, r1
 8006f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006fae:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006fb8:	4b76      	ldr	r3, [pc, #472]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006fc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006fc8:	4a72      	ldr	r2, [pc, #456]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006fca:	430b      	orrs	r3, r1
 8006fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8006fdc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fe6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006fea:	460b      	mov	r3, r1
 8006fec:	4313      	orrs	r3, r2
 8006fee:	d00b      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006ff0:	4b68      	ldr	r3, [pc, #416]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8006ff2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ff6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007000:	4a64      	ldr	r2, [pc, #400]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007002:	430b      	orrs	r3, r1
 8007004:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007018:	2300      	movs	r3, #0
 800701a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800701e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007022:	460b      	mov	r3, r1
 8007024:	4313      	orrs	r3, r2
 8007026:	d00b      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007028:	4b5a      	ldr	r3, [pc, #360]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800702a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800702e:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8007032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007038:	4a56      	ldr	r2, [pc, #344]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800703a:	430b      	orrs	r3, r1
 800703c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 800704c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007050:	2300      	movs	r3, #0
 8007052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007056:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800705a:	460b      	mov	r3, r1
 800705c:	4313      	orrs	r3, r2
 800705e:	d00b      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007060:	4b4c      	ldr	r3, [pc, #304]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007062:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007066:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800706a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800706e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007070:	4a48      	ldr	r2, [pc, #288]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007072:	430b      	orrs	r3, r1
 8007074:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007084:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007088:	2300      	movs	r3, #0
 800708a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800708e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007092:	460b      	mov	r3, r1
 8007094:	4313      	orrs	r3, r2
 8007096:	d00b      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007098:	4b3e      	ldr	r3, [pc, #248]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800709a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800709e:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80070a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070a8:	4a3a      	ldr	r2, [pc, #232]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80070aa:	430b      	orrs	r3, r1
 80070ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80070b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80070bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070be:	2300      	movs	r3, #0
 80070c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80070c6:	460b      	mov	r3, r1
 80070c8:	4313      	orrs	r3, r2
 80070ca:	d00b      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80070cc:	4b31      	ldr	r3, [pc, #196]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80070ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80070d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80070d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80070de:	430b      	orrs	r3, r1
 80070e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80070f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80070f2:	2300      	movs	r3, #0
 80070f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80070f6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80070fa:	460b      	mov	r3, r1
 80070fc:	4313      	orrs	r3, r2
 80070fe:	d04f      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007108:	2b80      	cmp	r3, #128	@ 0x80
 800710a:	d02d      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800710c:	2b80      	cmp	r3, #128	@ 0x80
 800710e:	d827      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007110:	2b60      	cmp	r3, #96	@ 0x60
 8007112:	d02b      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007114:	2b60      	cmp	r3, #96	@ 0x60
 8007116:	d823      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007118:	2b40      	cmp	r3, #64	@ 0x40
 800711a:	d006      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800711c:	2b40      	cmp	r3, #64	@ 0x40
 800711e:	d81f      	bhi.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d009      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007124:	2b20      	cmp	r3, #32
 8007126:	d011      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007128:	e01a      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800712a:	4b1a      	ldr	r3, [pc, #104]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800712c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800712e:	4a19      	ldr	r2, [pc, #100]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007134:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007136:	e01a      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800713c:	3308      	adds	r3, #8
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fbc4 	bl	80078cc <RCCEx_PLL2_Config>
 8007144:	4603      	mov	r3, r0
 8007146:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800714a:	e010      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800714c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007150:	332c      	adds	r3, #44	@ 0x2c
 8007152:	4618      	mov	r0, r3
 8007154:	f000 fc52 	bl	80079fc <RCCEx_PLL3_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800715e:	e006      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007166:	e002      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8007168:	bf00      	nop
 800716a:	e000      	b.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 800716c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800716e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007172:	2b00      	cmp	r3, #0
 8007174:	d110      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007176:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007178:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800717c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8007180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007188:	4a02      	ldr	r2, [pc, #8]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800718a:	430b      	orrs	r3, r1
 800718c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007190:	e006      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8007192:	bf00      	nop
 8007194:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007198:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800719c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80071a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80071ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071ae:	2300      	movs	r3, #0
 80071b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80071b6:	460b      	mov	r3, r1
 80071b8:	4313      	orrs	r3, r2
 80071ba:	d046      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80071bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80071c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80071c4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80071c8:	d028      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80071ca:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80071ce:	d821      	bhi.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80071d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071d4:	d022      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80071d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071da:	d81b      	bhi.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80071dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071e0:	d01c      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80071e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071e6:	d815      	bhi.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80071e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071ec:	d008      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80071ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071f2:	d80f      	bhi.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d011      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80071f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071fc:	d00e      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80071fe:	e009      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007200:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007204:	3308      	adds	r3, #8
 8007206:	4618      	mov	r0, r3
 8007208:	f000 fb60 	bl	80078cc <RCCEx_PLL2_Config>
 800720c:	4603      	mov	r3, r0
 800720e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007212:	e004      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800721a:	e000      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 800721c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800721e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d10d      	bne.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007226:	4bb6      	ldr	r3, [pc, #728]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800722c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007238:	4ab1      	ldr	r2, [pc, #708]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800723a:	430b      	orrs	r3, r1
 800723c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007240:	e003      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007242:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007246:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800724a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007256:	663b      	str	r3, [r7, #96]	@ 0x60
 8007258:	2300      	movs	r3, #0
 800725a:	667b      	str	r3, [r7, #100]	@ 0x64
 800725c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007260:	460b      	mov	r3, r1
 8007262:	4313      	orrs	r3, r2
 8007264:	d03e      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8007266:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800726a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800726e:	2b04      	cmp	r3, #4
 8007270:	d81d      	bhi.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8007272:	a201      	add	r2, pc, #4	@ (adr r2, 8007278 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8007274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007278:	080072b7 	.word	0x080072b7
 800727c:	0800728d 	.word	0x0800728d
 8007280:	0800729b 	.word	0x0800729b
 8007284:	080072b7 	.word	0x080072b7
 8007288:	080072b7 	.word	0x080072b7
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800728c:	4b9c      	ldr	r3, [pc, #624]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800728e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007290:	4a9b      	ldr	r2, [pc, #620]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007296:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007298:	e00e      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800729a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800729e:	332c      	adds	r3, #44	@ 0x2c
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fbab 	bl	80079fc <RCCEx_PLL3_Config>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80072ac:	e004      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 80072b4:	e000      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80072b6:	bf00      	nop
    }
    if (ret == HAL_OK)
 80072b8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10d      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80072c0:	4b8f      	ldr	r3, [pc, #572]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80072c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072c6:	f023 0107 	bic.w	r1, r3, #7
 80072ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80072ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072d2:	4a8b      	ldr	r2, [pc, #556]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80072d4:	430b      	orrs	r3, r1
 80072d6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80072da:	e003      	b.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80072e0:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80072e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80072f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80072f2:	2300      	movs	r3, #0
 80072f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80072fa:	460b      	mov	r3, r1
 80072fc:	4313      	orrs	r3, r2
 80072fe:	d04a      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007300:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007308:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800730c:	d028      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800730e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007312:	d821      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007314:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007318:	d024      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800731a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800731e:	d81b      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007324:	d00e      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8007326:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800732a:	d815      	bhi.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01b      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007334:	d110      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007336:	4b72      	ldr	r3, [pc, #456]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733a:	4a71      	ldr	r2, [pc, #452]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800733c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007340:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007342:	e012      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007348:	332c      	adds	r3, #44	@ 0x2c
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fb56 	bl	80079fc <RCCEx_PLL3_Config>
 8007350:	4603      	mov	r3, r0
 8007352:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007356:	e008      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800735e:	e004      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8007360:	bf00      	nop
 8007362:	e002      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8007364:	bf00      	nop
 8007366:	e000      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 8007368:	bf00      	nop
    }
    if (ret == HAL_OK)
 800736a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10d      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007372:	4b63      	ldr	r3, [pc, #396]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007374:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007378:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800737c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007384:	4a5e      	ldr	r2, [pc, #376]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007386:	430b      	orrs	r3, r1
 8007388:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800738c:	e003      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8007392:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80073a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a4:	2300      	movs	r3, #0
 80073a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80073a8:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80073ac:	460b      	mov	r3, r1
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f000 80ba 	beq.w	8007528 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80073b4:	2300      	movs	r3, #0
 80073b6:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073ba:	4b51      	ldr	r3, [pc, #324]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80073bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d113      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073c8:	4b4d      	ldr	r3, [pc, #308]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80073ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073ce:	4a4c      	ldr	r2, [pc, #304]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80073d0:	f043 0304 	orr.w	r3, r3, #4
 80073d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80073d8:	4b49      	ldr	r3, [pc, #292]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80073da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073de:	f003 0304 	and.w	r3, r3, #4
 80073e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80073e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
      pwrclkchanged = SET;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 30d1 	strb.w	r3, [r7, #209]	@ 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80073f0:	4b44      	ldr	r3, [pc, #272]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80073f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f4:	4a43      	ldr	r2, [pc, #268]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 80073f6:	f043 0301 	orr.w	r3, r3, #1
 80073fa:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073fc:	f7fa fc54 	bl	8001ca8 <HAL_GetTick>
 8007400:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007404:	e00b      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007406:	f7fa fc4f 	bl	8001ca8 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b02      	cmp	r3, #2
 8007414:	d903      	bls.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800741c:	e005      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800741e:	4b39      	ldr	r3, [pc, #228]	@ (8007504 <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8007420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0ed      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 800742a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d16a      	bne.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007432:	4b33      	ldr	r3, [pc, #204]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800743c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8007440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d023      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007448:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800744c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8007450:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007454:	4293      	cmp	r3, r2
 8007456:	d01b      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007458:	4b29      	ldr	r3, [pc, #164]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800745a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800745e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007466:	4b26      	ldr	r3, [pc, #152]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800746c:	4a24      	ldr	r2, [pc, #144]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800746e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007472:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007476:	4b22      	ldr	r3, [pc, #136]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800747c:	4a20      	ldr	r2, [pc, #128]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800747e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007482:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007486:	4a1e      	ldr	r2, [pc, #120]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8007488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800748c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007490:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d019      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749c:	f7fa fc04 	bl	8001ca8 <HAL_GetTick>
 80074a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074a4:	e00d      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074a6:	f7fa fbff 	bl	8001ca8 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80074b0:	1ad2      	subs	r2, r2, r3
 80074b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d903      	bls.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
            break;
 80074c0:	e006      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80074c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0ea      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 80074d0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10d      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80074d8:	4b09      	ldr	r3, [pc, #36]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80074da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80074e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80074ea:	4a05      	ldr	r2, [pc, #20]	@ (8007500 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80074ec:	430b      	orrs	r3, r1
 80074ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80074f2:	e00d      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80074f4:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80074f8:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
 80074fc:	e008      	b.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80074fe:	bf00      	nop
 8007500:	46020c00 	.word	0x46020c00
 8007504:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007508:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800750c:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007510:	f897 30d1 	ldrb.w	r3, [r7, #209]	@ 0xd1
 8007514:	2b01      	cmp	r3, #1
 8007516:	d107      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007518:	4bb2      	ldr	r3, [pc, #712]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800751a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800751e:	4ab1      	ldr	r2, [pc, #708]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007520:	f023 0304 	bic.w	r3, r3, #4
 8007524:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8007528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007534:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007536:	2300      	movs	r3, #0
 8007538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800753a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800753e:	460b      	mov	r3, r1
 8007540:	4313      	orrs	r3, r2
 8007542:	d042      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8007544:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800754c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007550:	d022      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007552:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8007556:	d81b      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800755c:	d011      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x732>
 800755e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007562:	d815      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8007564:	2b00      	cmp	r3, #0
 8007566:	d019      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8007568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800756c:	d110      	bne.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800756e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007572:	3308      	adds	r3, #8
 8007574:	4618      	mov	r0, r3
 8007576:	f000 f9a9 	bl	80078cc <RCCEx_PLL2_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007580:	e00d      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007582:	4b98      	ldr	r3, [pc, #608]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	4a97      	ldr	r2, [pc, #604]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800758c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800758e:	e006      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007596:	e002      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 800759c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800759e:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10d      	bne.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80075a6:	4b8f      	ldr	r3, [pc, #572]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80075a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80075ac:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80075b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075b8:	4a8a      	ldr	r2, [pc, #552]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80075ba:	430b      	orrs	r3, r1
 80075bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80075c0:	e003      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c2:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80075c6:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80075ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80075d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80075d8:	2300      	movs	r3, #0
 80075da:	647b      	str	r3, [r7, #68]	@ 0x44
 80075dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80075e0:	460b      	mov	r3, r1
 80075e2:	4313      	orrs	r3, r2
 80075e4:	d02d      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80075e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f2:	d00b      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80075f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80075f8:	d804      	bhi.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80075fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007602:	d007      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 800760a:	e004      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 800760c:	bf00      	nop
 800760e:	e002      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8007610:	bf00      	nop
 8007612:	e000      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8007614:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007616:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10d      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800761e:	4b71      	ldr	r3, [pc, #452]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007620:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007624:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007630:	4a6c      	ldr	r2, [pc, #432]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007632:	430b      	orrs	r3, r1
 8007634:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007638:	e003      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800763e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8007642:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800764e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007650:	2300      	movs	r3, #0
 8007652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007654:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007658:	460b      	mov	r3, r1
 800765a:	4313      	orrs	r3, r2
 800765c:	d00c      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800765e:	4b61      	ldr	r3, [pc, #388]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007664:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8007668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800766c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007670:	4a5c      	ldr	r2, [pc, #368]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007672:	430b      	orrs	r3, r1
 8007674:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007678:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800767c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007680:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30
 8007686:	2300      	movs	r3, #0
 8007688:	637b      	str	r3, [r7, #52]	@ 0x34
 800768a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800768e:	460b      	mov	r3, r1
 8007690:	4313      	orrs	r3, r2
 8007692:	d019      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8007694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007698:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800769c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076a0:	d105      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076a2:	4b50      	ldr	r3, [pc, #320]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80076a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a6:	4a4f      	ldr	r2, [pc, #316]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80076a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076ac:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80076ae:	4b4d      	ldr	r3, [pc, #308]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80076b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80076b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076c0:	4a48      	ldr	r2, [pc, #288]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80076c2:	430b      	orrs	r3, r1
 80076c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80076c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80076d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076d6:	2300      	movs	r3, #0
 80076d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80076de:	460b      	mov	r3, r1
 80076e0:	4313      	orrs	r3, r2
 80076e2:	d00c      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80076e4:	4b3f      	ldr	r3, [pc, #252]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80076e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80076ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80076ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80076f6:	493b      	ldr	r1, [pc, #236]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80076fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800770a:	623b      	str	r3, [r7, #32]
 800770c:	2300      	movs	r3, #0
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007710:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007714:	460b      	mov	r3, r1
 8007716:	4313      	orrs	r3, r2
 8007718:	d00c      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800771a:	4b32      	ldr	r3, [pc, #200]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800771c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007720:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800772c:	492d      	ldr	r1, [pc, #180]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007734:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	2300      	movs	r3, #0
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800774a:	460b      	mov	r3, r1
 800774c:	4313      	orrs	r3, r2
 800774e:	d00c      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007750:	4b24      	ldr	r3, [pc, #144]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007756:	f023 0218 	bic.w	r2, r3, #24
 800775a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800775e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007762:	4920      	ldr	r1, [pc, #128]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007764:	4313      	orrs	r3, r2
 8007766:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800776a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007780:	460b      	mov	r3, r1
 8007782:	4313      	orrs	r3, r2
 8007784:	d034      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800778a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800778e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007792:	d105      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007794:	4b13      	ldr	r3, [pc, #76]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	4a12      	ldr	r2, [pc, #72]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800779a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800779e:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80077a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077ac:	d108      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80077ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077b2:	3308      	adds	r3, #8
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 f889 	bl	80078cc <RCCEx_PLL2_Config>
 80077ba:	4603      	mov	r3, r0
 80077bc:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    }
    if (ret == HAL_OK)
 80077c0:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10f      	bne.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80077c8:	4b06      	ldr	r3, [pc, #24]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80077ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80077da:	4902      	ldr	r1, [pc, #8]	@ (80077e4 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80077e2:	e005      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 80077e4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80077ec:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80077f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80077fc:	60bb      	str	r3, [r7, #8]
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
 8007802:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007806:	460b      	mov	r3, r1
 8007808:	4313      	orrs	r3, r2
 800780a:	d03a      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800780c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007814:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007818:	d00e      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800781a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800781e:	d815      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d017      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007824:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007828:	d110      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800782a:	4b27      	ldr	r3, [pc, #156]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 800782c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782e:	4a26      	ldr	r2, [pc, #152]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8007830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007834:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8007836:	e00e      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800783c:	3308      	adds	r3, #8
 800783e:	4618      	mov	r0, r3
 8007840:	f000 f844 	bl	80078cc <RCCEx_PLL2_Config>
 8007844:	4603      	mov	r3, r0
 8007846:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800784a:	e004      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
        break;
 8007852:	e000      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 8007854:	bf00      	nop
    }
    if (ret == HAL_OK)
 8007856:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10d      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800785e:	4b1a      	ldr	r3, [pc, #104]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8007860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007864:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800786c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007870:	4915      	ldr	r1, [pc, #84]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8007872:	4313      	orrs	r3, r2
 8007874:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800787e:	f887 30d2 	strb.w	r3, [r7, #210]	@ 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007882:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	2300      	movs	r3, #0
 8007892:	607b      	str	r3, [r7, #4]
 8007894:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007898:	460b      	mov	r3, r1
 800789a:	4313      	orrs	r3, r2
 800789c:	d00c      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800789e:	4b0a      	ldr	r3, [pc, #40]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80078a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078a4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80078a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80078ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80078b0:	4905      	ldr	r1, [pc, #20]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80078b8:	f897 30d2 	ldrb.w	r3, [r7, #210]	@ 0xd2
}
 80078bc:	4618      	mov	r0, r3
 80078be:	37d8      	adds	r7, #216	@ 0xd8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078c6:	bf00      	nop
 80078c8:	46020c00 	.word	0x46020c00

080078cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80078d4:	4b47      	ldr	r3, [pc, #284]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a46      	ldr	r2, [pc, #280]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80078da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078de:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078e0:	f7fa f9e2 	bl	8001ca8 <HAL_GetTick>
 80078e4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078e6:	e008      	b.n	80078fa <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078e8:	f7fa f9de 	bl	8001ca8 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d901      	bls.n	80078fa <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e077      	b.n	80079ea <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078fa:	4b3e      	ldr	r3, [pc, #248]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007906:	4b3b      	ldr	r3, [pc, #236]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800790a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800790e:	f023 0303 	bic.w	r3, r3, #3
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6811      	ldr	r1, [r2, #0]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	6852      	ldr	r2, [r2, #4]
 800791a:	3a01      	subs	r2, #1
 800791c:	0212      	lsls	r2, r2, #8
 800791e:	430a      	orrs	r2, r1
 8007920:	4934      	ldr	r1, [pc, #208]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007922:	4313      	orrs	r3, r2
 8007924:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007926:	4b33      	ldr	r3, [pc, #204]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800792a:	4b33      	ldr	r3, [pc, #204]	@ (80079f8 <RCCEx_PLL2_Config+0x12c>)
 800792c:	4013      	ands	r3, r2
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6892      	ldr	r2, [r2, #8]
 8007932:	3a01      	subs	r2, #1
 8007934:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	68d2      	ldr	r2, [r2, #12]
 800793c:	3a01      	subs	r2, #1
 800793e:	0252      	lsls	r2, r2, #9
 8007940:	b292      	uxth	r2, r2
 8007942:	4311      	orrs	r1, r2
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6912      	ldr	r2, [r2, #16]
 8007948:	3a01      	subs	r2, #1
 800794a:	0412      	lsls	r2, r2, #16
 800794c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007950:	4311      	orrs	r1, r2
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6952      	ldr	r2, [r2, #20]
 8007956:	3a01      	subs	r2, #1
 8007958:	0612      	lsls	r2, r2, #24
 800795a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800795e:	430a      	orrs	r2, r1
 8007960:	4924      	ldr	r1, [pc, #144]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007962:	4313      	orrs	r3, r2
 8007964:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007966:	4b23      	ldr	r3, [pc, #140]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800796a:	f023 020c 	bic.w	r2, r3, #12
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	4920      	ldr	r1, [pc, #128]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007974:	4313      	orrs	r3, r2
 8007976:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007978:	4b1e      	ldr	r3, [pc, #120]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 800797a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	491c      	ldr	r1, [pc, #112]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007982:	4313      	orrs	r3, r2
 8007984:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007986:	4b1b      	ldr	r3, [pc, #108]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798a:	4a1a      	ldr	r2, [pc, #104]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 800798c:	f023 0310 	bic.w	r3, r3, #16
 8007990:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007992:	4b18      	ldr	r3, [pc, #96]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 8007994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007996:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800799a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	69d2      	ldr	r2, [r2, #28]
 80079a2:	00d2      	lsls	r2, r2, #3
 80079a4:	4913      	ldr	r1, [pc, #76]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80079aa:	4b12      	ldr	r3, [pc, #72]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80079ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ae:	4a11      	ldr	r2, [pc, #68]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80079b0:	f043 0310 	orr.w	r3, r3, #16
 80079b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80079b6:	4b0f      	ldr	r3, [pc, #60]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a0e      	ldr	r2, [pc, #56]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80079bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80079c0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079c2:	f7fa f971 	bl	8001ca8 <HAL_GetTick>
 80079c6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079c8:	e008      	b.n	80079dc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079ca:	f7fa f96d 	bl	8001ca8 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d901      	bls.n	80079dc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e006      	b.n	80079ea <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079dc:	4b05      	ldr	r3, [pc, #20]	@ (80079f4 <RCCEx_PLL2_Config+0x128>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0f0      	beq.n	80079ca <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80079e8:	2300      	movs	r3, #0

}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	46020c00 	.word	0x46020c00
 80079f8:	80800000 	.word	0x80800000

080079fc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007a04:	4b47      	ldr	r3, [pc, #284]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a46      	ldr	r2, [pc, #280]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a10:	f7fa f94a 	bl	8001ca8 <HAL_GetTick>
 8007a14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a16:	e008      	b.n	8007a2a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a18:	f7fa f946 	bl	8001ca8 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d901      	bls.n	8007a2a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e077      	b.n	8007b1a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1f0      	bne.n	8007a18 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007a36:	4b3b      	ldr	r3, [pc, #236]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a3e:	f023 0303 	bic.w	r3, r3, #3
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6811      	ldr	r1, [r2, #0]
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6852      	ldr	r2, [r2, #4]
 8007a4a:	3a01      	subs	r2, #1
 8007a4c:	0212      	lsls	r2, r2, #8
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	4934      	ldr	r1, [pc, #208]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	630b      	str	r3, [r1, #48]	@ 0x30
 8007a56:	4b33      	ldr	r3, [pc, #204]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007a58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a5a:	4b33      	ldr	r3, [pc, #204]	@ (8007b28 <RCCEx_PLL3_Config+0x12c>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6892      	ldr	r2, [r2, #8]
 8007a62:	3a01      	subs	r2, #1
 8007a64:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	68d2      	ldr	r2, [r2, #12]
 8007a6c:	3a01      	subs	r2, #1
 8007a6e:	0252      	lsls	r2, r2, #9
 8007a70:	b292      	uxth	r2, r2
 8007a72:	4311      	orrs	r1, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6912      	ldr	r2, [r2, #16]
 8007a78:	3a01      	subs	r2, #1
 8007a7a:	0412      	lsls	r2, r2, #16
 8007a7c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007a80:	4311      	orrs	r1, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6952      	ldr	r2, [r2, #20]
 8007a86:	3a01      	subs	r2, #1
 8007a88:	0612      	lsls	r2, r2, #24
 8007a8a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	4924      	ldr	r1, [pc, #144]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007a96:	4b23      	ldr	r3, [pc, #140]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a9a:	f023 020c 	bic.w	r2, r3, #12
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	4920      	ldr	r1, [pc, #128]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	491c      	ldr	r1, [pc, #112]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aba:	4a1a      	ldr	r2, [pc, #104]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007abc:	f023 0310 	bic.w	r3, r3, #16
 8007ac0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ac2:	4b18      	ldr	r3, [pc, #96]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007aca:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	69d2      	ldr	r2, [r2, #28]
 8007ad2:	00d2      	lsls	r2, r2, #3
 8007ad4:	4913      	ldr	r1, [pc, #76]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007ada:	4b12      	ldr	r3, [pc, #72]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ade:	4a11      	ldr	r2, [pc, #68]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007ae0:	f043 0310 	orr.w	r3, r3, #16
 8007ae4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a0e      	ldr	r2, [pc, #56]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007af0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007af2:	f7fa f8d9 	bl	8001ca8 <HAL_GetTick>
 8007af6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007af8:	e008      	b.n	8007b0c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007afa:	f7fa f8d5 	bl	8001ca8 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e006      	b.n	8007b1a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b0c:	4b05      	ldr	r3, [pc, #20]	@ (8007b24 <RCCEx_PLL3_Config+0x128>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	46020c00 	.word	0x46020c00
 8007b28:	80800000 	.word	0x80800000

08007b2c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e0fb      	b.n	8007d36 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a7f      	ldr	r2, [pc, #508]	@ (8007d40 <HAL_SPI_Init+0x214>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_SPI_Init+0x26>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a7d      	ldr	r2, [pc, #500]	@ (8007d44 <HAL_SPI_Init+0x218>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	e000      	b.n	8007b54 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007b52:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a78      	ldr	r2, [pc, #480]	@ (8007d40 <HAL_SPI_Init+0x214>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d004      	beq.n	8007b6e <HAL_SPI_Init+0x42>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a76      	ldr	r2, [pc, #472]	@ (8007d44 <HAL_SPI_Init+0x218>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d105      	bne.n	8007b7a <HAL_SPI_Init+0x4e>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	2b0f      	cmp	r3, #15
 8007b74:	d901      	bls.n	8007b7a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e0dd      	b.n	8007d36 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 ffe8 	bl	8008b50 <SPI_GetPacketSize>
 8007b80:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a6e      	ldr	r2, [pc, #440]	@ (8007d40 <HAL_SPI_Init+0x214>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d004      	beq.n	8007b96 <HAL_SPI_Init+0x6a>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a6c      	ldr	r2, [pc, #432]	@ (8007d44 <HAL_SPI_Init+0x218>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d102      	bne.n	8007b9c <HAL_SPI_Init+0x70>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d816      	bhi.n	8007bca <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ba0:	4a69      	ldr	r2, [pc, #420]	@ (8007d48 <HAL_SPI_Init+0x21c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00e      	beq.n	8007bc4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a68      	ldr	r2, [pc, #416]	@ (8007d4c <HAL_SPI_Init+0x220>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d009      	beq.n	8007bc4 <HAL_SPI_Init+0x98>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a66      	ldr	r2, [pc, #408]	@ (8007d50 <HAL_SPI_Init+0x224>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <HAL_SPI_Init+0x98>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a65      	ldr	r2, [pc, #404]	@ (8007d54 <HAL_SPI_Init+0x228>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d104      	bne.n	8007bce <HAL_SPI_Init+0xa2>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d901      	bls.n	8007bce <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e0b3      	b.n	8007d36 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d106      	bne.n	8007be8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f7f9 f930 	bl	8000e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0201 	bic.w	r2, r2, #1
 8007bfe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007c0a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007c14:	d119      	bne.n	8007c4a <HAL_SPI_Init+0x11e>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c1e:	d103      	bne.n	8007c28 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10c      	bne.n	8007c4a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007c34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c38:	d107      	bne.n	8007c4a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c48:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00f      	beq.n	8007c76 <HAL_SPI_Init+0x14a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	2b06      	cmp	r3, #6
 8007c5c:	d90b      	bls.n	8007c76 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	e007      	b.n	8007c86 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	69da      	ldr	r2, [r3, #28]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	431a      	orrs	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c98:	ea42 0103 	orr.w	r1, r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68da      	ldr	r2, [r3, #12]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	695b      	ldr	r3, [r3, #20]
 8007cc8:	431a      	orrs	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cf2:	ea42 0103 	orr.w	r1, r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00a      	beq.n	8007d24 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	46002000 	.word	0x46002000
 8007d44:	56002000 	.word	0x56002000
 8007d48:	40013000 	.word	0x40013000
 8007d4c:	50013000 	.word	0x50013000
 8007d50:	40003800 	.word	0x40003800
 8007d54:	50003800 	.word	0x50003800

08007d58 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b088      	sub	sp, #32
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	4613      	mov	r3, r2
 8007d66:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3320      	adds	r3, #32
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d70:	f7f9 ff9a 	bl	8001ca8 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d001      	beq.n	8007d86 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8007d82:	2302      	movs	r3, #2
 8007d84:	e1f3      	b.n	800816e <HAL_SPI_Transmit+0x416>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d002      	beq.n	8007d92 <HAL_SPI_Transmit+0x3a>
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d101      	bne.n	8007d96 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e1eb      	b.n	800816e <HAL_SPI_Transmit+0x416>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d101      	bne.n	8007da4 <HAL_SPI_Transmit+0x4c>
 8007da0:	2302      	movs	r3, #2
 8007da2:	e1e4      	b.n	800816e <HAL_SPI_Transmit+0x416>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2203      	movs	r2, #3
 8007db0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	88fa      	ldrh	r2, [r7, #6]
 8007dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	88fa      	ldrh	r2, [r7, #6]
 8007dce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2200      	movs	r2, #0
 8007dec:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007dfc:	d108      	bne.n	8007e10 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	e009      	b.n	8007e24 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007e22:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	0c1b      	lsrs	r3, r3, #16
 8007e2c:	041b      	lsls	r3, r3, #16
 8007e2e:	88f9      	ldrh	r1, [r7, #6]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	6812      	ldr	r2, [r2, #0]
 8007e34:	430b      	orrs	r3, r1
 8007e36:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0201 	orr.w	r2, r2, #1
 8007e46:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10c      	bne.n	8007e70 <HAL_SPI_Transmit+0x118>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007e5e:	d107      	bne.n	8007e70 <HAL_SPI_Transmit+0x118>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	2b0f      	cmp	r3, #15
 8007e76:	d95b      	bls.n	8007f30 <HAL_SPI_Transmit+0x1d8>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a8f      	ldr	r2, [pc, #572]	@ (80080bc <HAL_SPI_Transmit+0x364>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d04f      	beq.n	8007f22 <HAL_SPI_Transmit+0x1ca>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a8e      	ldr	r2, [pc, #568]	@ (80080c0 <HAL_SPI_Transmit+0x368>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d04a      	beq.n	8007f22 <HAL_SPI_Transmit+0x1ca>
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a8c      	ldr	r2, [pc, #560]	@ (80080c4 <HAL_SPI_Transmit+0x36c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d045      	beq.n	8007f22 <HAL_SPI_Transmit+0x1ca>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a8b      	ldr	r2, [pc, #556]	@ (80080c8 <HAL_SPI_Transmit+0x370>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d147      	bne.n	8007f30 <HAL_SPI_Transmit+0x1d8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007ea0:	e03f      	b.n	8007f22 <HAL_SPI_Transmit+0x1ca>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d114      	bne.n	8007eda <HAL_SPI_Transmit+0x182>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ec0:	1d1a      	adds	r2, r3, #4
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ed8:	e023      	b.n	8007f22 <HAL_SPI_Transmit+0x1ca>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eda:	f7f9 fee5 	bl	8001ca8 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d803      	bhi.n	8007ef2 <HAL_SPI_Transmit+0x19a>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef0:	d102      	bne.n	8007ef8 <HAL_SPI_Transmit+0x1a0>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d114      	bne.n	8007f22 <HAL_SPI_Transmit+0x1ca>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f000 fd5b 	bl	80089b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e125      	b.n	800816e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1b9      	bne.n	8007ea2 <HAL_SPI_Transmit+0x14a>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007f2e:	e0f8      	b.n	8008122 <HAL_SPI_Transmit+0x3ca>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	2b07      	cmp	r3, #7
 8007f36:	f240 80ed 	bls.w	8008114 <HAL_SPI_Transmit+0x3bc>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f3a:	e05d      	b.n	8007ff8 <HAL_SPI_Transmit+0x2a0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d132      	bne.n	8007fb0 <HAL_SPI_Transmit+0x258>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d918      	bls.n	8007f88 <HAL_SPI_Transmit+0x230>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d014      	beq.n	8007f88 <HAL_SPI_Transmit+0x230>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f6e:	1d1a      	adds	r2, r3, #4
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b02      	subs	r3, #2
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f86:	e037      	b.n	8007ff8 <HAL_SPI_Transmit+0x2a0>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f8c:	881a      	ldrh	r2, [r3, #0]
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f96:	1c9a      	adds	r2, r3, #2
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007fae:	e023      	b.n	8007ff8 <HAL_SPI_Transmit+0x2a0>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fb0:	f7f9 fe7a 	bl	8001ca8 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d803      	bhi.n	8007fc8 <HAL_SPI_Transmit+0x270>
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc6:	d102      	bne.n	8007fce <HAL_SPI_Transmit+0x276>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d114      	bne.n	8007ff8 <HAL_SPI_Transmit+0x2a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 fcf0 	bl	80089b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fda:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e0ba      	b.n	800816e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	d19b      	bne.n	8007f3c <HAL_SPI_Transmit+0x1e4>
 8008004:	e08d      	b.n	8008122 <HAL_SPI_Transmit+0x3ca>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b02      	cmp	r3, #2
 8008012:	d15b      	bne.n	80080cc <HAL_SPI_Transmit+0x374>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800801a:	b29b      	uxth	r3, r3
 800801c:	2b03      	cmp	r3, #3
 800801e:	d918      	bls.n	8008052 <HAL_SPI_Transmit+0x2fa>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008024:	2b40      	cmp	r3, #64	@ 0x40
 8008026:	d914      	bls.n	8008052 <HAL_SPI_Transmit+0x2fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008038:	1d1a      	adds	r2, r3, #4
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008044:	b29b      	uxth	r3, r3
 8008046:	3b04      	subs	r3, #4
 8008048:	b29a      	uxth	r2, r3
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008050:	e060      	b.n	8008114 <HAL_SPI_Transmit+0x3bc>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008058:	b29b      	uxth	r3, r3
 800805a:	2b01      	cmp	r3, #1
 800805c:	d917      	bls.n	800808e <HAL_SPI_Transmit+0x336>
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d013      	beq.n	800808e <HAL_SPI_Transmit+0x336>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800806a:	881a      	ldrh	r2, [r3, #0]
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008080:	b29b      	uxth	r3, r3
 8008082:	3b02      	subs	r3, #2
 8008084:	b29a      	uxth	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800808c:	e042      	b.n	8008114 <HAL_SPI_Transmit+0x3bc>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3320      	adds	r3, #32
 8008098:	7812      	ldrb	r2, [r2, #0]
 800809a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	3b01      	subs	r3, #1
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80080b8:	e02c      	b.n	8008114 <HAL_SPI_Transmit+0x3bc>
 80080ba:	bf00      	nop
 80080bc:	40013000 	.word	0x40013000
 80080c0:	50013000 	.word	0x50013000
 80080c4:	40003800 	.word	0x40003800
 80080c8:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080cc:	f7f9 fdec 	bl	8001ca8 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d803      	bhi.n	80080e4 <HAL_SPI_Transmit+0x38c>
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d102      	bne.n	80080ea <HAL_SPI_Transmit+0x392>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d114      	bne.n	8008114 <HAL_SPI_Transmit+0x3bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 fc62 	bl	80089b4 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e02c      	b.n	800816e <HAL_SPI_Transmit+0x416>
    while (hspi->TxXferCount > 0UL)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800811a:	b29b      	uxth	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	f47f af72 	bne.w	8008006 <HAL_SPI_Transmit+0x2ae>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2200      	movs	r2, #0
 800812a:	2108      	movs	r1, #8
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fce1 	bl	8008af4 <SPI_WaitOnFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_SPI_Transmit+0x3f0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800813e:	f043 0220 	orr.w	r2, r3, #32
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 fc33 	bl	80089b4 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <HAL_SPI_Transmit+0x414>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e000      	b.n	800816e <HAL_SPI_Transmit+0x416>
  }
  else
  {
    return HAL_OK;
 800816c:	2300      	movs	r3, #0
  }
}
 800816e:	4618      	mov	r0, r3
 8008170:	3718      	adds	r7, #24
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop

08008178 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	d001      	beq.n	8008196 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008192:	2302      	movs	r3, #2
 8008194:	e192      	b.n	80084bc <HAL_SPI_Transmit_DMA+0x344>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <HAL_SPI_Transmit_DMA+0x2a>
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e18a      	b.n	80084bc <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d101      	bne.n	80081b4 <HAL_SPI_Transmit_DMA+0x3c>
 80081b0:	2302      	movs	r3, #2
 80081b2:	e183      	b.n	80084bc <HAL_SPI_Transmit_DMA+0x344>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2203      	movs	r2, #3
 80081c0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	88fa      	ldrh	r2, [r7, #6]
 80081de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2200      	movs	r2, #0
 80081e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->TxISR       = NULL;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->RxXferSize  = (uint16_t)0UL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t)0UL;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800820c:	d108      	bne.n	8008220 <HAL_SPI_Transmit_DMA+0xa8>
  {
    SPI_1LINE_TX(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e009      	b.n	8008234 <HAL_SPI_Transmit_DMA+0xbc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008232:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	2b0f      	cmp	r3, #15
 800823a:	d919      	bls.n	8008270 <HAL_SPI_Transmit_DMA+0xf8>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008242:	699b      	ldr	r3, [r3, #24]
 8008244:	2b02      	cmp	r3, #2
 8008246:	d013      	beq.n	8008270 <HAL_SPI_Transmit_DMA+0xf8>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.SrcDataWidth !=  DMA_SRC_DATAWIDTH_WORD) && \
 800824c:	4a9d      	ldr	r2, [pc, #628]	@ (80084c4 <HAL_SPI_Transmit_DMA+0x34c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d018      	beq.n	8008284 <HAL_SPI_Transmit_DMA+0x10c>
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a9c      	ldr	r2, [pc, #624]	@ (80084c8 <HAL_SPI_Transmit_DMA+0x350>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d013      	beq.n	8008284 <HAL_SPI_Transmit_DMA+0x10c>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a9a      	ldr	r2, [pc, #616]	@ (80084cc <HAL_SPI_Transmit_DMA+0x354>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00e      	beq.n	8008284 <HAL_SPI_Transmit_DMA+0x10c>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a99      	ldr	r2, [pc, #612]	@ (80084d0 <HAL_SPI_Transmit_DMA+0x358>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d009      	beq.n	8008284 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	68db      	ldr	r3, [r3, #12]
       (IS_SPI_FULL_INSTANCE(hspi->Instance))) || \
 8008274:	2b07      	cmp	r3, #7
 8008276:	d90b      	bls.n	8008290 <HAL_SPI_Transmit_DMA+0x118>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT)  && (hspi->hdmatx->Init.SrcDataWidth ==  DMA_SRC_DATAWIDTH_BYTE)))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d105      	bne.n	8008290 <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e115      	b.n	80084bc <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	2b07      	cmp	r3, #7
 8008296:	d820      	bhi.n	80082da <HAL_SPI_Transmit_DMA+0x162>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d109      	bne.n	80082b8 <HAL_SPI_Transmit_DMA+0x140>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3301      	adds	r3, #1
 80082ae:	105b      	asrs	r3, r3, #1
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d11e      	bne.n	8008302 <HAL_SPI_Transmit_DMA+0x18a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082ca:	b29b      	uxth	r3, r3
 80082cc:	3303      	adds	r3, #3
 80082ce:	109b      	asrs	r3, r3, #2
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80082d8:	e013      	b.n	8008302 <HAL_SPI_Transmit_DMA+0x18a>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	2b0f      	cmp	r3, #15
 80082e0:	d80f      	bhi.n	8008302 <HAL_SPI_Transmit_DMA+0x18a>
  {
    if (hspi->hdmatx->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	2b02      	cmp	r3, #2
 80082ec:	d109      	bne.n	8008302 <HAL_SPI_Transmit_DMA+0x18a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3301      	adds	r3, #1
 80082f8:	105b      	asrs	r3, r3, #1
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008308:	4a72      	ldr	r2, [pc, #456]	@ (80084d4 <HAL_SPI_Transmit_DMA+0x35c>)
 800830a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008312:	4a71      	ldr	r2, [pc, #452]	@ (80084d8 <HAL_SPI_Transmit_DMA+0x360>)
 8008314:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800831c:	4a6f      	ldr	r2, [pc, #444]	@ (80084dc <HAL_SPI_Transmit_DMA+0x364>)
 800831e:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008326:	2200      	movs	r2, #0
 8008328:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689a      	ldr	r2, [r3, #8]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008338:	609a      	str	r2, [r3, #8]

  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	2b07      	cmp	r3, #7
 8008340:	d804      	bhi.n	800834c <HAL_SPI_Transmit_DMA+0x1d4>
  {
    hspi->TxXferCount = Size;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	88fa      	ldrh	r2, [r7, #6]
 8008346:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800834a:	e010      	b.n	800836e <HAL_SPI_Transmit_DMA+0x1f6>
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d806      	bhi.n	8008362 <HAL_SPI_Transmit_DMA+0x1ea>
  {
    hspi->TxXferCount = Size * 2U;
 8008354:	88fb      	ldrh	r3, [r7, #6]
 8008356:	005b      	lsls	r3, r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008360:	e005      	b.n	800836e <HAL_SPI_Transmit_DMA+0x1f6>
  }
  else
  {
    hspi->TxXferCount = Size * 4U;
 8008362:	88fb      	ldrh	r3, [r7, #6]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }

  /* Enable the Tx DMA Stream/Channel */
  if ((hspi->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02d      	beq.n	80083da <HAL_SPI_Transmit_DMA+0x262>
  {
    if (hspi->hdmatx->LinkedListQueue != NULL)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008386:	2b00      	cmp	r3, #0
 8008388:	d024      	beq.n	80083d4 <HAL_SPI_Transmit_DMA+0x25c>
    {
      /* Set DMA data size */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = hspi->TxXferCount;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008390:	b29a      	uxth	r2, r3
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	609a      	str	r2, [r3, #8]

      /* Set DMA source address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)hspi->pTxBuffPtr;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60da      	str	r2, [r3, #12]

      /* Set DMA destination address */
      hspi->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)&hspi->Instance->TXDR;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f103 0220 	add.w	r2, r3, #32
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	611a      	str	r2, [r3, #16]

      status = HAL_DMAEx_List_Start_IT(hspi->hdmatx);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fc fd7b 	bl	8004ec4 <HAL_DMAEx_List_Start_IT>
 80083ce:	4603      	mov	r3, r0
 80083d0:	75fb      	strb	r3, [r7, #23]
 80083d2:	e014      	b.n	80083fe <HAL_SPI_Transmit_DMA+0x286>
    }
    else
    {
      status = HAL_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	75fb      	strb	r3, [r7, #23]
 80083d8:	e011      	b.n	80083fe <HAL_SPI_Transmit_DMA+0x286>
    }
  }
  else
  {
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80083e4:	4619      	mov	r1, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3320      	adds	r3, #32
 80083ec:	461a      	mov	r2, r3
                              hspi->TxXferCount);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083f4:	b29b      	uxth	r3, r3
    status = HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 80083f6:	f7fc f88d 	bl	8004514 <HAL_DMA_Start_IT>
 80083fa:	4603      	mov	r3, r0
 80083fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Check status */
  if (status != HAL_OK)
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d011      	beq.n	8008428 <HAL_SPI_Transmit_DMA+0x2b0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800840a:	f043 0210 	orr.w	r2, r3, #16
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e049      	b.n	80084bc <HAL_SPI_Transmit_DMA+0x344>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800842e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008430:	2b81      	cmp	r3, #129	@ 0x81
 8008432:	d108      	bne.n	8008446 <HAL_SPI_Transmit_DMA+0x2ce>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	6812      	ldr	r2, [r2, #0]
 800843e:	0c1b      	lsrs	r3, r3, #16
 8008440:	041b      	lsls	r3, r3, #16
 8008442:	6053      	str	r3, [r2, #4]
 8008444:	e009      	b.n	800845a <HAL_SPI_Transmit_DMA+0x2e2>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	0c1b      	lsrs	r3, r3, #16
 800844e:	041b      	lsls	r3, r3, #16
 8008450:	88f9      	ldrh	r1, [r7, #6]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	6812      	ldr	r2, [r2, #0]
 8008456:	430b      	orrs	r3, r1
 8008458:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008468:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 8008478:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0201 	orr.w	r2, r2, #1
 8008488:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10c      	bne.n	80084b2 <HAL_SPI_Transmit_DMA+0x33a>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80084a0:	d107      	bne.n	80084b2 <HAL_SPI_Transmit_DMA+0x33a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084b0:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	40013000 	.word	0x40013000
 80084c8:	50013000 	.word	0x50013000
 80084cc:	40003800 	.word	0x40003800
 80084d0:	50003800 	.word	0x50003800
 80084d4:	0800891f 	.word	0x0800891f
 80084d8:	080088d9 	.word	0x080088d9
 80084dc:	0800893b 	.word	0x0800893b

080084e0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b08a      	sub	sp, #40	@ 0x28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695b      	ldr	r3, [r3, #20]
 80084f6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80084f8:	6a3a      	ldr	r2, [r7, #32]
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4013      	ands	r3, r2
 80084fe:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008508:	2300      	movs	r3, #0
 800850a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008512:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3330      	adds	r3, #48	@ 0x30
 800851a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008522:	2b00      	cmp	r3, #0
 8008524:	d010      	beq.n	8008548 <HAL_SPI_IRQHandler+0x68>
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	f003 0308 	and.w	r3, r3, #8
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	699a      	ldr	r2, [r3, #24]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800853e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f9bf 	bl	80088c4 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8008546:	e19a      	b.n	800887e <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d113      	bne.n	800857a <HAL_SPI_IRQHandler+0x9a>
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f003 0320 	and.w	r3, r3, #32
 8008558:	2b00      	cmp	r3, #0
 800855a:	d10e      	bne.n	800857a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008562:	2b00      	cmp	r3, #0
 8008564:	d009      	beq.n	800857a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	4798      	blx	r3
    handled = 1UL;
 8008576:	2301      	movs	r3, #1
 8008578:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10f      	bne.n	80085a4 <HAL_SPI_IRQHandler+0xc4>
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00a      	beq.n	80085a4 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008594:	2b00      	cmp	r3, #0
 8008596:	d105      	bne.n	80085a4 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
    handled = 1UL;
 80085a0:	2301      	movs	r3, #1
 80085a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10f      	bne.n	80085ce <HAL_SPI_IRQHandler+0xee>
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	f003 0302 	and.w	r3, r3, #2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00a      	beq.n	80085ce <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d105      	bne.n	80085ce <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	4798      	blx	r3
    handled = 1UL;
 80085ca:	2301      	movs	r3, #1
 80085cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f040 814f 	bne.w	8008874 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	f003 0308 	and.w	r3, r3, #8
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 808b 	beq.w	80086f8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 0208 	orr.w	r2, r2, #8
 80085f0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	699a      	ldr	r2, [r3, #24]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f042 0210 	orr.w	r2, r2, #16
 8008600:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008610:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	691a      	ldr	r2, [r3, #16]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0208 	bic.w	r2, r2, #8
 8008620:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d13d      	bne.n	80086ac <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008630:	e036      	b.n	80086a0 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	2b0f      	cmp	r3, #15
 8008638:	d90b      	bls.n	8008652 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008642:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008644:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864a:	1d1a      	adds	r2, r3, #4
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008650:	e01d      	b.n	800868e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	2b07      	cmp	r3, #7
 8008658:	d90b      	bls.n	8008672 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	8812      	ldrh	r2, [r2, #0]
 8008662:	b292      	uxth	r2, r2
 8008664:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800866a:	1c9a      	adds	r2, r3, #2
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008670:	e00d      	b.n	800868e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800867e:	7812      	ldrb	r2, [r2, #0]
 8008680:	b2d2      	uxtb	r2, r2
 8008682:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008688:	1c5a      	adds	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008694:	b29b      	uxth	r3, r3
 8008696:	3b01      	subs	r3, #1
 8008698:	b29a      	uxth	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1c2      	bne.n	8008632 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 f981 	bl	80089b4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d003      	beq.n	80086cc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7f9 f98f 	bl	80019e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80086ca:	e0d8      	b.n	800887e <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80086cc:	7cfb      	ldrb	r3, [r7, #19]
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d103      	bne.n	80086da <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f8e2 	bl	800889c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80086d8:	e0ce      	b.n	8008878 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80086da:	7cfb      	ldrb	r3, [r7, #19]
 80086dc:	2b04      	cmp	r3, #4
 80086de:	d103      	bne.n	80086e8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f8d1 	bl	8008888 <HAL_SPI_RxCpltCallback>
    return;
 80086e6:	e0c7      	b.n	8008878 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80086e8:	7cfb      	ldrb	r3, [r7, #19]
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	f040 80c4 	bne.w	8008878 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f7f9 f98f 	bl	8001a14 <HAL_SPI_TxCpltCallback>
    return;
 80086f6:	e0bf      	b.n	8008878 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 80bd 	beq.w	800887e <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00f      	beq.n	800872e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008714:	f043 0204 	orr.w	r2, r3, #4
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699a      	ldr	r2, [r3, #24]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800872c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00f      	beq.n	8008758 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800873e:	f043 0201 	orr.w	r2, r3, #1
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	699a      	ldr	r2, [r3, #24]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008756:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00f      	beq.n	8008782 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008768:	f043 0208 	orr.w	r2, r3, #8
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	699a      	ldr	r2, [r3, #24]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008780:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00f      	beq.n	80087ac <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008792:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	699a      	ldr	r2, [r3, #24]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f042 0220 	orr.w	r2, r2, #32
 80087aa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d062      	beq.n	800887c <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0201 	bic.w	r2, r2, #1
 80087c4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	6812      	ldr	r2, [r2, #0]
 80087d0:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 80087d4:	f023 0303 	bic.w	r3, r3, #3
 80087d8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80087e0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80087e4:	d13e      	bne.n	8008864 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80087f4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d015      	beq.n	800882c <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008806:	4a1f      	ldr	r2, [pc, #124]	@ (8008884 <HAL_SPI_IRQHandler+0x3a4>)
 8008808:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008810:	4618      	mov	r0, r3
 8008812:	f7fb fedf 	bl	80045d4 <HAL_DMA_Abort_IT>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d007      	beq.n	800882c <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008822:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008832:	2b00      	cmp	r3, #0
 8008834:	d022      	beq.n	800887c <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800883c:	4a11      	ldr	r2, [pc, #68]	@ (8008884 <HAL_SPI_IRQHandler+0x3a4>)
 800883e:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008846:	4618      	mov	r0, r3
 8008848:	f7fb fec4 	bl	80045d4 <HAL_DMA_Abort_IT>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d014      	beq.n	800887c <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008858:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008862:	e00b      	b.n	800887c <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7f9 f8bb 	bl	80019e8 <HAL_SPI_ErrorCallback>
    return;
 8008872:	e003      	b.n	800887c <HAL_SPI_IRQHandler+0x39c>
    return;
 8008874:	bf00      	nop
 8008876:	e002      	b.n	800887e <HAL_SPI_IRQHandler+0x39e>
    return;
 8008878:	bf00      	nop
 800887a:	e000      	b.n	800887e <HAL_SPI_IRQHandler+0x39e>
    return;
 800887c:	bf00      	nop
  }
}
 800887e:	3728      	adds	r7, #40	@ 0x28
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	08008981 	.word	0x08008981

08008888 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088e4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	d011      	beq.n	8008916 <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Mode == DMA_LINKEDLIST_CIRCULAR)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088fa:	2b81      	cmp	r3, #129	@ 0x81
 80088fc:	d103      	bne.n	8008906 <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f7f9 f888 	bl	8001a14 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008904:	e007      	b.n	8008916 <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	691a      	ldr	r2, [r3, #16]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f042 0208 	orr.w	r2, r2, #8
 8008914:	611a      	str	r2, [r3, #16]
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800892a:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f7ff ffbf 	bl	80088b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008932:	bf00      	nop
 8008934:	3710      	adds	r7, #16
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008946:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_NONE)
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f7fb ffcd 	bl	80048e8 <HAL_DMA_GetError>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d011      	beq.n	8008978 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 f82d 	bl	80089b4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008960:	f043 0210 	orr.w	r2, r3, #16
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->State = HAL_SPI_STATE_READY;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7f9 f838 	bl	80019e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008978:	bf00      	nop
 800897a:	3710      	adds	r7, #16
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800898c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7f9 f81e 	bl	80019e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	699a      	ldr	r2, [r3, #24]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f042 0208 	orr.w	r2, r2, #8
 80089d2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0210 	orr.w	r2, r2, #16
 80089e2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008a02:	f023 0303 	bic.w	r3, r3, #3
 8008a06:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008a16:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	2b04      	cmp	r3, #4
 8008a22:	d014      	beq.n	8008a4e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00f      	beq.n	8008a4e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a34:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f042 0220 	orr.w	r2, r2, #32
 8008a4c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d014      	beq.n	8008a84 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00f      	beq.n	8008a84 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a6a:	f043 0204 	orr.w	r2, r3, #4
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	699a      	ldr	r2, [r3, #24]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a82:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00f      	beq.n	8008aae <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a94:	f043 0201 	orr.w	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	699a      	ldr	r2, [r3, #24]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008aac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00f      	beq.n	8008ad8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008abe:	f043 0208 	orr.w	r2, r3, #8
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	699a      	ldr	r2, [r3, #24]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ad6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8008ae8:	bf00      	nop
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	603b      	str	r3, [r7, #0]
 8008b00:	4613      	mov	r3, r2
 8008b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008b04:	e010      	b.n	8008b28 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b06:	f7f9 f8cf 	bl	8001ca8 <HAL_GetTick>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	1ad3      	subs	r3, r2, r3
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d803      	bhi.n	8008b1e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b1c:	d102      	bne.n	8008b24 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e00f      	b.n	8008b48 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	695a      	ldr	r2, [r3, #20]
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4013      	ands	r3, r2
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	bf0c      	ite	eq
 8008b38:	2301      	moveq	r3, #1
 8008b3a:	2300      	movne	r3, #0
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	461a      	mov	r2, r3
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d0df      	beq.n	8008b06 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b5c:	095b      	lsrs	r3, r3, #5
 8008b5e:	3301      	adds	r3, #1
 8008b60:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	3307      	adds	r3, #7
 8008b6e:	08db      	lsrs	r3, r3, #3
 8008b70:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	fb02 f303 	mul.w	r3, r2, r3
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d12e      	bne.n	8008bfa <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d101      	bne.n	8008baa <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	e028      	b.n	8008bfc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0201 	bic.w	r2, r2, #1
 8008bc8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008bd6:	ea42 0103 	orr.w	r1, r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	689a      	ldr	r2, [r3, #8]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	e000      	b.n	8008bfc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
  }
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e049      	b.n	8008cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7f8 f9bc 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	3304      	adds	r3, #4
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	f000 fe52 	bl	80098f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2201      	movs	r2, #1
 8008c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d001      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e072      	b.n	8008db6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 0201 	orr.w	r2, r2, #1
 8008ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a35      	ldr	r2, [pc, #212]	@ (8008dc4 <HAL_TIM_Base_Start_IT+0x10c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d040      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a34      	ldr	r2, [pc, #208]	@ (8008dc8 <HAL_TIM_Base_Start_IT+0x110>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d03b      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d04:	d036      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d0e:	d031      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a2d      	ldr	r2, [pc, #180]	@ (8008dcc <HAL_TIM_Base_Start_IT+0x114>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d02c      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8008dd0 <HAL_TIM_Base_Start_IT+0x118>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d027      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a2a      	ldr	r2, [pc, #168]	@ (8008dd4 <HAL_TIM_Base_Start_IT+0x11c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d022      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a29      	ldr	r2, [pc, #164]	@ (8008dd8 <HAL_TIM_Base_Start_IT+0x120>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d01d      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a27      	ldr	r2, [pc, #156]	@ (8008ddc <HAL_TIM_Base_Start_IT+0x124>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d018      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a26      	ldr	r2, [pc, #152]	@ (8008de0 <HAL_TIM_Base_Start_IT+0x128>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d013      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a24      	ldr	r2, [pc, #144]	@ (8008de4 <HAL_TIM_Base_Start_IT+0x12c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00e      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a23      	ldr	r2, [pc, #140]	@ (8008de8 <HAL_TIM_Base_Start_IT+0x130>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d009      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a21      	ldr	r2, [pc, #132]	@ (8008dec <HAL_TIM_Base_Start_IT+0x134>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d004      	beq.n	8008d74 <HAL_TIM_Base_Start_IT+0xbc>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a20      	ldr	r2, [pc, #128]	@ (8008df0 <HAL_TIM_Base_Start_IT+0x138>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d115      	bne.n	8008da0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008df4 <HAL_TIM_Base_Start_IT+0x13c>)
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b06      	cmp	r3, #6
 8008d84:	d015      	beq.n	8008db2 <HAL_TIM_Base_Start_IT+0xfa>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d8c:	d011      	beq.n	8008db2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f042 0201 	orr.w	r2, r2, #1
 8008d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9e:	e008      	b.n	8008db2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f042 0201 	orr.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	e000      	b.n	8008db4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	40012c00 	.word	0x40012c00
 8008dc8:	50012c00 	.word	0x50012c00
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	50000400 	.word	0x50000400
 8008dd4:	40000800 	.word	0x40000800
 8008dd8:	50000800 	.word	0x50000800
 8008ddc:	40000c00 	.word	0x40000c00
 8008de0:	50000c00 	.word	0x50000c00
 8008de4:	40013400 	.word	0x40013400
 8008de8:	50013400 	.word	0x50013400
 8008dec:	40014000 	.word	0x40014000
 8008df0:	50014000 	.word	0x50014000
 8008df4:	00010007 	.word	0x00010007

08008df8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e049      	b.n	8008e9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7f8 f8fe 	bl	8001020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	4619      	mov	r1, r3
 8008e36:	4610      	mov	r0, r2
 8008e38:	f000 fd5a 	bl	80098f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b084      	sub	sp, #16
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d109      	bne.n	8008ed0 <HAL_TIM_PWM_Start_IT+0x28>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	bf14      	ite	ne
 8008ec8:	2301      	movne	r3, #1
 8008eca:	2300      	moveq	r3, #0
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	e03c      	b.n	8008f4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d109      	bne.n	8008eea <HAL_TIM_PWM_Start_IT+0x42>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	bf14      	ite	ne
 8008ee2:	2301      	movne	r3, #1
 8008ee4:	2300      	moveq	r3, #0
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	e02f      	b.n	8008f4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	2b08      	cmp	r3, #8
 8008eee:	d109      	bne.n	8008f04 <HAL_TIM_PWM_Start_IT+0x5c>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	bf14      	ite	ne
 8008efc:	2301      	movne	r3, #1
 8008efe:	2300      	moveq	r3, #0
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	e022      	b.n	8008f4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	2b0c      	cmp	r3, #12
 8008f08:	d109      	bne.n	8008f1e <HAL_TIM_PWM_Start_IT+0x76>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	bf14      	ite	ne
 8008f16:	2301      	movne	r3, #1
 8008f18:	2300      	moveq	r3, #0
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	e015      	b.n	8008f4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b10      	cmp	r3, #16
 8008f22:	d109      	bne.n	8008f38 <HAL_TIM_PWM_Start_IT+0x90>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	bf14      	ite	ne
 8008f30:	2301      	movne	r3, #1
 8008f32:	2300      	moveq	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	e008      	b.n	8008f4a <HAL_TIM_PWM_Start_IT+0xa2>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	bf14      	ite	ne
 8008f44:	2301      	movne	r3, #1
 8008f46:	2300      	moveq	r3, #0
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d001      	beq.n	8008f52 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e124      	b.n	800919c <HAL_TIM_PWM_Start_IT+0x2f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <HAL_TIM_PWM_Start_IT+0xba>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f60:	e023      	b.n	8008faa <HAL_TIM_PWM_Start_IT+0x102>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	d104      	bne.n	8008f72 <HAL_TIM_PWM_Start_IT+0xca>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f70:	e01b      	b.n	8008faa <HAL_TIM_PWM_Start_IT+0x102>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d104      	bne.n	8008f82 <HAL_TIM_PWM_Start_IT+0xda>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f80:	e013      	b.n	8008faa <HAL_TIM_PWM_Start_IT+0x102>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	2b0c      	cmp	r3, #12
 8008f86:	d104      	bne.n	8008f92 <HAL_TIM_PWM_Start_IT+0xea>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f90:	e00b      	b.n	8008faa <HAL_TIM_PWM_Start_IT+0x102>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b10      	cmp	r3, #16
 8008f96:	d104      	bne.n	8008fa2 <HAL_TIM_PWM_Start_IT+0xfa>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2202      	movs	r2, #2
 8008f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fa0:	e003      	b.n	8008faa <HAL_TIM_PWM_Start_IT+0x102>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b0c      	cmp	r3, #12
 8008fae:	d841      	bhi.n	8009034 <HAL_TIM_PWM_Start_IT+0x18c>
 8008fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb8 <HAL_TIM_PWM_Start_IT+0x110>)
 8008fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb6:	bf00      	nop
 8008fb8:	08008fed 	.word	0x08008fed
 8008fbc:	08009035 	.word	0x08009035
 8008fc0:	08009035 	.word	0x08009035
 8008fc4:	08009035 	.word	0x08009035
 8008fc8:	08008fff 	.word	0x08008fff
 8008fcc:	08009035 	.word	0x08009035
 8008fd0:	08009035 	.word	0x08009035
 8008fd4:	08009035 	.word	0x08009035
 8008fd8:	08009011 	.word	0x08009011
 8008fdc:	08009035 	.word	0x08009035
 8008fe0:	08009035 	.word	0x08009035
 8008fe4:	08009035 	.word	0x08009035
 8008fe8:	08009023 	.word	0x08009023
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0202 	orr.w	r2, r2, #2
 8008ffa:	60da      	str	r2, [r3, #12]
      break;
 8008ffc:	e01d      	b.n	800903a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68da      	ldr	r2, [r3, #12]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f042 0204 	orr.w	r2, r2, #4
 800900c:	60da      	str	r2, [r3, #12]
      break;
 800900e:	e014      	b.n	800903a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0208 	orr.w	r2, r2, #8
 800901e:	60da      	str	r2, [r3, #12]
      break;
 8009020:	e00b      	b.n	800903a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68da      	ldr	r2, [r3, #12]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f042 0210 	orr.w	r2, r2, #16
 8009030:	60da      	str	r2, [r3, #12]
      break;
 8009032:	e002      	b.n	800903a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	73fb      	strb	r3, [r7, #15]
      break;
 8009038:	bf00      	nop
  }

  if (status == HAL_OK)
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f040 80ac 	bne.w	800919a <HAL_TIM_PWM_Start_IT+0x2f2>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2201      	movs	r2, #1
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	4618      	mov	r0, r3
 800904c:	f001 f9c8 	bl	800a3e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a53      	ldr	r2, [pc, #332]	@ (80091a4 <HAL_TIM_PWM_Start_IT+0x2fc>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d02c      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a52      	ldr	r2, [pc, #328]	@ (80091a8 <HAL_TIM_PWM_Start_IT+0x300>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d027      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a50      	ldr	r2, [pc, #320]	@ (80091ac <HAL_TIM_PWM_Start_IT+0x304>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d022      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a4f      	ldr	r2, [pc, #316]	@ (80091b0 <HAL_TIM_PWM_Start_IT+0x308>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d01d      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a4d      	ldr	r2, [pc, #308]	@ (80091b4 <HAL_TIM_PWM_Start_IT+0x30c>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d018      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a4c      	ldr	r2, [pc, #304]	@ (80091b8 <HAL_TIM_PWM_Start_IT+0x310>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d013      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a4a      	ldr	r2, [pc, #296]	@ (80091bc <HAL_TIM_PWM_Start_IT+0x314>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d00e      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a49      	ldr	r2, [pc, #292]	@ (80091c0 <HAL_TIM_PWM_Start_IT+0x318>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d009      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a47      	ldr	r2, [pc, #284]	@ (80091c4 <HAL_TIM_PWM_Start_IT+0x31c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d004      	beq.n	80090b4 <HAL_TIM_PWM_Start_IT+0x20c>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a46      	ldr	r2, [pc, #280]	@ (80091c8 <HAL_TIM_PWM_Start_IT+0x320>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d101      	bne.n	80090b8 <HAL_TIM_PWM_Start_IT+0x210>
 80090b4:	2301      	movs	r3, #1
 80090b6:	e000      	b.n	80090ba <HAL_TIM_PWM_Start_IT+0x212>
 80090b8:	2300      	movs	r3, #0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <HAL_TIM_PWM_Start_IT+0x226>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a34      	ldr	r2, [pc, #208]	@ (80091a4 <HAL_TIM_PWM_Start_IT+0x2fc>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d040      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a32      	ldr	r2, [pc, #200]	@ (80091a8 <HAL_TIM_PWM_Start_IT+0x300>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d03b      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ea:	d036      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090f4:	d031      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a34      	ldr	r2, [pc, #208]	@ (80091cc <HAL_TIM_PWM_Start_IT+0x324>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d02c      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a32      	ldr	r2, [pc, #200]	@ (80091d0 <HAL_TIM_PWM_Start_IT+0x328>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d027      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a31      	ldr	r2, [pc, #196]	@ (80091d4 <HAL_TIM_PWM_Start_IT+0x32c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d022      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a2f      	ldr	r2, [pc, #188]	@ (80091d8 <HAL_TIM_PWM_Start_IT+0x330>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d01d      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a2e      	ldr	r2, [pc, #184]	@ (80091dc <HAL_TIM_PWM_Start_IT+0x334>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d018      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a2c      	ldr	r2, [pc, #176]	@ (80091e0 <HAL_TIM_PWM_Start_IT+0x338>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d013      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a1d      	ldr	r2, [pc, #116]	@ (80091ac <HAL_TIM_PWM_Start_IT+0x304>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d00e      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a1b      	ldr	r2, [pc, #108]	@ (80091b0 <HAL_TIM_PWM_Start_IT+0x308>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d009      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a1a      	ldr	r2, [pc, #104]	@ (80091b4 <HAL_TIM_PWM_Start_IT+0x30c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <HAL_TIM_PWM_Start_IT+0x2b2>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a18      	ldr	r2, [pc, #96]	@ (80091b8 <HAL_TIM_PWM_Start_IT+0x310>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d115      	bne.n	8009186 <HAL_TIM_PWM_Start_IT+0x2de>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689a      	ldr	r2, [r3, #8]
 8009160:	4b20      	ldr	r3, [pc, #128]	@ (80091e4 <HAL_TIM_PWM_Start_IT+0x33c>)
 8009162:	4013      	ands	r3, r2
 8009164:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	2b06      	cmp	r3, #6
 800916a:	d015      	beq.n	8009198 <HAL_TIM_PWM_Start_IT+0x2f0>
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009172:	d011      	beq.n	8009198 <HAL_TIM_PWM_Start_IT+0x2f0>
      {
        __HAL_TIM_ENABLE(htim);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0201 	orr.w	r2, r2, #1
 8009182:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009184:	e008      	b.n	8009198 <HAL_TIM_PWM_Start_IT+0x2f0>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f042 0201 	orr.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	e000      	b.n	800919a <HAL_TIM_PWM_Start_IT+0x2f2>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009198:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	40012c00 	.word	0x40012c00
 80091a8:	50012c00 	.word	0x50012c00
 80091ac:	40013400 	.word	0x40013400
 80091b0:	50013400 	.word	0x50013400
 80091b4:	40014000 	.word	0x40014000
 80091b8:	50014000 	.word	0x50014000
 80091bc:	40014400 	.word	0x40014400
 80091c0:	50014400 	.word	0x50014400
 80091c4:	40014800 	.word	0x40014800
 80091c8:	50014800 	.word	0x50014800
 80091cc:	40000400 	.word	0x40000400
 80091d0:	50000400 	.word	0x50000400
 80091d4:	40000800 	.word	0x40000800
 80091d8:	50000800 	.word	0x50000800
 80091dc:	40000c00 	.word	0x40000c00
 80091e0:	50000c00 	.word	0x50000c00
 80091e4:	00010007 	.word	0x00010007

080091e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d020      	beq.n	800924c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d01b      	beq.n	800924c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f06f 0202 	mvn.w	r2, #2
 800921c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fb48 	bl	80098c8 <HAL_TIM_IC_CaptureCallback>
 8009238:	e005      	b.n	8009246 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fb3a 	bl	80098b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7f7 fce1 	bl	8000c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f003 0304 	and.w	r3, r3, #4
 8009252:	2b00      	cmp	r3, #0
 8009254:	d020      	beq.n	8009298 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d01b      	beq.n	8009298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0204 	mvn.w	r2, #4
 8009268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2202      	movs	r2, #2
 800926e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fb22 	bl	80098c8 <HAL_TIM_IC_CaptureCallback>
 8009284:	e005      	b.n	8009292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fb14 	bl	80098b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7f7 fcbb 	bl	8000c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 0308 	and.w	r3, r3, #8
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d020      	beq.n	80092e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d01b      	beq.n	80092e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f06f 0208 	mvn.w	r2, #8
 80092b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2204      	movs	r2, #4
 80092ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	69db      	ldr	r3, [r3, #28]
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 fafc 	bl	80098c8 <HAL_TIM_IC_CaptureCallback>
 80092d0:	e005      	b.n	80092de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 faee 	bl	80098b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7f7 fc95 	bl	8000c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f003 0310 	and.w	r3, r3, #16
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d020      	beq.n	8009330 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d01b      	beq.n	8009330 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f06f 0210 	mvn.w	r2, #16
 8009300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2208      	movs	r2, #8
 8009306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	69db      	ldr	r3, [r3, #28]
 800930e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009312:	2b00      	cmp	r3, #0
 8009314:	d003      	beq.n	800931e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fad6 	bl	80098c8 <HAL_TIM_IC_CaptureCallback>
 800931c:	e005      	b.n	800932a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fac8 	bl	80098b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7f7 fc6f 	bl	8000c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00c      	beq.n	8009354 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f06f 0201 	mvn.w	r2, #1
 800934c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7f7 fc6c 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800935a:	2b00      	cmp	r3, #0
 800935c:	d104      	bne.n	8009368 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00c      	beq.n	8009382 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800936e:	2b00      	cmp	r3, #0
 8009370:	d007      	beq.n	8009382 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800937a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f001 f921 	bl	800a5c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00c      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800939e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 f919 	bl	800a5d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00c      	beq.n	80093ca <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d007      	beq.n	80093ca <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fa89 	bl	80098dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f003 0320 	and.w	r3, r3, #32
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00c      	beq.n	80093ee <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f003 0320 	and.w	r3, r3, #32
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f06f 0220 	mvn.w	r2, #32
 80093e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f8e1 	bl	800a5b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00c      	beq.n	8009412 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800940a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f8ed 	bl	800a5ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00c      	beq.n	8009436 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d007      	beq.n	8009436 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800942e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 f8e5 	bl	800a600 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00c      	beq.n	800945a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d007      	beq.n	800945a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 f8dd 	bl	800a614 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00c      	beq.n	800947e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d007      	beq.n	800947e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 f8d5 	bl	800a628 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d101      	bne.n	80094a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094a2:	2302      	movs	r3, #2
 80094a4:	e0ff      	b.n	80096a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2b14      	cmp	r3, #20
 80094b2:	f200 80f0 	bhi.w	8009696 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094b6:	a201      	add	r2, pc, #4	@ (adr r2, 80094bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	08009511 	.word	0x08009511
 80094c0:	08009697 	.word	0x08009697
 80094c4:	08009697 	.word	0x08009697
 80094c8:	08009697 	.word	0x08009697
 80094cc:	08009551 	.word	0x08009551
 80094d0:	08009697 	.word	0x08009697
 80094d4:	08009697 	.word	0x08009697
 80094d8:	08009697 	.word	0x08009697
 80094dc:	08009593 	.word	0x08009593
 80094e0:	08009697 	.word	0x08009697
 80094e4:	08009697 	.word	0x08009697
 80094e8:	08009697 	.word	0x08009697
 80094ec:	080095d3 	.word	0x080095d3
 80094f0:	08009697 	.word	0x08009697
 80094f4:	08009697 	.word	0x08009697
 80094f8:	08009697 	.word	0x08009697
 80094fc:	08009615 	.word	0x08009615
 8009500:	08009697 	.word	0x08009697
 8009504:	08009697 	.word	0x08009697
 8009508:	08009697 	.word	0x08009697
 800950c:	08009655 	.word	0x08009655
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68b9      	ldr	r1, [r7, #8]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 faf0 	bl	8009afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f042 0208 	orr.w	r2, r2, #8
 800952a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	699a      	ldr	r2, [r3, #24]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0204 	bic.w	r2, r2, #4
 800953a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6999      	ldr	r1, [r3, #24]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	619a      	str	r2, [r3, #24]
      break;
 800954e:	e0a5      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68b9      	ldr	r1, [r7, #8]
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fb92 	bl	8009c80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699a      	ldr	r2, [r3, #24]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800956a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800957a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	6999      	ldr	r1, [r3, #24]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	021a      	lsls	r2, r3, #8
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	619a      	str	r2, [r3, #24]
      break;
 8009590:	e084      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fc21 	bl	8009de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69da      	ldr	r2, [r3, #28]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f042 0208 	orr.w	r2, r2, #8
 80095ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f022 0204 	bic.w	r2, r2, #4
 80095bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69d9      	ldr	r1, [r3, #28]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	691a      	ldr	r2, [r3, #16]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	61da      	str	r2, [r3, #28]
      break;
 80095d0:	e064      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	4618      	mov	r0, r3
 80095da:	f000 fcaf 	bl	8009f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69da      	ldr	r2, [r3, #28]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69da      	ldr	r2, [r3, #28]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69d9      	ldr	r1, [r3, #28]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	021a      	lsls	r2, r3, #8
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	430a      	orrs	r2, r1
 8009610:	61da      	str	r2, [r3, #28]
      break;
 8009612:	e043      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 fd3e 	bl	800a09c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0208 	orr.w	r2, r2, #8
 800962e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0204 	bic.w	r2, r2, #4
 800963e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	691a      	ldr	r2, [r3, #16]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009652:	e023      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68b9      	ldr	r1, [r7, #8]
 800965a:	4618      	mov	r0, r3
 800965c:	f000 fda0 	bl	800a1a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800966e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800967e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	021a      	lsls	r2, r3, #8
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009694:	e002      	b.n	800969c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	75fb      	strb	r3, [r7, #23]
      break;
 800969a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop

080096b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_TIM_ConfigClockSource+0x1c>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e0e6      	b.n	800989a <HAL_TIM_ConfigClockSource+0x1ea>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80096ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80096ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68ba      	ldr	r2, [r7, #8]
 80096fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a67      	ldr	r2, [pc, #412]	@ (80098a4 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009706:	4293      	cmp	r3, r2
 8009708:	f000 80b1 	beq.w	800986e <HAL_TIM_ConfigClockSource+0x1be>
 800970c:	4a65      	ldr	r2, [pc, #404]	@ (80098a4 <HAL_TIM_ConfigClockSource+0x1f4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	f200 80b6 	bhi.w	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009714:	4a64      	ldr	r2, [pc, #400]	@ (80098a8 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009716:	4293      	cmp	r3, r2
 8009718:	f000 80a9 	beq.w	800986e <HAL_TIM_ConfigClockSource+0x1be>
 800971c:	4a62      	ldr	r2, [pc, #392]	@ (80098a8 <HAL_TIM_ConfigClockSource+0x1f8>)
 800971e:	4293      	cmp	r3, r2
 8009720:	f200 80ae 	bhi.w	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009724:	4a61      	ldr	r2, [pc, #388]	@ (80098ac <HAL_TIM_ConfigClockSource+0x1fc>)
 8009726:	4293      	cmp	r3, r2
 8009728:	f000 80a1 	beq.w	800986e <HAL_TIM_ConfigClockSource+0x1be>
 800972c:	4a5f      	ldr	r2, [pc, #380]	@ (80098ac <HAL_TIM_ConfigClockSource+0x1fc>)
 800972e:	4293      	cmp	r3, r2
 8009730:	f200 80a6 	bhi.w	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009734:	4a5e      	ldr	r2, [pc, #376]	@ (80098b0 <HAL_TIM_ConfigClockSource+0x200>)
 8009736:	4293      	cmp	r3, r2
 8009738:	f000 8099 	beq.w	800986e <HAL_TIM_ConfigClockSource+0x1be>
 800973c:	4a5c      	ldr	r2, [pc, #368]	@ (80098b0 <HAL_TIM_ConfigClockSource+0x200>)
 800973e:	4293      	cmp	r3, r2
 8009740:	f200 809e 	bhi.w	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009744:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009748:	f000 8091 	beq.w	800986e <HAL_TIM_ConfigClockSource+0x1be>
 800974c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009750:	f200 8096 	bhi.w	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009754:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009758:	f000 8089 	beq.w	800986e <HAL_TIM_ConfigClockSource+0x1be>
 800975c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009760:	f200 808e 	bhi.w	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009764:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009768:	d03e      	beq.n	80097e8 <HAL_TIM_ConfigClockSource+0x138>
 800976a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800976e:	f200 8087 	bhi.w	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009772:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009776:	f000 8086 	beq.w	8009886 <HAL_TIM_ConfigClockSource+0x1d6>
 800977a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800977e:	d87f      	bhi.n	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009780:	2b70      	cmp	r3, #112	@ 0x70
 8009782:	d01a      	beq.n	80097ba <HAL_TIM_ConfigClockSource+0x10a>
 8009784:	2b70      	cmp	r3, #112	@ 0x70
 8009786:	d87b      	bhi.n	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009788:	2b60      	cmp	r3, #96	@ 0x60
 800978a:	d050      	beq.n	800982e <HAL_TIM_ConfigClockSource+0x17e>
 800978c:	2b60      	cmp	r3, #96	@ 0x60
 800978e:	d877      	bhi.n	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009790:	2b50      	cmp	r3, #80	@ 0x50
 8009792:	d03c      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x15e>
 8009794:	2b50      	cmp	r3, #80	@ 0x50
 8009796:	d873      	bhi.n	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 8009798:	2b40      	cmp	r3, #64	@ 0x40
 800979a:	d058      	beq.n	800984e <HAL_TIM_ConfigClockSource+0x19e>
 800979c:	2b40      	cmp	r3, #64	@ 0x40
 800979e:	d86f      	bhi.n	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 80097a0:	2b30      	cmp	r3, #48	@ 0x30
 80097a2:	d064      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x1be>
 80097a4:	2b30      	cmp	r3, #48	@ 0x30
 80097a6:	d86b      	bhi.n	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 80097a8:	2b20      	cmp	r3, #32
 80097aa:	d060      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x1be>
 80097ac:	2b20      	cmp	r3, #32
 80097ae:	d867      	bhi.n	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d05c      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x1be>
 80097b4:	2b10      	cmp	r3, #16
 80097b6:	d05a      	beq.n	800986e <HAL_TIM_ConfigClockSource+0x1be>
 80097b8:	e062      	b.n	8009880 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097ca:	f000 fde9 	bl	800a3a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80097dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	609a      	str	r2, [r3, #8]
      break;
 80097e6:	e04f      	b.n	8009888 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80097f8:	f000 fdd2 	bl	800a3a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	689a      	ldr	r2, [r3, #8]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800980a:	609a      	str	r2, [r3, #8]
      break;
 800980c:	e03c      	b.n	8009888 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800981a:	461a      	mov	r2, r3
 800981c:	f000 fd44 	bl	800a2a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2150      	movs	r1, #80	@ 0x50
 8009826:	4618      	mov	r0, r3
 8009828:	f000 fd9d 	bl	800a366 <TIM_ITRx_SetConfig>
      break;
 800982c:	e02c      	b.n	8009888 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800983a:	461a      	mov	r2, r3
 800983c:	f000 fd63 	bl	800a306 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2160      	movs	r1, #96	@ 0x60
 8009846:	4618      	mov	r0, r3
 8009848:	f000 fd8d 	bl	800a366 <TIM_ITRx_SetConfig>
      break;
 800984c:	e01c      	b.n	8009888 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800985a:	461a      	mov	r2, r3
 800985c:	f000 fd24 	bl	800a2a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2140      	movs	r1, #64	@ 0x40
 8009866:	4618      	mov	r0, r3
 8009868:	f000 fd7d 	bl	800a366 <TIM_ITRx_SetConfig>
      break;
 800986c:	e00c      	b.n	8009888 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f000 fd74 	bl	800a366 <TIM_ITRx_SetConfig>
      break;
 800987e:	e003      	b.n	8009888 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	73fb      	strb	r3, [r7, #15]
      break;
 8009884:	e000      	b.n	8009888 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8009886:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009898:	7bfb      	ldrb	r3, [r7, #15]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	00100070 	.word	0x00100070
 80098a8:	00100040 	.word	0x00100040
 80098ac:	00100030 	.word	0x00100030
 80098b0:	00100020 	.word	0x00100020

080098b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098bc:	bf00      	nop
 80098be:	370c      	adds	r7, #12
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a6e      	ldr	r2, [pc, #440]	@ (8009abc <TIM_Base_SetConfig+0x1cc>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d02b      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a6d      	ldr	r2, [pc, #436]	@ (8009ac0 <TIM_Base_SetConfig+0x1d0>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d027      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009916:	d023      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800991e:	d01f      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a68      	ldr	r2, [pc, #416]	@ (8009ac4 <TIM_Base_SetConfig+0x1d4>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d01b      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a67      	ldr	r2, [pc, #412]	@ (8009ac8 <TIM_Base_SetConfig+0x1d8>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d017      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a66      	ldr	r2, [pc, #408]	@ (8009acc <TIM_Base_SetConfig+0x1dc>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d013      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a65      	ldr	r2, [pc, #404]	@ (8009ad0 <TIM_Base_SetConfig+0x1e0>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d00f      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a64      	ldr	r2, [pc, #400]	@ (8009ad4 <TIM_Base_SetConfig+0x1e4>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d00b      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a63      	ldr	r2, [pc, #396]	@ (8009ad8 <TIM_Base_SetConfig+0x1e8>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d007      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a62      	ldr	r2, [pc, #392]	@ (8009adc <TIM_Base_SetConfig+0x1ec>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d003      	beq.n	8009960 <TIM_Base_SetConfig+0x70>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a61      	ldr	r2, [pc, #388]	@ (8009ae0 <TIM_Base_SetConfig+0x1f0>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d108      	bne.n	8009972 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a51      	ldr	r2, [pc, #324]	@ (8009abc <TIM_Base_SetConfig+0x1cc>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d043      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a50      	ldr	r2, [pc, #320]	@ (8009ac0 <TIM_Base_SetConfig+0x1d0>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d03f      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009988:	d03b      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009990:	d037      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a4b      	ldr	r2, [pc, #300]	@ (8009ac4 <TIM_Base_SetConfig+0x1d4>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d033      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a4a      	ldr	r2, [pc, #296]	@ (8009ac8 <TIM_Base_SetConfig+0x1d8>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d02f      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a49      	ldr	r2, [pc, #292]	@ (8009acc <TIM_Base_SetConfig+0x1dc>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d02b      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a48      	ldr	r2, [pc, #288]	@ (8009ad0 <TIM_Base_SetConfig+0x1e0>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d027      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a47      	ldr	r2, [pc, #284]	@ (8009ad4 <TIM_Base_SetConfig+0x1e4>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d023      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a46      	ldr	r2, [pc, #280]	@ (8009ad8 <TIM_Base_SetConfig+0x1e8>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d01f      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a45      	ldr	r2, [pc, #276]	@ (8009adc <TIM_Base_SetConfig+0x1ec>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d01b      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a44      	ldr	r2, [pc, #272]	@ (8009ae0 <TIM_Base_SetConfig+0x1f0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d017      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a43      	ldr	r2, [pc, #268]	@ (8009ae4 <TIM_Base_SetConfig+0x1f4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d013      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a42      	ldr	r2, [pc, #264]	@ (8009ae8 <TIM_Base_SetConfig+0x1f8>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d00f      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a41      	ldr	r2, [pc, #260]	@ (8009aec <TIM_Base_SetConfig+0x1fc>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d00b      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a40      	ldr	r2, [pc, #256]	@ (8009af0 <TIM_Base_SetConfig+0x200>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d007      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a3f      	ldr	r2, [pc, #252]	@ (8009af4 <TIM_Base_SetConfig+0x204>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d003      	beq.n	8009a02 <TIM_Base_SetConfig+0x112>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a3e      	ldr	r2, [pc, #248]	@ (8009af8 <TIM_Base_SetConfig+0x208>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d108      	bne.n	8009a14 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	695b      	ldr	r3, [r3, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	68fa      	ldr	r2, [r7, #12]
 8009a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a20      	ldr	r2, [pc, #128]	@ (8009abc <TIM_Base_SetConfig+0x1cc>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d023      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a1f      	ldr	r2, [pc, #124]	@ (8009ac0 <TIM_Base_SetConfig+0x1d0>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d01f      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a24      	ldr	r2, [pc, #144]	@ (8009adc <TIM_Base_SetConfig+0x1ec>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d01b      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a23      	ldr	r2, [pc, #140]	@ (8009ae0 <TIM_Base_SetConfig+0x1f0>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d017      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a22      	ldr	r2, [pc, #136]	@ (8009ae4 <TIM_Base_SetConfig+0x1f4>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d013      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a21      	ldr	r2, [pc, #132]	@ (8009ae8 <TIM_Base_SetConfig+0x1f8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00f      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a20      	ldr	r2, [pc, #128]	@ (8009aec <TIM_Base_SetConfig+0x1fc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d00b      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a1f      	ldr	r2, [pc, #124]	@ (8009af0 <TIM_Base_SetConfig+0x200>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d007      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8009af4 <TIM_Base_SetConfig+0x204>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d003      	beq.n	8009a88 <TIM_Base_SetConfig+0x198>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a1d      	ldr	r2, [pc, #116]	@ (8009af8 <TIM_Base_SetConfig+0x208>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d103      	bne.n	8009a90 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	691a      	ldr	r2, [r3, #16]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d105      	bne.n	8009aae <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	f023 0201 	bic.w	r2, r3, #1
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	611a      	str	r2, [r3, #16]
  }
}
 8009aae:	bf00      	nop
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	40012c00 	.word	0x40012c00
 8009ac0:	50012c00 	.word	0x50012c00
 8009ac4:	40000400 	.word	0x40000400
 8009ac8:	50000400 	.word	0x50000400
 8009acc:	40000800 	.word	0x40000800
 8009ad0:	50000800 	.word	0x50000800
 8009ad4:	40000c00 	.word	0x40000c00
 8009ad8:	50000c00 	.word	0x50000c00
 8009adc:	40013400 	.word	0x40013400
 8009ae0:	50013400 	.word	0x50013400
 8009ae4:	40014000 	.word	0x40014000
 8009ae8:	50014000 	.word	0x50014000
 8009aec:	40014400 	.word	0x40014400
 8009af0:	50014400 	.word	0x50014400
 8009af4:	40014800 	.word	0x40014800
 8009af8:	50014800 	.word	0x50014800

08009afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	f023 0201 	bic.w	r2, r3, #1
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f023 0303 	bic.w	r3, r3, #3
 8009b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f023 0302 	bic.w	r3, r3, #2
 8009b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a40      	ldr	r2, [pc, #256]	@ (8009c58 <TIM_OC1_SetConfig+0x15c>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d023      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a3f      	ldr	r2, [pc, #252]	@ (8009c5c <TIM_OC1_SetConfig+0x160>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d01f      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a3e      	ldr	r2, [pc, #248]	@ (8009c60 <TIM_OC1_SetConfig+0x164>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d01b      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a3d      	ldr	r2, [pc, #244]	@ (8009c64 <TIM_OC1_SetConfig+0x168>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d017      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a3c      	ldr	r2, [pc, #240]	@ (8009c68 <TIM_OC1_SetConfig+0x16c>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d013      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8009c6c <TIM_OC1_SetConfig+0x170>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d00f      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a3a      	ldr	r2, [pc, #232]	@ (8009c70 <TIM_OC1_SetConfig+0x174>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d00b      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a39      	ldr	r2, [pc, #228]	@ (8009c74 <TIM_OC1_SetConfig+0x178>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d007      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a38      	ldr	r2, [pc, #224]	@ (8009c78 <TIM_OC1_SetConfig+0x17c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d003      	beq.n	8009ba4 <TIM_OC1_SetConfig+0xa8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a37      	ldr	r2, [pc, #220]	@ (8009c7c <TIM_OC1_SetConfig+0x180>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d10c      	bne.n	8009bbe <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f023 0308 	bic.w	r3, r3, #8
 8009baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	f023 0304 	bic.w	r3, r3, #4
 8009bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	4a25      	ldr	r2, [pc, #148]	@ (8009c58 <TIM_OC1_SetConfig+0x15c>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d023      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a24      	ldr	r2, [pc, #144]	@ (8009c5c <TIM_OC1_SetConfig+0x160>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d01f      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a23      	ldr	r2, [pc, #140]	@ (8009c60 <TIM_OC1_SetConfig+0x164>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d01b      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a22      	ldr	r2, [pc, #136]	@ (8009c64 <TIM_OC1_SetConfig+0x168>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d017      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a21      	ldr	r2, [pc, #132]	@ (8009c68 <TIM_OC1_SetConfig+0x16c>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d013      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a20      	ldr	r2, [pc, #128]	@ (8009c6c <TIM_OC1_SetConfig+0x170>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d00f      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8009c70 <TIM_OC1_SetConfig+0x174>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d00b      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a1e      	ldr	r2, [pc, #120]	@ (8009c74 <TIM_OC1_SetConfig+0x178>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d007      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a1d      	ldr	r2, [pc, #116]	@ (8009c78 <TIM_OC1_SetConfig+0x17c>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d003      	beq.n	8009c0e <TIM_OC1_SetConfig+0x112>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a1c      	ldr	r2, [pc, #112]	@ (8009c7c <TIM_OC1_SetConfig+0x180>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d111      	bne.n	8009c32 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	693a      	ldr	r2, [r7, #16]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	621a      	str	r2, [r3, #32]
}
 8009c4c:	bf00      	nop
 8009c4e:	371c      	adds	r7, #28
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	40012c00 	.word	0x40012c00
 8009c5c:	50012c00 	.word	0x50012c00
 8009c60:	40013400 	.word	0x40013400
 8009c64:	50013400 	.word	0x50013400
 8009c68:	40014000 	.word	0x40014000
 8009c6c:	50014000 	.word	0x50014000
 8009c70:	40014400 	.word	0x40014400
 8009c74:	50014400 	.word	0x50014400
 8009c78:	40014800 	.word	0x40014800
 8009c7c:	50014800 	.word	0x50014800

08009c80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6a1b      	ldr	r3, [r3, #32]
 8009c94:	f023 0210 	bic.w	r2, r3, #16
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	f023 0320 	bic.w	r3, r3, #32
 8009cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	011b      	lsls	r3, r3, #4
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a36      	ldr	r2, [pc, #216]	@ (8009db8 <TIM_OC2_SetConfig+0x138>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00b      	beq.n	8009cfc <TIM_OC2_SetConfig+0x7c>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a35      	ldr	r2, [pc, #212]	@ (8009dbc <TIM_OC2_SetConfig+0x13c>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d007      	beq.n	8009cfc <TIM_OC2_SetConfig+0x7c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a34      	ldr	r2, [pc, #208]	@ (8009dc0 <TIM_OC2_SetConfig+0x140>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d003      	beq.n	8009cfc <TIM_OC2_SetConfig+0x7c>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a33      	ldr	r2, [pc, #204]	@ (8009dc4 <TIM_OC2_SetConfig+0x144>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d10d      	bne.n	8009d18 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	011b      	lsls	r3, r3, #4
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a27      	ldr	r2, [pc, #156]	@ (8009db8 <TIM_OC2_SetConfig+0x138>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d023      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a26      	ldr	r2, [pc, #152]	@ (8009dbc <TIM_OC2_SetConfig+0x13c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d01f      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a25      	ldr	r2, [pc, #148]	@ (8009dc0 <TIM_OC2_SetConfig+0x140>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d01b      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a24      	ldr	r2, [pc, #144]	@ (8009dc4 <TIM_OC2_SetConfig+0x144>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d017      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a23      	ldr	r2, [pc, #140]	@ (8009dc8 <TIM_OC2_SetConfig+0x148>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d013      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a22      	ldr	r2, [pc, #136]	@ (8009dcc <TIM_OC2_SetConfig+0x14c>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d00f      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a21      	ldr	r2, [pc, #132]	@ (8009dd0 <TIM_OC2_SetConfig+0x150>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00b      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a20      	ldr	r2, [pc, #128]	@ (8009dd4 <TIM_OC2_SetConfig+0x154>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d007      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8009dd8 <TIM_OC2_SetConfig+0x158>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d003      	beq.n	8009d68 <TIM_OC2_SetConfig+0xe8>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a1e      	ldr	r2, [pc, #120]	@ (8009ddc <TIM_OC2_SetConfig+0x15c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d113      	bne.n	8009d90 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	4313      	orrs	r3, r2
 8009d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	621a      	str	r2, [r3, #32]
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	40012c00 	.word	0x40012c00
 8009dbc:	50012c00 	.word	0x50012c00
 8009dc0:	40013400 	.word	0x40013400
 8009dc4:	50013400 	.word	0x50013400
 8009dc8:	40014000 	.word	0x40014000
 8009dcc:	50014000 	.word	0x50014000
 8009dd0:	40014400 	.word	0x40014400
 8009dd4:	50014400 	.word	0x50014400
 8009dd8:	40014800 	.word	0x40014800
 8009ddc:	50014800 	.word	0x50014800

08009de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b087      	sub	sp, #28
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f023 0303 	bic.w	r3, r3, #3
 8009e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a35      	ldr	r2, [pc, #212]	@ (8009f14 <TIM_OC3_SetConfig+0x134>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00b      	beq.n	8009e5a <TIM_OC3_SetConfig+0x7a>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a34      	ldr	r2, [pc, #208]	@ (8009f18 <TIM_OC3_SetConfig+0x138>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d007      	beq.n	8009e5a <TIM_OC3_SetConfig+0x7a>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a33      	ldr	r2, [pc, #204]	@ (8009f1c <TIM_OC3_SetConfig+0x13c>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d003      	beq.n	8009e5a <TIM_OC3_SetConfig+0x7a>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a32      	ldr	r2, [pc, #200]	@ (8009f20 <TIM_OC3_SetConfig+0x140>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d10d      	bne.n	8009e76 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	021b      	lsls	r3, r3, #8
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	4a26      	ldr	r2, [pc, #152]	@ (8009f14 <TIM_OC3_SetConfig+0x134>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d023      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	4a25      	ldr	r2, [pc, #148]	@ (8009f18 <TIM_OC3_SetConfig+0x138>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d01f      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a24      	ldr	r2, [pc, #144]	@ (8009f1c <TIM_OC3_SetConfig+0x13c>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d01b      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a23      	ldr	r2, [pc, #140]	@ (8009f20 <TIM_OC3_SetConfig+0x140>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d017      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a22      	ldr	r2, [pc, #136]	@ (8009f24 <TIM_OC3_SetConfig+0x144>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d013      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a21      	ldr	r2, [pc, #132]	@ (8009f28 <TIM_OC3_SetConfig+0x148>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00f      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a20      	ldr	r2, [pc, #128]	@ (8009f2c <TIM_OC3_SetConfig+0x14c>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d00b      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8009f30 <TIM_OC3_SetConfig+0x150>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d007      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a1e      	ldr	r2, [pc, #120]	@ (8009f34 <TIM_OC3_SetConfig+0x154>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d003      	beq.n	8009ec6 <TIM_OC3_SetConfig+0xe6>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f38 <TIM_OC3_SetConfig+0x158>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d113      	bne.n	8009eee <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ecc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ed4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	693a      	ldr	r2, [r7, #16]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	697a      	ldr	r2, [r7, #20]
 8009f06:	621a      	str	r2, [r3, #32]
}
 8009f08:	bf00      	nop
 8009f0a:	371c      	adds	r7, #28
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	40012c00 	.word	0x40012c00
 8009f18:	50012c00 	.word	0x50012c00
 8009f1c:	40013400 	.word	0x40013400
 8009f20:	50013400 	.word	0x50013400
 8009f24:	40014000 	.word	0x40014000
 8009f28:	50014000 	.word	0x50014000
 8009f2c:	40014400 	.word	0x40014400
 8009f30:	50014400 	.word	0x50014400
 8009f34:	40014800 	.word	0x40014800
 8009f38:	50014800 	.word	0x50014800

08009f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b087      	sub	sp, #28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a1b      	ldr	r3, [r3, #32]
 8009f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	69db      	ldr	r3, [r3, #28]
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	021b      	lsls	r3, r3, #8
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	031b      	lsls	r3, r3, #12
 8009f92:	697a      	ldr	r2, [r7, #20]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a36      	ldr	r2, [pc, #216]	@ (800a074 <TIM_OC4_SetConfig+0x138>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00b      	beq.n	8009fb8 <TIM_OC4_SetConfig+0x7c>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a35      	ldr	r2, [pc, #212]	@ (800a078 <TIM_OC4_SetConfig+0x13c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d007      	beq.n	8009fb8 <TIM_OC4_SetConfig+0x7c>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a34      	ldr	r2, [pc, #208]	@ (800a07c <TIM_OC4_SetConfig+0x140>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d003      	beq.n	8009fb8 <TIM_OC4_SetConfig+0x7c>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a33      	ldr	r2, [pc, #204]	@ (800a080 <TIM_OC4_SetConfig+0x144>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d10d      	bne.n	8009fd4 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	031b      	lsls	r3, r3, #12
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	4a27      	ldr	r2, [pc, #156]	@ (800a074 <TIM_OC4_SetConfig+0x138>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d023      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a26      	ldr	r2, [pc, #152]	@ (800a078 <TIM_OC4_SetConfig+0x13c>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d01f      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a25      	ldr	r2, [pc, #148]	@ (800a07c <TIM_OC4_SetConfig+0x140>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d01b      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	4a24      	ldr	r2, [pc, #144]	@ (800a080 <TIM_OC4_SetConfig+0x144>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d017      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	4a23      	ldr	r2, [pc, #140]	@ (800a084 <TIM_OC4_SetConfig+0x148>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d013      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	4a22      	ldr	r2, [pc, #136]	@ (800a088 <TIM_OC4_SetConfig+0x14c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d00f      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a21      	ldr	r2, [pc, #132]	@ (800a08c <TIM_OC4_SetConfig+0x150>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d00b      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a20      	ldr	r2, [pc, #128]	@ (800a090 <TIM_OC4_SetConfig+0x154>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d007      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a1f      	ldr	r2, [pc, #124]	@ (800a094 <TIM_OC4_SetConfig+0x158>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d003      	beq.n	800a024 <TIM_OC4_SetConfig+0xe8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a1e      	ldr	r2, [pc, #120]	@ (800a098 <TIM_OC4_SetConfig+0x15c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d113      	bne.n	800a04c <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a02a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a032:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	019b      	lsls	r3, r3, #6
 800a03a:	693a      	ldr	r2, [r7, #16]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	019b      	lsls	r3, r3, #6
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	693a      	ldr	r2, [r7, #16]
 800a050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	621a      	str	r2, [r3, #32]
}
 800a066:	bf00      	nop
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	40012c00 	.word	0x40012c00
 800a078:	50012c00 	.word	0x50012c00
 800a07c:	40013400 	.word	0x40013400
 800a080:	50013400 	.word	0x50013400
 800a084:	40014000 	.word	0x40014000
 800a088:	50014000 	.word	0x50014000
 800a08c:	40014400 	.word	0x40014400
 800a090:	50014400 	.word	0x50014400
 800a094:	40014800 	.word	0x40014800
 800a098:	50014800 	.word	0x50014800

0800a09c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a1b      	ldr	r3, [r3, #32]
 800a0aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6a1b      	ldr	r3, [r3, #32]
 800a0b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a0e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	041b      	lsls	r3, r3, #16
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a21      	ldr	r2, [pc, #132]	@ (800a178 <TIM_OC5_SetConfig+0xdc>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d023      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a20      	ldr	r2, [pc, #128]	@ (800a17c <TIM_OC5_SetConfig+0xe0>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d01f      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a1f      	ldr	r2, [pc, #124]	@ (800a180 <TIM_OC5_SetConfig+0xe4>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d01b      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a1e      	ldr	r2, [pc, #120]	@ (800a184 <TIM_OC5_SetConfig+0xe8>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d017      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a1d      	ldr	r2, [pc, #116]	@ (800a188 <TIM_OC5_SetConfig+0xec>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d013      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a1c      	ldr	r2, [pc, #112]	@ (800a18c <TIM_OC5_SetConfig+0xf0>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d00f      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a1b      	ldr	r2, [pc, #108]	@ (800a190 <TIM_OC5_SetConfig+0xf4>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d00b      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a1a      	ldr	r2, [pc, #104]	@ (800a194 <TIM_OC5_SetConfig+0xf8>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d007      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a19      	ldr	r2, [pc, #100]	@ (800a198 <TIM_OC5_SetConfig+0xfc>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d003      	beq.n	800a13e <TIM_OC5_SetConfig+0xa2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a18      	ldr	r2, [pc, #96]	@ (800a19c <TIM_OC5_SetConfig+0x100>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d109      	bne.n	800a152 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a144:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	021b      	lsls	r3, r3, #8
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	621a      	str	r2, [r3, #32]
}
 800a16c:	bf00      	nop
 800a16e:	371c      	adds	r7, #28
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	40012c00 	.word	0x40012c00
 800a17c:	50012c00 	.word	0x50012c00
 800a180:	40013400 	.word	0x40013400
 800a184:	50013400 	.word	0x50013400
 800a188:	40014000 	.word	0x40014000
 800a18c:	50014000 	.word	0x50014000
 800a190:	40014400 	.word	0x40014400
 800a194:	50014400 	.word	0x50014400
 800a198:	40014800 	.word	0x40014800
 800a19c:	50014800 	.word	0x50014800

0800a1a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a1b      	ldr	r3, [r3, #32]
 800a1b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	021b      	lsls	r3, r3, #8
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	051b      	lsls	r3, r3, #20
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a22      	ldr	r2, [pc, #136]	@ (800a280 <TIM_OC6_SetConfig+0xe0>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d023      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a21      	ldr	r2, [pc, #132]	@ (800a284 <TIM_OC6_SetConfig+0xe4>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d01f      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a20      	ldr	r2, [pc, #128]	@ (800a288 <TIM_OC6_SetConfig+0xe8>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d01b      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a1f      	ldr	r2, [pc, #124]	@ (800a28c <TIM_OC6_SetConfig+0xec>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d017      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a1e      	ldr	r2, [pc, #120]	@ (800a290 <TIM_OC6_SetConfig+0xf0>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d013      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a1d      	ldr	r2, [pc, #116]	@ (800a294 <TIM_OC6_SetConfig+0xf4>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00f      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a1c      	ldr	r2, [pc, #112]	@ (800a298 <TIM_OC6_SetConfig+0xf8>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00b      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a1b      	ldr	r2, [pc, #108]	@ (800a29c <TIM_OC6_SetConfig+0xfc>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d007      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a1a      	ldr	r2, [pc, #104]	@ (800a2a0 <TIM_OC6_SetConfig+0x100>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_OC6_SetConfig+0xa4>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a19      	ldr	r2, [pc, #100]	@ (800a2a4 <TIM_OC6_SetConfig+0x104>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d109      	bne.n	800a258 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a24a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	029b      	lsls	r3, r3, #10
 800a252:	697a      	ldr	r2, [r7, #20]
 800a254:	4313      	orrs	r3, r2
 800a256:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	697a      	ldr	r2, [r7, #20]
 800a25c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	685a      	ldr	r2, [r3, #4]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	621a      	str	r2, [r3, #32]
}
 800a272:	bf00      	nop
 800a274:	371c      	adds	r7, #28
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	40012c00 	.word	0x40012c00
 800a284:	50012c00 	.word	0x50012c00
 800a288:	40013400 	.word	0x40013400
 800a28c:	50013400 	.word	0x50013400
 800a290:	40014000 	.word	0x40014000
 800a294:	50014000 	.word	0x50014000
 800a298:	40014400 	.word	0x40014400
 800a29c:	50014400 	.word	0x50014400
 800a2a0:	40014800 	.word	0x40014800
 800a2a4:	50014800 	.word	0x50014800

0800a2a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b087      	sub	sp, #28
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	60b9      	str	r1, [r7, #8]
 800a2b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6a1b      	ldr	r3, [r3, #32]
 800a2b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
 800a2be:	f023 0201 	bic.w	r2, r3, #1
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a2d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	011b      	lsls	r3, r3, #4
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	f023 030a 	bic.w	r3, r3, #10
 800a2e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	697a      	ldr	r2, [r7, #20]
 800a2f8:	621a      	str	r2, [r3, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a306:	b480      	push	{r7}
 800a308:	b087      	sub	sp, #28
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
 800a30e:	60b9      	str	r1, [r7, #8]
 800a310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6a1b      	ldr	r3, [r3, #32]
 800a316:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	f023 0210 	bic.w	r2, r3, #16
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	031b      	lsls	r3, r3, #12
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	4313      	orrs	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a342:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	011b      	lsls	r3, r3, #4
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	621a      	str	r2, [r3, #32]
}
 800a35a:	bf00      	nop
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a366:	b480      	push	{r7}
 800a368:	b085      	sub	sp, #20
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a37c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a380:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	4313      	orrs	r3, r2
 800a388:	f043 0307 	orr.w	r3, r3, #7
 800a38c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	609a      	str	r2, [r3, #8]
}
 800a394:	bf00      	nop
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a3ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	021a      	lsls	r2, r3, #8
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	431a      	orrs	r2, r3
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	697a      	ldr	r2, [r7, #20]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	609a      	str	r2, [r3, #8]
}
 800a3d4:	bf00      	nop
 800a3d6:	371c      	adds	r7, #28
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b087      	sub	sp, #28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	f003 031f 	and.w	r3, r3, #31
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6a1a      	ldr	r2, [r3, #32]
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	43db      	mvns	r3, r3
 800a402:	401a      	ands	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a1a      	ldr	r2, [r3, #32]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f003 031f 	and.w	r3, r3, #31
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	fa01 f303 	lsl.w	r3, r1, r3
 800a418:	431a      	orrs	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	621a      	str	r2, [r3, #32]
}
 800a41e:	bf00      	nop
 800a420:	371c      	adds	r7, #28
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
	...

0800a42c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d101      	bne.n	800a444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a440:	2302      	movs	r3, #2
 800a442:	e097      	b.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2202      	movs	r2, #2
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a45      	ldr	r2, [pc, #276]	@ (800a580 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d00e      	beq.n	800a48c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a44      	ldr	r2, [pc, #272]	@ (800a584 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d009      	beq.n	800a48c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a42      	ldr	r2, [pc, #264]	@ (800a588 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d004      	beq.n	800a48c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a41      	ldr	r2, [pc, #260]	@ (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d108      	bne.n	800a49e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a492:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	68fa      	ldr	r2, [r7, #12]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a4a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4a2f      	ldr	r2, [pc, #188]	@ (800a580 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d040      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a2e      	ldr	r2, [pc, #184]	@ (800a584 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d03b      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4d8:	d036      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4e2:	d031      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a29      	ldr	r2, [pc, #164]	@ (800a590 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d02c      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a28      	ldr	r2, [pc, #160]	@ (800a594 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d027      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a26      	ldr	r2, [pc, #152]	@ (800a598 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d022      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a25      	ldr	r2, [pc, #148]	@ (800a59c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d01d      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a23      	ldr	r2, [pc, #140]	@ (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d018      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a22      	ldr	r2, [pc, #136]	@ (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d013      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a18      	ldr	r2, [pc, #96]	@ (800a588 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d00e      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a17      	ldr	r2, [pc, #92]	@ (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d009      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d004      	beq.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a1a      	ldr	r2, [pc, #104]	@ (800a5ac <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d10c      	bne.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a54e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	4313      	orrs	r3, r2
 800a558:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr
 800a580:	40012c00 	.word	0x40012c00
 800a584:	50012c00 	.word	0x50012c00
 800a588:	40013400 	.word	0x40013400
 800a58c:	50013400 	.word	0x50013400
 800a590:	40000400 	.word	0x40000400
 800a594:	50000400 	.word	0x50000400
 800a598:	40000800 	.word	0x40000800
 800a59c:	50000800 	.word	0x50000800
 800a5a0:	40000c00 	.word	0x40000c00
 800a5a4:	50000c00 	.word	0x50000c00
 800a5a8:	40014000 	.word	0x40014000
 800a5ac:	50014000 	.word	0x50014000

0800a5b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a608:	bf00      	nop
 800a60a:	370c      	adds	r7, #12
 800a60c:	46bd      	mov	sp, r7
 800a60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a612:	4770      	bx	lr

0800a614 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <__NVIC_SetPriority>:
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	db0a      	blt.n	800a666 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	b2da      	uxtb	r2, r3
 800a654:	490c      	ldr	r1, [pc, #48]	@ (800a688 <__NVIC_SetPriority+0x4c>)
 800a656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a65a:	0112      	lsls	r2, r2, #4
 800a65c:	b2d2      	uxtb	r2, r2
 800a65e:	440b      	add	r3, r1
 800a660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a664:	e00a      	b.n	800a67c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	4908      	ldr	r1, [pc, #32]	@ (800a68c <__NVIC_SetPriority+0x50>)
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	3b04      	subs	r3, #4
 800a674:	0112      	lsls	r2, r2, #4
 800a676:	b2d2      	uxtb	r2, r2
 800a678:	440b      	add	r3, r1
 800a67a:	761a      	strb	r2, [r3, #24]
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	e000e100 	.word	0xe000e100
 800a68c:	e000ed00 	.word	0xe000ed00

0800a690 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a690:	b580      	push	{r7, lr}
 800a692:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 800a694:	4b05      	ldr	r3, [pc, #20]	@ (800a6ac <SysTick_Handler+0x1c>)
 800a696:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a698:	f002 faee 	bl	800cc78 <xTaskGetSchedulerState>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d001      	beq.n	800a6a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a6a2:	f003 f861 	bl	800d768 <xPortSysTickHandler>
  }
}
 800a6a6:	bf00      	nop
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	e000e010 	.word	0xe000e010

0800a6b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	f06f 0004 	mvn.w	r0, #4
 800a6ba:	f7ff ffbf 	bl	800a63c <__NVIC_SetPriority>
#endif
}
 800a6be:	bf00      	nop
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b086      	sub	sp, #24
 800a6c6:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6cc:	f3ef 8305 	mrs	r3, IPSR
 800a6d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6d2:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e013      	b.n	800a706 <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 800a6de:	f002 facb 	bl	800cc78 <xTaskGetSchedulerState>
 800a6e2:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d00d      	beq.n	800a706 <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6f6:	f3ef 8311 	mrs	r3, BASEPRI
 800a6fa:	607b      	str	r3, [r7, #4]
  return(result);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 800a702:	2301      	movs	r3, #1
 800a704:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 800a706:	697b      	ldr	r3, [r7, #20]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3718      	adds	r7, #24
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800a716:	f7ff ffd4 	bl	800a6c2 <IRQ_Context>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <osKernelInitialize+0x18>
    stat = osErrorISR;
 800a720:	f06f 0305 	mvn.w	r3, #5
 800a724:	607b      	str	r3, [r7, #4]
 800a726:	e012      	b.n	800a74e <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 800a728:	f002 faa6 	bl	800cc78 <xTaskGetSchedulerState>
 800a72c:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d109      	bne.n	800a748 <osKernelInitialize+0x38>
 800a734:	4b08      	ldr	r3, [pc, #32]	@ (800a758 <osKernelInitialize+0x48>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d105      	bne.n	800a748 <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a73c:	4b06      	ldr	r3, [pc, #24]	@ (800a758 <osKernelInitialize+0x48>)
 800a73e:	2201      	movs	r2, #1
 800a740:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a742:	2300      	movs	r3, #0
 800a744:	607b      	str	r3, [r7, #4]
 800a746:	e002      	b.n	800a74e <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800a748:	f04f 33ff 	mov.w	r3, #4294967295
 800a74c:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800a74e:	687b      	ldr	r3, [r7, #4]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	20000858 	.word	0x20000858

0800a75c <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 800a762:	f7ff ffae 	bl	800a6c2 <IRQ_Context>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <osKernelStart+0x18>
    stat = osErrorISR;
 800a76c:	f06f 0305 	mvn.w	r3, #5
 800a770:	607b      	str	r3, [r7, #4]
 800a772:	e016      	b.n	800a7a2 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 800a774:	f002 fa80 	bl	800cc78 <xTaskGetSchedulerState>
 800a778:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d10d      	bne.n	800a79c <osKernelStart+0x40>
 800a780:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ac <osKernelStart+0x50>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d109      	bne.n	800a79c <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a788:	f7ff ff92 	bl	800a6b0 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 800a78c:	4b07      	ldr	r3, [pc, #28]	@ (800a7ac <osKernelStart+0x50>)
 800a78e:	2202      	movs	r2, #2
 800a790:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a792:	f001 fd1b 	bl	800c1cc <vTaskStartScheduler>
      stat = osOK;
 800a796:	2300      	movs	r3, #0
 800a798:	607b      	str	r3, [r7, #4]
 800a79a:	e002      	b.n	800a7a2 <osKernelStart+0x46>
    } else {
      stat = osError;
 800a79c:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a0:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 800a7a2:	687b      	ldr	r3, [r7, #4]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20000858 	.word	0x20000858

0800a7b0 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b08e      	sub	sp, #56	@ 0x38
 800a7b4:	af04      	add	r7, sp, #16
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 800a7c0:	f7ff ff7f 	bl	800a6c2 <IRQ_Context>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d17e      	bne.n	800a8c8 <osThreadNew+0x118>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d07b      	beq.n	800a8c8 <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 800a7d0:	2380      	movs	r3, #128	@ 0x80
 800a7d2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a7d4:	2318      	movs	r3, #24
 800a7d6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a7dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d045      	beq.n	800a874 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <osThreadNew+0x46>
        name = attr->name;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d002      	beq.n	800a804 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	699b      	ldr	r3, [r3, #24]
 800a802:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d008      	beq.n	800a81c <osThreadNew+0x6c>
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	2b38      	cmp	r3, #56	@ 0x38
 800a80e:	d805      	bhi.n	800a81c <osThreadNew+0x6c>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	f003 0301 	and.w	r3, r3, #1
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d001      	beq.n	800a820 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 800a81c:	2300      	movs	r3, #0
 800a81e:	e054      	b.n	800a8ca <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d003      	beq.n	800a830 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	695b      	ldr	r3, [r3, #20]
 800a82c:	089b      	lsrs	r3, r3, #2
 800a82e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00e      	beq.n	800a856 <osThreadNew+0xa6>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	2ba7      	cmp	r3, #167	@ 0xa7
 800a83e:	d90a      	bls.n	800a856 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a844:	2b00      	cmp	r3, #0
 800a846:	d006      	beq.n	800a856 <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	695b      	ldr	r3, [r3, #20]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 800a850:	2301      	movs	r3, #1
 800a852:	61bb      	str	r3, [r7, #24]
 800a854:	e010      	b.n	800a878 <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10c      	bne.n	800a878 <osThreadNew+0xc8>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d108      	bne.n	800a878 <osThreadNew+0xc8>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d104      	bne.n	800a878 <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 800a86e:	2300      	movs	r3, #0
 800a870:	61bb      	str	r3, [r7, #24]
 800a872:	e001      	b.n	800a878 <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d110      	bne.n	800a8a0 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a886:	9202      	str	r2, [sp, #8]
 800a888:	9301      	str	r3, [sp, #4]
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	6a3a      	ldr	r2, [r7, #32]
 800a892:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f001 fab3 	bl	800be00 <xTaskCreateStatic>
 800a89a:	4603      	mov	r3, r0
 800a89c:	617b      	str	r3, [r7, #20]
 800a89e:	e013      	b.n	800a8c8 <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d110      	bne.n	800a8c8 <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800a8a6:	6a3b      	ldr	r3, [r7, #32]
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	f107 0314 	add.w	r3, r7, #20
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f001 faee 	bl	800be9a <xTaskCreate>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d001      	beq.n	800a8c8 <osThreadNew+0x118>
            hTask = NULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800a8c8:	697b      	ldr	r3, [r7, #20]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3728      	adds	r7, #40	@ 0x28
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 800a8da:	f7ff fef2 	bl	800a6c2 <IRQ_Context>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <osDelay+0x1a>
    stat = osErrorISR;
 800a8e4:	f06f 0305 	mvn.w	r3, #5
 800a8e8:	60fb      	str	r3, [r7, #12]
 800a8ea:	e007      	b.n	800a8fc <osDelay+0x2a>
  }
  else {
    stat = osOK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <osDelay+0x2a>
      vTaskDelay(ticks);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f001 fc42 	bl	800c180 <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <osSemaphoreNew>:
/* ==== Semaphore Management Functions ==== */

/*
  Create and Initialize a Semaphore object.
*/
osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a906:	b580      	push	{r7, lr}
 800a908:	b088      	sub	sp, #32
 800a90a:	af02      	add	r7, sp, #8
 800a90c:	60f8      	str	r0, [r7, #12]
 800a90e:	60b9      	str	r1, [r7, #8]
 800a910:	607a      	str	r2, [r7, #4]
  SemaphoreHandle_t hSemaphore;
  int32_t mem;

  hSemaphore = NULL;
 800a912:	2300      	movs	r3, #0
 800a914:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (max_count > 0U) && (initial_count <= max_count)) {
 800a916:	f7ff fed4 	bl	800a6c2 <IRQ_Context>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d175      	bne.n	800aa0c <osSemaphoreNew+0x106>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d072      	beq.n	800aa0c <osSemaphoreNew+0x106>
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d86e      	bhi.n	800aa0c <osSemaphoreNew+0x106>
    mem = -1;
 800a92e:	f04f 33ff 	mov.w	r3, #4294967295
 800a932:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d015      	beq.n	800a966 <osSemaphoreNew+0x60>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d006      	beq.n	800a950 <osSemaphoreNew+0x4a>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68db      	ldr	r3, [r3, #12]
 800a946:	2b4f      	cmp	r3, #79	@ 0x4f
 800a948:	d902      	bls.n	800a950 <osSemaphoreNew+0x4a>
        /* The memory for control block is provided, use static object */
        mem = 1;
 800a94a:	2301      	movs	r3, #1
 800a94c:	613b      	str	r3, [r7, #16]
 800a94e:	e00c      	b.n	800a96a <osSemaphoreNew+0x64>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d108      	bne.n	800a96a <osSemaphoreNew+0x64>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68db      	ldr	r3, [r3, #12]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d104      	bne.n	800a96a <osSemaphoreNew+0x64>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800a960:	2300      	movs	r3, #0
 800a962:	613b      	str	r3, [r7, #16]
 800a964:	e001      	b.n	800a96a <osSemaphoreNew+0x64>
        }
      }
    }
    else {
      mem = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	613b      	str	r3, [r7, #16]
    }

    if (mem != -1) {
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a970:	d04c      	beq.n	800aa0c <osSemaphoreNew+0x106>
      if (max_count == 1U) {
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d128      	bne.n	800a9ca <osSemaphoreNew+0xc4>
        if (mem == 1) {
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d10a      	bne.n	800a994 <osSemaphoreNew+0x8e>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2203      	movs	r2, #3
 800a984:	9200      	str	r2, [sp, #0]
 800a986:	2200      	movs	r2, #0
 800a988:	2100      	movs	r1, #0
 800a98a:	2001      	movs	r0, #1
 800a98c:	f000 fb57 	bl	800b03e <xQueueGenericCreateStatic>
 800a990:	6178      	str	r0, [r7, #20]
 800a992:	e005      	b.n	800a9a0 <osSemaphoreNew+0x9a>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a994:	2203      	movs	r2, #3
 800a996:	2100      	movs	r1, #0
 800a998:	2001      	movs	r0, #1
 800a99a:	f000 fb99 	bl	800b0d0 <xQueueGenericCreate>
 800a99e:	6178      	str	r0, [r7, #20]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d022      	beq.n	800a9ec <osSemaphoreNew+0xe6>
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d01f      	beq.n	800a9ec <osSemaphoreNew+0xe6>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	6978      	ldr	r0, [r7, #20]
 800a9b4:	f000 fc4c 	bl	800b250 <xQueueGenericSend>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d016      	beq.n	800a9ec <osSemaphoreNew+0xe6>
            vSemaphoreDelete (hSemaphore);
 800a9be:	6978      	ldr	r0, [r7, #20]
 800a9c0:	f001 f82f 	bl	800ba22 <vQueueDelete>
            hSemaphore = NULL;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]
 800a9c8:	e010      	b.n	800a9ec <osSemaphoreNew+0xe6>
          }
        }
      }
      else {
        if (mem == 1) {
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d108      	bne.n	800a9e2 <osSemaphoreNew+0xdc>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	68b9      	ldr	r1, [r7, #8]
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f000 fbe7 	bl	800b1ac <xQueueCreateCountingSemaphoreStatic>
 800a9de:	6178      	str	r0, [r7, #20]
 800a9e0:	e004      	b.n	800a9ec <osSemaphoreNew+0xe6>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a9e2:	68b9      	ldr	r1, [r7, #8]
 800a9e4:	68f8      	ldr	r0, [r7, #12]
 800a9e6:	f000 fc0c 	bl	800b202 <xQueueCreateCountingSemaphore>
 800a9ea:	6178      	str	r0, [r7, #20]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00c      	beq.n	800aa0c <osSemaphoreNew+0x106>
        if ((attr != NULL) && (attr->name != NULL)) {
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d009      	beq.n	800aa0c <osSemaphoreNew+0x106>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d005      	beq.n	800aa0c <osSemaphoreNew+0x106>
          /* Only non-NULL name objects are added to the Queue Registry */
          vQueueAddToRegistry (hSemaphore, attr->name);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4619      	mov	r1, r3
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	f001 f950 	bl	800bcac <vQueueAddToRegistry>
      #endif
    }
  }

  /* Return semaphore ID */
  return ((osSemaphoreId_t)hSemaphore);
 800aa0c:	697b      	ldr	r3, [r7, #20]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3718      	adds	r7, #24
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
	...

0800aa18 <osSemaphoreAcquire>:

/*
  Acquire a Semaphore token or timeout if no tokens are available.
*/
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aa26:	2300      	movs	r3, #0
 800aa28:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d103      	bne.n	800aa38 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aa30:	f06f 0303 	mvn.w	r3, #3
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e034      	b.n	800aaa2 <osSemaphoreAcquire+0x8a>
  }
  else if (IRQ_Context() != 0U) {
 800aa38:	f7ff fe43 	bl	800a6c2 <IRQ_Context>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01e      	beq.n	800aa80 <osSemaphoreAcquire+0x68>
    if (timeout != 0U) {
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <osSemaphoreAcquire+0x38>
      stat = osErrorParameter;
 800aa48:	f06f 0303 	mvn.w	r3, #3
 800aa4c:	617b      	str	r3, [r7, #20]
 800aa4e:	e028      	b.n	800aaa2 <osSemaphoreAcquire+0x8a>
    }
    else {
      yield = pdFALSE;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800aa54:	f107 030c 	add.w	r3, r7, #12
 800aa58:	461a      	mov	r2, r3
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	6938      	ldr	r0, [r7, #16]
 800aa5e:	f000 ff54 	bl	800b90a <xQueueReceiveFromISR>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d003      	beq.n	800aa70 <osSemaphoreAcquire+0x58>
        stat = osErrorResource;
 800aa68:	f06f 0302 	mvn.w	r3, #2
 800aa6c:	617b      	str	r3, [r7, #20]
 800aa6e:	e018      	b.n	800aaa2 <osSemaphoreAcquire+0x8a>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d015      	beq.n	800aaa2 <osSemaphoreAcquire+0x8a>
 800aa76:	4b0d      	ldr	r3, [pc, #52]	@ (800aaac <osSemaphoreAcquire+0x94>)
 800aa78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	e010      	b.n	800aaa2 <osSemaphoreAcquire+0x8a>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6938      	ldr	r0, [r7, #16]
 800aa84:	f000 fe67 	bl	800b756 <xQueueSemaphoreTake>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d009      	beq.n	800aaa2 <osSemaphoreAcquire+0x8a>
      if (timeout != 0U) {
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <osSemaphoreAcquire+0x84>
        stat = osErrorTimeout;
 800aa94:	f06f 0301 	mvn.w	r3, #1
 800aa98:	617b      	str	r3, [r7, #20]
 800aa9a:	e002      	b.n	800aaa2 <osSemaphoreAcquire+0x8a>
      } else {
        stat = osErrorResource;
 800aa9c:	f06f 0302 	mvn.w	r3, #2
 800aaa0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800aaa2:	697b      	ldr	r3, [r7, #20]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	e000ed04 	.word	0xe000ed04

0800aab0 <osSemaphoreRelease>:

/*
  Release a Semaphore token up to the initial maximum count.
*/
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d103      	bne.n	800aace <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800aac6:	f06f 0303 	mvn.w	r3, #3
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	e027      	b.n	800ab1e <osSemaphoreRelease+0x6e>
  }
  else if (IRQ_Context() != 0U) {
 800aace:	f7ff fdf8 	bl	800a6c2 <IRQ_Context>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d016      	beq.n	800ab06 <osSemaphoreRelease+0x56>
    yield = pdFALSE;
 800aad8:	2300      	movs	r3, #0
 800aada:	60fb      	str	r3, [r7, #12]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800aadc:	f107 030c 	add.w	r3, r7, #12
 800aae0:	4619      	mov	r1, r3
 800aae2:	6938      	ldr	r0, [r7, #16]
 800aae4:	f000 fd05 	bl	800b4f2 <xQueueGiveFromISR>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d003      	beq.n	800aaf6 <osSemaphoreRelease+0x46>
      stat = osErrorResource;
 800aaee:	f06f 0302 	mvn.w	r3, #2
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	e013      	b.n	800ab1e <osSemaphoreRelease+0x6e>
    } else {
      portYIELD_FROM_ISR (yield);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d010      	beq.n	800ab1e <osSemaphoreRelease+0x6e>
 800aafc:	4b0a      	ldr	r3, [pc, #40]	@ (800ab28 <osSemaphoreRelease+0x78>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	e00b      	b.n	800ab1e <osSemaphoreRelease+0x6e>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ab06:	2300      	movs	r3, #0
 800ab08:	2200      	movs	r2, #0
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	6938      	ldr	r0, [r7, #16]
 800ab0e:	f000 fb9f 	bl	800b250 <xQueueGenericSend>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d002      	beq.n	800ab1e <osSemaphoreRelease+0x6e>
      stat = osErrorResource;
 800ab18:	f06f 0302 	mvn.w	r3, #2
 800ab1c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return execution status */
  return (stat);
 800ab1e:	697b      	ldr	r3, [r7, #20]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3718      	adds	r7, #24
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	e000ed04 	.word	0xe000ed04

0800ab2c <osMessageQueueNew>:

  Limitations:
  - The memory for control block and and message data must be provided in the
    osThreadAttr_t structure in order to allocate object statically.
*/
osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b088      	sub	sp, #32
 800ab30:	af02      	add	r7, sp, #8
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
  QueueHandle_t hQueue;
  int32_t mem;

  hQueue = NULL;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (msg_count > 0U) && (msg_size > 0U)) {
 800ab3c:	f7ff fdc1 	bl	800a6c2 <IRQ_Context>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d15f      	bne.n	800ac06 <osMessageQueueNew+0xda>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d05c      	beq.n	800ac06 <osMessageQueueNew+0xda>
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d059      	beq.n	800ac06 <osMessageQueueNew+0xda>
    mem = -1;
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295
 800ab56:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d029      	beq.n	800abb2 <osMessageQueueNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	689b      	ldr	r3, [r3, #8]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d012      	beq.n	800ab8c <osMessageQueueNew+0x60>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	2b4f      	cmp	r3, #79	@ 0x4f
 800ab6c:	d90e      	bls.n	800ab8c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00a      	beq.n	800ab8c <osMessageQueueNew+0x60>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	695a      	ldr	r2, [r3, #20]
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	68b9      	ldr	r1, [r7, #8]
 800ab7e:	fb01 f303 	mul.w	r3, r1, r3
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d302      	bcc.n	800ab8c <osMessageQueueNew+0x60>
        /* The memory for control block and message data is provided, use static object */
        mem = 1;
 800ab86:	2301      	movs	r3, #1
 800ab88:	613b      	str	r3, [r7, #16]
 800ab8a:	e014      	b.n	800abb6 <osMessageQueueNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d110      	bne.n	800abb6 <osMessageQueueNew+0x8a>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10c      	bne.n	800abb6 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d108      	bne.n	800abb6 <osMessageQueueNew+0x8a>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d104      	bne.n	800abb6 <osMessageQueueNew+0x8a>
          /* Control block will be allocated from the dynamic pool */
          mem = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	613b      	str	r3, [r7, #16]
 800abb0:	e001      	b.n	800abb6 <osMessageQueueNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d10b      	bne.n	800abd4 <osMessageQueueNew+0xa8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691a      	ldr	r2, [r3, #16]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	2100      	movs	r1, #0
 800abc6:	9100      	str	r1, [sp, #0]
 800abc8:	68b9      	ldr	r1, [r7, #8]
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f000 fa37 	bl	800b03e <xQueueGenericCreateStatic>
 800abd0:	6178      	str	r0, [r7, #20]
 800abd2:	e008      	b.n	800abe6 <osMessageQueueNew+0xba>
      #endif
    }
    else {
      if (mem == 0) {
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d105      	bne.n	800abe6 <osMessageQueueNew+0xba>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800abda:	2200      	movs	r2, #0
 800abdc:	68b9      	ldr	r1, [r7, #8]
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f000 fa76 	bl	800b0d0 <xQueueGenericCreate>
 800abe4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00c      	beq.n	800ac06 <osMessageQueueNew+0xda>
      if ((attr != NULL) && (attr->name != NULL)) {
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d009      	beq.n	800ac06 <osMessageQueueNew+0xda>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d005      	beq.n	800ac06 <osMessageQueueNew+0xda>
        /* Only non-NULL name objects are added to the Queue Registry */
        vQueueAddToRegistry (hQueue, attr->name);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4619      	mov	r1, r3
 800ac00:	6978      	ldr	r0, [r7, #20]
 800ac02:	f001 f853 	bl	800bcac <vQueueAddToRegistry>
    #endif

  }

  /* Return message queue ID */
  return ((osMessageQueueId_t)hQueue);
 800ac06:	697b      	ldr	r3, [r7, #20]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <osMessageQueuePut>:
  Put a Message into a Queue or timeout if Queue is full.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	60f8      	str	r0, [r7, #12]
 800ac18:	60b9      	str	r1, [r7, #8]
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800ac28:	f7ff fd4b 	bl	800a6c2 <IRQ_Context>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d024      	beq.n	800ac7c <osMessageQueuePut+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <osMessageQueuePut+0x34>
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d002      	beq.n	800ac44 <osMessageQueuePut+0x34>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d003      	beq.n	800ac4c <osMessageQueuePut+0x3c>
      stat = osErrorParameter;
 800ac44:	f06f 0303 	mvn.w	r3, #3
 800ac48:	61fb      	str	r3, [r7, #28]
 800ac4a:	e034      	b.n	800acb6 <osMessageQueuePut+0xa6>
    }
    else {
      yield = pdFALSE;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	617b      	str	r3, [r7, #20]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ac50:	f107 0214 	add.w	r2, r7, #20
 800ac54:	2300      	movs	r3, #0
 800ac56:	68b9      	ldr	r1, [r7, #8]
 800ac58:	69b8      	ldr	r0, [r7, #24]
 800ac5a:	f000 fbc6 	bl	800b3ea <xQueueGenericSendFromISR>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d003      	beq.n	800ac6c <osMessageQueuePut+0x5c>
        stat = osErrorResource;
 800ac64:	f06f 0302 	mvn.w	r3, #2
 800ac68:	61fb      	str	r3, [r7, #28]
 800ac6a:	e024      	b.n	800acb6 <osMessageQueuePut+0xa6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d021      	beq.n	800acb6 <osMessageQueuePut+0xa6>
 800ac72:	4b13      	ldr	r3, [pc, #76]	@ (800acc0 <osMessageQueuePut+0xb0>)
 800ac74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	e01c      	b.n	800acb6 <osMessageQueuePut+0xa6>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <osMessageQueuePut+0x78>
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d103      	bne.n	800ac90 <osMessageQueuePut+0x80>
      stat = osErrorParameter;
 800ac88:	f06f 0303 	mvn.w	r3, #3
 800ac8c:	61fb      	str	r3, [r7, #28]
 800ac8e:	e012      	b.n	800acb6 <osMessageQueuePut+0xa6>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ac90:	2300      	movs	r3, #0
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	68b9      	ldr	r1, [r7, #8]
 800ac96:	69b8      	ldr	r0, [r7, #24]
 800ac98:	f000 fada 	bl	800b250 <xQueueGenericSend>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d009      	beq.n	800acb6 <osMessageQueuePut+0xa6>
        if (timeout != 0U) {
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d003      	beq.n	800acb0 <osMessageQueuePut+0xa0>
          stat = osErrorTimeout;
 800aca8:	f06f 0301 	mvn.w	r3, #1
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	e002      	b.n	800acb6 <osMessageQueuePut+0xa6>
        } else {
          stat = osErrorResource;
 800acb0:	f06f 0302 	mvn.w	r3, #2
 800acb4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800acb6:	69fb      	ldr	r3, [r7, #28]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3720      	adds	r7, #32
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	e000ed04 	.word	0xe000ed04

0800acc4 <osMessageQueueGet>:
  Get a Message from a Queue or timeout if Queue is empty.

  Limitations:
  - Message priority is ignored
*/
osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	61fb      	str	r3, [r7, #28]

  if (IRQ_Context() != 0U) {
 800acda:	f7ff fcf2 	bl	800a6c2 <IRQ_Context>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d024      	beq.n	800ad2e <osMessageQueueGet+0x6a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d005      	beq.n	800acf6 <osMessageQueueGet+0x32>
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <osMessageQueueGet+0x32>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <osMessageQueueGet+0x3a>
      stat = osErrorParameter;
 800acf6:	f06f 0303 	mvn.w	r3, #3
 800acfa:	61fb      	str	r3, [r7, #28]
 800acfc:	e033      	b.n	800ad66 <osMessageQueueGet+0xa2>
    }
    else {
      yield = pdFALSE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ad02:	f107 0314 	add.w	r3, r7, #20
 800ad06:	461a      	mov	r2, r3
 800ad08:	68b9      	ldr	r1, [r7, #8]
 800ad0a:	69b8      	ldr	r0, [r7, #24]
 800ad0c:	f000 fdfd 	bl	800b90a <xQueueReceiveFromISR>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d003      	beq.n	800ad1e <osMessageQueueGet+0x5a>
        stat = osErrorResource;
 800ad16:	f06f 0302 	mvn.w	r3, #2
 800ad1a:	61fb      	str	r3, [r7, #28]
 800ad1c:	e023      	b.n	800ad66 <osMessageQueueGet+0xa2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d020      	beq.n	800ad66 <osMessageQueueGet+0xa2>
 800ad24:	4b12      	ldr	r3, [pc, #72]	@ (800ad70 <osMessageQueueGet+0xac>)
 800ad26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	e01b      	b.n	800ad66 <osMessageQueueGet+0xa2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d002      	beq.n	800ad3a <osMessageQueueGet+0x76>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d103      	bne.n	800ad42 <osMessageQueueGet+0x7e>
      stat = osErrorParameter;
 800ad3a:	f06f 0303 	mvn.w	r3, #3
 800ad3e:	61fb      	str	r3, [r7, #28]
 800ad40:	e011      	b.n	800ad66 <osMessageQueueGet+0xa2>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	68b9      	ldr	r1, [r7, #8]
 800ad46:	69b8      	ldr	r0, [r7, #24]
 800ad48:	f000 fc49 	bl	800b5de <xQueueReceive>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d009      	beq.n	800ad66 <osMessageQueueGet+0xa2>
        if (timeout != 0U) {
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d003      	beq.n	800ad60 <osMessageQueueGet+0x9c>
          stat = osErrorTimeout;
 800ad58:	f06f 0301 	mvn.w	r3, #1
 800ad5c:	61fb      	str	r3, [r7, #28]
 800ad5e:	e002      	b.n	800ad66 <osMessageQueueGet+0xa2>
        } else {
          stat = osErrorResource;
 800ad60:	f06f 0302 	mvn.w	r3, #2
 800ad64:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Return execution status */
  return (stat);
 800ad66:	69fb      	ldr	r3, [r7, #28]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3720      	adds	r7, #32
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <osMessageQueueGetSpace>:
}

/*
  Get number of available slots for messages in a Message Queue.
*/
uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	613b      	str	r3, [r7, #16]
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <osMessageQueueGetSpace+0x18>
    space = 0U;
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
 800ad8a:	e015      	b.n	800adb8 <osMessageQueueGetSpace+0x44>
  }
  else if (IRQ_Context() != 0U) {
 800ad8c:	f7ff fc99 	bl	800a6c2 <IRQ_Context>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00c      	beq.n	800adb0 <osMessageQueueGetSpace+0x3c>
    isrm = taskENTER_CRITICAL_FROM_ISR();
 800ad96:	f002 fdf7 	bl	800d988 <ulSetInterruptMask>
 800ad9a:	60f8      	str	r0, [r7, #12]

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	617b      	str	r3, [r7, #20]

    taskEXIT_CRITICAL_FROM_ISR(isrm);
 800ada8:	68f8      	ldr	r0, [r7, #12]
 800adaa:	f002 fdfa 	bl	800d9a2 <vClearInterruptMask>
 800adae:	e003      	b.n	800adb8 <osMessageQueueGetSpace+0x44>
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
 800adb0:	6938      	ldr	r0, [r7, #16]
 800adb2:	f000 fe1a 	bl	800b9ea <uxQueueSpacesAvailable>
 800adb6:	6178      	str	r0, [r7, #20]
  }

  /* Return number of available slots */
  return (space);
 800adb8:	697b      	ldr	r3, [r7, #20]
}
 800adba:	4618      	mov	r0, r3
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
	...

0800adc4 <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800adc4:	b480      	push	{r7}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4a07      	ldr	r2, [pc, #28]	@ (800adf0 <vApplicationGetIdleTaskMemory+0x2c>)
 800add4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	4a06      	ldr	r2, [pc, #24]	@ (800adf4 <vApplicationGetIdleTaskMemory+0x30>)
 800adda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2280      	movs	r2, #128	@ 0x80
 800ade0:	601a      	str	r2, [r3, #0]
}
 800ade2:	bf00      	nop
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr
 800adee:	bf00      	nop
 800adf0:	2000085c 	.word	0x2000085c
 800adf4:	20000904 	.word	0x20000904

0800adf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	60b9      	str	r1, [r7, #8]
 800ae02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4a07      	ldr	r2, [pc, #28]	@ (800ae24 <vApplicationGetTimerTaskMemory+0x2c>)
 800ae08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	4a06      	ldr	r2, [pc, #24]	@ (800ae28 <vApplicationGetTimerTaskMemory+0x30>)
 800ae0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2280      	movs	r2, #128	@ 0x80
 800ae14:	601a      	str	r2, [r3, #0]
}
 800ae16:	bf00      	nop
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	20000b04 	.word	0x20000b04
 800ae28:	20000bac 	.word	0x20000bac

0800ae2c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f103 0208 	add.w	r2, r3, #8
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f04f 32ff 	mov.w	r2, #4294967295
 800ae44:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f103 0208 	add.w	r2, r3, #8
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f103 0208 	add.w	r2, r3, #8
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ae7a:	bf00      	nop
 800ae7c:	370c      	adds	r7, #12
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800ae86:	b480      	push	{r7}
 800ae88:	b085      	sub	sp, #20
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae9c:	d103      	bne.n	800aea6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	e00c      	b.n	800aec0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	3308      	adds	r3, #8
 800aeaa:	60fb      	str	r3, [r7, #12]
 800aeac:	e002      	b.n	800aeb4 <vListInsert+0x2e>
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d2f6      	bcs.n	800aeae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	685a      	ldr	r2, [r3, #4]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	1c5a      	adds	r2, r3, #1
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	601a      	str	r2, [r3, #0]
}
 800aeec:	bf00      	nop
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aef8:	b480      	push	{r7}
 800aefa:	b085      	sub	sp, #20
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	687a      	ldr	r2, [r7, #4]
 800af0c:	6892      	ldr	r2, [r2, #8]
 800af0e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	6852      	ldr	r2, [r2, #4]
 800af18:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	429a      	cmp	r2, r3
 800af22:	d103      	bne.n	800af2c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689a      	ldr	r2, [r3, #8]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2200      	movs	r2, #0
 800af30:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	1e5a      	subs	r2, r3, #1
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800af56:	2301      	movs	r3, #1
 800af58:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d103      	bne.n	800af6c <xQueueGenericReset+0x20>
 800af64:	f002 fd10 	bl	800d988 <ulSetInterruptMask>
 800af68:	bf00      	nop
 800af6a:	e7fd      	b.n	800af68 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d057      	beq.n	800b022 <xQueueGenericReset+0xd6>
        ( pxQueue->uxLength >= 1U ) &&
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800af76:	2b00      	cmp	r3, #0
 800af78:	d053      	beq.n	800b022 <xQueueGenericReset+0xd6>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af82:	2100      	movs	r1, #0
 800af84:	fba3 2302 	umull	r2, r3, r3, r2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d000      	beq.n	800af8e <xQueueGenericReset+0x42>
 800af8c:	2101      	movs	r1, #1
 800af8e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800af90:	2b00      	cmp	r3, #0
 800af92:	d146      	bne.n	800b022 <xQueueGenericReset+0xd6>
    {
        taskENTER_CRITICAL();
 800af94:	f002 fbbc 	bl	800d710 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	681a      	ldr	r2, [r3, #0]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afa0:	68b9      	ldr	r1, [r7, #8]
 800afa2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800afa4:	fb01 f303 	mul.w	r3, r1, r3
 800afa8:	441a      	add	r2, r3
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	2200      	movs	r2, #0
 800afb2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	681a      	ldr	r2, [r3, #0]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afc4:	3b01      	subs	r3, #1
 800afc6:	68b9      	ldr	r1, [r7, #8]
 800afc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800afca:	fb01 f303 	mul.w	r3, r1, r3
 800afce:	441a      	add	r2, r3
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	22ff      	movs	r2, #255	@ 0xff
 800afd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	22ff      	movs	r2, #255	@ 0xff
 800afe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d10e      	bne.n	800b008 <xQueueGenericReset+0xbc>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d014      	beq.n	800b01c <xQueueGenericReset+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	3310      	adds	r3, #16
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 fc2c 	bl	800c854 <xTaskRemoveFromEventList>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00c      	beq.n	800b01c <xQueueGenericReset+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b002:	f002 fb73 	bl	800d6ec <vPortYield>
 800b006:	e009      	b.n	800b01c <xQueueGenericReset+0xd0>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	3310      	adds	r3, #16
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff ff0d 	bl	800ae2c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	3324      	adds	r3, #36	@ 0x24
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff ff08 	bl	800ae2c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800b01c:	f002 fb8a 	bl	800d734 <vPortExitCritical>
 800b020:	e001      	b.n	800b026 <xQueueGenericReset+0xda>
    }
    else
    {
        xReturn = pdFAIL;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d103      	bne.n	800b034 <xQueueGenericReset+0xe8>
 800b02c:	f002 fcac 	bl	800d988 <ulSetInterruptMask>
 800b030:	bf00      	nop
 800b032:	e7fd      	b.n	800b030 <xQueueGenericReset+0xe4>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800b034:	68fb      	ldr	r3, [r7, #12]
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 800b03e:	b580      	push	{r7, lr}
 800b040:	b088      	sub	sp, #32
 800b042:	af02      	add	r7, sp, #8
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	60b9      	str	r1, [r7, #8]
 800b048:	607a      	str	r2, [r7, #4]
 800b04a:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d103      	bne.n	800b05e <xQueueGenericCreateStatic+0x20>
 800b056:	f002 fc97 	bl	800d988 <ulSetInterruptMask>
 800b05a:	bf00      	nop
 800b05c:	e7fd      	b.n	800b05a <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d029      	beq.n	800b0b8 <xQueueGenericCreateStatic+0x7a>
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d026      	beq.n	800b0b8 <xQueueGenericCreateStatic+0x7a>
            ( pxStaticQueue != NULL ) &&
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d002      	beq.n	800b076 <xQueueGenericCreateStatic+0x38>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d020      	beq.n	800b0b8 <xQueueGenericCreateStatic+0x7a>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d11a      	bne.n	800b0b8 <xQueueGenericCreateStatic+0x7a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800b082:	2350      	movs	r3, #80	@ 0x50
 800b084:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	2b50      	cmp	r3, #80	@ 0x50
 800b08a:	d003      	beq.n	800b094 <xQueueGenericCreateStatic+0x56>
 800b08c:	f002 fc7c 	bl	800d988 <ulSetInterruptMask>
 800b090:	bf00      	nop
 800b092:	e7fd      	b.n	800b090 <xQueueGenericCreateStatic+0x52>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 800b094:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b0a2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	9300      	str	r3, [sp, #0]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	68b9      	ldr	r1, [r7, #8]
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 f858 	bl	800b166 <prvInitialiseNewQueue>
 800b0b6:	e006      	b.n	800b0c6 <xQueueGenericCreateStatic+0x88>
        }
        else
        {
            configASSERT( pxNewQueue );
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d103      	bne.n	800b0c6 <xQueueGenericCreateStatic+0x88>
 800b0be:	f002 fc63 	bl	800d988 <ulSetInterruptMask>
 800b0c2:	bf00      	nop
 800b0c4:	e7fd      	b.n	800b0c2 <xQueueGenericCreateStatic+0x84>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800b0c6:	697b      	ldr	r3, [r7, #20]
    }
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	@ 0x28
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d032      	beq.n	800b14e <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	fba3 2302 	umull	r2, r3, r3, r2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d000      	beq.n	800b0f8 <xQueueGenericCreate+0x28>
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d127      	bne.n	800b14e <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800b106:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800b10a:	d820      	bhi.n	800b14e <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	68ba      	ldr	r2, [r7, #8]
 800b110:	fb02 f303 	mul.w	r3, r2, r3
 800b114:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	3350      	adds	r3, #80	@ 0x50
 800b11a:	4618      	mov	r0, r3
 800b11c:	f002 fc94 	bl	800da48 <pvPortMalloc>
 800b120:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d019      	beq.n	800b15c <xQueueGenericCreate+0x8c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	3350      	adds	r3, #80	@ 0x50
 800b130:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b13a:	79fa      	ldrb	r2, [r7, #7]
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	4613      	mov	r3, r2
 800b142:	697a      	ldr	r2, [r7, #20]
 800b144:	68b9      	ldr	r1, [r7, #8]
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 f80d 	bl	800b166 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800b14c:	e006      	b.n	800b15c <xQueueGenericCreate+0x8c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d103      	bne.n	800b15c <xQueueGenericCreate+0x8c>
 800b154:	f002 fc18 	bl	800d988 <ulSetInterruptMask>
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <xQueueGenericCreate+0x88>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800b15c:	69fb      	ldr	r3, [r7, #28]
    }
 800b15e:	4618      	mov	r0, r3
 800b160:	3720      	adds	r7, #32
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b084      	sub	sp, #16
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d103      	bne.n	800b182 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b17a:	69bb      	ldr	r3, [r7, #24]
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	e002      	b.n	800b188 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b194:	2101      	movs	r1, #1
 800b196:	69b8      	ldr	r0, [r7, #24]
 800b198:	f7ff fed8 	bl	800af4c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	78fa      	ldrb	r2, [r7, #3]
 800b1a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800b1a4:	bf00      	nop
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <xQueueCreateCountingSemaphoreStatic>:
#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount,
                                                       const UBaseType_t uxInitialCount,
                                                       StaticQueue_t * pxStaticQueue )
    {
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b088      	sub	sp, #32
 800b1b0:	af02      	add	r7, sp, #8
 800b1b2:	60f8      	str	r0, [r7, #12]
 800b1b4:	60b9      	str	r1, [r7, #8]
 800b1b6:	607a      	str	r2, [r7, #4]
        QueueHandle_t xHandle = NULL;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	617b      	str	r3, [r7, #20]

        if( ( uxMaxCount != 0 ) &&
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d013      	beq.n	800b1ea <xQueueCreateCountingSemaphoreStatic+0x3e>
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d80f      	bhi.n	800b1ea <xQueueCreateCountingSemaphoreStatic+0x3e>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f7ff ff32 	bl	800b03e <xQueueGenericCreateStatic>
 800b1da:	6178      	str	r0, [r7, #20]

            if( xHandle != NULL )
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00a      	beq.n	800b1f8 <xQueueCreateCountingSemaphoreStatic+0x4c>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	68ba      	ldr	r2, [r7, #8]
 800b1e6:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800b1e8:	e006      	b.n	800b1f8 <xQueueCreateCountingSemaphoreStatic+0x4c>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d103      	bne.n	800b1f8 <xQueueCreateCountingSemaphoreStatic+0x4c>
 800b1f0:	f002 fbca 	bl	800d988 <ulSetInterruptMask>
 800b1f4:	bf00      	nop
 800b1f6:	e7fd      	b.n	800b1f4 <xQueueCreateCountingSemaphoreStatic+0x48>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800b1f8:	697b      	ldr	r3, [r7, #20]
    }
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800b202:	b580      	push	{r7, lr}
 800b204:	b084      	sub	sp, #16
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
 800b20a:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d010      	beq.n	800b238 <xQueueCreateCountingSemaphore+0x36>
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d80c      	bhi.n	800b238 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b21e:	2202      	movs	r2, #2
 800b220:	2100      	movs	r1, #0
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7ff ff54 	bl	800b0d0 <xQueueGenericCreate>
 800b228:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00a      	beq.n	800b246 <xQueueCreateCountingSemaphore+0x44>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 800b236:	e006      	b.n	800b246 <xQueueCreateCountingSemaphore+0x44>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d103      	bne.n	800b246 <xQueueCreateCountingSemaphore+0x44>
 800b23e:	f002 fba3 	bl	800d988 <ulSetInterruptMask>
 800b242:	bf00      	nop
 800b244:	e7fd      	b.n	800b242 <xQueueCreateCountingSemaphore+0x40>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 800b246:	68fb      	ldr	r3, [r7, #12]
    }
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b08a      	sub	sp, #40	@ 0x28
 800b254:	af00      	add	r7, sp, #0
 800b256:	60f8      	str	r0, [r7, #12]
 800b258:	60b9      	str	r1, [r7, #8]
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b25e:	2300      	movs	r3, #0
 800b260:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d103      	bne.n	800b274 <xQueueGenericSend+0x24>
 800b26c:	f002 fb8c 	bl	800d988 <ulSetInterruptMask>
 800b270:	bf00      	nop
 800b272:	e7fd      	b.n	800b270 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d103      	bne.n	800b282 <xQueueGenericSend+0x32>
 800b27a:	6a3b      	ldr	r3, [r7, #32]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d101      	bne.n	800b286 <xQueueGenericSend+0x36>
 800b282:	2301      	movs	r3, #1
 800b284:	e000      	b.n	800b288 <xQueueGenericSend+0x38>
 800b286:	2300      	movs	r3, #0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d103      	bne.n	800b294 <xQueueGenericSend+0x44>
 800b28c:	f002 fb7c 	bl	800d988 <ulSetInterruptMask>
 800b290:	bf00      	nop
 800b292:	e7fd      	b.n	800b290 <xQueueGenericSend+0x40>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d103      	bne.n	800b2a2 <xQueueGenericSend+0x52>
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b29e:	2b01      	cmp	r3, #1
 800b2a0:	d101      	bne.n	800b2a6 <xQueueGenericSend+0x56>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e000      	b.n	800b2a8 <xQueueGenericSend+0x58>
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d103      	bne.n	800b2b4 <xQueueGenericSend+0x64>
 800b2ac:	f002 fb6c 	bl	800d988 <ulSetInterruptMask>
 800b2b0:	bf00      	nop
 800b2b2:	e7fd      	b.n	800b2b0 <xQueueGenericSend+0x60>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b2b4:	f001 fce0 	bl	800cc78 <xTaskGetSchedulerState>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d102      	bne.n	800b2c4 <xQueueGenericSend+0x74>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d101      	bne.n	800b2c8 <xQueueGenericSend+0x78>
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e000      	b.n	800b2ca <xQueueGenericSend+0x7a>
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d103      	bne.n	800b2d6 <xQueueGenericSend+0x86>
 800b2ce:	f002 fb5b 	bl	800d988 <ulSetInterruptMask>
 800b2d2:	bf00      	nop
 800b2d4:	e7fd      	b.n	800b2d2 <xQueueGenericSend+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800b2d6:	f002 fa1b 	bl	800d710 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2da:	6a3b      	ldr	r3, [r7, #32]
 800b2dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d302      	bcc.n	800b2ec <xQueueGenericSend+0x9c>
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d11d      	bne.n	800b328 <xQueueGenericSend+0xd8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2ec:	683a      	ldr	r2, [r7, #0]
 800b2ee:	68b9      	ldr	r1, [r7, #8]
 800b2f0:	6a38      	ldr	r0, [r7, #32]
 800b2f2:	f000 fbca 	bl	800ba8a <prvCopyDataToQueue>
 800b2f6:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2f8:	6a3b      	ldr	r3, [r7, #32]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00a      	beq.n	800b316 <xQueueGenericSend+0xc6>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b300:	6a3b      	ldr	r3, [r7, #32]
 800b302:	3324      	adds	r3, #36	@ 0x24
 800b304:	4618      	mov	r0, r3
 800b306:	f001 faa5 	bl	800c854 <xTaskRemoveFromEventList>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d007      	beq.n	800b320 <xQueueGenericSend+0xd0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800b310:	f002 f9ec 	bl	800d6ec <vPortYield>
 800b314:	e004      	b.n	800b320 <xQueueGenericSend+0xd0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <xQueueGenericSend+0xd0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800b31c:	f002 f9e6 	bl	800d6ec <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800b320:	f002 fa08 	bl	800d734 <vPortExitCritical>
                return pdPASS;
 800b324:	2301      	movs	r3, #1
 800b326:	e05c      	b.n	800b3e2 <xQueueGenericSend+0x192>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d103      	bne.n	800b336 <xQueueGenericSend+0xe6>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800b32e:	f002 fa01 	bl	800d734 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800b332:	2300      	movs	r3, #0
 800b334:	e055      	b.n	800b3e2 <xQueueGenericSend+0x192>
                }
                else if( xEntryTimeSet == pdFALSE )
 800b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d106      	bne.n	800b34a <xQueueGenericSend+0xfa>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800b33c:	f107 0314 	add.w	r3, r7, #20
 800b340:	4618      	mov	r0, r3
 800b342:	f001 fb55 	bl	800c9f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800b346:	2301      	movs	r3, #1
 800b348:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800b34a:	f002 f9f3 	bl	800d734 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800b34e:	f000 ffa1 	bl	800c294 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800b352:	f002 f9dd 	bl	800d710 <vPortEnterCritical>
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b35c:	b25b      	sxtb	r3, r3
 800b35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b362:	d103      	bne.n	800b36c <xQueueGenericSend+0x11c>
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b372:	b25b      	sxtb	r3, r3
 800b374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b378:	d103      	bne.n	800b382 <xQueueGenericSend+0x132>
 800b37a:	6a3b      	ldr	r3, [r7, #32]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b382:	f002 f9d7 	bl	800d734 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b386:	1d3a      	adds	r2, r7, #4
 800b388:	f107 0314 	add.w	r3, r7, #20
 800b38c:	4611      	mov	r1, r2
 800b38e:	4618      	mov	r0, r3
 800b390:	f001 fb44 	bl	800ca1c <xTaskCheckForTimeOut>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d11d      	bne.n	800b3d6 <xQueueGenericSend+0x186>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b39a:	6a38      	ldr	r0, [r7, #32]
 800b39c:	f000 fc6d 	bl	800bc7a <prvIsQueueFull>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d011      	beq.n	800b3ca <xQueueGenericSend+0x17a>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b3a6:	6a3b      	ldr	r3, [r7, #32]
 800b3a8:	3310      	adds	r3, #16
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	4611      	mov	r1, r2
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 f9f4 	bl	800c79c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800b3b4:	6a38      	ldr	r0, [r7, #32]
 800b3b6:	f000 fbf8 	bl	800bbaa <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800b3ba:	f000 ff79 	bl	800c2b0 <xTaskResumeAll>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d188      	bne.n	800b2d6 <xQueueGenericSend+0x86>
                {
                    portYIELD_WITHIN_API();
 800b3c4:	f002 f992 	bl	800d6ec <vPortYield>
 800b3c8:	e785      	b.n	800b2d6 <xQueueGenericSend+0x86>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800b3ca:	6a38      	ldr	r0, [r7, #32]
 800b3cc:	f000 fbed 	bl	800bbaa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800b3d0:	f000 ff6e 	bl	800c2b0 <xTaskResumeAll>
 800b3d4:	e77f      	b.n	800b2d6 <xQueueGenericSend+0x86>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800b3d6:	6a38      	ldr	r0, [r7, #32]
 800b3d8:	f000 fbe7 	bl	800bbaa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800b3dc:	f000 ff68 	bl	800c2b0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800b3e0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3728      	adds	r7, #40	@ 0x28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b08a      	sub	sp, #40	@ 0x28
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d103      	bne.n	800b40a <xQueueGenericSendFromISR+0x20>
 800b402:	f002 fac1 	bl	800d988 <ulSetInterruptMask>
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d103      	bne.n	800b418 <xQueueGenericSendFromISR+0x2e>
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <xQueueGenericSendFromISR+0x32>
 800b418:	2301      	movs	r3, #1
 800b41a:	e000      	b.n	800b41e <xQueueGenericSendFromISR+0x34>
 800b41c:	2300      	movs	r3, #0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d103      	bne.n	800b42a <xQueueGenericSendFromISR+0x40>
 800b422:	f002 fab1 	bl	800d988 <ulSetInterruptMask>
 800b426:	bf00      	nop
 800b428:	e7fd      	b.n	800b426 <xQueueGenericSendFromISR+0x3c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b02      	cmp	r3, #2
 800b42e:	d103      	bne.n	800b438 <xQueueGenericSendFromISR+0x4e>
 800b430:	6a3b      	ldr	r3, [r7, #32]
 800b432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b434:	2b01      	cmp	r3, #1
 800b436:	d101      	bne.n	800b43c <xQueueGenericSendFromISR+0x52>
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <xQueueGenericSendFromISR+0x54>
 800b43c:	2300      	movs	r3, #0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d103      	bne.n	800b44a <xQueueGenericSendFromISR+0x60>
 800b442:	f002 faa1 	bl	800d988 <ulSetInterruptMask>
 800b446:	bf00      	nop
 800b448:	e7fd      	b.n	800b446 <xQueueGenericSendFromISR+0x5c>
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b44a:	f002 fa9d 	bl	800d988 <ulSetInterruptMask>
 800b44e:	61f8      	str	r0, [r7, #28]
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b454:	6a3b      	ldr	r3, [r7, #32]
 800b456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b458:	429a      	cmp	r2, r3
 800b45a:	d302      	bcc.n	800b462 <xQueueGenericSendFromISR+0x78>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d13d      	bne.n	800b4de <xQueueGenericSendFromISR+0xf4>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b468:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b46e:	617b      	str	r3, [r7, #20]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	68b9      	ldr	r1, [r7, #8]
 800b474:	6a38      	ldr	r0, [r7, #32]
 800b476:	f000 fb08 	bl	800ba8a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800b47a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b482:	d112      	bne.n	800b4aa <xQueueGenericSendFromISR+0xc0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b484:	6a3b      	ldr	r3, [r7, #32]
 800b486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d025      	beq.n	800b4d8 <xQueueGenericSendFromISR+0xee>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b48c:	6a3b      	ldr	r3, [r7, #32]
 800b48e:	3324      	adds	r3, #36	@ 0x24
 800b490:	4618      	mov	r0, r3
 800b492:	f001 f9df 	bl	800c854 <xTaskRemoveFromEventList>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d01d      	beq.n	800b4d8 <xQueueGenericSendFromISR+0xee>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d01a      	beq.n	800b4d8 <xQueueGenericSendFromISR+0xee>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	601a      	str	r2, [r3, #0]
 800b4a8:	e016      	b.n	800b4d8 <xQueueGenericSendFromISR+0xee>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800b4aa:	f000 ffff 	bl	800c4ac <uxTaskGetNumberOfTasks>
 800b4ae:	6138      	str	r0, [r7, #16]
 800b4b0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b4b4:	693a      	ldr	r2, [r7, #16]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d90e      	bls.n	800b4d8 <xQueueGenericSendFromISR+0xee>
 800b4ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b4be:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4c0:	d103      	bne.n	800b4ca <xQueueGenericSendFromISR+0xe0>
 800b4c2:	f002 fa61 	bl	800d988 <ulSetInterruptMask>
 800b4c6:	bf00      	nop
 800b4c8:	e7fd      	b.n	800b4c6 <xQueueGenericSendFromISR+0xdc>
 800b4ca:	7efb      	ldrb	r3, [r7, #27]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	b25a      	sxtb	r2, r3
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	627b      	str	r3, [r7, #36]	@ 0x24
        {
 800b4dc:	e001      	b.n	800b4e2 <xQueueGenericSendFromISR+0xf8>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b4e2:	69f8      	ldr	r0, [r7, #28]
 800b4e4:	f002 fa5d 	bl	800d9a2 <vClearInterruptMask>

    return xReturn;
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3728      	adds	r7, #40	@ 0x28
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b088      	sub	sp, #32
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	61bb      	str	r3, [r7, #24]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d103      	bne.n	800b50e <xQueueGiveFromISR+0x1c>
 800b506:	f002 fa3f 	bl	800d988 <ulSetInterruptMask>
 800b50a:	bf00      	nop
 800b50c:	e7fd      	b.n	800b50a <xQueueGiveFromISR+0x18>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b512:	2b00      	cmp	r3, #0
 800b514:	d003      	beq.n	800b51e <xQueueGiveFromISR+0x2c>
 800b516:	f002 fa37 	bl	800d988 <ulSetInterruptMask>
 800b51a:	bf00      	nop
 800b51c:	e7fd      	b.n	800b51a <xQueueGiveFromISR+0x28>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d103      	bne.n	800b52e <xQueueGiveFromISR+0x3c>
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <xQueueGiveFromISR+0x40>
 800b52e:	2301      	movs	r3, #1
 800b530:	e000      	b.n	800b534 <xQueueGiveFromISR+0x42>
 800b532:	2300      	movs	r3, #0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d103      	bne.n	800b540 <xQueueGiveFromISR+0x4e>
 800b538:	f002 fa26 	bl	800d988 <ulSetInterruptMask>
 800b53c:	bf00      	nop
 800b53e:	e7fd      	b.n	800b53c <xQueueGiveFromISR+0x4a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b540:	f002 fa22 	bl	800d988 <ulSetInterruptMask>
 800b544:	6178      	str	r0, [r7, #20]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b54a:	613b      	str	r3, [r7, #16]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b550:	693a      	ldr	r2, [r7, #16]
 800b552:	429a      	cmp	r2, r3
 800b554:	d239      	bcs.n	800b5ca <xQueueGiveFromISR+0xd8>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b55c:	73fb      	strb	r3, [r7, #15]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800b566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b56e:	d112      	bne.n	800b596 <xQueueGiveFromISR+0xa4>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b574:	2b00      	cmp	r3, #0
 800b576:	d025      	beq.n	800b5c4 <xQueueGiveFromISR+0xd2>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	3324      	adds	r3, #36	@ 0x24
 800b57c:	4618      	mov	r0, r3
 800b57e:	f001 f969 	bl	800c854 <xTaskRemoveFromEventList>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d01d      	beq.n	800b5c4 <xQueueGiveFromISR+0xd2>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d01a      	beq.n	800b5c4 <xQueueGiveFromISR+0xd2>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2201      	movs	r2, #1
 800b592:	601a      	str	r2, [r3, #0]
 800b594:	e016      	b.n	800b5c4 <xQueueGiveFromISR+0xd2>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 800b596:	f000 ff89 	bl	800c4ac <uxTaskGetNumberOfTasks>
 800b59a:	60b8      	str	r0, [r7, #8]
 800b59c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5a0:	68ba      	ldr	r2, [r7, #8]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d90e      	bls.n	800b5c4 <xQueueGiveFromISR+0xd2>
 800b5a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5ac:	d103      	bne.n	800b5b6 <xQueueGiveFromISR+0xc4>
 800b5ae:	f002 f9eb 	bl	800d988 <ulSetInterruptMask>
 800b5b2:	bf00      	nop
 800b5b4:	e7fd      	b.n	800b5b2 <xQueueGiveFromISR+0xc0>
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	b25a      	sxtb	r2, r3
 800b5be:	69bb      	ldr	r3, [r7, #24]
 800b5c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	61fb      	str	r3, [r7, #28]
 800b5c8:	e001      	b.n	800b5ce <xQueueGiveFromISR+0xdc>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	61fb      	str	r3, [r7, #28]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b5ce:	6978      	ldr	r0, [r7, #20]
 800b5d0:	f002 f9e7 	bl	800d9a2 <vClearInterruptMask>

    return xReturn;
 800b5d4:	69fb      	ldr	r3, [r7, #28]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3720      	adds	r7, #32
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b08a      	sub	sp, #40	@ 0x28
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d103      	bne.n	800b600 <xQueueReceive+0x22>
 800b5f8:	f002 f9c6 	bl	800d988 <ulSetInterruptMask>
 800b5fc:	bf00      	nop
 800b5fe:	e7fd      	b.n	800b5fc <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d103      	bne.n	800b60e <xQueueReceive+0x30>
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d101      	bne.n	800b612 <xQueueReceive+0x34>
 800b60e:	2301      	movs	r3, #1
 800b610:	e000      	b.n	800b614 <xQueueReceive+0x36>
 800b612:	2300      	movs	r3, #0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d103      	bne.n	800b620 <xQueueReceive+0x42>
 800b618:	f002 f9b6 	bl	800d988 <ulSetInterruptMask>
 800b61c:	bf00      	nop
 800b61e:	e7fd      	b.n	800b61c <xQueueReceive+0x3e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b620:	f001 fb2a 	bl	800cc78 <xTaskGetSchedulerState>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <xQueueReceive+0x52>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <xQueueReceive+0x56>
 800b630:	2301      	movs	r3, #1
 800b632:	e000      	b.n	800b636 <xQueueReceive+0x58>
 800b634:	2300      	movs	r3, #0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d103      	bne.n	800b642 <xQueueReceive+0x64>
 800b63a:	f002 f9a5 	bl	800d988 <ulSetInterruptMask>
 800b63e:	bf00      	nop
 800b640:	e7fd      	b.n	800b63e <xQueueReceive+0x60>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800b642:	f002 f865 	bl	800d710 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b64a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d019      	beq.n	800b686 <xQueueReceive+0xa8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b652:	68b9      	ldr	r1, [r7, #8]
 800b654:	6a38      	ldr	r0, [r7, #32]
 800b656:	f000 fa82 	bl	800bb5e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	1e5a      	subs	r2, r3, #1
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	691b      	ldr	r3, [r3, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d009      	beq.n	800b67e <xQueueReceive+0xa0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b66a:	6a3b      	ldr	r3, [r7, #32]
 800b66c:	3310      	adds	r3, #16
 800b66e:	4618      	mov	r0, r3
 800b670:	f001 f8f0 	bl	800c854 <xTaskRemoveFromEventList>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <xQueueReceive+0xa0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b67a:	f002 f837 	bl	800d6ec <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800b67e:	f002 f859 	bl	800d734 <vPortExitCritical>
                return pdPASS;
 800b682:	2301      	movs	r3, #1
 800b684:	e063      	b.n	800b74e <xQueueReceive+0x170>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d103      	bne.n	800b694 <xQueueReceive+0xb6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800b68c:	f002 f852 	bl	800d734 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800b690:	2300      	movs	r3, #0
 800b692:	e05c      	b.n	800b74e <xQueueReceive+0x170>
                }
                else if( xEntryTimeSet == pdFALSE )
 800b694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b696:	2b00      	cmp	r3, #0
 800b698:	d106      	bne.n	800b6a8 <xQueueReceive+0xca>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800b69a:	f107 0314 	add.w	r3, r7, #20
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f001 f9a6 	bl	800c9f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800b6a8:	f002 f844 	bl	800d734 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800b6ac:	f000 fdf2 	bl	800c294 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800b6b0:	f002 f82e 	bl	800d710 <vPortEnterCritical>
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b6ba:	b25b      	sxtb	r3, r3
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c0:	d103      	bne.n	800b6ca <xQueueReceive+0xec>
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6d0:	b25b      	sxtb	r3, r3
 800b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d6:	d103      	bne.n	800b6e0 <xQueueReceive+0x102>
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6e0:	f002 f828 	bl	800d734 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6e4:	1d3a      	adds	r2, r7, #4
 800b6e6:	f107 0314 	add.w	r3, r7, #20
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f001 f995 	bl	800ca1c <xTaskCheckForTimeOut>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d11d      	bne.n	800b734 <xQueueReceive+0x156>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b6f8:	6a38      	ldr	r0, [r7, #32]
 800b6fa:	f000 faa8 	bl	800bc4e <prvIsQueueEmpty>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d011      	beq.n	800b728 <xQueueReceive+0x14a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	3324      	adds	r3, #36	@ 0x24
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 f845 	bl	800c79c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800b712:	6a38      	ldr	r0, [r7, #32]
 800b714:	f000 fa49 	bl	800bbaa <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800b718:	f000 fdca 	bl	800c2b0 <xTaskResumeAll>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d18f      	bne.n	800b642 <xQueueReceive+0x64>
                {
                    portYIELD_WITHIN_API();
 800b722:	f001 ffe3 	bl	800d6ec <vPortYield>
 800b726:	e78c      	b.n	800b642 <xQueueReceive+0x64>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800b728:	6a38      	ldr	r0, [r7, #32]
 800b72a:	f000 fa3e 	bl	800bbaa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800b72e:	f000 fdbf 	bl	800c2b0 <xTaskResumeAll>
 800b732:	e786      	b.n	800b642 <xQueueReceive+0x64>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800b734:	6a38      	ldr	r0, [r7, #32]
 800b736:	f000 fa38 	bl	800bbaa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800b73a:	f000 fdb9 	bl	800c2b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b73e:	6a38      	ldr	r0, [r7, #32]
 800b740:	f000 fa85 	bl	800bc4e <prvIsQueueEmpty>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	f43f af7b 	beq.w	800b642 <xQueueReceive+0x64>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800b74c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3728      	adds	r7, #40	@ 0x28
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b08a      	sub	sp, #40	@ 0x28
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800b760:	2300      	movs	r3, #0
 800b762:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800b768:	2300      	movs	r3, #0
 800b76a:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d103      	bne.n	800b77a <xQueueSemaphoreTake+0x24>
 800b772:	f002 f909 	bl	800d988 <ulSetInterruptMask>
 800b776:	bf00      	nop
 800b778:	e7fd      	b.n	800b776 <xQueueSemaphoreTake+0x20>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <xQueueSemaphoreTake+0x34>
 800b782:	f002 f901 	bl	800d988 <ulSetInterruptMask>
 800b786:	bf00      	nop
 800b788:	e7fd      	b.n	800b786 <xQueueSemaphoreTake+0x30>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b78a:	f001 fa75 	bl	800cc78 <xTaskGetSchedulerState>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d102      	bne.n	800b79a <xQueueSemaphoreTake+0x44>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d101      	bne.n	800b79e <xQueueSemaphoreTake+0x48>
 800b79a:	2301      	movs	r3, #1
 800b79c:	e000      	b.n	800b7a0 <xQueueSemaphoreTake+0x4a>
 800b79e:	2300      	movs	r3, #0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d103      	bne.n	800b7ac <xQueueSemaphoreTake+0x56>
 800b7a4:	f002 f8f0 	bl	800d988 <ulSetInterruptMask>
 800b7a8:	bf00      	nop
 800b7aa:	e7fd      	b.n	800b7a8 <xQueueSemaphoreTake+0x52>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800b7ac:	f001 ffb0 	bl	800d710 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7b4:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d01e      	beq.n	800b7fa <xQueueSemaphoreTake+0xa4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	1e5a      	subs	r2, r3, #1
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d104      	bne.n	800b7d6 <xQueueSemaphoreTake+0x80>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b7cc:	f001 fc26 	bl	800d01c <pvTaskIncrementMutexHeldCount>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7d6:	69fb      	ldr	r3, [r7, #28]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d009      	beq.n	800b7f2 <xQueueSemaphoreTake+0x9c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	3310      	adds	r3, #16
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f001 f836 	bl	800c854 <xTaskRemoveFromEventList>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d001      	beq.n	800b7f2 <xQueueSemaphoreTake+0x9c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800b7ee:	f001 ff7d 	bl	800d6ec <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800b7f2:	f001 ff9f 	bl	800d734 <vPortExitCritical>
                return pdPASS;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e083      	b.n	800b902 <xQueueSemaphoreTake+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d103      	bne.n	800b808 <xQueueSemaphoreTake+0xb2>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800b800:	f001 ff98 	bl	800d734 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800b804:	2300      	movs	r3, #0
 800b806:	e07c      	b.n	800b902 <xQueueSemaphoreTake+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800b808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d106      	bne.n	800b81c <xQueueSemaphoreTake+0xc6>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800b80e:	f107 030c 	add.w	r3, r7, #12
 800b812:	4618      	mov	r0, r3
 800b814:	f001 f8ec 	bl	800c9f0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800b818:	2301      	movs	r3, #1
 800b81a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800b81c:	f001 ff8a 	bl	800d734 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800b820:	f000 fd38 	bl	800c294 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800b824:	f001 ff74 	bl	800d710 <vPortEnterCritical>
 800b828:	69fb      	ldr	r3, [r7, #28]
 800b82a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b82e:	b25b      	sxtb	r3, r3
 800b830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b834:	d103      	bne.n	800b83e <xQueueSemaphoreTake+0xe8>
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b844:	b25b      	sxtb	r3, r3
 800b846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b84a:	d103      	bne.n	800b854 <xQueueSemaphoreTake+0xfe>
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b854:	f001 ff6e 	bl	800d734 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b858:	463a      	mov	r2, r7
 800b85a:	f107 030c 	add.w	r3, r7, #12
 800b85e:	4611      	mov	r1, r2
 800b860:	4618      	mov	r0, r3
 800b862:	f001 f8db 	bl	800ca1c <xTaskCheckForTimeOut>
 800b866:	4603      	mov	r3, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d12c      	bne.n	800b8c6 <xQueueSemaphoreTake+0x170>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b86c:	69f8      	ldr	r0, [r7, #28]
 800b86e:	f000 f9ee 	bl	800bc4e <prvIsQueueEmpty>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d020      	beq.n	800b8ba <xQueueSemaphoreTake+0x164>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d109      	bne.n	800b894 <xQueueSemaphoreTake+0x13e>
                    {
                        taskENTER_CRITICAL();
 800b880:	f001 ff46 	bl	800d710 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	689b      	ldr	r3, [r3, #8]
 800b888:	4618      	mov	r0, r3
 800b88a:	f001 fa13 	bl	800ccb4 <xTaskPriorityInherit>
 800b88e:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 800b890:	f001 ff50 	bl	800d734 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	3324      	adds	r3, #36	@ 0x24
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	4611      	mov	r1, r2
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 ff7d 	bl	800c79c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800b8a2:	69f8      	ldr	r0, [r7, #28]
 800b8a4:	f000 f981 	bl	800bbaa <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800b8a8:	f000 fd02 	bl	800c2b0 <xTaskResumeAll>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f47f af7c 	bne.w	800b7ac <xQueueSemaphoreTake+0x56>
                {
                    portYIELD_WITHIN_API();
 800b8b4:	f001 ff1a 	bl	800d6ec <vPortYield>
 800b8b8:	e778      	b.n	800b7ac <xQueueSemaphoreTake+0x56>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800b8ba:	69f8      	ldr	r0, [r7, #28]
 800b8bc:	f000 f975 	bl	800bbaa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800b8c0:	f000 fcf6 	bl	800c2b0 <xTaskResumeAll>
 800b8c4:	e772      	b.n	800b7ac <xQueueSemaphoreTake+0x56>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800b8c6:	69f8      	ldr	r0, [r7, #28]
 800b8c8:	f000 f96f 	bl	800bbaa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800b8cc:	f000 fcf0 	bl	800c2b0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8d0:	69f8      	ldr	r0, [r7, #28]
 800b8d2:	f000 f9bc 	bl	800bc4e <prvIsQueueEmpty>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f43f af67 	beq.w	800b7ac <xQueueSemaphoreTake+0x56>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800b8de:	6a3b      	ldr	r3, [r7, #32]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00d      	beq.n	800b900 <xQueueSemaphoreTake+0x1aa>
                    {
                        taskENTER_CRITICAL();
 800b8e4:	f001 ff14 	bl	800d710 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b8e8:	69f8      	ldr	r0, [r7, #28]
 800b8ea:	f000 f8b6 	bl	800ba5a <prvGetDisinheritPriorityAfterTimeout>
 800b8ee:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	6979      	ldr	r1, [r7, #20]
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f001 faf4 	bl	800cee4 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 800b8fc:	f001 ff1a 	bl	800d734 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800b900:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800b902:	4618      	mov	r0, r3
 800b904:	3728      	adds	r7, #40	@ 0x28
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b08a      	sub	sp, #40	@ 0x28
 800b90e:	af00      	add	r7, sp, #0
 800b910:	60f8      	str	r0, [r7, #12]
 800b912:	60b9      	str	r1, [r7, #8]
 800b914:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d103      	bne.n	800b928 <xQueueReceiveFromISR+0x1e>
 800b920:	f002 f832 	bl	800d988 <ulSetInterruptMask>
 800b924:	bf00      	nop
 800b926:	e7fd      	b.n	800b924 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d103      	bne.n	800b936 <xQueueReceiveFromISR+0x2c>
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <xQueueReceiveFromISR+0x30>
 800b936:	2301      	movs	r3, #1
 800b938:	e000      	b.n	800b93c <xQueueReceiveFromISR+0x32>
 800b93a:	2300      	movs	r3, #0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d103      	bne.n	800b948 <xQueueReceiveFromISR+0x3e>
 800b940:	f002 f822 	bl	800d988 <ulSetInterruptMask>
 800b944:	bf00      	nop
 800b946:	e7fd      	b.n	800b944 <xQueueReceiveFromISR+0x3a>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b948:	f002 f81e 	bl	800d988 <ulSetInterruptMask>
 800b94c:	61f8      	str	r0, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b94e:	6a3b      	ldr	r3, [r7, #32]
 800b950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b952:	61bb      	str	r3, [r7, #24]

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d03d      	beq.n	800b9d6 <xQueueReceiveFromISR+0xcc>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b960:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b962:	68b9      	ldr	r1, [r7, #8]
 800b964:	6a38      	ldr	r0, [r7, #32]
 800b966:	f000 f8fa 	bl	800bb5e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	1e5a      	subs	r2, r3, #1
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800b972:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b97a:	d112      	bne.n	800b9a2 <xQueueReceiveFromISR+0x98>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b97c:	6a3b      	ldr	r3, [r7, #32]
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d025      	beq.n	800b9d0 <xQueueReceiveFromISR+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	3310      	adds	r3, #16
 800b988:	4618      	mov	r0, r3
 800b98a:	f000 ff63 	bl	800c854 <xTaskRemoveFromEventList>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d01d      	beq.n	800b9d0 <xQueueReceiveFromISR+0xc6>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d01a      	beq.n	800b9d0 <xQueueReceiveFromISR+0xc6>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	601a      	str	r2, [r3, #0]
 800b9a0:	e016      	b.n	800b9d0 <xQueueReceiveFromISR+0xc6>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800b9a2:	f000 fd83 	bl	800c4ac <uxTaskGetNumberOfTasks>
 800b9a6:	6138      	str	r0, [r7, #16]
 800b9a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	d90e      	bls.n	800b9d0 <xQueueReceiveFromISR+0xc6>
 800b9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b9b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b9b8:	d103      	bne.n	800b9c2 <xQueueReceiveFromISR+0xb8>
 800b9ba:	f001 ffe5 	bl	800d988 <ulSetInterruptMask>
 800b9be:	bf00      	nop
 800b9c0:	e7fd      	b.n	800b9be <xQueueReceiveFromISR+0xb4>
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	b25a      	sxtb	r2, r3
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9d4:	e001      	b.n	800b9da <xQueueReceiveFromISR+0xd0>
        }
        else
        {
            xReturn = pdFAIL;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	627b      	str	r3, [r7, #36]	@ 0x24
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b9da:	69f8      	ldr	r0, [r7, #28]
 800b9dc:	f001 ffe1 	bl	800d9a2 <vClearInterruptMask>

    return xReturn;
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3728      	adds	r7, #40	@ 0x28
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <uxQueueSpacesAvailable>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d103      	bne.n	800ba04 <uxQueueSpacesAvailable+0x1a>
 800b9fc:	f001 ffc4 	bl	800d988 <ulSetInterruptMask>
 800ba00:	bf00      	nop
 800ba02:	e7fd      	b.n	800ba00 <uxQueueSpacesAvailable+0x16>

    taskENTER_CRITICAL();
 800ba04:	f001 fe84 	bl	800d710 <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 800ba14:	f001 fe8e 	bl	800d734 <vPortExitCritical>

    return uxReturn;
 800ba18:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d103      	bne.n	800ba3c <vQueueDelete+0x1a>
 800ba34:	f001 ffa8 	bl	800d988 <ulSetInterruptMask>
 800ba38:	bf00      	nop
 800ba3a:	e7fd      	b.n	800ba38 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f000 f97b 	bl	800bd38 <vQueueUnregisterQueue>
    }
    #elif ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
    {
        /* The queue could have been allocated statically or dynamically, so
         * check before attempting to free the memory. */
        if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d102      	bne.n	800ba52 <vQueueDelete+0x30>
        {
            vPortFree( pxQueue );
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f002 f8a7 	bl	800dba0 <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ba52:	bf00      	nop
 800ba54:	3710      	adds	r7, #16
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}

0800ba5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800ba5a:	b480      	push	{r7}
 800ba5c:	b085      	sub	sp, #20
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d006      	beq.n	800ba78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	e001      	b.n	800ba7c <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
    }
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr

0800ba8a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b086      	sub	sp, #24
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800ba96:	2300      	movs	r3, #0
 800ba98:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10d      	bne.n	800bac4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d14d      	bne.n	800bb4c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f001 f98d 	bl	800cdd4 <xTaskPriorityDisinherit>
 800baba:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	609a      	str	r2, [r3, #8]
 800bac2:	e043      	b.n	800bb4c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d119      	bne.n	800bafe <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6858      	ldr	r0, [r3, #4]
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bad2:	461a      	mov	r2, r3
 800bad4:	68b9      	ldr	r1, [r7, #8]
 800bad6:	f021 f92e 	bl	802cd36 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae2:	441a      	add	r2, r3
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	685a      	ldr	r2, [r3, #4]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d32b      	bcc.n	800bb4c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	605a      	str	r2, [r3, #4]
 800bafc:	e026      	b.n	800bb4c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	68d8      	ldr	r0, [r3, #12]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb06:	461a      	mov	r2, r3
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	f021 f914 	bl	802cd36 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb16:	425b      	negs	r3, r3
 800bb18:	441a      	add	r2, r3
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	68da      	ldr	r2, [r3, #12]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d207      	bcs.n	800bb3a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	689a      	ldr	r2, [r3, #8]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb32:	425b      	negs	r3, r3
 800bb34:	441a      	add	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d105      	bne.n	800bb4c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	1c5a      	adds	r2, r3, #1
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800bb54:	697b      	ldr	r3, [r7, #20]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d018      	beq.n	800bba2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb78:	441a      	add	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68da      	ldr	r2, [r3, #12]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d303      	bcc.n	800bb92 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68d9      	ldr	r1, [r3, #12]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	6838      	ldr	r0, [r7, #0]
 800bb9e:	f021 f8ca 	bl	802cd36 <memcpy>
    }
}
 800bba2:	bf00      	nop
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b084      	sub	sp, #16
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800bbb2:	f001 fdad 	bl	800d710 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bbbc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbbe:	e011      	b.n	800bbe4 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d012      	beq.n	800bbee <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	3324      	adds	r3, #36	@ 0x24
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 fe41 	bl	800c854 <xTaskRemoveFromEventList>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800bbd8:	f000 ff78 	bl	800cacc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800bbdc:	7bfb      	ldrb	r3, [r7, #15]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	dce9      	bgt.n	800bbc0 <prvUnlockQueue+0x16>
 800bbec:	e000      	b.n	800bbf0 <prvUnlockQueue+0x46>
                    break;
 800bbee:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	22ff      	movs	r2, #255	@ 0xff
 800bbf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800bbf8:	f001 fd9c 	bl	800d734 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800bbfc:	f001 fd88 	bl	800d710 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc06:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc08:	e011      	b.n	800bc2e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d012      	beq.n	800bc38 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	3310      	adds	r3, #16
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 fe1c 	bl	800c854 <xTaskRemoveFromEventList>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800bc22:	f000 ff53 	bl	800cacc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dce9      	bgt.n	800bc0a <prvUnlockQueue+0x60>
 800bc36:	e000      	b.n	800bc3a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800bc38:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	22ff      	movs	r2, #255	@ 0xff
 800bc3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800bc42:	f001 fd77 	bl	800d734 <vPortExitCritical>
}
 800bc46:	bf00      	nop
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800bc56:	f001 fd5b 	bl	800d710 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d102      	bne.n	800bc68 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800bc62:	2301      	movs	r3, #1
 800bc64:	60fb      	str	r3, [r7, #12]
 800bc66:	e001      	b.n	800bc6c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800bc6c:	f001 fd62 	bl	800d734 <vPortExitCritical>

    return xReturn;
 800bc70:	68fb      	ldr	r3, [r7, #12]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800bc82:	f001 fd45 	bl	800d710 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d102      	bne.n	800bc98 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800bc92:	2301      	movs	r3, #1
 800bc94:	60fb      	str	r3, [r7, #12]
 800bc96:	e001      	b.n	800bc9c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800bc9c:	f001 fd4a 	bl	800d734 <vPortExitCritical>

    return xReturn;
 800bca0:	68fb      	ldr	r3, [r7, #12]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d103      	bne.n	800bcc8 <vQueueAddToRegistry+0x1c>
 800bcc0:	f001 fe62 	bl	800d988 <ulSetInterruptMask>
 800bcc4:	bf00      	nop
 800bcc6:	e7fd      	b.n	800bcc4 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d024      	beq.n	800bd18 <vQueueAddToRegistry+0x6c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	e01e      	b.n	800bd12 <vQueueAddToRegistry+0x66>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800bcd4:	4a17      	ldr	r2, [pc, #92]	@ (800bd34 <vQueueAddToRegistry+0x88>)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	00db      	lsls	r3, r3, #3
 800bcda:	4413      	add	r3, r2
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d105      	bne.n	800bcf0 <vQueueAddToRegistry+0x44>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	00db      	lsls	r3, r3, #3
 800bce8:	4a12      	ldr	r2, [pc, #72]	@ (800bd34 <vQueueAddToRegistry+0x88>)
 800bcea:	4413      	add	r3, r2
 800bcec:	60bb      	str	r3, [r7, #8]
                    break;
 800bcee:	e013      	b.n	800bd18 <vQueueAddToRegistry+0x6c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10a      	bne.n	800bd0c <vQueueAddToRegistry+0x60>
 800bcf6:	4a0f      	ldr	r2, [pc, #60]	@ (800bd34 <vQueueAddToRegistry+0x88>)
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d104      	bne.n	800bd0c <vQueueAddToRegistry+0x60>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	4a0b      	ldr	r2, [pc, #44]	@ (800bd34 <vQueueAddToRegistry+0x88>)
 800bd08:	4413      	add	r3, r2
 800bd0a:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	60fb      	str	r3, [r7, #12]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b07      	cmp	r3, #7
 800bd16:	d9dd      	bls.n	800bcd4 <vQueueAddToRegistry+0x28>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d005      	beq.n	800bd2a <vQueueAddToRegistry+0x7e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800bd2a:	bf00      	nop
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	20000dac 	.word	0x20000dac

0800bd38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d103      	bne.n	800bd4e <vQueueUnregisterQueue+0x16>
 800bd46:	f001 fe1f 	bl	800d988 <ulSetInterruptMask>
 800bd4a:	bf00      	nop
 800bd4c:	e7fd      	b.n	800bd4a <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	e016      	b.n	800bd82 <vQueueUnregisterQueue+0x4a>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bd54:	4a0f      	ldr	r2, [pc, #60]	@ (800bd94 <vQueueUnregisterQueue+0x5c>)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	4413      	add	r3, r2
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d10b      	bne.n	800bd7c <vQueueUnregisterQueue+0x44>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800bd64:	4a0b      	ldr	r2, [pc, #44]	@ (800bd94 <vQueueUnregisterQueue+0x5c>)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2100      	movs	r1, #0
 800bd6a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bd6e:	4a09      	ldr	r2, [pc, #36]	@ (800bd94 <vQueueUnregisterQueue+0x5c>)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	00db      	lsls	r3, r3, #3
 800bd74:	4413      	add	r3, r2
 800bd76:	2200      	movs	r2, #0
 800bd78:	605a      	str	r2, [r3, #4]
                break;
 800bd7a:	e006      	b.n	800bd8a <vQueueUnregisterQueue+0x52>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2b07      	cmp	r3, #7
 800bd86:	d9e5      	bls.n	800bd54 <vQueueUnregisterQueue+0x1c>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bd88:	bf00      	nop
 800bd8a:	bf00      	nop
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	20000dac 	.word	0x20000dac

0800bd98 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800bda8:	f001 fcb2 	bl	800d710 <vPortEnterCritical>
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bdb2:	b25b      	sxtb	r3, r3
 800bdb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdb8:	d103      	bne.n	800bdc2 <vQueueWaitForMessageRestricted+0x2a>
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdc8:	b25b      	sxtb	r3, r3
 800bdca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdce:	d103      	bne.n	800bdd8 <vQueueWaitForMessageRestricted+0x40>
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bdd8:	f001 fcac 	bl	800d734 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d106      	bne.n	800bdf2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	3324      	adds	r3, #36	@ 0x24
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	68b9      	ldr	r1, [r7, #8]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fcf3 	bl	800c7d8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800bdf2:	6978      	ldr	r0, [r7, #20]
 800bdf4:	f7ff fed9 	bl	800bbaa <prvUnlockQueue>
    }
 800bdf8:	bf00      	nop
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800be00:	b580      	push	{r7, lr}
 800be02:	b08c      	sub	sp, #48	@ 0x30
 800be04:	af04      	add	r7, sp, #16
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	607a      	str	r2, [r7, #4]
 800be0c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800be0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be10:	2b00      	cmp	r3, #0
 800be12:	d103      	bne.n	800be1c <xTaskCreateStatic+0x1c>
 800be14:	f001 fdb8 	bl	800d988 <ulSetInterruptMask>
 800be18:	bf00      	nop
 800be1a:	e7fd      	b.n	800be18 <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d103      	bne.n	800be2a <xTaskCreateStatic+0x2a>
 800be22:	f001 fdb1 	bl	800d988 <ulSetInterruptMask>
 800be26:	bf00      	nop
 800be28:	e7fd      	b.n	800be26 <xTaskCreateStatic+0x26>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 800be2a:	23a8      	movs	r3, #168	@ 0xa8
 800be2c:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2ba8      	cmp	r3, #168	@ 0xa8
 800be32:	d003      	beq.n	800be3c <xTaskCreateStatic+0x3c>
 800be34:	f001 fda8 	bl	800d988 <ulSetInterruptMask>
 800be38:	bf00      	nop
 800be3a:	e7fd      	b.n	800be38 <xTaskCreateStatic+0x38>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be3c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be40:	2b00      	cmp	r3, #0
 800be42:	d023      	beq.n	800be8c <xTaskCreateStatic+0x8c>
 800be44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be46:	2b00      	cmp	r3, #0
 800be48:	d020      	beq.n	800be8c <xTaskCreateStatic+0x8c>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be4c:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800be4e:	22a8      	movs	r2, #168	@ 0xa8
 800be50:	2100      	movs	r1, #0
 800be52:	69f8      	ldr	r0, [r7, #28]
 800be54:	f020 fe49 	bl	802caea <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be5c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	2202      	movs	r2, #2
 800be62:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be66:	2300      	movs	r3, #0
 800be68:	9303      	str	r3, [sp, #12]
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	9302      	str	r3, [sp, #8]
 800be6e:	f107 0318 	add.w	r3, r7, #24
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	68b9      	ldr	r1, [r7, #8]
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f000 f856 	bl	800bf30 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800be84:	69f8      	ldr	r0, [r7, #28]
 800be86:	f000 f8eb 	bl	800c060 <prvAddNewTaskToReadyList>
 800be8a:	e001      	b.n	800be90 <xTaskCreateStatic+0x90>
        }
        else
        {
            xReturn = NULL;
 800be8c:	2300      	movs	r3, #0
 800be8e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800be90:	69bb      	ldr	r3, [r7, #24]
    }
 800be92:	4618      	mov	r0, r3
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b08c      	sub	sp, #48	@ 0x30
 800be9e:	af04      	add	r7, sp, #16
 800bea0:	60f8      	str	r0, [r7, #12]
 800bea2:	60b9      	str	r1, [r7, #8]
 800bea4:	603b      	str	r3, [r7, #0]
 800bea6:	4613      	mov	r3, r2
 800bea8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800beaa:	88fb      	ldrh	r3, [r7, #6]
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4618      	mov	r0, r3
 800beb0:	f001 fdca 	bl	800da48 <pvPortMalloc>
 800beb4:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d013      	beq.n	800bee4 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bebc:	20a8      	movs	r0, #168	@ 0xa8
 800bebe:	f001 fdc3 	bl	800da48 <pvPortMalloc>
 800bec2:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d008      	beq.n	800bedc <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800beca:	22a8      	movs	r2, #168	@ 0xa8
 800becc:	2100      	movs	r1, #0
 800bece:	69f8      	ldr	r0, [r7, #28]
 800bed0:	f020 fe0b 	bl	802caea <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	631a      	str	r2, [r3, #48]	@ 0x30
 800beda:	e005      	b.n	800bee8 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800bedc:	6978      	ldr	r0, [r7, #20]
 800bede:	f001 fe5f 	bl	800dba0 <vPortFree>
 800bee2:	e001      	b.n	800bee8 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800bee4:	2300      	movs	r3, #0
 800bee6:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d017      	beq.n	800bf1e <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bef6:	88fa      	ldrh	r2, [r7, #6]
 800bef8:	2300      	movs	r3, #0
 800befa:	9303      	str	r3, [sp, #12]
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	9302      	str	r3, [sp, #8]
 800bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf02:	9301      	str	r3, [sp, #4]
 800bf04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf06:	9300      	str	r3, [sp, #0]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	68b9      	ldr	r1, [r7, #8]
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f000 f80f 	bl	800bf30 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800bf12:	69f8      	ldr	r0, [r7, #28]
 800bf14:	f000 f8a4 	bl	800c060 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	61bb      	str	r3, [r7, #24]
 800bf1c:	e002      	b.n	800bf24 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf1e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf22:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800bf24:	69bb      	ldr	r3, [r7, #24]
    }
 800bf26:	4618      	mov	r0, r3
 800bf28:	3720      	adds	r7, #32
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
	...

0800bf30 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	461a      	mov	r2, r3
 800bf48:	21a5      	movs	r1, #165	@ 0xa5
 800bf4a:	f020 fdce 	bl	802caea <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf58:	3b01      	subs	r3, #1
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	4413      	add	r3, r2
 800bf5e:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	f023 0307 	bic.w	r3, r3, #7
 800bf66:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	f003 0307 	and.w	r3, r3, #7
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d003      	beq.n	800bf7a <prvInitialiseNewTask+0x4a>
 800bf72:	f001 fd09 	bl	800d988 <ulSetInterruptMask>
 800bf76:	bf00      	nop
 800bf78:	e7fd      	b.n	800bf76 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d01e      	beq.n	800bfbe <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf80:	2300      	movs	r3, #0
 800bf82:	617b      	str	r3, [r7, #20]
 800bf84:	e012      	b.n	800bfac <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf86:	68ba      	ldr	r2, [r7, #8]
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	4413      	add	r3, r2
 800bf8c:	7819      	ldrb	r1, [r3, #0]
 800bf8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	4413      	add	r3, r2
 800bf94:	3334      	adds	r3, #52	@ 0x34
 800bf96:	460a      	mov	r2, r1
 800bf98:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800bf9a:	68ba      	ldr	r2, [r7, #8]
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2b0f      	cmp	r3, #15
 800bfb0:	d9e9      	bls.n	800bf86 <prvInitialiseNewTask+0x56>
 800bfb2:	e000      	b.n	800bfb6 <prvInitialiseNewTask+0x86>
            {
                break;
 800bfb4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	2b37      	cmp	r3, #55	@ 0x37
 800bfc2:	d903      	bls.n	800bfcc <prvInitialiseNewTask+0x9c>
 800bfc4:	f001 fce0 	bl	800d988 <ulSetInterruptMask>
 800bfc8:	bf00      	nop
 800bfca:	e7fd      	b.n	800bfc8 <prvInitialiseNewTask+0x98>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	2b37      	cmp	r3, #55	@ 0x37
 800bfd0:	d901      	bls.n	800bfd6 <prvInitialiseNewTask+0xa6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfd2:	2337      	movs	r3, #55	@ 0x37
 800bfd4:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800bfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd8:	6a3a      	ldr	r2, [r7, #32]
 800bfda:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800bfdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfde:	6a3a      	ldr	r2, [r7, #32]
 800bfe0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f7fe ff40 	bl	800ae6c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bfec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfee:	3318      	adds	r3, #24
 800bff0:	4618      	mov	r0, r3
 800bff2:	f7fe ff3b 	bl	800ae6c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bffa:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c00a:	625a      	str	r2, [r3, #36]	@ 0x24
    #endif

    #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
    {
        /* Allocate and initialize memory for the task's TLS Block. */
        configINIT_TLS_BLOCK( pxNewTCB->xTLSBlock );
 800c00c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c00e:	3354      	adds	r3, #84	@ 0x54
 800c010:	224c      	movs	r2, #76	@ 0x4c
 800c012:	2100      	movs	r1, #0
 800c014:	4618      	mov	r0, r3
 800c016:	f020 fd68 	bl	802caea <memset>
 800c01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c01c:	4a0d      	ldr	r2, [pc, #52]	@ (800c054 <prvInitialiseNewTask+0x124>)
 800c01e:	659a      	str	r2, [r3, #88]	@ 0x58
 800c020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c022:	4a0d      	ldr	r2, [pc, #52]	@ (800c058 <prvInitialiseNewTask+0x128>)
 800c024:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c028:	4a0c      	ldr	r2, [pc, #48]	@ (800c05c <prvInitialiseNewTask+0x12c>)
 800c02a:	661a      	str	r2, [r3, #96]	@ 0x60
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	6938      	ldr	r0, [r7, #16]
 800c036:	f001 fbc9 	bl	800d7cc <pxPortInitialiseStack>
 800c03a:	4602      	mov	r2, r0
 800c03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800c040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <prvInitialiseNewTask+0x11c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c04a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c04c:	bf00      	nop
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	20012b68 	.word	0x20012b68
 800c058:	20012bd0 	.word	0x20012bd0
 800c05c:	20012c38 	.word	0x20012c38

0800c060 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800c068:	f001 fb52 	bl	800d710 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800c06c:	4b3e      	ldr	r3, [pc, #248]	@ (800c168 <prvAddNewTaskToReadyList+0x108>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	3301      	adds	r3, #1
 800c072:	4a3d      	ldr	r2, [pc, #244]	@ (800c168 <prvAddNewTaskToReadyList+0x108>)
 800c074:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800c076:	4b3d      	ldr	r3, [pc, #244]	@ (800c16c <prvAddNewTaskToReadyList+0x10c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d109      	bne.n	800c092 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800c07e:	4a3b      	ldr	r2, [pc, #236]	@ (800c16c <prvAddNewTaskToReadyList+0x10c>)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c084:	4b38      	ldr	r3, [pc, #224]	@ (800c168 <prvAddNewTaskToReadyList+0x108>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d110      	bne.n	800c0ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800c08c:	f000 fd3a 	bl	800cb04 <prvInitialiseTaskLists>
 800c090:	e00d      	b.n	800c0ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800c092:	4b37      	ldr	r3, [pc, #220]	@ (800c170 <prvAddNewTaskToReadyList+0x110>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d109      	bne.n	800c0ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c09a:	4b34      	ldr	r3, [pc, #208]	@ (800c16c <prvAddNewTaskToReadyList+0x10c>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d802      	bhi.n	800c0ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800c0a8:	4a30      	ldr	r2, [pc, #192]	@ (800c16c <prvAddNewTaskToReadyList+0x10c>)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800c0ae:	4b31      	ldr	r3, [pc, #196]	@ (800c174 <prvAddNewTaskToReadyList+0x114>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	4a2f      	ldr	r2, [pc, #188]	@ (800c174 <prvAddNewTaskToReadyList+0x114>)
 800c0b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0b8:	4b2e      	ldr	r3, [pc, #184]	@ (800c174 <prvAddNewTaskToReadyList+0x114>)
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0c4:	4b2c      	ldr	r3, [pc, #176]	@ (800c178 <prvAddNewTaskToReadyList+0x118>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d903      	bls.n	800c0d4 <prvAddNewTaskToReadyList+0x74>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0d0:	4a29      	ldr	r2, [pc, #164]	@ (800c178 <prvAddNewTaskToReadyList+0x118>)
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0d8:	4928      	ldr	r1, [pc, #160]	@ (800c17c <prvAddNewTaskToReadyList+0x11c>)
 800c0da:	4613      	mov	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	440b      	add	r3, r1
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	60fb      	str	r3, [r7, #12]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	68fa      	ldr	r2, [r7, #12]
 800c0ee:	609a      	str	r2, [r3, #8]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	60da      	str	r2, [r3, #12]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	3204      	adds	r2, #4
 800c100:	605a      	str	r2, [r3, #4]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	1d1a      	adds	r2, r3, #4
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	609a      	str	r2, [r3, #8]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	4a19      	ldr	r2, [pc, #100]	@ (800c17c <prvAddNewTaskToReadyList+0x11c>)
 800c118:	441a      	add	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	615a      	str	r2, [r3, #20]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c122:	4916      	ldr	r1, [pc, #88]	@ (800c17c <prvAddNewTaskToReadyList+0x11c>)
 800c124:	4613      	mov	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	4413      	add	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	440b      	add	r3, r1
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	1c59      	adds	r1, r3, #1
 800c132:	4812      	ldr	r0, [pc, #72]	@ (800c17c <prvAddNewTaskToReadyList+0x11c>)
 800c134:	4613      	mov	r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	4403      	add	r3, r0
 800c13e:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800c140:	f001 faf8 	bl	800d734 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800c144:	4b0a      	ldr	r3, [pc, #40]	@ (800c170 <prvAddNewTaskToReadyList+0x110>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d008      	beq.n	800c15e <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c14c:	4b07      	ldr	r3, [pc, #28]	@ (800c16c <prvAddNewTaskToReadyList+0x10c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c156:	429a      	cmp	r2, r3
 800c158:	d201      	bcs.n	800c15e <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800c15a:	f001 fac7 	bl	800d6ec <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c15e:	bf00      	nop
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	200012c0 	.word	0x200012c0
 800c16c:	20000dec 	.word	0x20000dec
 800c170:	200012cc 	.word	0x200012cc
 800c174:	200012dc 	.word	0x200012dc
 800c178:	200012c8 	.word	0x200012c8
 800c17c:	20000df0 	.word	0x20000df0

0800c180 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800c188:	2300      	movs	r3, #0
 800c18a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d010      	beq.n	800c1b4 <vTaskDelay+0x34>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800c192:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c8 <vTaskDelay+0x48>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <vTaskDelay+0x22>
 800c19a:	f001 fbf5 	bl	800d988 <ulSetInterruptMask>
 800c19e:	bf00      	nop
 800c1a0:	e7fd      	b.n	800c19e <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800c1a2:	f000 f877 	bl	800c294 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 ff4b 	bl	800d044 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800c1ae:	f000 f87f 	bl	800c2b0 <xTaskResumeAll>
 800c1b2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d101      	bne.n	800c1be <vTaskDelay+0x3e>
        {
            portYIELD_WITHIN_API();
 800c1ba:	f001 fa97 	bl	800d6ec <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800c1be:	bf00      	nop
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	200012e8 	.word	0x200012e8

0800c1cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b088      	sub	sp, #32
 800c1d0:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1da:	463a      	mov	r2, r7
 800c1dc:	1d39      	adds	r1, r7, #4
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe fdee 	bl	800adc4 <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	9202      	str	r2, [sp, #8]
 800c1f0:	9301      	str	r3, [sp, #4]
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	460a      	mov	r2, r1
 800c1fa:	491d      	ldr	r1, [pc, #116]	@ (800c270 <vTaskStartScheduler+0xa4>)
 800c1fc:	481d      	ldr	r0, [pc, #116]	@ (800c274 <vTaskStartScheduler+0xa8>)
 800c1fe:	f7ff fdff 	bl	800be00 <xTaskCreateStatic>
 800c202:	4603      	mov	r3, r0
 800c204:	4a1c      	ldr	r2, [pc, #112]	@ (800c278 <vTaskStartScheduler+0xac>)
 800c206:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 800c208:	4b1b      	ldr	r3, [pc, #108]	@ (800c278 <vTaskStartScheduler+0xac>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d002      	beq.n	800c216 <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 800c210:	2301      	movs	r3, #1
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	e001      	b.n	800c21a <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800c216:	2300      	movs	r3, #0
 800c218:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d102      	bne.n	800c226 <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 800c220:	f000 ff7e 	bl	800d120 <xTimerCreateTimerTask>
 800c224:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d113      	bne.n	800c254 <vTaskStartScheduler+0x88>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 800c22c:	f001 fbac 	bl	800d988 <ulSetInterruptMask>

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Switch C-Runtime's TLS Block to point to the TLS
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800c230:	4b12      	ldr	r3, [pc, #72]	@ (800c27c <vTaskStartScheduler+0xb0>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	3354      	adds	r3, #84	@ 0x54
 800c236:	4a12      	ldr	r2, [pc, #72]	@ (800c280 <vTaskStartScheduler+0xb4>)
 800c238:	6013      	str	r3, [r2, #0]
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800c23a:	4b12      	ldr	r3, [pc, #72]	@ (800c284 <vTaskStartScheduler+0xb8>)
 800c23c:	f04f 32ff 	mov.w	r2, #4294967295
 800c240:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800c242:	4b11      	ldr	r3, [pc, #68]	@ (800c288 <vTaskStartScheduler+0xbc>)
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c248:	4b10      	ldr	r3, [pc, #64]	@ (800c28c <vTaskStartScheduler+0xc0>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800c24e:	f001 fb47 	bl	800d8e0 <xPortStartScheduler>
 800c252:	e007      	b.n	800c264 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c25a:	d103      	bne.n	800c264 <vTaskStartScheduler+0x98>
 800c25c:	f001 fb94 	bl	800d988 <ulSetInterruptMask>
 800c260:	bf00      	nop
 800c262:	e7fd      	b.n	800c260 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800c264:	4b0a      	ldr	r3, [pc, #40]	@ (800c290 <vTaskStartScheduler+0xc4>)
 800c266:	681b      	ldr	r3, [r3, #0]
}
 800c268:	bf00      	nop
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	0802d838 	.word	0x0802d838
 800c274:	0800cae5 	.word	0x0800cae5
 800c278:	200012e4 	.word	0x200012e4
 800c27c:	20000dec 	.word	0x20000dec
 800c280:	200000b4 	.word	0x200000b4
 800c284:	200012e0 	.word	0x200012e0
 800c288:	200012cc 	.word	0x200012cc
 800c28c:	200012c4 	.word	0x200012c4
 800c290:	20000018 	.word	0x20000018

0800c294 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c294:	b480      	push	{r7}
 800c296:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800c298:	4b04      	ldr	r3, [pc, #16]	@ (800c2ac <vTaskSuspendAll+0x18>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3301      	adds	r3, #1
 800c29e:	4a03      	ldr	r2, [pc, #12]	@ (800c2ac <vTaskSuspendAll+0x18>)
 800c2a0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800c2a2:	bf00      	nop
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	200012e8 	.word	0x200012e8

0800c2b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800c2be:	4b6b      	ldr	r3, [pc, #428]	@ (800c46c <xTaskResumeAll+0x1bc>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d103      	bne.n	800c2ce <xTaskResumeAll+0x1e>
 800c2c6:	f001 fb5f 	bl	800d988 <ulSetInterruptMask>
 800c2ca:	bf00      	nop
 800c2cc:	e7fd      	b.n	800c2ca <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800c2ce:	f001 fa1f 	bl	800d710 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800c2d2:	4b66      	ldr	r3, [pc, #408]	@ (800c46c <xTaskResumeAll+0x1bc>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	4a64      	ldr	r2, [pc, #400]	@ (800c46c <xTaskResumeAll+0x1bc>)
 800c2da:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2dc:	4b63      	ldr	r3, [pc, #396]	@ (800c46c <xTaskResumeAll+0x1bc>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f040 80bb 	bne.w	800c45c <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2e6:	4b62      	ldr	r3, [pc, #392]	@ (800c470 <xTaskResumeAll+0x1c0>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80b6 	beq.w	800c45c <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2f0:	e08b      	b.n	800c40a <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2f2:	4b60      	ldr	r3, [pc, #384]	@ (800c474 <xTaskResumeAll+0x1c4>)
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2fe:	60bb      	str	r3, [r7, #8]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	69db      	ldr	r3, [r3, #28]
 800c304:	697a      	ldr	r2, [r7, #20]
 800c306:	6a12      	ldr	r2, [r2, #32]
 800c308:	609a      	str	r2, [r3, #8]
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	6a1b      	ldr	r3, [r3, #32]
 800c30e:	697a      	ldr	r2, [r7, #20]
 800c310:	69d2      	ldr	r2, [r2, #28]
 800c312:	605a      	str	r2, [r3, #4]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	3318      	adds	r3, #24
 800c31c:	429a      	cmp	r2, r3
 800c31e:	d103      	bne.n	800c328 <xTaskResumeAll+0x78>
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	6a1a      	ldr	r2, [r3, #32]
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	605a      	str	r2, [r3, #4]
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	2200      	movs	r2, #0
 800c32c:	629a      	str	r2, [r3, #40]	@ 0x28
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	1e5a      	subs	r2, r3, #1
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	695b      	ldr	r3, [r3, #20]
 800c33c:	607b      	str	r3, [r7, #4]
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	689b      	ldr	r3, [r3, #8]
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	68d2      	ldr	r2, [r2, #12]
 800c346:	609a      	str	r2, [r3, #8]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	697a      	ldr	r2, [r7, #20]
 800c34e:	6892      	ldr	r2, [r2, #8]
 800c350:	605a      	str	r2, [r3, #4]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	3304      	adds	r3, #4
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d103      	bne.n	800c366 <xTaskResumeAll+0xb6>
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	68da      	ldr	r2, [r3, #12]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	605a      	str	r2, [r3, #4]
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2200      	movs	r2, #0
 800c36a:	615a      	str	r2, [r3, #20]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	1e5a      	subs	r2, r3, #1
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c37a:	4b3f      	ldr	r3, [pc, #252]	@ (800c478 <xTaskResumeAll+0x1c8>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d903      	bls.n	800c38a <xTaskResumeAll+0xda>
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c386:	4a3c      	ldr	r2, [pc, #240]	@ (800c478 <xTaskResumeAll+0x1c8>)
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c38e:	493b      	ldr	r1, [pc, #236]	@ (800c47c <xTaskResumeAll+0x1cc>)
 800c390:	4613      	mov	r3, r2
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	4413      	add	r3, r2
 800c396:	009b      	lsls	r3, r3, #2
 800c398:	440b      	add	r3, r1
 800c39a:	3304      	adds	r3, #4
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	609a      	str	r2, [r3, #8]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	689a      	ldr	r2, [r3, #8]
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	60da      	str	r2, [r3, #12]
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	3204      	adds	r2, #4
 800c3b6:	605a      	str	r2, [r3, #4]
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	1d1a      	adds	r2, r3, #4
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	609a      	str	r2, [r3, #8]
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c4:	4613      	mov	r3, r2
 800c3c6:	009b      	lsls	r3, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	4a2b      	ldr	r2, [pc, #172]	@ (800c47c <xTaskResumeAll+0x1cc>)
 800c3ce:	441a      	add	r2, r3
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	615a      	str	r2, [r3, #20]
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3d8:	4928      	ldr	r1, [pc, #160]	@ (800c47c <xTaskResumeAll+0x1cc>)
 800c3da:	4613      	mov	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4413      	add	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	440b      	add	r3, r1
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	1c59      	adds	r1, r3, #1
 800c3e8:	4824      	ldr	r0, [pc, #144]	@ (800c47c <xTaskResumeAll+0x1cc>)
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4403      	add	r3, r0
 800c3f4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3f6:	697b      	ldr	r3, [r7, #20]
 800c3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3fa:	4b21      	ldr	r3, [pc, #132]	@ (800c480 <xTaskResumeAll+0x1d0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c400:	429a      	cmp	r2, r3
 800c402:	d302      	bcc.n	800c40a <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800c404:	4b1f      	ldr	r3, [pc, #124]	@ (800c484 <xTaskResumeAll+0x1d4>)
 800c406:	2201      	movs	r2, #1
 800c408:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c40a:	4b1a      	ldr	r3, [pc, #104]	@ (800c474 <xTaskResumeAll+0x1c4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	f47f af6f 	bne.w	800c2f2 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800c41a:	f000 fc11 	bl	800cc40 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c41e:	4b1a      	ldr	r3, [pc, #104]	@ (800c488 <xTaskResumeAll+0x1d8>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d010      	beq.n	800c44c <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800c42a:	f000 f84b 	bl	800c4c4 <xTaskIncrementTick>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800c434:	4b13      	ldr	r3, [pc, #76]	@ (800c484 <xTaskResumeAll+0x1d4>)
 800c436:	2201      	movs	r2, #1
 800c438:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1f1      	bne.n	800c42a <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800c446:	4b10      	ldr	r3, [pc, #64]	@ (800c488 <xTaskResumeAll+0x1d8>)
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800c44c:	4b0d      	ldr	r3, [pc, #52]	@ (800c484 <xTaskResumeAll+0x1d4>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d003      	beq.n	800c45c <xTaskResumeAll+0x1ac>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800c454:	2301      	movs	r3, #1
 800c456:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800c458:	f001 f948 	bl	800d6ec <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800c45c:	f001 f96a 	bl	800d734 <vPortExitCritical>

    return xAlreadyYielded;
 800c460:	693b      	ldr	r3, [r7, #16]
}
 800c462:	4618      	mov	r0, r3
 800c464:	3718      	adds	r7, #24
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	200012e8 	.word	0x200012e8
 800c470:	200012c0 	.word	0x200012c0
 800c474:	20001280 	.word	0x20001280
 800c478:	200012c8 	.word	0x200012c8
 800c47c:	20000df0 	.word	0x20000df0
 800c480:	20000dec 	.word	0x20000dec
 800c484:	200012d4 	.word	0x200012d4
 800c488:	200012d0 	.word	0x200012d0

0800c48c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800c492:	4b05      	ldr	r3, [pc, #20]	@ (800c4a8 <xTaskGetTickCount+0x1c>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800c498:	687b      	ldr	r3, [r7, #4]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
 800c4a6:	bf00      	nop
 800c4a8:	200012c4 	.word	0x200012c4

0800c4ac <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800c4b0:	4b03      	ldr	r3, [pc, #12]	@ (800c4c0 <uxTaskGetNumberOfTasks+0x14>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	200012c0 	.word	0x200012c0

0800c4c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ce:	4b7a      	ldr	r3, [pc, #488]	@ (800c6b8 <xTaskIncrementTick+0x1f4>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f040 80e6 	bne.w	800c6a4 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4d8:	4b78      	ldr	r3, [pc, #480]	@ (800c6bc <xTaskIncrementTick+0x1f8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800c4e0:	4a76      	ldr	r2, [pc, #472]	@ (800c6bc <xTaskIncrementTick+0x1f8>)
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d119      	bne.n	800c520 <xTaskIncrementTick+0x5c>
        {
            taskSWITCH_DELAYED_LISTS();
 800c4ec:	4b74      	ldr	r3, [pc, #464]	@ (800c6c0 <xTaskIncrementTick+0x1fc>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <xTaskIncrementTick+0x3a>
 800c4f6:	f001 fa47 	bl	800d988 <ulSetInterruptMask>
 800c4fa:	bf00      	nop
 800c4fc:	e7fd      	b.n	800c4fa <xTaskIncrementTick+0x36>
 800c4fe:	4b70      	ldr	r3, [pc, #448]	@ (800c6c0 <xTaskIncrementTick+0x1fc>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	4b6f      	ldr	r3, [pc, #444]	@ (800c6c4 <xTaskIncrementTick+0x200>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a6d      	ldr	r2, [pc, #436]	@ (800c6c0 <xTaskIncrementTick+0x1fc>)
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	4a6d      	ldr	r2, [pc, #436]	@ (800c6c4 <xTaskIncrementTick+0x200>)
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	4b6d      	ldr	r3, [pc, #436]	@ (800c6c8 <xTaskIncrementTick+0x204>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	3301      	adds	r3, #1
 800c518:	4a6b      	ldr	r2, [pc, #428]	@ (800c6c8 <xTaskIncrementTick+0x204>)
 800c51a:	6013      	str	r3, [r2, #0]
 800c51c:	f000 fb90 	bl	800cc40 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800c520:	4b6a      	ldr	r3, [pc, #424]	@ (800c6cc <xTaskIncrementTick+0x208>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	69ba      	ldr	r2, [r7, #24]
 800c526:	429a      	cmp	r2, r3
 800c528:	f0c0 80a7 	bcc.w	800c67a <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c52c:	4b64      	ldr	r3, [pc, #400]	@ (800c6c0 <xTaskIncrementTick+0x1fc>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d104      	bne.n	800c540 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c536:	4b65      	ldr	r3, [pc, #404]	@ (800c6cc <xTaskIncrementTick+0x208>)
 800c538:	f04f 32ff 	mov.w	r2, #4294967295
 800c53c:	601a      	str	r2, [r3, #0]
                    break;
 800c53e:	e09c      	b.n	800c67a <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c540:	4b5f      	ldr	r3, [pc, #380]	@ (800c6c0 <xTaskIncrementTick+0x1fc>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	68db      	ldr	r3, [r3, #12]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800c550:	69ba      	ldr	r2, [r7, #24]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	429a      	cmp	r2, r3
 800c556:	d203      	bcs.n	800c560 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800c558:	4a5c      	ldr	r2, [pc, #368]	@ (800c6cc <xTaskIncrementTick+0x208>)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800c55e:	e08c      	b.n	800c67a <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	60bb      	str	r3, [r7, #8]
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	68d2      	ldr	r2, [r2, #12]
 800c56e:	609a      	str	r2, [r3, #8]
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	6892      	ldr	r2, [r2, #8]
 800c578:	605a      	str	r2, [r3, #4]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	3304      	adds	r3, #4
 800c582:	429a      	cmp	r2, r3
 800c584:	d103      	bne.n	800c58e <xTaskIncrementTick+0xca>
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	68da      	ldr	r2, [r3, #12]
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	605a      	str	r2, [r3, #4]
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	2200      	movs	r2, #0
 800c592:	615a      	str	r2, [r3, #20]
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	1e5a      	subs	r2, r3, #1
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d01e      	beq.n	800c5e4 <xTaskIncrementTick+0x120>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5aa:	607b      	str	r3, [r7, #4]
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	69db      	ldr	r3, [r3, #28]
 800c5b0:	693a      	ldr	r2, [r7, #16]
 800c5b2:	6a12      	ldr	r2, [r2, #32]
 800c5b4:	609a      	str	r2, [r3, #8]
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	6a1b      	ldr	r3, [r3, #32]
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	69d2      	ldr	r2, [r2, #28]
 800c5be:	605a      	str	r2, [r3, #4]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	685a      	ldr	r2, [r3, #4]
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	3318      	adds	r3, #24
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d103      	bne.n	800c5d4 <xTaskIncrementTick+0x110>
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	6a1a      	ldr	r2, [r3, #32]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	605a      	str	r2, [r3, #4]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	629a      	str	r2, [r3, #40]	@ 0x28
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	1e5a      	subs	r2, r3, #1
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5e8:	4b39      	ldr	r3, [pc, #228]	@ (800c6d0 <xTaskIncrementTick+0x20c>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d903      	bls.n	800c5f8 <xTaskIncrementTick+0x134>
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f4:	4a36      	ldr	r2, [pc, #216]	@ (800c6d0 <xTaskIncrementTick+0x20c>)
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5fc:	4935      	ldr	r1, [pc, #212]	@ (800c6d4 <xTaskIncrementTick+0x210>)
 800c5fe:	4613      	mov	r3, r2
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	4413      	add	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	440b      	add	r3, r1
 800c608:	3304      	adds	r3, #4
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	603b      	str	r3, [r7, #0]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	609a      	str	r2, [r3, #8]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	689a      	ldr	r2, [r3, #8]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	60da      	str	r2, [r3, #12]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	689b      	ldr	r3, [r3, #8]
 800c620:	693a      	ldr	r2, [r7, #16]
 800c622:	3204      	adds	r2, #4
 800c624:	605a      	str	r2, [r3, #4]
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	1d1a      	adds	r2, r3, #4
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	609a      	str	r2, [r3, #8]
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c632:	4613      	mov	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	009b      	lsls	r3, r3, #2
 800c63a:	4a26      	ldr	r2, [pc, #152]	@ (800c6d4 <xTaskIncrementTick+0x210>)
 800c63c:	441a      	add	r2, r3
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	615a      	str	r2, [r3, #20]
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c646:	4923      	ldr	r1, [pc, #140]	@ (800c6d4 <xTaskIncrementTick+0x210>)
 800c648:	4613      	mov	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	440b      	add	r3, r1
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	1c59      	adds	r1, r3, #1
 800c656:	481f      	ldr	r0, [pc, #124]	@ (800c6d4 <xTaskIncrementTick+0x210>)
 800c658:	4613      	mov	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	4413      	add	r3, r2
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4403      	add	r3, r0
 800c662:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c668:	4b1b      	ldr	r3, [pc, #108]	@ (800c6d8 <xTaskIncrementTick+0x214>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c66e:	429a      	cmp	r2, r3
 800c670:	f67f af5c 	bls.w	800c52c <xTaskIncrementTick+0x68>
                        {
                            xSwitchRequired = pdTRUE;
 800c674:	2301      	movs	r3, #1
 800c676:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c678:	e758      	b.n	800c52c <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c67a:	4b17      	ldr	r3, [pc, #92]	@ (800c6d8 <xTaskIncrementTick+0x214>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c680:	4914      	ldr	r1, [pc, #80]	@ (800c6d4 <xTaskIncrementTick+0x210>)
 800c682:	4613      	mov	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4413      	add	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	440b      	add	r3, r1
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d901      	bls.n	800c696 <xTaskIncrementTick+0x1d2>
            {
                xSwitchRequired = pdTRUE;
 800c692:	2301      	movs	r3, #1
 800c694:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800c696:	4b11      	ldr	r3, [pc, #68]	@ (800c6dc <xTaskIncrementTick+0x218>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d007      	beq.n	800c6ae <xTaskIncrementTick+0x1ea>
            {
                xSwitchRequired = pdTRUE;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	61fb      	str	r3, [r7, #28]
 800c6a2:	e004      	b.n	800c6ae <xTaskIncrementTick+0x1ea>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800c6a4:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e0 <xTaskIncrementTick+0x21c>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	4a0d      	ldr	r2, [pc, #52]	@ (800c6e0 <xTaskIncrementTick+0x21c>)
 800c6ac:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800c6ae:	69fb      	ldr	r3, [r7, #28]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3720      	adds	r7, #32
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	200012e8 	.word	0x200012e8
 800c6bc:	200012c4 	.word	0x200012c4
 800c6c0:	20001278 	.word	0x20001278
 800c6c4:	2000127c 	.word	0x2000127c
 800c6c8:	200012d8 	.word	0x200012d8
 800c6cc:	200012e0 	.word	0x200012e0
 800c6d0:	200012c8 	.word	0x200012c8
 800c6d4:	20000df0 	.word	0x20000df0
 800c6d8:	20000dec 	.word	0x20000dec
 800c6dc:	200012d4 	.word	0x200012d4
 800c6e0:	200012d0 	.word	0x200012d0

0800c6e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c6ea:	4b26      	ldr	r3, [pc, #152]	@ (800c784 <vTaskSwitchContext+0xa0>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800c6f2:	4b25      	ldr	r3, [pc, #148]	@ (800c788 <vTaskSwitchContext+0xa4>)
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800c6f8:	e03f      	b.n	800c77a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800c6fa:	4b23      	ldr	r3, [pc, #140]	@ (800c788 <vTaskSwitchContext+0xa4>)
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c700:	4b22      	ldr	r3, [pc, #136]	@ (800c78c <vTaskSwitchContext+0xa8>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	607b      	str	r3, [r7, #4]
 800c706:	e009      	b.n	800c71c <vTaskSwitchContext+0x38>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d103      	bne.n	800c716 <vTaskSwitchContext+0x32>
 800c70e:	f001 f93b 	bl	800d988 <ulSetInterruptMask>
 800c712:	bf00      	nop
 800c714:	e7fd      	b.n	800c712 <vTaskSwitchContext+0x2e>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3b01      	subs	r3, #1
 800c71a:	607b      	str	r3, [r7, #4]
 800c71c:	491c      	ldr	r1, [pc, #112]	@ (800c790 <vTaskSwitchContext+0xac>)
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	4613      	mov	r3, r2
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	4413      	add	r3, r2
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	440b      	add	r3, r1
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d0eb      	beq.n	800c708 <vTaskSwitchContext+0x24>
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	4613      	mov	r3, r2
 800c734:	009b      	lsls	r3, r3, #2
 800c736:	4413      	add	r3, r2
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	4a15      	ldr	r2, [pc, #84]	@ (800c790 <vTaskSwitchContext+0xac>)
 800c73c:	4413      	add	r3, r2
 800c73e:	603b      	str	r3, [r7, #0]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	685a      	ldr	r2, [r3, #4]
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	605a      	str	r2, [r3, #4]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	685a      	ldr	r2, [r3, #4]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	3308      	adds	r3, #8
 800c752:	429a      	cmp	r2, r3
 800c754:	d104      	bne.n	800c760 <vTaskSwitchContext+0x7c>
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	605a      	str	r2, [r3, #4]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	4a0b      	ldr	r2, [pc, #44]	@ (800c794 <vTaskSwitchContext+0xb0>)
 800c768:	6013      	str	r3, [r2, #0]
 800c76a:	4a08      	ldr	r2, [pc, #32]	@ (800c78c <vTaskSwitchContext+0xa8>)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6013      	str	r3, [r2, #0]
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800c770:	4b08      	ldr	r3, [pc, #32]	@ (800c794 <vTaskSwitchContext+0xb0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3354      	adds	r3, #84	@ 0x54
 800c776:	4a08      	ldr	r2, [pc, #32]	@ (800c798 <vTaskSwitchContext+0xb4>)
 800c778:	6013      	str	r3, [r2, #0]
}
 800c77a:	bf00      	nop
 800c77c:	3708      	adds	r7, #8
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	200012e8 	.word	0x200012e8
 800c788:	200012d4 	.word	0x200012d4
 800c78c:	200012c8 	.word	0x200012c8
 800c790:	20000df0 	.word	0x20000df0
 800c794:	20000dec 	.word	0x20000dec
 800c798:	200000b4 	.word	0x200000b4

0800c79c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b082      	sub	sp, #8
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d103      	bne.n	800c7b4 <vTaskPlaceOnEventList+0x18>
 800c7ac:	f001 f8ec 	bl	800d988 <ulSetInterruptMask>
 800c7b0:	bf00      	nop
 800c7b2:	e7fd      	b.n	800c7b0 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7b4:	4b07      	ldr	r3, [pc, #28]	@ (800c7d4 <vTaskPlaceOnEventList+0x38>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	3318      	adds	r3, #24
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7fe fb62 	bl	800ae86 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	6838      	ldr	r0, [r7, #0]
 800c7c6:	f000 fc3d 	bl	800d044 <prvAddCurrentTaskToDelayedList>
}
 800c7ca:	bf00      	nop
 800c7cc:	3708      	adds	r7, #8
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	20000dec 	.word	0x20000dec

0800c7d8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b086      	sub	sp, #24
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d103      	bne.n	800c7f2 <vTaskPlaceOnEventListRestricted+0x1a>
 800c7ea:	f001 f8cd 	bl	800d988 <ulSetInterruptMask>
 800c7ee:	bf00      	nop
 800c7f0:	e7fd      	b.n	800c7ee <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	617b      	str	r3, [r7, #20]
 800c7f8:	4b15      	ldr	r3, [pc, #84]	@ (800c850 <vTaskPlaceOnEventListRestricted+0x78>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	697a      	ldr	r2, [r7, #20]
 800c7fe:	61da      	str	r2, [r3, #28]
 800c800:	4b13      	ldr	r3, [pc, #76]	@ (800c850 <vTaskPlaceOnEventListRestricted+0x78>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	697a      	ldr	r2, [r7, #20]
 800c806:	6892      	ldr	r2, [r2, #8]
 800c808:	621a      	str	r2, [r3, #32]
 800c80a:	4b11      	ldr	r3, [pc, #68]	@ (800c850 <vTaskPlaceOnEventListRestricted+0x78>)
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	3218      	adds	r2, #24
 800c814:	605a      	str	r2, [r3, #4]
 800c816:	4b0e      	ldr	r3, [pc, #56]	@ (800c850 <vTaskPlaceOnEventListRestricted+0x78>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f103 0218 	add.w	r2, r3, #24
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	609a      	str	r2, [r3, #8]
 800c822:	4b0b      	ldr	r3, [pc, #44]	@ (800c850 <vTaskPlaceOnEventListRestricted+0x78>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	629a      	str	r2, [r3, #40]	@ 0x28
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	1c5a      	adds	r2, r3, #1
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <vTaskPlaceOnEventListRestricted+0x68>
        {
            xTicksToWait = portMAX_DELAY;
 800c83a:	f04f 33ff 	mov.w	r3, #4294967295
 800c83e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c840:	6879      	ldr	r1, [r7, #4]
 800c842:	68b8      	ldr	r0, [r7, #8]
 800c844:	f000 fbfe 	bl	800d044 <prvAddCurrentTaskToDelayedList>
    }
 800c848:	bf00      	nop
 800c84a:	3718      	adds	r7, #24
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	20000dec 	.word	0x20000dec

0800c854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b088      	sub	sp, #32
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d103      	bne.n	800c872 <xTaskRemoveFromEventList+0x1e>
 800c86a:	f001 f88d 	bl	800d988 <ulSetInterruptMask>
 800c86e:	bf00      	nop
 800c870:	e7fd      	b.n	800c86e <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c876:	617b      	str	r3, [r7, #20]
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	69db      	ldr	r3, [r3, #28]
 800c87c:	69ba      	ldr	r2, [r7, #24]
 800c87e:	6a12      	ldr	r2, [r2, #32]
 800c880:	609a      	str	r2, [r3, #8]
 800c882:	69bb      	ldr	r3, [r7, #24]
 800c884:	6a1b      	ldr	r3, [r3, #32]
 800c886:	69ba      	ldr	r2, [r7, #24]
 800c888:	69d2      	ldr	r2, [r2, #28]
 800c88a:	605a      	str	r2, [r3, #4]
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	685a      	ldr	r2, [r3, #4]
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	3318      	adds	r3, #24
 800c894:	429a      	cmp	r2, r3
 800c896:	d103      	bne.n	800c8a0 <xTaskRemoveFromEventList+0x4c>
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	6a1a      	ldr	r2, [r3, #32]
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	605a      	str	r2, [r3, #4]
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	629a      	str	r2, [r3, #40]	@ 0x28
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	1e5a      	subs	r2, r3, #1
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8b0:	4b49      	ldr	r3, [pc, #292]	@ (800c9d8 <xTaskRemoveFromEventList+0x184>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d15f      	bne.n	800c978 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	695b      	ldr	r3, [r3, #20]
 800c8bc:	60fb      	str	r3, [r7, #12]
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	69ba      	ldr	r2, [r7, #24]
 800c8c4:	68d2      	ldr	r2, [r2, #12]
 800c8c6:	609a      	str	r2, [r3, #8]
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	68db      	ldr	r3, [r3, #12]
 800c8cc:	69ba      	ldr	r2, [r7, #24]
 800c8ce:	6892      	ldr	r2, [r2, #8]
 800c8d0:	605a      	str	r2, [r3, #4]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	3304      	adds	r3, #4
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d103      	bne.n	800c8e6 <xTaskRemoveFromEventList+0x92>
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	605a      	str	r2, [r3, #4]
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	615a      	str	r2, [r3, #20]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	1e5a      	subs	r2, r3, #1
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8fa:	4b38      	ldr	r3, [pc, #224]	@ (800c9dc <xTaskRemoveFromEventList+0x188>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d903      	bls.n	800c90a <xTaskRemoveFromEventList+0xb6>
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c906:	4a35      	ldr	r2, [pc, #212]	@ (800c9dc <xTaskRemoveFromEventList+0x188>)
 800c908:	6013      	str	r3, [r2, #0]
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c90e:	4934      	ldr	r1, [pc, #208]	@ (800c9e0 <xTaskRemoveFromEventList+0x18c>)
 800c910:	4613      	mov	r3, r2
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4413      	add	r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	440b      	add	r3, r1
 800c91a:	3304      	adds	r3, #4
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	60bb      	str	r3, [r7, #8]
 800c920:	69bb      	ldr	r3, [r7, #24]
 800c922:	68ba      	ldr	r2, [r7, #8]
 800c924:	609a      	str	r2, [r3, #8]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	689a      	ldr	r2, [r3, #8]
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	60da      	str	r2, [r3, #12]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	69ba      	ldr	r2, [r7, #24]
 800c934:	3204      	adds	r2, #4
 800c936:	605a      	str	r2, [r3, #4]
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	1d1a      	adds	r2, r3, #4
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	609a      	str	r2, [r3, #8]
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c944:	4613      	mov	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	4a24      	ldr	r2, [pc, #144]	@ (800c9e0 <xTaskRemoveFromEventList+0x18c>)
 800c94e:	441a      	add	r2, r3
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	615a      	str	r2, [r3, #20]
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c958:	4921      	ldr	r1, [pc, #132]	@ (800c9e0 <xTaskRemoveFromEventList+0x18c>)
 800c95a:	4613      	mov	r3, r2
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	4413      	add	r3, r2
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	440b      	add	r3, r1
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	1c59      	adds	r1, r3, #1
 800c968:	481d      	ldr	r0, [pc, #116]	@ (800c9e0 <xTaskRemoveFromEventList+0x18c>)
 800c96a:	4613      	mov	r3, r2
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4403      	add	r3, r0
 800c974:	6019      	str	r1, [r3, #0]
 800c976:	e01b      	b.n	800c9b0 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c978:	4b1a      	ldr	r3, [pc, #104]	@ (800c9e4 <xTaskRemoveFromEventList+0x190>)
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	613b      	str	r3, [r7, #16]
 800c97e:	69bb      	ldr	r3, [r7, #24]
 800c980:	693a      	ldr	r2, [r7, #16]
 800c982:	61da      	str	r2, [r3, #28]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	689a      	ldr	r2, [r3, #8]
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	621a      	str	r2, [r3, #32]
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	69ba      	ldr	r2, [r7, #24]
 800c992:	3218      	adds	r2, #24
 800c994:	605a      	str	r2, [r3, #4]
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	f103 0218 	add.w	r2, r3, #24
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	609a      	str	r2, [r3, #8]
 800c9a0:	69bb      	ldr	r3, [r7, #24]
 800c9a2:	4a10      	ldr	r2, [pc, #64]	@ (800c9e4 <xTaskRemoveFromEventList+0x190>)
 800c9a4:	629a      	str	r2, [r3, #40]	@ 0x28
 800c9a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c9e4 <xTaskRemoveFromEventList+0x190>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	4a0d      	ldr	r2, [pc, #52]	@ (800c9e4 <xTaskRemoveFromEventList+0x190>)
 800c9ae:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9b0:	69bb      	ldr	r3, [r7, #24]
 800c9b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c9e8 <xTaskRemoveFromEventList+0x194>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d905      	bls.n	800c9ca <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800c9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ec <xTaskRemoveFromEventList+0x198>)
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	601a      	str	r2, [r3, #0]
 800c9c8:	e001      	b.n	800c9ce <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800c9ce:	69fb      	ldr	r3, [r7, #28]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3720      	adds	r7, #32
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	200012e8 	.word	0x200012e8
 800c9dc:	200012c8 	.word	0x200012c8
 800c9e0:	20000df0 	.word	0x20000df0
 800c9e4:	20001280 	.word	0x20001280
 800c9e8:	20000dec 	.word	0x20000dec
 800c9ec:	200012d4 	.word	0x200012d4

0800c9f0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b083      	sub	sp, #12
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c9f8:	4b06      	ldr	r3, [pc, #24]	@ (800ca14 <vTaskInternalSetTimeOutState+0x24>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800ca00:	4b05      	ldr	r3, [pc, #20]	@ (800ca18 <vTaskInternalSetTimeOutState+0x28>)
 800ca02:	681a      	ldr	r2, [r3, #0]
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	605a      	str	r2, [r3, #4]
}
 800ca08:	bf00      	nop
 800ca0a:	370c      	adds	r7, #12
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	200012d8 	.word	0x200012d8
 800ca18:	200012c4 	.word	0x200012c4

0800ca1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b086      	sub	sp, #24
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d103      	bne.n	800ca34 <xTaskCheckForTimeOut+0x18>
 800ca2c:	f000 ffac 	bl	800d988 <ulSetInterruptMask>
 800ca30:	bf00      	nop
 800ca32:	e7fd      	b.n	800ca30 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d103      	bne.n	800ca42 <xTaskCheckForTimeOut+0x26>
 800ca3a:	f000 ffa5 	bl	800d988 <ulSetInterruptMask>
 800ca3e:	bf00      	nop
 800ca40:	e7fd      	b.n	800ca3e <xTaskCheckForTimeOut+0x22>

    taskENTER_CRITICAL();
 800ca42:	f000 fe65 	bl	800d710 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800ca46:	4b1f      	ldr	r3, [pc, #124]	@ (800cac4 <xTaskCheckForTimeOut+0xa8>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca5e:	d102      	bne.n	800ca66 <xTaskCheckForTimeOut+0x4a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800ca60:	2300      	movs	r3, #0
 800ca62:	617b      	str	r3, [r7, #20]
 800ca64:	e026      	b.n	800cab4 <xTaskCheckForTimeOut+0x98>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	4b17      	ldr	r3, [pc, #92]	@ (800cac8 <xTaskCheckForTimeOut+0xac>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d00a      	beq.n	800ca88 <xTaskCheckForTimeOut+0x6c>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	693a      	ldr	r2, [r7, #16]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d305      	bcc.n	800ca88 <xTaskCheckForTimeOut+0x6c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	2200      	movs	r2, #0
 800ca84:	601a      	str	r2, [r3, #0]
 800ca86:	e015      	b.n	800cab4 <xTaskCheckForTimeOut+0x98>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d20b      	bcs.n	800caaa <xTaskCheckForTimeOut+0x8e>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	1ad2      	subs	r2, r2, r3
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff ffa6 	bl	800c9f0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800caa4:	2300      	movs	r3, #0
 800caa6:	617b      	str	r3, [r7, #20]
 800caa8:	e004      	b.n	800cab4 <xTaskCheckForTimeOut+0x98>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2200      	movs	r2, #0
 800caae:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800cab0:	2301      	movs	r3, #1
 800cab2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800cab4:	f000 fe3e 	bl	800d734 <vPortExitCritical>

    return xReturn;
 800cab8:	697b      	ldr	r3, [r7, #20]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3718      	adds	r7, #24
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	200012c4 	.word	0x200012c4
 800cac8:	200012d8 	.word	0x200012d8

0800cacc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cacc:	b480      	push	{r7}
 800cace:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800cad0:	4b03      	ldr	r3, [pc, #12]	@ (800cae0 <vTaskMissedYield+0x14>)
 800cad2:	2201      	movs	r2, #1
 800cad4:	601a      	str	r2, [r3, #0]
}
 800cad6:	bf00      	nop
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	200012d4 	.word	0x200012d4

0800cae4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800caec:	f000 f84a 	bl	800cb84 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800caf0:	4b03      	ldr	r3, [pc, #12]	@ (800cb00 <prvIdleTask+0x1c>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d9f9      	bls.n	800caec <prvIdleTask+0x8>
            {
                taskYIELD();
 800caf8:	f000 fdf8 	bl	800d6ec <vPortYield>
        prvCheckTasksWaitingTermination();
 800cafc:	e7f6      	b.n	800caec <prvIdleTask+0x8>
 800cafe:	bf00      	nop
 800cb00:	20000df0 	.word	0x20000df0

0800cb04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	607b      	str	r3, [r7, #4]
 800cb0e:	e00c      	b.n	800cb2a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	4613      	mov	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4a12      	ldr	r2, [pc, #72]	@ (800cb64 <prvInitialiseTaskLists+0x60>)
 800cb1c:	4413      	add	r3, r2
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7fe f984 	bl	800ae2c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3301      	adds	r3, #1
 800cb28:	607b      	str	r3, [r7, #4]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b37      	cmp	r3, #55	@ 0x37
 800cb2e:	d9ef      	bls.n	800cb10 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800cb30:	480d      	ldr	r0, [pc, #52]	@ (800cb68 <prvInitialiseTaskLists+0x64>)
 800cb32:	f7fe f97b 	bl	800ae2c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800cb36:	480d      	ldr	r0, [pc, #52]	@ (800cb6c <prvInitialiseTaskLists+0x68>)
 800cb38:	f7fe f978 	bl	800ae2c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800cb3c:	480c      	ldr	r0, [pc, #48]	@ (800cb70 <prvInitialiseTaskLists+0x6c>)
 800cb3e:	f7fe f975 	bl	800ae2c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800cb42:	480c      	ldr	r0, [pc, #48]	@ (800cb74 <prvInitialiseTaskLists+0x70>)
 800cb44:	f7fe f972 	bl	800ae2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800cb48:	480b      	ldr	r0, [pc, #44]	@ (800cb78 <prvInitialiseTaskLists+0x74>)
 800cb4a:	f7fe f96f 	bl	800ae2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800cb4e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb7c <prvInitialiseTaskLists+0x78>)
 800cb50:	4a05      	ldr	r2, [pc, #20]	@ (800cb68 <prvInitialiseTaskLists+0x64>)
 800cb52:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb54:	4b0a      	ldr	r3, [pc, #40]	@ (800cb80 <prvInitialiseTaskLists+0x7c>)
 800cb56:	4a05      	ldr	r2, [pc, #20]	@ (800cb6c <prvInitialiseTaskLists+0x68>)
 800cb58:	601a      	str	r2, [r3, #0]
}
 800cb5a:	bf00      	nop
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	20000df0 	.word	0x20000df0
 800cb68:	20001250 	.word	0x20001250
 800cb6c:	20001264 	.word	0x20001264
 800cb70:	20001280 	.word	0x20001280
 800cb74:	20001294 	.word	0x20001294
 800cb78:	200012ac 	.word	0x200012ac
 800cb7c:	20001278 	.word	0x20001278
 800cb80:	2000127c 	.word	0x2000127c

0800cb84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cb8a:	e019      	b.n	800cbc0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800cb8c:	f000 fdc0 	bl	800d710 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb90:	4b10      	ldr	r3, [pc, #64]	@ (800cbd4 <prvCheckTasksWaitingTermination+0x50>)
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7fe f9ab 	bl	800aef8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800cba2:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd8 <prvCheckTasksWaitingTermination+0x54>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3b01      	subs	r3, #1
 800cba8:	4a0b      	ldr	r2, [pc, #44]	@ (800cbd8 <prvCheckTasksWaitingTermination+0x54>)
 800cbaa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800cbac:	4b0b      	ldr	r3, [pc, #44]	@ (800cbdc <prvCheckTasksWaitingTermination+0x58>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	3b01      	subs	r3, #1
 800cbb2:	4a0a      	ldr	r2, [pc, #40]	@ (800cbdc <prvCheckTasksWaitingTermination+0x58>)
 800cbb4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800cbb6:	f000 fdbd 	bl	800d734 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f810 	bl	800cbe0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbc0:	4b06      	ldr	r3, [pc, #24]	@ (800cbdc <prvCheckTasksWaitingTermination+0x58>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1e1      	bne.n	800cb8c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800cbc8:	bf00      	nop
 800cbca:	bf00      	nop
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20001294 	.word	0x20001294
 800cbd8:	200012c0 	.word	0x200012c0
 800cbdc:	200012a8 	.word	0x200012a8

0800cbe0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
        portCLEAN_UP_TCB( pxTCB );

        #if ( ( configUSE_NEWLIB_REENTRANT == 1 ) || ( configUSE_C_RUNTIME_TLS_SUPPORT == 1 ) )
        {
            /* Free up the memory allocated for the task's TLS Block. */
            configDEINIT_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
 800cbe8:	4b14      	ldr	r3, [pc, #80]	@ (800cc3c <prvDeleteTCB+0x5c>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	3354      	adds	r3, #84	@ 0x54
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f01f ffc4 	bl	802cb7c <_reclaim_reent>
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d108      	bne.n	800cc10 <prvDeleteTCB+0x30>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 ffcc 	bl	800dba0 <vPortFree>
                vPortFree( pxTCB );
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 ffc9 	bl	800dba0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800cc0e:	e011      	b.n	800cc34 <prvDeleteTCB+0x54>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d103      	bne.n	800cc22 <prvDeleteTCB+0x42>
                vPortFree( pxTCB );
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f000 ffc0 	bl	800dba0 <vPortFree>
    }
 800cc20:	e008      	b.n	800cc34 <prvDeleteTCB+0x54>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cc28:	2b02      	cmp	r3, #2
 800cc2a:	d003      	beq.n	800cc34 <prvDeleteTCB+0x54>
 800cc2c:	f000 feac 	bl	800d988 <ulSetInterruptMask>
 800cc30:	bf00      	nop
 800cc32:	e7fd      	b.n	800cc30 <prvDeleteTCB+0x50>
    }
 800cc34:	bf00      	nop
 800cc36:	3708      	adds	r7, #8
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bd80      	pop	{r7, pc}
 800cc3c:	20000dec 	.word	0x20000dec

0800cc40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc40:	b480      	push	{r7}
 800cc42:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc44:	4b0a      	ldr	r3, [pc, #40]	@ (800cc70 <prvResetNextTaskUnblockTime+0x30>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d104      	bne.n	800cc58 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800cc4e:	4b09      	ldr	r3, [pc, #36]	@ (800cc74 <prvResetNextTaskUnblockTime+0x34>)
 800cc50:	f04f 32ff 	mov.w	r2, #4294967295
 800cc54:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800cc56:	e005      	b.n	800cc64 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800cc58:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <prvResetNextTaskUnblockTime+0x30>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a04      	ldr	r2, [pc, #16]	@ (800cc74 <prvResetNextTaskUnblockTime+0x34>)
 800cc62:	6013      	str	r3, [r2, #0]
}
 800cc64:	bf00      	nop
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	20001278 	.word	0x20001278
 800cc74:	200012e0 	.word	0x200012e0

0800cc78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800cc7e:	4b0b      	ldr	r3, [pc, #44]	@ (800ccac <xTaskGetSchedulerState+0x34>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d102      	bne.n	800cc8c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800cc86:	2301      	movs	r3, #1
 800cc88:	607b      	str	r3, [r7, #4]
 800cc8a:	e008      	b.n	800cc9e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc8c:	4b08      	ldr	r3, [pc, #32]	@ (800ccb0 <xTaskGetSchedulerState+0x38>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d102      	bne.n	800cc9a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800cc94:	2302      	movs	r3, #2
 800cc96:	607b      	str	r3, [r7, #4]
 800cc98:	e001      	b.n	800cc9e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800cc9e:	687b      	ldr	r3, [r7, #4]
    }
 800cca0:	4618      	mov	r0, r3
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	200012cc 	.word	0x200012cc
 800ccb0:	200012e8 	.word	0x200012e8

0800ccb4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b086      	sub	sp, #24
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d079      	beq.n	800cdbe <xTaskPriorityInherit+0x10a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccce:	4b3e      	ldr	r3, [pc, #248]	@ (800cdc8 <xTaskPriorityInherit+0x114>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d269      	bcs.n	800cdac <xTaskPriorityInherit+0xf8>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	699b      	ldr	r3, [r3, #24]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	db06      	blt.n	800ccee <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cce0:	4b39      	ldr	r3, [pc, #228]	@ (800cdc8 <xTaskPriorityInherit+0x114>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cce6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	6959      	ldr	r1, [r3, #20]
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	4413      	add	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	4a33      	ldr	r2, [pc, #204]	@ (800cdcc <xTaskPriorityInherit+0x118>)
 800cd00:	4413      	add	r3, r2
 800cd02:	4299      	cmp	r1, r3
 800cd04:	d14a      	bne.n	800cd9c <xTaskPriorityInherit+0xe8>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fe f8f4 	bl	800aef8 <uxListRemove>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd10:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc8 <xTaskPriorityInherit+0x114>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd1e:	4b2c      	ldr	r3, [pc, #176]	@ (800cdd0 <xTaskPriorityInherit+0x11c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d903      	bls.n	800cd2e <xTaskPriorityInherit+0x7a>
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2a:	4a29      	ldr	r2, [pc, #164]	@ (800cdd0 <xTaskPriorityInherit+0x11c>)
 800cd2c:	6013      	str	r3, [r2, #0]
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd32:	4926      	ldr	r1, [pc, #152]	@ (800cdcc <xTaskPriorityInherit+0x118>)
 800cd34:	4613      	mov	r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	4413      	add	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	440b      	add	r3, r1
 800cd3e:	3304      	adds	r3, #4
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	609a      	str	r2, [r3, #8]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	689a      	ldr	r2, [r3, #8]
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	60da      	str	r2, [r3, #12]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	693a      	ldr	r2, [r7, #16]
 800cd58:	3204      	adds	r2, #4
 800cd5a:	605a      	str	r2, [r3, #4]
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	1d1a      	adds	r2, r3, #4
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	609a      	str	r2, [r3, #8]
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd68:	4613      	mov	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	4413      	add	r3, r2
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4a16      	ldr	r2, [pc, #88]	@ (800cdcc <xTaskPriorityInherit+0x118>)
 800cd72:	441a      	add	r2, r3
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	615a      	str	r2, [r3, #20]
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd7c:	4913      	ldr	r1, [pc, #76]	@ (800cdcc <xTaskPriorityInherit+0x118>)
 800cd7e:	4613      	mov	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	440b      	add	r3, r1
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	1c59      	adds	r1, r3, #1
 800cd8c:	480f      	ldr	r0, [pc, #60]	@ (800cdcc <xTaskPriorityInherit+0x118>)
 800cd8e:	4613      	mov	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	4413      	add	r3, r2
 800cd94:	009b      	lsls	r3, r3, #2
 800cd96:	4403      	add	r3, r0
 800cd98:	6019      	str	r1, [r3, #0]
 800cd9a:	e004      	b.n	800cda6 <xTaskPriorityInherit+0xf2>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc8 <xTaskPriorityInherit+0x114>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800cda6:	2301      	movs	r3, #1
 800cda8:	617b      	str	r3, [r7, #20]
 800cdaa:	e008      	b.n	800cdbe <xTaskPriorityInherit+0x10a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cdb0:	4b05      	ldr	r3, [pc, #20]	@ (800cdc8 <xTaskPriorityInherit+0x114>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d201      	bcs.n	800cdbe <xTaskPriorityInherit+0x10a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800cdbe:	697b      	ldr	r3, [r7, #20]
    }
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3718      	adds	r7, #24
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	20000dec 	.word	0x20000dec
 800cdcc:	20000df0 	.word	0x20000df0
 800cdd0:	200012c8 	.word	0x200012c8

0800cdd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800cde0:	2300      	movs	r3, #0
 800cde2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d070      	beq.n	800cecc <xTaskPriorityDisinherit+0xf8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800cdea:	4b3b      	ldr	r3, [pc, #236]	@ (800ced8 <xTaskPriorityDisinherit+0x104>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	693a      	ldr	r2, [r7, #16]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d003      	beq.n	800cdfc <xTaskPriorityDisinherit+0x28>
 800cdf4:	f000 fdc8 	bl	800d988 <ulSetInterruptMask>
 800cdf8:	bf00      	nop
 800cdfa:	e7fd      	b.n	800cdf8 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d103      	bne.n	800ce0c <xTaskPriorityDisinherit+0x38>
 800ce04:	f000 fdc0 	bl	800d988 <ulSetInterruptMask>
 800ce08:	bf00      	nop
 800ce0a:	e7fd      	b.n	800ce08 <xTaskPriorityDisinherit+0x34>
            ( pxTCB->uxMutexesHeld )--;
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce10:	1e5a      	subs	r2, r3, #1
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d054      	beq.n	800cecc <xTaskPriorityDisinherit+0xf8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d150      	bne.n	800cecc <xTaskPriorityDisinherit+0xf8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe f862 	bl	800aef8 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce4c:	4b23      	ldr	r3, [pc, #140]	@ (800cedc <xTaskPriorityDisinherit+0x108>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d903      	bls.n	800ce5c <xTaskPriorityDisinherit+0x88>
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce58:	4a20      	ldr	r2, [pc, #128]	@ (800cedc <xTaskPriorityDisinherit+0x108>)
 800ce5a:	6013      	str	r3, [r2, #0]
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce60:	491f      	ldr	r1, [pc, #124]	@ (800cee0 <xTaskPriorityDisinherit+0x10c>)
 800ce62:	4613      	mov	r3, r2
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	440b      	add	r3, r1
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	693b      	ldr	r3, [r7, #16]
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	609a      	str	r2, [r3, #8]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	689a      	ldr	r2, [r3, #8]
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	60da      	str	r2, [r3, #12]
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	693a      	ldr	r2, [r7, #16]
 800ce86:	3204      	adds	r2, #4
 800ce88:	605a      	str	r2, [r3, #4]
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	1d1a      	adds	r2, r3, #4
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	609a      	str	r2, [r3, #8]
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce96:	4613      	mov	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4a10      	ldr	r2, [pc, #64]	@ (800cee0 <xTaskPriorityDisinherit+0x10c>)
 800cea0:	441a      	add	r2, r3
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	615a      	str	r2, [r3, #20]
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ceaa:	490d      	ldr	r1, [pc, #52]	@ (800cee0 <xTaskPriorityDisinherit+0x10c>)
 800ceac:	4613      	mov	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	440b      	add	r3, r1
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	1c59      	adds	r1, r3, #1
 800ceba:	4809      	ldr	r0, [pc, #36]	@ (800cee0 <xTaskPriorityDisinherit+0x10c>)
 800cebc:	4613      	mov	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4403      	add	r3, r0
 800cec6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800cec8:	2301      	movs	r3, #1
 800ceca:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800cecc:	697b      	ldr	r3, [r7, #20]
    }
 800cece:	4618      	mov	r0, r3
 800ced0:	3718      	adds	r7, #24
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	20000dec 	.word	0x20000dec
 800cedc:	200012c8 	.word	0x200012c8
 800cee0:	20000df0 	.word	0x20000df0

0800cee4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cef2:	2301      	movs	r3, #1
 800cef4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f000 8085 	beq.w	800d008 <vTaskPriorityDisinheritAfterTimeout+0x124>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d103      	bne.n	800cf0e <vTaskPriorityDisinheritAfterTimeout+0x2a>
 800cf06:	f000 fd3f 	bl	800d988 <ulSetInterruptMask>
 800cf0a:	bf00      	nop
 800cf0c:	e7fd      	b.n	800cf0a <vTaskPriorityDisinheritAfterTimeout+0x26>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d902      	bls.n	800cf1e <vTaskPriorityDisinheritAfterTimeout+0x3a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	e002      	b.n	800cf24 <vTaskPriorityDisinheritAfterTimeout+0x40>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf22:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf28:	69fa      	ldr	r2, [r7, #28]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d06c      	beq.n	800d008 <vTaskPriorityDisinheritAfterTimeout+0x124>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d167      	bne.n	800d008 <vTaskPriorityDisinheritAfterTimeout+0x124>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800cf38:	4b35      	ldr	r3, [pc, #212]	@ (800d010 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	69ba      	ldr	r2, [r7, #24]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d103      	bne.n	800cf4a <vTaskPriorityDisinheritAfterTimeout+0x66>
 800cf42:	f000 fd21 	bl	800d988 <ulSetInterruptMask>
 800cf46:	bf00      	nop
 800cf48:	e7fd      	b.n	800cf46 <vTaskPriorityDisinheritAfterTimeout+0x62>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf4e:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	69fa      	ldr	r2, [r7, #28]
 800cf54:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf56:	69bb      	ldr	r3, [r7, #24]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	db04      	blt.n	800cf68 <vTaskPriorityDisinheritAfterTimeout+0x84>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf64:	69bb      	ldr	r3, [r7, #24]
 800cf66:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	6959      	ldr	r1, [r3, #20]
 800cf6c:	693a      	ldr	r2, [r7, #16]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4a27      	ldr	r2, [pc, #156]	@ (800d014 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cf78:	4413      	add	r3, r2
 800cf7a:	4299      	cmp	r1, r3
 800cf7c:	d144      	bne.n	800d008 <vTaskPriorityDisinheritAfterTimeout+0x124>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	3304      	adds	r3, #4
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7fd ffb8 	bl	800aef8 <uxListRemove>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800cf88:	69bb      	ldr	r3, [r7, #24]
 800cf8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf8c:	4b22      	ldr	r3, [pc, #136]	@ (800d018 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d903      	bls.n	800cf9c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf98:	4a1f      	ldr	r2, [pc, #124]	@ (800d018 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfa0:	491c      	ldr	r1, [pc, #112]	@ (800d014 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cfa2:	4613      	mov	r3, r2
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	4413      	add	r3, r2
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	440b      	add	r3, r1
 800cfac:	3304      	adds	r3, #4
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	60fb      	str	r3, [r7, #12]
 800cfb2:	69bb      	ldr	r3, [r7, #24]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	609a      	str	r2, [r3, #8]
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	689a      	ldr	r2, [r3, #8]
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	60da      	str	r2, [r3, #12]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	69ba      	ldr	r2, [r7, #24]
 800cfc6:	3204      	adds	r2, #4
 800cfc8:	605a      	str	r2, [r3, #4]
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	1d1a      	adds	r2, r3, #4
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	609a      	str	r2, [r3, #8]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4413      	add	r3, r2
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	4a0d      	ldr	r2, [pc, #52]	@ (800d014 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cfe0:	441a      	add	r2, r3
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	615a      	str	r2, [r3, #20]
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfea:	490a      	ldr	r1, [pc, #40]	@ (800d014 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cfec:	4613      	mov	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4413      	add	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	440b      	add	r3, r1
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	1c59      	adds	r1, r3, #1
 800cffa:	4806      	ldr	r0, [pc, #24]	@ (800d014 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4403      	add	r3, r0
 800d006:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d008:	bf00      	nop
 800d00a:	3720      	adds	r7, #32
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	20000dec 	.word	0x20000dec
 800d014:	20000df0 	.word	0x20000df0
 800d018:	200012c8 	.word	0x200012c8

0800d01c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800d01c:	b480      	push	{r7}
 800d01e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800d020:	4b07      	ldr	r3, [pc, #28]	@ (800d040 <pvTaskIncrementMutexHeldCount+0x24>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d004      	beq.n	800d032 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800d028:	4b05      	ldr	r3, [pc, #20]	@ (800d040 <pvTaskIncrementMutexHeldCount+0x24>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d02e:	3201      	adds	r2, #1
 800d030:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 800d032:	4b03      	ldr	r3, [pc, #12]	@ (800d040 <pvTaskIncrementMutexHeldCount+0x24>)
 800d034:	681b      	ldr	r3, [r3, #0]
    }
 800d036:	4618      	mov	r0, r3
 800d038:	46bd      	mov	sp, r7
 800d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03e:	4770      	bx	lr
 800d040:	20000dec 	.word	0x20000dec

0800d044 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
 800d04c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800d04e:	4b2e      	ldr	r3, [pc, #184]	@ (800d108 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d054:	4b2d      	ldr	r3, [pc, #180]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	3304      	adds	r3, #4
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fd ff4c 	bl	800aef8 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d066:	d124      	bne.n	800d0b2 <prvAddCurrentTaskToDelayedList+0x6e>
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d021      	beq.n	800d0b2 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d06e:	4b28      	ldr	r3, [pc, #160]	@ (800d110 <prvAddCurrentTaskToDelayedList+0xcc>)
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	613b      	str	r3, [r7, #16]
 800d074:	4b25      	ldr	r3, [pc, #148]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	693a      	ldr	r2, [r7, #16]
 800d07a:	609a      	str	r2, [r3, #8]
 800d07c:	4b23      	ldr	r3, [pc, #140]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	693a      	ldr	r2, [r7, #16]
 800d082:	6892      	ldr	r2, [r2, #8]
 800d084:	60da      	str	r2, [r3, #12]
 800d086:	4b21      	ldr	r3, [pc, #132]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	3204      	adds	r2, #4
 800d090:	605a      	str	r2, [r3, #4]
 800d092:	4b1e      	ldr	r3, [pc, #120]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	1d1a      	adds	r2, r3, #4
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	609a      	str	r2, [r3, #8]
 800d09c:	4b1b      	ldr	r3, [pc, #108]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a1b      	ldr	r2, [pc, #108]	@ (800d110 <prvAddCurrentTaskToDelayedList+0xcc>)
 800d0a2:	615a      	str	r2, [r3, #20]
 800d0a4:	4b1a      	ldr	r3, [pc, #104]	@ (800d110 <prvAddCurrentTaskToDelayedList+0xcc>)
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	4a19      	ldr	r2, [pc, #100]	@ (800d110 <prvAddCurrentTaskToDelayedList+0xcc>)
 800d0ac:	6013      	str	r3, [r2, #0]
 800d0ae:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800d0b0:	e026      	b.n	800d100 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800d0b2:	697a      	ldr	r2, [r7, #20]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d0ba:	4b14      	ldr	r3, [pc, #80]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68fa      	ldr	r2, [r7, #12]
 800d0c0:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d209      	bcs.n	800d0de <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0ca:	4b12      	ldr	r3, [pc, #72]	@ (800d114 <prvAddCurrentTaskToDelayedList+0xd0>)
 800d0cc:	681a      	ldr	r2, [r3, #0]
 800d0ce:	4b0f      	ldr	r3, [pc, #60]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	3304      	adds	r3, #4
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	f7fd fed5 	bl	800ae86 <vListInsert>
}
 800d0dc:	e010      	b.n	800d100 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d0de:	4b0e      	ldr	r3, [pc, #56]	@ (800d118 <prvAddCurrentTaskToDelayedList+0xd4>)
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	4b0a      	ldr	r3, [pc, #40]	@ (800d10c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	4610      	mov	r0, r2
 800d0ec:	f7fd fecb 	bl	800ae86 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d11c <prvAddCurrentTaskToDelayedList+0xd8>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d202      	bcs.n	800d100 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 800d0fa:	4a08      	ldr	r2, [pc, #32]	@ (800d11c <prvAddCurrentTaskToDelayedList+0xd8>)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	6013      	str	r3, [r2, #0]
}
 800d100:	bf00      	nop
 800d102:	3718      	adds	r7, #24
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	200012c4 	.word	0x200012c4
 800d10c:	20000dec 	.word	0x20000dec
 800d110:	200012ac 	.word	0x200012ac
 800d114:	2000127c 	.word	0x2000127c
 800d118:	20001278 	.word	0x20001278
 800d11c:	200012e0 	.word	0x200012e0

0800d120 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 800d126:	2300      	movs	r3, #0
 800d128:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800d12a:	f000 fa5f 	bl	800d5ec <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800d12e:	4b18      	ldr	r3, [pc, #96]	@ (800d190 <xTimerCreateTimerTask+0x70>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d020      	beq.n	800d178 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800d136:	2300      	movs	r3, #0
 800d138:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d13e:	463a      	mov	r2, r7
 800d140:	1d39      	adds	r1, r7, #4
 800d142:	f107 0308 	add.w	r3, r7, #8
 800d146:	4618      	mov	r0, r3
 800d148:	f7fd fe56 	bl	800adf8 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800d14c:	6839      	ldr	r1, [r7, #0]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	68ba      	ldr	r2, [r7, #8]
 800d152:	9202      	str	r2, [sp, #8]
 800d154:	9301      	str	r3, [sp, #4]
 800d156:	2302      	movs	r3, #2
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	2300      	movs	r3, #0
 800d15c:	460a      	mov	r2, r1
 800d15e:	490d      	ldr	r1, [pc, #52]	@ (800d194 <xTimerCreateTimerTask+0x74>)
 800d160:	480d      	ldr	r0, [pc, #52]	@ (800d198 <xTimerCreateTimerTask+0x78>)
 800d162:	f7fe fe4d 	bl	800be00 <xTaskCreateStatic>
 800d166:	4603      	mov	r3, r0
 800d168:	4a0c      	ldr	r2, [pc, #48]	@ (800d19c <xTimerCreateTimerTask+0x7c>)
 800d16a:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 800d16c:	4b0b      	ldr	r3, [pc, #44]	@ (800d19c <xTimerCreateTimerTask+0x7c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 800d174:	2301      	movs	r3, #1
 800d176:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d103      	bne.n	800d186 <xTimerCreateTimerTask+0x66>
 800d17e:	f000 fc03 	bl	800d988 <ulSetInterruptMask>
 800d182:	bf00      	nop
 800d184:	e7fd      	b.n	800d182 <xTimerCreateTimerTask+0x62>
        return xReturn;
 800d186:	68fb      	ldr	r3, [r7, #12]
    }
 800d188:	4618      	mov	r0, r3
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	2000131c 	.word	0x2000131c
 800d194:	0802d840 	.word	0x0802d840
 800d198:	0800d245 	.word	0x0800d245
 800d19c:	20001320 	.word	0x20001320

0800d1a0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	60f8      	str	r0, [r7, #12]
 800d1a8:	60b9      	str	r1, [r7, #8]
 800d1aa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d1ac:	e008      	b.n	800d1c0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	699b      	ldr	r3, [r3, #24]
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6a1b      	ldr	r3, [r3, #32]
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	699a      	ldr	r2, [r3, #24]
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	18d1      	adds	r1, r2, r3
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f000 f8d7 	bl	800d380 <prvInsertTimerInActiveList>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1ea      	bne.n	800d1ae <prvReloadTimer+0xe>
        }
    }
 800d1d8:	bf00      	nop
 800d1da:	bf00      	nop
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
	...

0800d1e4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ee:	4b14      	ldr	r3, [pc, #80]	@ (800d240 <prvProcessExpiredTimer+0x5c>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fd fe7b 	bl	800aef8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d208:	f003 0304 	and.w	r3, r3, #4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d005      	beq.n	800d21c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800d210:	683a      	ldr	r2, [r7, #0]
 800d212:	6879      	ldr	r1, [r7, #4]
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f7ff ffc3 	bl	800d1a0 <prvReloadTimer>
 800d21a:	e008      	b.n	800d22e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d222:	f023 0301 	bic.w	r3, r3, #1
 800d226:	b2da      	uxtb	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	68f8      	ldr	r0, [r7, #12]
 800d234:	4798      	blx	r3
    }
 800d236:	bf00      	nop
 800d238:	3710      	adds	r7, #16
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	20001314 	.word	0x20001314

0800d244 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d24c:	f107 0308 	add.w	r3, r7, #8
 800d250:	4618      	mov	r0, r3
 800d252:	f000 f851 	bl	800d2f8 <prvGetNextExpireTime>
 800d256:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	4619      	mov	r1, r3
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f000 f805 	bl	800d26c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800d262:	f000 f8cf 	bl	800d404 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d266:	bf00      	nop
 800d268:	e7f0      	b.n	800d24c <prvTimerTask+0x8>
	...

0800d26c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
 800d274:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800d276:	f7ff f80d 	bl	800c294 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 f85e 	bl	800d340 <prvSampleTimeNow>
 800d284:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d12a      	bne.n	800d2e2 <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10a      	bne.n	800d2a8 <prvProcessTimerOrBlockTask+0x3c>
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	429a      	cmp	r2, r3
 800d298:	d806      	bhi.n	800d2a8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800d29a:	f7ff f809 	bl	800c2b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d29e:	68f9      	ldr	r1, [r7, #12]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f7ff ff9f 	bl	800d1e4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800d2a6:	e01e      	b.n	800d2e6 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d008      	beq.n	800d2c0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2ae:	4b10      	ldr	r3, [pc, #64]	@ (800d2f0 <prvProcessTimerOrBlockTask+0x84>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d101      	bne.n	800d2bc <prvProcessTimerOrBlockTask+0x50>
 800d2b8:	2301      	movs	r3, #1
 800d2ba:	e000      	b.n	800d2be <prvProcessTimerOrBlockTask+0x52>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d2f4 <prvProcessTimerOrBlockTask+0x88>)
 800d2c2:	6818      	ldr	r0, [r3, #0]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	683a      	ldr	r2, [r7, #0]
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	f7fe fd63 	bl	800bd98 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800d2d2:	f7fe ffed 	bl	800c2b0 <xTaskResumeAll>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d104      	bne.n	800d2e6 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800d2dc:	f000 fa06 	bl	800d6ec <vPortYield>
    }
 800d2e0:	e001      	b.n	800d2e6 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 800d2e2:	f7fe ffe5 	bl	800c2b0 <xTaskResumeAll>
    }
 800d2e6:	bf00      	nop
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20001318 	.word	0x20001318
 800d2f4:	2000131c 	.word	0x2000131c

0800d2f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d300:	4b0e      	ldr	r3, [pc, #56]	@ (800d33c <prvGetNextExpireTime+0x44>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <prvGetNextExpireTime+0x16>
 800d30a:	2201      	movs	r2, #1
 800d30c:	e000      	b.n	800d310 <prvGetNextExpireTime+0x18>
 800d30e:	2200      	movs	r2, #0
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d105      	bne.n	800d328 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d31c:	4b07      	ldr	r3, [pc, #28]	@ (800d33c <prvGetNextExpireTime+0x44>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	60fb      	str	r3, [r7, #12]
 800d326:	e001      	b.n	800d32c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800d328:	2300      	movs	r3, #0
 800d32a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800d32c:	68fb      	ldr	r3, [r7, #12]
    }
 800d32e:	4618      	mov	r0, r3
 800d330:	3714      	adds	r7, #20
 800d332:	46bd      	mov	sp, r7
 800d334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	20001314 	.word	0x20001314

0800d340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800d348:	f7ff f8a0 	bl	800c48c <xTaskGetTickCount>
 800d34c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800d34e:	4b0b      	ldr	r3, [pc, #44]	@ (800d37c <prvSampleTimeNow+0x3c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	68fa      	ldr	r2, [r7, #12]
 800d354:	429a      	cmp	r2, r3
 800d356:	d205      	bcs.n	800d364 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800d358:	f000 f922 	bl	800d5a0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2201      	movs	r2, #1
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	e002      	b.n	800d36a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800d36a:	4a04      	ldr	r2, [pc, #16]	@ (800d37c <prvSampleTimeNow+0x3c>)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800d370:	68fb      	ldr	r3, [r7, #12]
    }
 800d372:	4618      	mov	r0, r3
 800d374:	3710      	adds	r7, #16
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20001324 	.word	0x20001324

0800d380 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800d380:	b580      	push	{r7, lr}
 800d382:	b086      	sub	sp, #24
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]
 800d38c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800d38e:	2300      	movs	r3, #0
 800d390:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d812      	bhi.n	800d3cc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3a6:	687a      	ldr	r2, [r7, #4]
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	1ad2      	subs	r2, r2, r3
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	699b      	ldr	r3, [r3, #24]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d302      	bcc.n	800d3ba <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	617b      	str	r3, [r7, #20]
 800d3b8:	e01b      	b.n	800d3f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d3ba:	4b10      	ldr	r3, [pc, #64]	@ (800d3fc <prvInsertTimerInActiveList+0x7c>)
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	f7fd fd5e 	bl	800ae86 <vListInsert>
 800d3ca:	e012      	b.n	800d3f2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d206      	bcs.n	800d3e2 <prvInsertTimerInActiveList+0x62>
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d302      	bcc.n	800d3e2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	617b      	str	r3, [r7, #20]
 800d3e0:	e007      	b.n	800d3f2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d3e2:	4b07      	ldr	r3, [pc, #28]	@ (800d400 <prvInsertTimerInActiveList+0x80>)
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7fd fd4a 	bl	800ae86 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800d3f2:	697b      	ldr	r3, [r7, #20]
    }
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3718      	adds	r7, #24
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	20001318 	.word	0x20001318
 800d400:	20001314 	.word	0x20001314

0800d404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800d404:	b580      	push	{r7, lr}
 800d406:	b088      	sub	sp, #32
 800d408:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d40a:	e0b7      	b.n	800d57c <prvProcessReceivedCommands+0x178>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	da11      	bge.n	800d436 <prvProcessReceivedCommands+0x32>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d412:	1d3b      	adds	r3, r7, #4
 800d414:	3304      	adds	r3, #4
 800d416:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d103      	bne.n	800d426 <prvProcessReceivedCommands+0x22>
 800d41e:	f000 fab3 	bl	800d988 <ulSetInterruptMask>
 800d422:	bf00      	nop
 800d424:	e7fd      	b.n	800d422 <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d426:	69fb      	ldr	r3, [r7, #28]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	69fa      	ldr	r2, [r7, #28]
 800d42c:	6850      	ldr	r0, [r2, #4]
 800d42e:	69fa      	ldr	r2, [r7, #28]
 800d430:	6892      	ldr	r2, [r2, #8]
 800d432:	4611      	mov	r1, r2
 800d434:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	f2c0 809f 	blt.w	800d57c <prvProcessReceivedCommands+0x178>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	695b      	ldr	r3, [r3, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d004      	beq.n	800d454 <prvProcessReceivedCommands+0x50>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	3304      	adds	r3, #4
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fd fd52 	bl	800aef8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d454:	463b      	mov	r3, r7
 800d456:	4618      	mov	r0, r3
 800d458:	f7ff ff72 	bl	800d340 <prvSampleTimeNow>
 800d45c:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	3b01      	subs	r3, #1
 800d462:	2b08      	cmp	r3, #8
 800d464:	f200 8087 	bhi.w	800d576 <prvProcessReceivedCommands+0x172>
 800d468:	a201      	add	r2, pc, #4	@ (adr r2, 800d470 <prvProcessReceivedCommands+0x6c>)
 800d46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d46e:	bf00      	nop
 800d470:	0800d495 	.word	0x0800d495
 800d474:	0800d495 	.word	0x0800d495
 800d478:	0800d4fd 	.word	0x0800d4fd
 800d47c:	0800d511 	.word	0x0800d511
 800d480:	0800d54d 	.word	0x0800d54d
 800d484:	0800d495 	.word	0x0800d495
 800d488:	0800d495 	.word	0x0800d495
 800d48c:	0800d4fd 	.word	0x0800d4fd
 800d490:	0800d511 	.word	0x0800d511
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d49a:	f043 0301 	orr.w	r3, r3, #1
 800d49e:	b2da      	uxtb	r2, r3
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d4a6:	68ba      	ldr	r2, [r7, #8]
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	699b      	ldr	r3, [r3, #24]
 800d4ac:	18d1      	adds	r1, r2, r3
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	697a      	ldr	r2, [r7, #20]
 800d4b2:	69b8      	ldr	r0, [r7, #24]
 800d4b4:	f7ff ff64 	bl	800d380 <prvInsertTimerInActiveList>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d05d      	beq.n	800d57a <prvProcessReceivedCommands+0x176>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4c4:	f003 0304 	and.w	r3, r3, #4
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d009      	beq.n	800d4e0 <prvProcessReceivedCommands+0xdc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	69bb      	ldr	r3, [r7, #24]
 800d4d0:	699b      	ldr	r3, [r3, #24]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	697a      	ldr	r2, [r7, #20]
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	69b8      	ldr	r0, [r7, #24]
 800d4da:	f7ff fe61 	bl	800d1a0 <prvReloadTimer>
 800d4de:	e008      	b.n	800d4f2 <prvProcessReceivedCommands+0xee>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4e6:	f023 0301 	bic.w	r3, r3, #1
 800d4ea:	b2da      	uxtb	r2, r3
 800d4ec:	69bb      	ldr	r3, [r7, #24]
 800d4ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	69b8      	ldr	r0, [r7, #24]
 800d4f8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800d4fa:	e03e      	b.n	800d57a <prvProcessReceivedCommands+0x176>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d502:	f023 0301 	bic.w	r3, r3, #1
 800d506:	b2da      	uxtb	r2, r3
 800d508:	69bb      	ldr	r3, [r7, #24]
 800d50a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800d50e:	e035      	b.n	800d57c <prvProcessReceivedCommands+0x178>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d516:	f043 0301 	orr.w	r3, r3, #1
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	699b      	ldr	r3, [r3, #24]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d103      	bne.n	800d538 <prvProcessReceivedCommands+0x134>
 800d530:	f000 fa2a 	bl	800d988 <ulSetInterruptMask>
 800d534:	bf00      	nop
 800d536:	e7fd      	b.n	800d534 <prvProcessReceivedCommands+0x130>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	699a      	ldr	r2, [r3, #24]
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	18d1      	adds	r1, r2, r3
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	697a      	ldr	r2, [r7, #20]
 800d544:	69b8      	ldr	r0, [r7, #24]
 800d546:	f7ff ff1b 	bl	800d380 <prvInsertTimerInActiveList>
                        break;
 800d54a:	e017      	b.n	800d57c <prvProcessReceivedCommands+0x178>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d552:	f003 0302 	and.w	r3, r3, #2
 800d556:	2b00      	cmp	r3, #0
 800d558:	d103      	bne.n	800d562 <prvProcessReceivedCommands+0x15e>
                            {
                                vPortFree( pxTimer );
 800d55a:	69b8      	ldr	r0, [r7, #24]
 800d55c:	f000 fb20 	bl	800dba0 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800d560:	e00c      	b.n	800d57c <prvProcessReceivedCommands+0x178>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d568:	f023 0301 	bic.w	r3, r3, #1
 800d56c:	b2da      	uxtb	r2, r3
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800d574:	e002      	b.n	800d57c <prvProcessReceivedCommands+0x178>

                    default:
                        /* Don't expect to get here. */
                        break;
 800d576:	bf00      	nop
 800d578:	e000      	b.n	800d57c <prvProcessReceivedCommands+0x178>
                        break;
 800d57a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d57c:	4b07      	ldr	r3, [pc, #28]	@ (800d59c <prvProcessReceivedCommands+0x198>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	1d39      	adds	r1, r7, #4
 800d582:	2200      	movs	r2, #0
 800d584:	4618      	mov	r0, r3
 800d586:	f7fe f82a 	bl	800b5de <xQueueReceive>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f47f af3d 	bne.w	800d40c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800d592:	bf00      	nop
 800d594:	bf00      	nop
 800d596:	3720      	adds	r7, #32
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	2000131c 	.word	0x2000131c

0800d5a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5a6:	e009      	b.n	800d5bc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d5a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d5e4 <prvSwitchTimerLists+0x44>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800d5b2:	f04f 31ff 	mov.w	r1, #4294967295
 800d5b6:	6838      	ldr	r0, [r7, #0]
 800d5b8:	f7ff fe14 	bl	800d1e4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d5bc:	4b09      	ldr	r3, [pc, #36]	@ (800d5e4 <prvSwitchTimerLists+0x44>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d1f0      	bne.n	800d5a8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800d5c6:	4b07      	ldr	r3, [pc, #28]	@ (800d5e4 <prvSwitchTimerLists+0x44>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800d5cc:	4b06      	ldr	r3, [pc, #24]	@ (800d5e8 <prvSwitchTimerLists+0x48>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a04      	ldr	r2, [pc, #16]	@ (800d5e4 <prvSwitchTimerLists+0x44>)
 800d5d2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800d5d4:	4a04      	ldr	r2, [pc, #16]	@ (800d5e8 <prvSwitchTimerLists+0x48>)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6013      	str	r3, [r2, #0]
    }
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20001314 	.word	0x20001314
 800d5e8:	20001318 	.word	0x20001318

0800d5ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800d5f2:	f000 f88d 	bl	800d710 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800d5f6:	4b15      	ldr	r3, [pc, #84]	@ (800d64c <prvCheckForValidListAndQueue+0x60>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d120      	bne.n	800d640 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 800d5fe:	4814      	ldr	r0, [pc, #80]	@ (800d650 <prvCheckForValidListAndQueue+0x64>)
 800d600:	f7fd fc14 	bl	800ae2c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800d604:	4813      	ldr	r0, [pc, #76]	@ (800d654 <prvCheckForValidListAndQueue+0x68>)
 800d606:	f7fd fc11 	bl	800ae2c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800d60a:	4b13      	ldr	r3, [pc, #76]	@ (800d658 <prvCheckForValidListAndQueue+0x6c>)
 800d60c:	4a10      	ldr	r2, [pc, #64]	@ (800d650 <prvCheckForValidListAndQueue+0x64>)
 800d60e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800d610:	4b12      	ldr	r3, [pc, #72]	@ (800d65c <prvCheckForValidListAndQueue+0x70>)
 800d612:	4a10      	ldr	r2, [pc, #64]	@ (800d654 <prvCheckForValidListAndQueue+0x68>)
 800d614:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d616:	2300      	movs	r3, #0
 800d618:	9300      	str	r3, [sp, #0]
 800d61a:	4b11      	ldr	r3, [pc, #68]	@ (800d660 <prvCheckForValidListAndQueue+0x74>)
 800d61c:	4a11      	ldr	r2, [pc, #68]	@ (800d664 <prvCheckForValidListAndQueue+0x78>)
 800d61e:	2110      	movs	r1, #16
 800d620:	200a      	movs	r0, #10
 800d622:	f7fd fd0c 	bl	800b03e <xQueueGenericCreateStatic>
 800d626:	4603      	mov	r3, r0
 800d628:	4a08      	ldr	r2, [pc, #32]	@ (800d64c <prvCheckForValidListAndQueue+0x60>)
 800d62a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800d62c:	4b07      	ldr	r3, [pc, #28]	@ (800d64c <prvCheckForValidListAndQueue+0x60>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d005      	beq.n	800d640 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d634:	4b05      	ldr	r3, [pc, #20]	@ (800d64c <prvCheckForValidListAndQueue+0x60>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	490b      	ldr	r1, [pc, #44]	@ (800d668 <prvCheckForValidListAndQueue+0x7c>)
 800d63a:	4618      	mov	r0, r3
 800d63c:	f7fe fb36 	bl	800bcac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800d640:	f000 f878 	bl	800d734 <vPortExitCritical>
    }
 800d644:	bf00      	nop
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	2000131c 	.word	0x2000131c
 800d650:	200012ec 	.word	0x200012ec
 800d654:	20001300 	.word	0x20001300
 800d658:	20001314 	.word	0x20001314
 800d65c:	20001318 	.word	0x20001318
 800d660:	200013c8 	.word	0x200013c8
 800d664:	20001328 	.word	0x20001328
 800d668:	0802d848 	.word	0x0802d848

0800d66c <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800d66c:	b480      	push	{r7}
 800d66e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d670:	4b0b      	ldr	r3, [pc, #44]	@ (800d6a0 <vPortSetupTimerInterrupt+0x34>)
 800d672:	2200      	movs	r2, #0
 800d674:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d676:	4b0b      	ldr	r3, [pc, #44]	@ (800d6a4 <vPortSetupTimerInterrupt+0x38>)
 800d678:	2200      	movs	r2, #0
 800d67a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d67c:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a8 <vPortSetupTimerInterrupt+0x3c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a0a      	ldr	r2, [pc, #40]	@ (800d6ac <vPortSetupTimerInterrupt+0x40>)
 800d682:	fba2 2303 	umull	r2, r3, r2, r3
 800d686:	099b      	lsrs	r3, r3, #6
 800d688:	4a09      	ldr	r2, [pc, #36]	@ (800d6b0 <vPortSetupTimerInterrupt+0x44>)
 800d68a:	3b01      	subs	r3, #1
 800d68c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800d68e:	4b04      	ldr	r3, [pc, #16]	@ (800d6a0 <vPortSetupTimerInterrupt+0x34>)
 800d690:	2207      	movs	r2, #7
 800d692:	601a      	str	r2, [r3, #0]
}
 800d694:	bf00      	nop
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	e000e010 	.word	0xe000e010
 800d6a4:	e000e018 	.word	0xe000e018
 800d6a8:	20000004 	.word	0x20000004
 800d6ac:	10624dd3 	.word	0x10624dd3
 800d6b0:	e000e014 	.word	0xe000e014

0800d6b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800d6be:	4b0a      	ldr	r3, [pc, #40]	@ (800d6e8 <prvTaskExitError+0x34>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c6:	d003      	beq.n	800d6d0 <prvTaskExitError+0x1c>
 800d6c8:	f000 f95e 	bl	800d988 <ulSetInterruptMask>
 800d6cc:	bf00      	nop
 800d6ce:	e7fd      	b.n	800d6cc <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 800d6d0:	f000 f95a 	bl	800d988 <ulSetInterruptMask>

    while( ulDummy == 0 )
 800d6d4:	bf00      	nop
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d0fc      	beq.n	800d6d6 <prvTaskExitError+0x22>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800d6dc:	bf00      	nop
 800d6de:	bf00      	nop
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	2000001c 	.word	0x2000001c

0800d6ec <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d6f0:	4b06      	ldr	r3, [pc, #24]	@ (800d70c <vPortYield+0x20>)
 800d6f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6f6:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800d6f8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800d6fc:	f3bf 8f6f 	isb	sy
}
 800d700:	bf00      	nop
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	e000ed04 	.word	0xe000ed04

0800d710 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d710:	b580      	push	{r7, lr}
 800d712:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 800d714:	f000 f938 	bl	800d988 <ulSetInterruptMask>
    ulCriticalNesting++;
 800d718:	4b05      	ldr	r3, [pc, #20]	@ (800d730 <vPortEnterCritical+0x20>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3301      	adds	r3, #1
 800d71e:	4a04      	ldr	r2, [pc, #16]	@ (800d730 <vPortEnterCritical+0x20>)
 800d720:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800d722:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800d726:	f3bf 8f6f 	isb	sy
}
 800d72a:	bf00      	nop
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	2000001c 	.word	0x2000001c

0800d734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d734:	b580      	push	{r7, lr}
 800d736:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 800d738:	4b0a      	ldr	r3, [pc, #40]	@ (800d764 <vPortExitCritical+0x30>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d103      	bne.n	800d748 <vPortExitCritical+0x14>
 800d740:	f000 f922 	bl	800d988 <ulSetInterruptMask>
 800d744:	bf00      	nop
 800d746:	e7fd      	b.n	800d744 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 800d748:	4b06      	ldr	r3, [pc, #24]	@ (800d764 <vPortExitCritical+0x30>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	3b01      	subs	r3, #1
 800d74e:	4a05      	ldr	r2, [pc, #20]	@ (800d764 <vPortExitCritical+0x30>)
 800d750:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 800d752:	4b04      	ldr	r3, [pc, #16]	@ (800d764 <vPortExitCritical+0x30>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d102      	bne.n	800d760 <vPortExitCritical+0x2c>
    {
        portENABLE_INTERRUPTS();
 800d75a:	2000      	movs	r0, #0
 800d75c:	f000 f921 	bl	800d9a2 <vClearInterruptMask>
    }
}
 800d760:	bf00      	nop
 800d762:	bd80      	pop	{r7, pc}
 800d764:	2000001c 	.word	0x2000001c

0800d768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800d76e:	f000 f90b 	bl	800d988 <ulSetInterruptMask>
 800d772:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800d774:	f7fe fea6 	bl	800c4c4 <xTaskIncrementTick>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d003      	beq.n	800d786 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d77e:	4b05      	ldr	r3, [pc, #20]	@ (800d794 <xPortSysTickHandler+0x2c>)
 800d780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d784:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f90b 	bl	800d9a2 <vClearInterruptMask>
}
 800d78c:	bf00      	nop
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	e000ed04 	.word	0xe000ed04

0800d798 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	699b      	ldr	r3, [r3, #24]
 800d7a4:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	3b02      	subs	r3, #2
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800d7ae:	7afb      	ldrb	r3, [r7, #11]
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d102      	bne.n	800d7ba <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 800d7b4:	f000 f8b4 	bl	800d920 <vRestoreContextOfFirstTask>
            break;
 800d7b8:	e003      	b.n	800d7c2 <vPortSVCHandler_C+0x2a>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800d7ba:	f000 f8e5 	bl	800d988 <ulSetInterruptMask>
 800d7be:	bf00      	nop
 800d7c0:	e7fd      	b.n	800d7be <vPortSVCHandler_C+0x26>
    }
}
 800d7c2:	bf00      	nop
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
	...

0800d7cc <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]
 800d7d8:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	3b04      	subs	r3, #4
 800d7de:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d7e6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	3b04      	subs	r3, #4
 800d7ec:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	3b04      	subs	r3, #4
 800d7f8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 800d7fa:	4a38      	ldr	r2, [pc, #224]	@ (800d8dc <pxPortInitialiseStack+0x110>)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	3b04      	subs	r3, #4
 800d804:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f04f 3212 	mov.w	r2, #303174162	@ 0x12121212
 800d80c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	3b04      	subs	r3, #4
 800d812:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f04f 3203 	mov.w	r2, #50529027	@ 0x3030303
 800d81a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	3b04      	subs	r3, #4
 800d820:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
 800d828:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3b04      	subs	r3, #4
 800d82e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	f04f 3201 	mov.w	r2, #16843009	@ 0x1010101
 800d836:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	3b04      	subs	r3, #4
 800d83c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800d83e:	683a      	ldr	r2, [r7, #0]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	3b04      	subs	r3, #4
 800d848:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 800d850:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	3b04      	subs	r3, #4
 800d856:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f04f 3210 	mov.w	r2, #269488144	@ 0x10101010
 800d85e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	3b04      	subs	r3, #4
 800d864:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f04f 3209 	mov.w	r2, #151587081	@ 0x9090909
 800d86c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	3b04      	subs	r3, #4
 800d872:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f04f 3208 	mov.w	r2, #134744072	@ 0x8080808
 800d87a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	3b04      	subs	r3, #4
 800d880:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f04f 3207 	mov.w	r2, #117901063	@ 0x7070707
 800d888:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	3b04      	subs	r3, #4
 800d88e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f04f 3206 	mov.w	r2, #101058054	@ 0x6060606
 800d896:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	3b04      	subs	r3, #4
 800d89c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f04f 3205 	mov.w	r2, #84215045	@ 0x5050505
 800d8a4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3b04      	subs	r3, #4
 800d8aa:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	f04f 3204 	mov.w	r2, #67372036	@ 0x4040404
 800d8b2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	3b04      	subs	r3, #4
 800d8b8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f06f 0243 	mvn.w	r2, #67	@ 0x43
 800d8c0:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	3b04      	subs	r3, #4
 800d8c6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3714      	adds	r7, #20
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	0800d6b5 	.word	0x0800d6b5

0800d8e0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800d8e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d918 <xPortStartScheduler+0x38>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4a0b      	ldr	r2, [pc, #44]	@ (800d918 <xPortStartScheduler+0x38>)
 800d8ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8ee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800d8f0:	4b09      	ldr	r3, [pc, #36]	@ (800d918 <xPortStartScheduler+0x38>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a08      	ldr	r2, [pc, #32]	@ (800d918 <xPortStartScheduler+0x38>)
 800d8f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8fa:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800d8fc:	f7ff feb6 	bl	800d66c <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800d900:	4b06      	ldr	r3, [pc, #24]	@ (800d91c <xPortStartScheduler+0x3c>)
 800d902:	2200      	movs	r2, #0
 800d904:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 800d906:	f000 f82b 	bl	800d960 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 800d90a:	f7fe feeb 	bl	800c6e4 <vTaskSwitchContext>
    prvTaskExitError();
 800d90e:	f7ff fed1 	bl	800d6b4 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800d912:	2300      	movs	r3, #0
}
 800d914:	4618      	mov	r0, r3
 800d916:	bd80      	pop	{r7, pc}
 800d918:	e000ed20 	.word	0xe000ed20
 800d91c:	2000001c 	.word	0x2000001c

0800d920 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800d920:	4a0b      	ldr	r2, [pc, #44]	@ (800d950 <pxCurrentTCBConst2>)
 800d922:	6811      	ldr	r1, [r2, #0]
 800d924:	6808      	ldr	r0, [r1, #0]
 800d926:	c806      	ldmia	r0!, {r1, r2}
 800d928:	f381 880b 	msr	PSPLIM, r1
 800d92c:	2102      	movs	r1, #2
 800d92e:	f381 8814 	msr	CONTROL, r1
 800d932:	3020      	adds	r0, #32
 800d934:	f380 8809 	msr	PSP, r0
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f04f 0000 	mov.w	r0, #0
 800d940:	f380 8811 	msr	BASEPRI, r0
 800d944:	4710      	bx	r2
 800d946:	bf00      	nop
 800d948:	f3af 8000 	nop.w
 800d94c:	f3af 8000 	nop.w

0800d950 <pxCurrentTCBConst2>:
 800d950:	20000dec 	.word	0x20000dec
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 800d954:	bf00      	nop
 800d956:	bf00      	nop
	...

0800d960 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800d960:	4807      	ldr	r0, [pc, #28]	@ (800d980 <xVTORConst>)
 800d962:	6800      	ldr	r0, [r0, #0]
 800d964:	6800      	ldr	r0, [r0, #0]
 800d966:	f380 8808 	msr	MSP, r0
 800d96a:	b662      	cpsie	i
 800d96c:	b661      	cpsie	f
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	df02      	svc	2
 800d978:	bf00      	nop
 800d97a:	bf00      	nop
 800d97c:	f3af 8000 	nop.w

0800d980 <xVTORConst>:
 800d980:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop

0800d988 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800d988:	f3ef 8011 	mrs	r0, BASEPRI
 800d98c:	f04f 0150 	mov.w	r1, #80	@ 0x50
 800d990:	f381 8811 	msr	BASEPRI, r1
 800d994:	f3bf 8f4f 	dsb	sy
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800d99e:	bf00      	nop
 800d9a0:	4618      	mov	r0, r3

0800d9a2 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800d9a2:	f380 8811 	msr	BASEPRI, r0
 800d9a6:	f3bf 8f4f 	dsb	sy
 800d9aa:	f3bf 8f6f 	isb	sy
 800d9ae:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 800d9b0:	bf00      	nop
	...

0800d9c0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800d9c0:	f3ef 8009 	mrs	r0, PSP
 800d9c4:	f3ef 820b 	mrs	r2, PSPLIM
 800d9c8:	4673      	mov	r3, lr
 800d9ca:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d9ce:	4a10      	ldr	r2, [pc, #64]	@ (800da10 <pxCurrentTCBConst>)
 800d9d0:	6811      	ldr	r1, [r2, #0]
 800d9d2:	6008      	str	r0, [r1, #0]
 800d9d4:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d9d8:	f380 8811 	msr	BASEPRI, r0
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	f3bf 8f6f 	isb	sy
 800d9e4:	f7fe fe7e 	bl	800c6e4 <vTaskSwitchContext>
 800d9e8:	f04f 0000 	mov.w	r0, #0
 800d9ec:	f380 8811 	msr	BASEPRI, r0
 800d9f0:	4a07      	ldr	r2, [pc, #28]	@ (800da10 <pxCurrentTCBConst>)
 800d9f2:	6811      	ldr	r1, [r2, #0]
 800d9f4:	6808      	ldr	r0, [r1, #0]
 800d9f6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d9fa:	f382 880b 	msr	PSPLIM, r2
 800d9fe:	f380 8809 	msr	PSP, r0
 800da02:	4718      	bx	r3
 800da04:	f3af 8000 	nop.w
 800da08:	f3af 8000 	nop.w
 800da0c:	f3af 8000 	nop.w

0800da10 <pxCurrentTCBConst>:
 800da10:	20000dec 	.word	0x20000dec
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800da14:	bf00      	nop
 800da16:	bf00      	nop
	...

0800da20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800da20:	f01e 0f04 	tst.w	lr, #4
 800da24:	bf0c      	ite	eq
 800da26:	f3ef 8008 	mrseq	r0, MSP
 800da2a:	f3ef 8009 	mrsne	r0, PSP
 800da2e:	4904      	ldr	r1, [pc, #16]	@ (800da40 <svchandler_address_const>)
 800da30:	4708      	bx	r1
 800da32:	bf00      	nop
 800da34:	f3af 8000 	nop.w
 800da38:	f3af 8000 	nop.w
 800da3c:	f3af 8000 	nop.w

0800da40 <svchandler_address_const>:
 800da40:	0800d799 	.word	0x0800d799
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 800da44:	bf00      	nop
 800da46:	bf00      	nop

0800da48 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800da50:	2300      	movs	r3, #0
 800da52:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800da54:	f7fe fc1e 	bl	800c294 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800da58:	4b4c      	ldr	r3, [pc, #304]	@ (800db8c <pvPortMalloc+0x144>)
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800da60:	f000 f8ec 	bl	800dc3c <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d012      	beq.n	800da90 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800da6a:	2208      	movs	r2, #8
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f003 0307 	and.w	r3, r3, #7
 800da72:	1ad3      	subs	r3, r2, r3
 800da74:	3308      	adds	r3, #8
 800da76:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	43db      	mvns	r3, r3
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	429a      	cmp	r2, r3
 800da80:	d804      	bhi.n	800da8c <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	4413      	add	r3, r2
 800da88:	607b      	str	r3, [r7, #4]
 800da8a:	e001      	b.n	800da90 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	db69      	blt.n	800db6a <pvPortMalloc+0x122>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d066      	beq.n	800db6a <pvPortMalloc+0x122>
 800da9c:	4b3c      	ldr	r3, [pc, #240]	@ (800db90 <pvPortMalloc+0x148>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d861      	bhi.n	800db6a <pvPortMalloc+0x122>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800daa6:	4b3b      	ldr	r3, [pc, #236]	@ (800db94 <pvPortMalloc+0x14c>)
 800daa8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 800daaa:	4b3a      	ldr	r3, [pc, #232]	@ (800db94 <pvPortMalloc+0x14c>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dab0:	e004      	b.n	800dabc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d903      	bls.n	800dace <pvPortMalloc+0x86>
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1f1      	bne.n	800dab2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800dace:	4b2f      	ldr	r3, [pc, #188]	@ (800db8c <pvPortMalloc+0x144>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	69fa      	ldr	r2, [r7, #28]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d048      	beq.n	800db6a <pvPortMalloc+0x122>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dad8:	69bb      	ldr	r3, [r7, #24]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2208      	movs	r2, #8
 800dade:	4413      	add	r3, r2
 800dae0:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	1ad2      	subs	r2, r2, r3
 800daf2:	2308      	movs	r3, #8
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d918      	bls.n	800db2c <pvPortMalloc+0xe4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dafa:	69fa      	ldr	r2, [r7, #28]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4413      	add	r3, r2
 800db00:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f003 0307 	and.w	r3, r3, #7
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d003      	beq.n	800db14 <pvPortMalloc+0xcc>
 800db0c:	f7ff ff3c 	bl	800d988 <ulSetInterruptMask>
 800db10:	bf00      	nop
 800db12:	e7fd      	b.n	800db10 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	685a      	ldr	r2, [r3, #4]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	1ad2      	subs	r2, r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db26:	68f8      	ldr	r0, [r7, #12]
 800db28:	f000 f8e4 	bl	800dcf4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db2c:	4b18      	ldr	r3, [pc, #96]	@ (800db90 <pvPortMalloc+0x148>)
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	1ad3      	subs	r3, r2, r3
 800db36:	4a16      	ldr	r2, [pc, #88]	@ (800db90 <pvPortMalloc+0x148>)
 800db38:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db3a:	4b15      	ldr	r3, [pc, #84]	@ (800db90 <pvPortMalloc+0x148>)
 800db3c:	681a      	ldr	r2, [r3, #0]
 800db3e:	4b16      	ldr	r3, [pc, #88]	@ (800db98 <pvPortMalloc+0x150>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	d203      	bcs.n	800db4e <pvPortMalloc+0x106>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db46:	4b12      	ldr	r3, [pc, #72]	@ (800db90 <pvPortMalloc+0x148>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a13      	ldr	r2, [pc, #76]	@ (800db98 <pvPortMalloc+0x150>)
 800db4c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800db4e:	69fb      	ldr	r3, [r7, #28]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	2200      	movs	r2, #0
 800db5e:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800db60:	4b0e      	ldr	r3, [pc, #56]	@ (800db9c <pvPortMalloc+0x154>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3301      	adds	r3, #1
 800db66:	4a0d      	ldr	r2, [pc, #52]	@ (800db9c <pvPortMalloc+0x154>)
 800db68:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800db6a:	f7fe fba1 	bl	800c2b0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	f003 0307 	and.w	r3, r3, #7
 800db74:	2b00      	cmp	r3, #0
 800db76:	d003      	beq.n	800db80 <pvPortMalloc+0x138>
 800db78:	f7ff ff06 	bl	800d988 <ulSetInterruptMask>
 800db7c:	bf00      	nop
 800db7e:	e7fd      	b.n	800db7c <pvPortMalloc+0x134>
    return pvReturn;
 800db80:	697b      	ldr	r3, [r7, #20]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3720      	adds	r7, #32
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
 800db8a:	bf00      	nop
 800db8c:	2000d770 	.word	0x2000d770
 800db90:	2000d774 	.word	0x2000d774
 800db94:	2000d768 	.word	0x2000d768
 800db98:	2000d778 	.word	0x2000d778
 800db9c:	2000d77c 	.word	0x2000d77c

0800dba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d03b      	beq.n	800dc2a <vPortFree+0x8a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800dbb2:	2308      	movs	r3, #8
 800dbb4:	425b      	negs	r3, r3
 800dbb6:	68fa      	ldr	r2, [r7, #12]
 800dbb8:	4413      	add	r3, r2
 800dbba:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	60bb      	str	r3, [r7, #8]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	db03      	blt.n	800dbd0 <vPortFree+0x30>
 800dbc8:	f7ff fede 	bl	800d988 <ulSetInterruptMask>
 800dbcc:	bf00      	nop
 800dbce:	e7fd      	b.n	800dbcc <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d003      	beq.n	800dbe0 <vPortFree+0x40>
 800dbd8:	f7ff fed6 	bl	800d988 <ulSetInterruptMask>
 800dbdc:	bf00      	nop
 800dbde:	e7fd      	b.n	800dbdc <vPortFree+0x3c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	0fdb      	lsrs	r3, r3, #31
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d01c      	beq.n	800dc2a <vPortFree+0x8a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d118      	bne.n	800dc2a <vPortFree+0x8a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	685b      	ldr	r3, [r3, #4]
 800dbfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800dc04:	f7fe fb46 	bl	800c294 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	4b09      	ldr	r3, [pc, #36]	@ (800dc34 <vPortFree+0x94>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4413      	add	r3, r2
 800dc12:	4a08      	ldr	r2, [pc, #32]	@ (800dc34 <vPortFree+0x94>)
 800dc14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc16:	68b8      	ldr	r0, [r7, #8]
 800dc18:	f000 f86c 	bl	800dcf4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800dc1c:	4b06      	ldr	r3, [pc, #24]	@ (800dc38 <vPortFree+0x98>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3301      	adds	r3, #1
 800dc22:	4a05      	ldr	r2, [pc, #20]	@ (800dc38 <vPortFree+0x98>)
 800dc24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800dc26:	f7fe fb43 	bl	800c2b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800dc2a:	bf00      	nop
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	2000d774 	.word	0x2000d774
 800dc38:	2000d780 	.word	0x2000d780

0800dc3c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc42:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800dc46:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800dc48:	4b25      	ldr	r3, [pc, #148]	@ (800dce0 <prvHeapInit+0xa4>)
 800dc4a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f003 0307 	and.w	r3, r3, #7
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00c      	beq.n	800dc70 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	3307      	adds	r3, #7
 800dc5a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f023 0307 	bic.w	r3, r3, #7
 800dc62:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	1ad3      	subs	r3, r2, r3
 800dc6a:	4a1d      	ldr	r2, [pc, #116]	@ (800dce0 <prvHeapInit+0xa4>)
 800dc6c:	4413      	add	r3, r2
 800dc6e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc74:	4a1b      	ldr	r2, [pc, #108]	@ (800dce4 <prvHeapInit+0xa8>)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800dc7a:	4b1a      	ldr	r3, [pc, #104]	@ (800dce4 <prvHeapInit+0xa8>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	4413      	add	r3, r2
 800dc86:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800dc88:	2208      	movs	r2, #8
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	1a9b      	subs	r3, r3, r2
 800dc8e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f023 0307 	bic.w	r3, r3, #7
 800dc96:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	4a13      	ldr	r2, [pc, #76]	@ (800dce8 <prvHeapInit+0xac>)
 800dc9c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800dc9e:	4b12      	ldr	r3, [pc, #72]	@ (800dce8 <prvHeapInit+0xac>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2200      	movs	r2, #0
 800dca4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800dca6:	4b10      	ldr	r3, [pc, #64]	@ (800dce8 <prvHeapInit+0xac>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	68fa      	ldr	r2, [r7, #12]
 800dcb6:	1ad2      	subs	r2, r2, r3
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800dce8 <prvHeapInit+0xac>)
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	4a08      	ldr	r2, [pc, #32]	@ (800dcec <prvHeapInit+0xb0>)
 800dcca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	4a07      	ldr	r2, [pc, #28]	@ (800dcf0 <prvHeapInit+0xb4>)
 800dcd2:	6013      	str	r3, [r2, #0]
}
 800dcd4:	bf00      	nop
 800dcd6:	3714      	adds	r7, #20
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr
 800dce0:	20001418 	.word	0x20001418
 800dce4:	2000d768 	.word	0x2000d768
 800dce8:	2000d770 	.word	0x2000d770
 800dcec:	2000d778 	.word	0x2000d778
 800dcf0:	2000d774 	.word	0x2000d774

0800dcf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b085      	sub	sp, #20
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcfc:	4b28      	ldr	r3, [pc, #160]	@ (800dda0 <prvInsertBlockIntoFreeList+0xac>)
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	e002      	b.n	800dd08 <prvInsertBlockIntoFreeList+0x14>
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	60fb      	str	r3, [r7, #12]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d8f7      	bhi.n	800dd02 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d108      	bne.n	800dd36 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	685a      	ldr	r2, [r3, #4]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	441a      	add	r2, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	441a      	add	r2, r3
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d118      	bne.n	800dd7c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	4b15      	ldr	r3, [pc, #84]	@ (800dda4 <prvInsertBlockIntoFreeList+0xb0>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d00d      	beq.n	800dd72 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	685a      	ldr	r2, [r3, #4]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	441a      	add	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	601a      	str	r2, [r3, #0]
 800dd70:	e008      	b.n	800dd84 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd72:	4b0c      	ldr	r3, [pc, #48]	@ (800dda4 <prvInsertBlockIntoFreeList+0xb0>)
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	601a      	str	r2, [r3, #0]
 800dd7a:	e003      	b.n	800dd84 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d002      	beq.n	800dd92 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800dd92:	bf00      	nop
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr
 800dd9e:	bf00      	nop
 800dda0:	2000d768 	.word	0x2000d768
 800dda4:	2000d770 	.word	0x2000d770

0800dda8 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	af00      	add	r7, sp, #0
}
 800ddac:	bf00      	nop
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	af00      	add	r7, sp, #0
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800ddba:	f006 f9c3 	bl	8014144 <touchgfx_components_init>
    touchgfx_init();
 800ddbe:	f006 f997 	bl	80140f0 <touchgfx_init>
}
 800ddc2:	bf00      	nop
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b082      	sub	sp, #8
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800ddce:	f006 f9c1 	bl	8014154 <touchgfx_taskEntry>
}
 800ddd2:	bf00      	nop
 800ddd4:	3708      	adds	r7, #8
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}
	...

0800dddc <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
    {
 800dde4:	4a04      	ldr	r2, [pc, #16]	@ (800ddf8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	601a      	str	r2, [r3, #0]
    }
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	0802ee00 	.word	0x0802ee00

0800ddfc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
    }
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f7ff ffe9 	bl	800dddc <_ZN8touchgfx12FontProviderD1Ev>
 800de0a:	2104      	movs	r1, #4
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f01e fc38 	bl	802c682 <_ZdlPvj>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4618      	mov	r0, r3
 800de16:	3708      	adds	r7, #8
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	460b      	mov	r3, r1
 800de26:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800de28:	887b      	ldrh	r3, [r7, #2]
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d010      	beq.n	800de50 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800de2e:	2b02      	cmp	r3, #2
 800de30:	dc13      	bgt.n	800de5a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800de36:	2b01      	cmp	r3, #1
 800de38:	d005      	beq.n	800de46 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800de3a:	e00e      	b.n	800de5a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800de3c:	f004 fef4 	bl	8012c28 <_ZN17TypedTextDatabase8getFontsEv>
 800de40:	4603      	mov	r3, r0
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	e00a      	b.n	800de5c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800de46:	f004 feef 	bl	8012c28 <_ZN17TypedTextDatabase8getFontsEv>
 800de4a:	4603      	mov	r3, r0
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	e005      	b.n	800de5c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800de50:	f004 feea 	bl	8012c28 <_ZN17TypedTextDatabase8getFontsEv>
 800de54:	4603      	mov	r3, r0
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	e000      	b.n	800de5c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800de5a:	2300      	movs	r3, #0
    }
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}

0800de64 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	4a05      	ldr	r2, [pc, #20]	@ (800de84 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	601a      	str	r2, [r3, #0]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	4618      	mov	r0, r3
 800de76:	f7ff ffb1 	bl	800dddc <_ZN8touchgfx12FontProviderD1Ev>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	4618      	mov	r0, r3
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	0802edec 	.word	0x0802edec

0800de88 <_ZN23ApplicationFontProviderD0Ev>:
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7ff ffe7 	bl	800de64 <_ZN23ApplicationFontProviderD1Ev>
 800de96:	2104      	movs	r1, #4
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f01e fbf2 	bl	802c682 <_ZdlPvj>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4618      	mov	r0, r3
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
    {
 800deb0:	4a04      	ldr	r2, [pc, #16]	@ (800dec4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	601a      	str	r2, [r3, #0]
    }
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	0802f4f0 	.word	0x0802f4f0

0800dec8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
    }
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7ff ffe9 	bl	800dea8 <_ZN8touchgfx4FontD1Ev>
 800ded6:	2114      	movs	r1, #20
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f01e fbd2 	bl	802c682 <_ZdlPvj>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800dee8:	b590      	push	{r4, r7, lr}
 800deea:	b087      	sub	sp, #28
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	460b      	mov	r3, r1
 800def2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800def4:	887b      	ldrh	r3, [r7, #2]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d101      	bne.n	800defe <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800defa:	2300      	movs	r3, #0
 800defc:	e010      	b.n	800df20 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	3308      	adds	r3, #8
 800df0c:	681c      	ldr	r4, [r3, #0]
 800df0e:	f107 030f 	add.w	r3, r7, #15
 800df12:	f107 0210 	add.w	r2, r7, #16
 800df16:	8879      	ldrh	r1, [r7, #2]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	47a0      	blx	r4
 800df1c:	6178      	str	r0, [r7, #20]
        return glyph;
 800df1e:	697b      	ldr	r3, [r7, #20]
    }
 800df20:	4618      	mov	r0, r3
 800df22:	371c      	adds	r7, #28
 800df24:	46bd      	mov	sp, r7
 800df26:	bd90      	pop	{r4, r7, pc}

0800df28 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	89db      	ldrh	r3, [r3, #14]
    }
 800df34:	4618      	mov	r0, r3
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800df4c:	4618      	mov	r0, r3
 800df4e:	370c      	adds	r7, #12
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	88db      	ldrh	r3, [r3, #6]
    }
 800df64:	4618      	mov	r0, r3
 800df66:	370c      	adds	r7, #12
 800df68:	46bd      	mov	sp, r7
 800df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6e:	4770      	bx	lr

0800df70 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	889b      	ldrh	r3, [r3, #4]
    }
 800df7c:	4618      	mov	r0, r3
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7a9b      	ldrb	r3, [r3, #10]
 800df94:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800df98:	b2db      	uxtb	r3, r3
    }
 800df9a:	4618      	mov	r0, r3
 800df9c:	370c      	adds	r7, #12
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa4:	4770      	bx	lr

0800dfa6 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800dfa6:	b480      	push	{r7}
 800dfa8:	b083      	sub	sp, #12
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	7a9b      	ldrb	r3, [r3, #10]
 800dfb2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800dfb6:	b2db      	uxtb	r3, r3
    }
 800dfb8:	4618      	mov	r0, r3
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
    /**
     * Returns true if this Font is vector based. Default is false.
     *
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
 800dfc4:	b480      	push	{r7}
 800dfc6:	b083      	sub	sp, #12
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
    {
        return false;
 800dfcc:	2300      	movs	r3, #0
    }
 800dfce:	4618      	mov	r0, r3
 800dfd0:	370c      	adds	r7, #12
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr

0800dfda <_ZNK8touchgfx4Font14getScaleFactorEv>:
    /**
     * Returns the scale factor
     *
     * @return The scale factor
     */
    virtual float getScaleFactor() const
 800dfda:	b480      	push	{r7}
 800dfdc:	b083      	sub	sp, #12
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800dfe2:	f04f 0300 	mov.w	r3, #0
 800dfe6:	ee07 3a90 	vmov	s15, r3
    }
 800dfea:	eeb0 0a67 	vmov.f32	s0, s15
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	4a05      	ldr	r2, [pc, #20]	@ (800e018 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	601a      	str	r2, [r3, #0]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff ff4d 	bl	800dea8 <_ZN8touchgfx4FontD1Ev>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4618      	mov	r0, r3
 800e012:	3708      	adds	r7, #8
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	080304d8 	.word	0x080304d8

0800e01c <_ZN8touchgfx9ConstFontD0Ev>:
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff ffe7 	bl	800dff8 <_ZN8touchgfx9ConstFontD1Ev>
 800e02a:	211c      	movs	r1, #28
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f01e fb28 	bl	802c682 <_ZdlPvj>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	4a05      	ldr	r2, [pc, #20]	@ (800e05c <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff ffd3 	bl	800dff8 <_ZN8touchgfx9ConstFontD1Ev>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4618      	mov	r0, r3
 800e056:	3708      	adds	r7, #8
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	0802ee24 	.word	0x0802ee24

0800e060 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f7ff ffe7 	bl	800e03c <_ZN8touchgfx13GeneratedFontD1Ev>
 800e06e:	212c      	movs	r1, #44	@ 0x2c
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f01e fb06 	bl	802c682 <_ZdlPvj>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4618      	mov	r0, r3
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800e080:	b480      	push	{r7}
 800e082:	b083      	sub	sp, #12
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
    {
 800e088:	4a04      	ldr	r2, [pc, #16]	@ (800e09c <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	601a      	str	r2, [r3, #0]
    }
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4618      	mov	r0, r3
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr
 800e09c:	0802ee14 	.word	0x0802ee14

0800e0a0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
    }
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f7ff ffe9 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
 800e0ae:	2108      	movs	r1, #8
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f01e fae6 	bl	802c682 <_ZdlPvj>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3708      	adds	r7, #8
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800e0c0:	b480      	push	{r7}
 800e0c2:	b083      	sub	sp, #12
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	370c      	adds	r7, #12
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr

0800e0d8 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
#include <fonts/GeneratedFont.hpp>
#include <math.h>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b08e      	sub	sp, #56	@ 0x38
 800e0f4:	af0a      	add	r7, sp, #40	@ 0x28
 800e0f6:	60f8      	str	r0, [r7, #12]
 800e0f8:	60b9      	str	r1, [r7, #8]
 800e0fa:	4611      	mov	r1, r2
 800e0fc:	461a      	mov	r2, r3
 800e0fe:	460b      	mov	r3, r1
 800e100:	80fb      	strh	r3, [r7, #6]
 800e102:	4613      	mov	r3, r2
 800e104:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	88b9      	ldrh	r1, [r7, #4]
 800e10a:	88fa      	ldrh	r2, [r7, #6]
 800e10c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800e110:	9308      	str	r3, [sp, #32]
 800e112:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800e114:	9307      	str	r3, [sp, #28]
 800e116:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800e11a:	9306      	str	r3, [sp, #24]
 800e11c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e120:	9305      	str	r3, [sp, #20]
 800e122:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e126:	9304      	str	r3, [sp, #16]
 800e128:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e12c:	9303      	str	r3, [sp, #12]
 800e12e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e132:	9302      	str	r3, [sp, #8]
 800e134:	7f3b      	ldrb	r3, [r7, #28]
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	8b3b      	ldrh	r3, [r7, #24]
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	460b      	mov	r3, r1
 800e13e:	68b9      	ldr	r1, [r7, #8]
 800e140:	f00d fcd2 	bl	801bae8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800e144:	4a09      	ldr	r2, [pc, #36]	@ (800e16c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e14e:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e154:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e15a:	625a      	str	r2, [r3, #36]	@ 0x24
      arabicTable(formsTable)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e160:	629a      	str	r2, [r3, #40]	@ 0x28
{
}
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	4618      	mov	r0, r3
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	0802ee24 	.word	0x0802ee24

0800e170 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	69db      	ldr	r3, [r3, #28]
 800e17e:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	889b      	ldrh	r3, [r3, #4]
 800e184:	0adb      	lsrs	r3, r3, #11
 800e186:	b29b      	uxth	r3, r3
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	68fa      	ldr	r2, [r7, #12]
 800e18c:	4413      	add	r3, r2
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4413      	add	r3, r2
}
 800e196:	4618      	mov	r0, r3
 800e198:	3714      	adds	r7, #20
 800e19a:	46bd      	mov	sp, r7
 800e19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a0:	4770      	bx	lr

0800e1a2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e1a2:	b480      	push	{r7}
 800e1a4:	b089      	sub	sp, #36	@ 0x24
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	460b      	mov	r3, r1
 800e1ac:	607a      	str	r2, [r7, #4]
 800e1ae:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d003      	beq.n	800e1be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	7b1b      	ldrb	r3, [r3, #12]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d101      	bne.n	800e1c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	e031      	b.n	800e226 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6a1a      	ldr	r2, [r3, #32]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	7b5b      	ldrb	r3, [r3, #13]
 800e1ce:	021b      	lsls	r3, r3, #8
 800e1d0:	b21b      	sxth	r3, r3
 800e1d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e1d6:	b219      	sxth	r1, r3
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	7adb      	ldrb	r3, [r3, #11]
 800e1dc:	b21b      	sxth	r3, r3
 800e1de:	430b      	orrs	r3, r1
 800e1e0:	b21b      	sxth	r3, r3
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	4413      	add	r3, r2
 800e1e8:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	7b1b      	ldrb	r3, [r3, #12]
 800e1ee:	837b      	strh	r3, [r7, #26]
 800e1f0:	e013      	b.n	800e21a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	881b      	ldrh	r3, [r3, #0]
 800e1f6:	897a      	ldrh	r2, [r7, #10]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d103      	bne.n	800e204 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e202:	e010      	b.n	800e226 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	881b      	ldrh	r3, [r3, #0]
 800e208:	897a      	ldrh	r2, [r7, #10]
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d309      	bcc.n	800e222 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e20e:	8b7b      	ldrh	r3, [r7, #26]
 800e210:	3b01      	subs	r3, #1
 800e212:	837b      	strh	r3, [r7, #26]
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	3304      	adds	r3, #4
 800e218:	61fb      	str	r3, [r7, #28]
 800e21a:	8b7b      	ldrh	r3, [r7, #26]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d1e8      	bne.n	800e1f2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 800e220:	e000      	b.n	800e224 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 800e222:	bf00      	nop
        }
    }
    return 0;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3724      	adds	r7, #36	@ 0x24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr
	...

0800e234 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 96, 12, 10, 0, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800e234:	b580      	push	{r7, lr}
 800e236:	af00      	add	r7, sp, #0
 800e238:	4801      	ldr	r0, [pc, #4]	@ (800e240 <__tcf_0+0xc>)
 800e23a:	f7ff feff 	bl	800e03c <_ZN8touchgfx13GeneratedFontD1Ev>
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	2000d784 	.word	0x2000d784

0800e244 <_Z23getFont_verdana_10_4bppv>:
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b08e      	sub	sp, #56	@ 0x38
 800e248:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 96, 12, 10, 0, 0, 4, 1, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800e24a:	4b20      	ldr	r3, [pc, #128]	@ (800e2cc <_Z23getFont_verdana_10_4bppv+0x88>)
 800e24c:	e8d3 3faf 	lda	r3, [r3]
 800e250:	f003 0301 	and.w	r3, r3, #1
 800e254:	2b00      	cmp	r3, #0
 800e256:	bf0c      	ite	eq
 800e258:	2301      	moveq	r3, #1
 800e25a:	2300      	movne	r3, #0
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d030      	beq.n	800e2c4 <_Z23getFont_verdana_10_4bppv+0x80>
 800e262:	481a      	ldr	r0, [pc, #104]	@ (800e2cc <_Z23getFont_verdana_10_4bppv+0x88>)
 800e264:	f01e fa0f 	bl	802c686 <__cxa_guard_acquire>
 800e268:	4603      	mov	r3, r0
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	bf14      	ite	ne
 800e26e:	2301      	movne	r3, #1
 800e270:	2300      	moveq	r3, #0
 800e272:	b2db      	uxtb	r3, r3
 800e274:	2b00      	cmp	r3, #0
 800e276:	d025      	beq.n	800e2c4 <_Z23getFont_verdana_10_4bppv+0x80>
 800e278:	2300      	movs	r3, #0
 800e27a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e27c:	2300      	movs	r3, #0
 800e27e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e280:	2300      	movs	r3, #0
 800e282:	930a      	str	r3, [sp, #40]	@ 0x28
 800e284:	233f      	movs	r3, #63	@ 0x3f
 800e286:	9309      	str	r3, [sp, #36]	@ 0x24
 800e288:	4b11      	ldr	r3, [pc, #68]	@ (800e2d0 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e28a:	9308      	str	r3, [sp, #32]
 800e28c:	4b11      	ldr	r3, [pc, #68]	@ (800e2d4 <_Z23getFont_verdana_10_4bppv+0x90>)
 800e28e:	9307      	str	r3, [sp, #28]
 800e290:	2301      	movs	r3, #1
 800e292:	9306      	str	r3, [sp, #24]
 800e294:	2301      	movs	r3, #1
 800e296:	9305      	str	r3, [sp, #20]
 800e298:	2301      	movs	r3, #1
 800e29a:	9304      	str	r3, [sp, #16]
 800e29c:	2304      	movs	r3, #4
 800e29e:	9303      	str	r3, [sp, #12]
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	9302      	str	r3, [sp, #8]
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	9301      	str	r3, [sp, #4]
 800e2a8:	230a      	movs	r3, #10
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	230c      	movs	r3, #12
 800e2ae:	2260      	movs	r2, #96	@ 0x60
 800e2b0:	4909      	ldr	r1, [pc, #36]	@ (800e2d8 <_Z23getFont_verdana_10_4bppv+0x94>)
 800e2b2:	480a      	ldr	r0, [pc, #40]	@ (800e2dc <_Z23getFont_verdana_10_4bppv+0x98>)
 800e2b4:	f7ff ff1c 	bl	800e0f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e2b8:	4809      	ldr	r0, [pc, #36]	@ (800e2e0 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800e2ba:	f01e fa2d 	bl	802c718 <atexit>
 800e2be:	4803      	ldr	r0, [pc, #12]	@ (800e2cc <_Z23getFont_verdana_10_4bppv+0x88>)
 800e2c0:	f01e f9ed 	bl	802c69e <__cxa_guard_release>
    return verdana_10_4bpp;
 800e2c4:	4b05      	ldr	r3, [pc, #20]	@ (800e2dc <_Z23getFont_verdana_10_4bppv+0x98>)
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	2000d7b0 	.word	0x2000d7b0
 800e2d0:	0803a6c8 	.word	0x0803a6c8
 800e2d4:	0803ab84 	.word	0x0803ab84
 800e2d8:	08039720 	.word	0x08039720
 800e2dc:	2000d784 	.word	0x2000d784
 800e2e0:	0800e235 	.word	0x0800e235

0800e2e4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	4801      	ldr	r0, [pc, #4]	@ (800e2f0 <__tcf_0+0xc>)
 800e2ea:	f7ff fea7 	bl	800e03c <_ZN8touchgfx13GeneratedFontD1Ev>
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	2000d7b4 	.word	0x2000d7b4

0800e2f4 <_Z23getFont_verdana_20_4bppv>:
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b08e      	sub	sp, #56	@ 0x38
 800e2f8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800e2fa:	4b20      	ldr	r3, [pc, #128]	@ (800e37c <_Z23getFont_verdana_20_4bppv+0x88>)
 800e2fc:	e8d3 3faf 	lda	r3, [r3]
 800e300:	f003 0301 	and.w	r3, r3, #1
 800e304:	2b00      	cmp	r3, #0
 800e306:	bf0c      	ite	eq
 800e308:	2301      	moveq	r3, #1
 800e30a:	2300      	movne	r3, #0
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d030      	beq.n	800e374 <_Z23getFont_verdana_20_4bppv+0x80>
 800e312:	481a      	ldr	r0, [pc, #104]	@ (800e37c <_Z23getFont_verdana_20_4bppv+0x88>)
 800e314:	f01e f9b7 	bl	802c686 <__cxa_guard_acquire>
 800e318:	4603      	mov	r3, r0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	bf14      	ite	ne
 800e31e:	2301      	movne	r3, #1
 800e320:	2300      	moveq	r3, #0
 800e322:	b2db      	uxtb	r3, r3
 800e324:	2b00      	cmp	r3, #0
 800e326:	d025      	beq.n	800e374 <_Z23getFont_verdana_20_4bppv+0x80>
 800e328:	2300      	movs	r3, #0
 800e32a:	930c      	str	r3, [sp, #48]	@ 0x30
 800e32c:	2300      	movs	r3, #0
 800e32e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e330:	2300      	movs	r3, #0
 800e332:	930a      	str	r3, [sp, #40]	@ 0x28
 800e334:	233f      	movs	r3, #63	@ 0x3f
 800e336:	9309      	str	r3, [sp, #36]	@ 0x24
 800e338:	4b11      	ldr	r3, [pc, #68]	@ (800e380 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e33a:	9308      	str	r3, [sp, #32]
 800e33c:	4b11      	ldr	r3, [pc, #68]	@ (800e384 <_Z23getFont_verdana_20_4bppv+0x90>)
 800e33e:	9307      	str	r3, [sp, #28]
 800e340:	2301      	movs	r3, #1
 800e342:	9306      	str	r3, [sp, #24]
 800e344:	2301      	movs	r3, #1
 800e346:	9305      	str	r3, [sp, #20]
 800e348:	2301      	movs	r3, #1
 800e34a:	9304      	str	r3, [sp, #16]
 800e34c:	2304      	movs	r3, #4
 800e34e:	9303      	str	r3, [sp, #12]
 800e350:	2300      	movs	r3, #0
 800e352:	9302      	str	r3, [sp, #8]
 800e354:	2300      	movs	r3, #0
 800e356:	9301      	str	r3, [sp, #4]
 800e358:	2314      	movs	r3, #20
 800e35a:	9300      	str	r3, [sp, #0]
 800e35c:	2318      	movs	r3, #24
 800e35e:	225f      	movs	r2, #95	@ 0x5f
 800e360:	4909      	ldr	r1, [pc, #36]	@ (800e388 <_Z23getFont_verdana_20_4bppv+0x94>)
 800e362:	480a      	ldr	r0, [pc, #40]	@ (800e38c <_Z23getFont_verdana_20_4bppv+0x98>)
 800e364:	f7ff fec4 	bl	800e0f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e368:	4809      	ldr	r0, [pc, #36]	@ (800e390 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800e36a:	f01e f9d5 	bl	802c718 <atexit>
 800e36e:	4803      	ldr	r0, [pc, #12]	@ (800e37c <_Z23getFont_verdana_20_4bppv+0x88>)
 800e370:	f01e f995 	bl	802c69e <__cxa_guard_release>
    return verdana_20_4bpp;
 800e374:	4b05      	ldr	r3, [pc, #20]	@ (800e38c <_Z23getFont_verdana_20_4bppv+0x98>)
}
 800e376:	4618      	mov	r0, r3
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	2000d7e0 	.word	0x2000d7e0
 800e380:	0803a6fc 	.word	0x0803a6fc
 800e384:	0803ab88 	.word	0x0803ab88
 800e388:	08039c60 	.word	0x08039c60
 800e38c:	2000d7b4 	.word	0x2000d7b4
 800e390:	0800e2e5 	.word	0x0800e2e5

0800e394 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
 800e398:	4801      	ldr	r0, [pc, #4]	@ (800e3a0 <__tcf_0+0xc>)
 800e39a:	f7ff fe4f 	bl	800e03c <_ZN8touchgfx13GeneratedFontD1Ev>
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	2000d7e4 	.word	0x2000d7e4

0800e3a4 <_Z23getFont_verdana_40_4bppv>:
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b08e      	sub	sp, #56	@ 0x38
 800e3a8:	af0e      	add	r7, sp, #56	@ 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e3aa:	4b20      	ldr	r3, [pc, #128]	@ (800e42c <_Z23getFont_verdana_40_4bppv+0x88>)
 800e3ac:	e8d3 3faf 	lda	r3, [r3]
 800e3b0:	f003 0301 	and.w	r3, r3, #1
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	bf0c      	ite	eq
 800e3b8:	2301      	moveq	r3, #1
 800e3ba:	2300      	movne	r3, #0
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d030      	beq.n	800e424 <_Z23getFont_verdana_40_4bppv+0x80>
 800e3c2:	481a      	ldr	r0, [pc, #104]	@ (800e42c <_Z23getFont_verdana_40_4bppv+0x88>)
 800e3c4:	f01e f95f 	bl	802c686 <__cxa_guard_acquire>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bf14      	ite	ne
 800e3ce:	2301      	movne	r3, #1
 800e3d0:	2300      	moveq	r3, #0
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d025      	beq.n	800e424 <_Z23getFont_verdana_40_4bppv+0x80>
 800e3d8:	2300      	movs	r3, #0
 800e3da:	930c      	str	r3, [sp, #48]	@ 0x30
 800e3dc:	2300      	movs	r3, #0
 800e3de:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e4:	233f      	movs	r3, #63	@ 0x3f
 800e3e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3e8:	4b11      	ldr	r3, [pc, #68]	@ (800e430 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e3ea:	9308      	str	r3, [sp, #32]
 800e3ec:	4b11      	ldr	r3, [pc, #68]	@ (800e434 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e3ee:	9307      	str	r3, [sp, #28]
 800e3f0:	2302      	movs	r3, #2
 800e3f2:	9306      	str	r3, [sp, #24]
 800e3f4:	2302      	movs	r3, #2
 800e3f6:	9305      	str	r3, [sp, #20]
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	9304      	str	r3, [sp, #16]
 800e3fc:	2304      	movs	r3, #4
 800e3fe:	9303      	str	r3, [sp, #12]
 800e400:	2300      	movs	r3, #0
 800e402:	9302      	str	r3, [sp, #8]
 800e404:	2300      	movs	r3, #0
 800e406:	9301      	str	r3, [sp, #4]
 800e408:	2328      	movs	r3, #40	@ 0x28
 800e40a:	9300      	str	r3, [sp, #0]
 800e40c:	2330      	movs	r3, #48	@ 0x30
 800e40e:	225f      	movs	r2, #95	@ 0x5f
 800e410:	4909      	ldr	r1, [pc, #36]	@ (800e438 <_Z23getFont_verdana_40_4bppv+0x94>)
 800e412:	480a      	ldr	r0, [pc, #40]	@ (800e43c <_Z23getFont_verdana_40_4bppv+0x98>)
 800e414:	f7ff fe6c 	bl	800e0f0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e418:	4809      	ldr	r0, [pc, #36]	@ (800e440 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800e41a:	f01e f97d 	bl	802c718 <atexit>
 800e41e:	4803      	ldr	r0, [pc, #12]	@ (800e42c <_Z23getFont_verdana_40_4bppv+0x88>)
 800e420:	f01e f93d 	bl	802c69e <__cxa_guard_release>
    return verdana_40_4bpp;
 800e424:	4b05      	ldr	r3, [pc, #20]	@ (800e43c <_Z23getFont_verdana_40_4bppv+0x98>)
}
 800e426:	4618      	mov	r0, r3
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	2000d810 	.word	0x2000d810
 800e430:	0803a8a0 	.word	0x0803a8a0
 800e434:	0803ab8c 	.word	0x0803ab8c
 800e438:	0803a194 	.word	0x0803a194
 800e43c:	2000d7e4 	.word	0x2000d7e4
 800e440:	0800e395 	.word	0x0800e395

0800e444 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	6039      	str	r1, [r7, #0]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	4618      	mov	r0, r3
 800e452:	370c      	adds	r7, #12
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr

0800e45c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e45c:	b480      	push	{r7}
 800e45e:	b083      	sub	sp, #12
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e466:	bf00      	nop
 800e468:	370c      	adds	r7, #12
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e472:	b480      	push	{r7}
 800e474:	b083      	sub	sp, #12
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e492:	bf00      	nop
 800e494:	370c      	adds	r7, #12
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr

0800e49e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800e49e:	b480      	push	{r7}
 800e4a0:	b083      	sub	sp, #12
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800e4aa:	bf00      	nop
 800e4ac:	370c      	adds	r7, #12
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800e4b6:	b480      	push	{r7}
 800e4b8:	b083      	sub	sp, #12
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
    {
    }
 800e4be:	bf00      	nop
 800e4c0:	370c      	adds	r7, #12
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c8:	4770      	bx	lr

0800e4ca <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800e4ca:	b480      	push	{r7}
 800e4cc:	b083      	sub	sp, #12
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
    {
    }
 800e4d2:	bf00      	nop
 800e4d4:	370c      	adds	r7, #12
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
	...

0800e4e0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
    {
 800e4e8:	4a04      	ldr	r2, [pc, #16]	@ (800e4fc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	601a      	str	r2, [r3, #0]
    }
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr
 800e4fc:	0802efac 	.word	0x0802efac

0800e500 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
    }
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7ff ffe9 	bl	800e4e0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e50e:	2104      	movs	r1, #4
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f01e f8b6 	bl	802c682 <_ZdlPvj>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
    {
    }
 800e528:	bf00      	nop
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800e534:	b480      	push	{r7}
 800e536:	b083      	sub	sp, #12
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	460b      	mov	r3, r1
 800e53e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800e540:	bf00      	nop
 800e542:	370c      	adds	r7, #12
 800e544:	46bd      	mov	sp, r7
 800e546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54a:	4770      	bx	lr

0800e54c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	683a      	ldr	r2, [r7, #0]
 800e55a:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 800e55e:	6810      	ldr	r0, [r2, #0]
 800e560:	6851      	ldr	r1, [r2, #4]
 800e562:	c303      	stmia	r3!, {r0, r1}
    }
 800e564:	bf00      	nop
 800e566:	370c      	adds	r7, #12
 800e568:	46bd      	mov	sp, r7
 800e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56e:	4770      	bx	lr

0800e570 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	3304      	adds	r3, #4
 800e57c:	4618      	mov	r0, r3
 800e57e:	f00c f9b4 	bl	801a8ea <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800e582:	bf00      	nop
 800e584:	3708      	adds	r7, #8
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}
	...

0800e58c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800e58c:	b480      	push	{r7}
 800e58e:	b083      	sub	sp, #12
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
    {
 800e594:	4a04      	ldr	r2, [pc, #16]	@ (800e5a8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	601a      	str	r2, [r3, #0]
    }
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	4618      	mov	r0, r3
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr
 800e5a8:	0802ef94 	.word	0x0802ef94

0800e5ac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
    }
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7ff ffe9 	bl	800e58c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e5ba:	2104      	movs	r1, #4
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f01e f860 	bl	802c682 <_ZdlPvj>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e5cc:	b480      	push	{r7}
 800e5ce:	af00      	add	r7, sp, #0
    {
        return instance;
 800e5d0:	4b03      	ldr	r3, [pc, #12]	@ (800e5e0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e5d2:	681b      	ldr	r3, [r3, #0]
    }
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	20012104 	.word	0x20012104

0800e5e4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e5e4:	b480      	push	{r7}
 800e5e6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e5e8:	4b0b      	ldr	r3, [pc, #44]	@ (800e618 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d008      	beq.n	800e606 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e5f4:	4b08      	ldr	r3, [pc, #32]	@ (800e618 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d003      	beq.n	800e606 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e5fe:	4b06      	ldr	r3, [pc, #24]	@ (800e618 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e604:	e002      	b.n	800e60c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800e606:	4b04      	ldr	r3, [pc, #16]	@ (800e618 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	689b      	ldr	r3, [r3, #8]
    }
 800e60c:	4618      	mov	r0, r3
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr
 800e616:	bf00      	nop
 800e618:	20012104 	.word	0x20012104

0800e61c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e624:	4a07      	ldr	r2, [pc, #28]	@ (800e644 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2200      	movs	r2, #0
 800e62e:	605a      	str	r2, [r3, #4]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	721a      	strb	r2, [r3, #8]
    {
    }
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4618      	mov	r0, r3
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr
 800e644:	0802ef70 	.word	0x0802ef70

0800e648 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
    {
 800e650:	4a04      	ldr	r2, [pc, #16]	@ (800e664 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	601a      	str	r2, [r3, #0]
    }
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	0802ef70 	.word	0x0802ef70

0800e668 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
    }
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f7ff ffe9 	bl	800e648 <_ZN8touchgfx10TransitionD1Ev>
 800e676:	210c      	movs	r1, #12
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f01e f802 	bl	802c682 <_ZdlPvj>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	4618      	mov	r0, r3
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
    {
    }
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
    {
    }
 800e6a4:	bf00      	nop
 800e6a6:	370c      	adds	r7, #12
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ae:	4770      	bx	lr

0800e6b0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e6b0:	b480      	push	{r7}
 800e6b2:	b083      	sub	sp, #12
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
    {
    }
 800e6b8:	bf00      	nop
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e6cc:	f00c f8e8 	bl	801a8a0 <_ZN8touchgfx11Application11getInstanceEv>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	323c      	adds	r2, #60	@ 0x3c
 800e6d6:	6812      	ldr	r2, [r2, #0]
 800e6d8:	4618      	mov	r0, r3
 800e6da:	4790      	blx	r2
    }
 800e6dc:	bf00      	nop
 800e6de:	3708      	adds	r7, #8
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}

0800e6e4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	605a      	str	r2, [r3, #4]
    }
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	4a05      	ldr	r2, [pc, #20]	@ (800e720 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4618      	mov	r0, r3
 800e712:	f7ff fee5 	bl	800e4e0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4618      	mov	r0, r3
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	0803041c 	.word	0x0803041c

0800e724 <_ZN8touchgfx11ApplicationD0Ev>:
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7ff ffe7 	bl	800e700 <_ZN8touchgfx11ApplicationD1Ev>
 800e732:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f01d ffa3 	bl	802c682 <_ZdlPvj>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	4618      	mov	r0, r3
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
	...

0800e748 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4618      	mov	r0, r3
 800e754:	f00c f966 	bl	801aa24 <_ZN8touchgfx11ApplicationC1Ev>
 800e758:	4a09      	ldr	r2, [pc, #36]	@ (800e780 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2200      	movs	r2, #0
 800e762:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
          pendingScreenTransitionCallback(0)
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	2200      	movs	r2, #0
 800e76a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    {
        instance = this;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	4a04      	ldr	r2, [pc, #16]	@ (800e784 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e772:	6013      	str	r3, [r2, #0]
    }
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4618      	mov	r0, r3
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	0802ef1c 	.word	0x0802ef1c
 800e784:	20012158 	.word	0x20012158

0800e788 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e788:	b580      	push	{r7, lr}
 800e78a:	b082      	sub	sp, #8
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 f804 	bl	800e79e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e796:	bf00      	nop
 800e798:	3708      	adds	r7, #8
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}

0800e79e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e79e:	b580      	push	{r7, lr}
 800e7a0:	b082      	sub	sp, #8
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d00f      	beq.n	800e7d0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	330c      	adds	r3, #12
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	4798      	blx	r3
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e000      	b.n	800e7d2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d00e      	beq.n	800e7f4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f8d3 2140 	ldr.w	r2, [r3, #320]	@ 0x140
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3308      	adds	r3, #8
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4610      	mov	r0, r2
 800e7ea:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
        }
    }
 800e7f4:	bf00      	nop
 800e7f6:	3708      	adds	r7, #8
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}

0800e7fc <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e7fc:	b480      	push	{r7}
 800e7fe:	b083      	sub	sp, #12
 800e800:	af00      	add	r7, sp, #0
 800e802:	6078      	str	r0, [r7, #4]
 800e804:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	683a      	ldr	r2, [r7, #0]
 800e80a:	601a      	str	r2, [r3, #0]
    }
 800e80c:	bf00      	nop
 800e80e:	370c      	adds	r7, #12
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e818:	b580      	push	{r7, lr}
 800e81a:	b082      	sub	sp, #8
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	4a05      	ldr	r2, [pc, #20]	@ (800e838 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	601a      	str	r2, [r3, #0]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	f7ff ff69 	bl	800e700 <_ZN8touchgfx11ApplicationD1Ev>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	4618      	mov	r0, r3
 800e832:	3708      	adds	r7, #8
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	0802ef1c 	.word	0x0802ef1c

0800e83c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7ff ffe7 	bl	800e818 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e84a:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f01d ff17 	bl	802c682 <_ZdlPvj>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4618      	mov	r0, r3
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
	...

0800e860 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	4a08      	ldr	r2, [pc, #32]	@ (800e88c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	601a      	str	r2, [r3, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e874:	4618      	mov	r0, r3
 800e876:	f000 fad3 	bl	800ee20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7ff ffcb 	bl	800e818 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4618      	mov	r0, r3
 800e886:	3708      	adds	r7, #8
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	0802eeb0 	.word	0x0802eeb0

0800e890 <_ZN23FrontendApplicationBaseD0Ev>:
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7ff ffe1 	bl	800e860 <_ZN23FrontendApplicationBaseD1Ev>
 800e89e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f01d feed 	bl	802c682 <_ZdlPvj>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f000 f888 	bl	800e9d0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800e8c0:	bf00      	nop
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	721a      	strb	r2, [r3, #8]
    }
 800e8d6:	bf00      	nop
 800e8d8:	370c      	adds	r7, #12
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr

0800e8e2 <_ZN13ModelListener4bindEP5Model>:
    
    virtual ~ModelListener() {}
    virtual void updateTemp(unsigned int val){}
    virtual void updateVolt(unsigned int val){}

    void bind(Model* m)
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	683a      	ldr	r2, [r7, #0]
 800e8f0:	605a      	str	r2, [r3, #4]
    }
 800e8f2:	bf00      	nop
 800e8f4:	370c      	adds	r7, #12
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fc:	4770      	bx	lr
	...

0800e900 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e900:	b580      	push	{r7, lr}
 800e902:	b084      	sub	sp, #16
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	4618      	mov	r0, r3
 800e910:	f7ff ff1a 	bl	800e748 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e914:	4a19      	ldr	r2, [pc, #100]	@ (800e97c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e920:	4618      	mov	r0, r3
 800e922:	f000 f8ab 	bl	800ea7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
      model(m)
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	68ba      	ldr	r2, [r7, #8]
 800e932:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800e936:	f7ff fe49 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 800e93a:	4603      	mov	r3, r0
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	3208      	adds	r2, #8
 800e940:	6812      	ldr	r2, [r2, #0]
 800e942:	2101      	movs	r1, #1
 800e944:	4618      	mov	r0, r3
 800e946:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800e948:	2000      	movs	r0, #0
 800e94a:	f004 f8f5 	bl	8012b38 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e94e:	f7ff fe49 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 800e952:	4603      	mov	r3, r0
 800e954:	4618      	mov	r0, r3
 800e956:	f016 f80e 	bl	8024976 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 800e95a:	f7ff fe43 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 800e95e:	4603      	mov	r3, r0
 800e960:	4618      	mov	r0, r3
 800e962:	f016 f87f 	bl	8024a64 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800e966:	f7ff fe3d 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 800e96a:	4603      	mov	r3, r0
 800e96c:	4618      	mov	r0, r3
 800e96e:	f016 f885 	bl	8024a7c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>
}
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	4618      	mov	r0, r3
 800e976:	3710      	adds	r7, #16
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}
 800e97c:	0802eeb0 	.word	0x0802eeb0

0800e980 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e980:	b480      	push	{r7}
 800e982:	b083      	sub	sp, #12
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	4611      	mov	r1, r2
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7ff ffe9 	bl	800e980 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	685a      	ldr	r2, [r3, #4]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	605a      	str	r2, [r3, #4]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	683a      	ldr	r2, [r7, #0]
 800e9ba:	3308      	adds	r3, #8
 800e9bc:	3208      	adds	r2, #8
 800e9be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9c2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3708      	adds	r7, #8
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800e9d0:	b590      	push	{r4, r7, lr}
 800e9d2:	b089      	sub	sp, #36	@ 0x24
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800e9de:	4b10      	ldr	r3, [pc, #64]	@ (800ea20 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800e9e0:	61bb      	str	r3, [r7, #24]
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	61fb      	str	r3, [r7, #28]
 800e9e6:	f107 0008 	add.w	r0, r7, #8
 800e9ea:	f107 0318 	add.w	r3, r7, #24
 800e9ee:	cb0c      	ldmia	r3, {r2, r3}
 800e9f0:	6879      	ldr	r1, [r7, #4]
 800e9f2:	f000 f85f 	bl	800eab4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e9f6:	f107 0308 	add.w	r3, r7, #8
 800e9fa:	4619      	mov	r1, r3
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f7ff ffcb 	bl	800e998 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ea02:	f107 0308 	add.w	r3, r7, #8
 800ea06:	4618      	mov	r0, r3
 800ea08:	f000 fa0a 	bl	800ee20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f503 72a2 	add.w	r2, r3, #324	@ 0x144
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
}
 800ea18:	bf00      	nop
 800ea1a:	3724      	adds	r7, #36	@ 0x24
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd90      	pop	{r4, r7, pc}
 800ea20:	0800ea25 	.word	0x0800ea25

0800ea24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af02      	add	r7, sp, #8
 800ea2a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	f503 719e 	add.w	r1, r3, #316	@ 0x13c
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800ea38:	461a      	mov	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	4b04      	ldr	r3, [pc, #16]	@ (800ea54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800ea44:	4804      	ldr	r0, [pc, #16]	@ (800ea58 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800ea46:	f000 f867 	bl	800eb18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	2001214c 	.word	0x2001214c
 800ea58:	20012148 	.word	0x20012148

0800ea5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	4a04      	ldr	r2, [pc, #16]	@ (800ea78 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	601a      	str	r2, [r3, #0]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	370c      	adds	r7, #12
 800ea70:	46bd      	mov	sp, r7
 800ea72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea76:	4770      	bx	lr
 800ea78:	0802ef94 	.word	0x0802ef94

0800ea7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7ff ffe8 	bl	800ea5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800ea8c:	4a08      	ldr	r2, [pc, #32]	@ (800eab0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	601a      	str	r2, [r3, #0]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2200      	movs	r2, #0
 800ea96:	605a      	str	r2, [r3, #4]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	609a      	str	r2, [r3, #8]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	60da      	str	r2, [r3, #12]
    {
    }
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	0802ef04 	.word	0x0802ef04

0800eab4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b084      	sub	sp, #16
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	4639      	mov	r1, r7
 800eac0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	4618      	mov	r0, r3
 800eac8:	f7ff ffc8 	bl	800ea5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800eacc:	4a08      	ldr	r2, [pc, #32]	@ (800eaf0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	605a      	str	r2, [r3, #4]
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	3308      	adds	r3, #8
 800eadc:	463a      	mov	r2, r7
 800eade:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eae2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	4618      	mov	r0, r3
 800eaea:	3710      	adds	r7, #16
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	0802ef04 	.word	0x0802ef04

0800eaf4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7ff fd8c 	bl	800e61c <_ZN8touchgfx10TransitionC1Ev>
 800eb04:	4a03      	ldr	r2, [pc, #12]	@ (800eb14 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	601a      	str	r2, [r3, #0]
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3708      	adds	r7, #8
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	0802ee8c 	.word	0x0802ee8c

0800eb18 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800eb18:	b590      	push	{r4, r7, lr}
 800eb1a:	b08f      	sub	sp, #60	@ 0x3c
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	689a      	ldr	r2, [r3, #8]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	3320      	adds	r3, #32
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4610      	mov	r0, r2
 800eb36:	4798      	blx	r3
 800eb38:	4603      	mov	r3, r0
 800eb3a:	f241 5293 	movw	r2, #5523	@ 0x1593
 800eb3e:	4293      	cmp	r3, r2
 800eb40:	d805      	bhi.n	800eb4e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800eb42:	4b7d      	ldr	r3, [pc, #500]	@ (800ed38 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800eb44:	4a7d      	ldr	r2, [pc, #500]	@ (800ed3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800eb46:	21a3      	movs	r1, #163	@ 0xa3
 800eb48:	487d      	ldr	r0, [pc, #500]	@ (800ed40 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800eb4a:	f01d fdc7 	bl	802c6dc <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	685a      	ldr	r2, [r3, #4]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	3320      	adds	r3, #32
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4610      	mov	r0, r2
 800eb5e:	4798      	blx	r3
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b0f      	cmp	r3, #15
 800eb64:	d805      	bhi.n	800eb72 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 800eb66:	4b77      	ldr	r3, [pc, #476]	@ (800ed44 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800eb68:	4a74      	ldr	r2, [pc, #464]	@ (800ed3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800eb6a:	21a4      	movs	r1, #164	@ 0xa4
 800eb6c:	4874      	ldr	r0, [pc, #464]	@ (800ed40 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800eb6e:	f01d fdb5 	bl	802c6dc <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	68da      	ldr	r2, [r3, #12]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	3320      	adds	r3, #32
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4610      	mov	r0, r2
 800eb82:	4798      	blx	r3
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b0b      	cmp	r3, #11
 800eb88:	d805      	bhi.n	800eb96 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800eb8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ed48 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800eb8c:	4a6b      	ldr	r2, [pc, #428]	@ (800ed3c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800eb8e:	21a5      	movs	r1, #165	@ 0xa5
 800eb90:	486b      	ldr	r0, [pc, #428]	@ (800ed40 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800eb92:	f01d fda3 	bl	802c6dc <__assert_func>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800eba2:	f00b fe7d 	bl	801a8a0 <_ZN8touchgfx11Application11getInstanceEv>
 800eba6:	4603      	mov	r3, r0
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7ff fce1 	bl	800e570 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800ebae:	6a3b      	ldr	r3, [r7, #32]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d008      	beq.n	800ebc8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb0>
        (*currentTrans)->tearDown();
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	6a3b      	ldr	r3, [r7, #32]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	330c      	adds	r3, #12
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4610      	mov	r0, r2
 800ebc6:	4798      	blx	r3
    if (*currentTrans)
 800ebc8:	6a3b      	ldr	r3, [r7, #32]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d007      	beq.n	800ebe0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc8>
        (*currentTrans)->~Transition();
 800ebd0:	6a3b      	ldr	r3, [r7, #32]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	6a3b      	ldr	r3, [r7, #32]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4610      	mov	r0, r2
 800ebde:	4798      	blx	r3
    if (*currentScreen)
 800ebe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d008      	beq.n	800ebfa <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
        (*currentScreen)->tearDownScreen();
 800ebe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	3314      	adds	r3, #20
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	4610      	mov	r0, r2
 800ebf8:	4798      	blx	r3
    if (*currentPresenter)
 800ebfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d008      	beq.n	800ec14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfc>
        (*currentPresenter)->deactivate();
 800ec02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	4610      	mov	r0, r2
 800ec12:	4798      	blx	r3
    if (*currentScreen)
 800ec14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d007      	beq.n	800ec2c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x114>
        (*currentScreen)->~Screen();
 800ec1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4610      	mov	r0, r2
 800ec2a:	4798      	blx	r3
    if (*currentPresenter)
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d008      	beq.n	800ec46 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
        (*currentPresenter)->~Presenter();
 800ec34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	3308      	adds	r3, #8
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4610      	mov	r0, r2
 800ec44:	4798      	blx	r3
}
 800ec46:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 f87c 	bl	800ed4c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800ec54:	4603      	mov	r3, r0
 800ec56:	4619      	mov	r1, r3
 800ec58:	200c      	movs	r0, #12
 800ec5a:	f7ff fbf3 	bl	800e444 <_ZnwjPv>
 800ec5e:	4604      	mov	r4, r0
 800ec60:	4620      	mov	r0, r4
 800ec62:	f7ff ff47 	bl	800eaf4 <_ZN8touchgfx12NoTransitionC1Ev>
 800ec66:	637c      	str	r4, [r7, #52]	@ 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	689b      	ldr	r3, [r3, #8]
 800ec6c:	2100      	movs	r1, #0
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f000 f87f 	bl	800ed72 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800ec74:	4603      	mov	r3, r0
 800ec76:	4619      	mov	r1, r3
 800ec78:	f241 5094 	movw	r0, #5524	@ 0x1594
 800ec7c:	f7ff fbe2 	bl	800e444 <_ZnwjPv>
 800ec80:	4604      	mov	r4, r0
 800ec82:	4620      	mov	r0, r4
 800ec84:	f004 f9d6 	bl	8013034 <_ZN11Screen1ViewC1Ev>
 800ec88:	633c      	str	r4, [r7, #48]	@ 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	2100      	movs	r1, #0
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 f881 	bl	800ed98 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800ec96:	4603      	mov	r3, r0
 800ec98:	4619      	mov	r1, r3
 800ec9a:	2010      	movs	r0, #16
 800ec9c:	f7ff fbd2 	bl	800e444 <_ZnwjPv>
 800eca0:	4604      	mov	r4, r0
 800eca2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800eca4:	4620      	mov	r0, r4
 800eca6:	f004 f93f 	bl	8012f28 <_ZN16Screen1PresenterC1ER11Screen1View>
 800ecaa:	62fc      	str	r4, [r7, #44]	@ 0x2c
    *currentTrans = newTransition;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ecb0:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecb6:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecbc:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800ecbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d002      	beq.n	800ecca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800ecc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc6:	3304      	adds	r3, #4
 800ecc8:	e000      	b.n	800eccc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800ecca:	2300      	movs	r3, #0
 800eccc:	4619      	mov	r1, r3
 800ecce:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800ecd0:	f7ff fd94 	bl	800e7fc <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800ecd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd6:	3304      	adds	r3, #4
 800ecd8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7ff fe01 	bl	800e8e2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800ece0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ece4:	4618      	mov	r0, r3
 800ece6:	f000 f86a 	bl	800edbe <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800ecea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecec:	61fb      	str	r3, [r7, #28]
 800ecee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf0:	61bb      	str	r3, [r7, #24]
 800ecf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800ecf6:	69fb      	ldr	r3, [r7, #28]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	330c      	adds	r3, #12
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	69f8      	ldr	r0, [r7, #28]
 800ed00:	4798      	blx	r3
    newPresenter->activate();
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	69b8      	ldr	r0, [r7, #24]
 800ed0a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800ed0c:	6979      	ldr	r1, [r7, #20]
 800ed0e:	69f8      	ldr	r0, [r7, #28]
 800ed10:	f00d fb56 	bl	801c3c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	3310      	adds	r3, #16
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6978      	ldr	r0, [r7, #20]
 800ed1e:	4798      	blx	r3
    newTransition->invalidate();
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3314      	adds	r3, #20
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6978      	ldr	r0, [r7, #20]
 800ed2a:	4798      	blx	r3
}
 800ed2c:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800ed2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	373c      	adds	r7, #60	@ 0x3c
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd90      	pop	{r4, r7, pc}
 800ed38:	0802d850 	.word	0x0802d850
 800ed3c:	0802d8e0 	.word	0x0802d8e0
 800ed40:	0802d9b4 	.word	0x0802d9b4
 800ed44:	0802d9f8 	.word	0x0802d9f8
 800ed48:	0802da9c 	.word	0x0802da9c

0800ed4c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	460b      	mov	r3, r1
 800ed56:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3324      	adds	r3, #36	@ 0x24
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	887a      	ldrh	r2, [r7, #2]
 800ed62:	4611      	mov	r1, r2
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	4798      	blx	r3
 800ed68:	4603      	mov	r3, r0
    }
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3708      	adds	r7, #8
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}

0800ed72 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800ed72:	b580      	push	{r7, lr}
 800ed74:	b082      	sub	sp, #8
 800ed76:	af00      	add	r7, sp, #0
 800ed78:	6078      	str	r0, [r7, #4]
 800ed7a:	460b      	mov	r3, r1
 800ed7c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	3324      	adds	r3, #36	@ 0x24
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	887a      	ldrh	r2, [r7, #2]
 800ed88:	4611      	mov	r1, r2
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	4798      	blx	r3
 800ed8e:	4603      	mov	r3, r0
    }
 800ed90:	4618      	mov	r0, r3
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	460b      	mov	r3, r1
 800eda2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	3324      	adds	r3, #36	@ 0x24
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	887a      	ldrh	r2, [r7, #2]
 800edae:	4611      	mov	r1, r2
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	4798      	blx	r3
 800edb4:	4603      	mov	r3, r0
    }
 800edb6:	4618      	mov	r0, r3
 800edb8:	3708      	adds	r7, #8
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800edbe:	b480      	push	{r7}
 800edc0:	b083      	sub	sp, #12
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
 800edc6:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	683a      	ldr	r2, [r7, #0]
 800edcc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 800edce:	bf00      	nop
 800edd0:	370c      	adds	r7, #12
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
	...

0800eddc <_ZN8touchgfx12NoTransitionD1Ev>:
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	4a05      	ldr	r2, [pc, #20]	@ (800edfc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	601a      	str	r2, [r3, #0]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	4618      	mov	r0, r3
 800edee:	f7ff fc2b 	bl	800e648 <_ZN8touchgfx10TransitionD1Ev>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	0802ee8c 	.word	0x0802ee8c

0800ee00 <_ZN8touchgfx12NoTransitionD0Ev>:
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7ff ffe7 	bl	800eddc <_ZN8touchgfx12NoTransitionD1Ev>
 800ee0e:	210c      	movs	r1, #12
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f01d fc36 	bl	802c682 <_ZdlPvj>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	4a05      	ldr	r2, [pc, #20]	@ (800ee40 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	601a      	str	r2, [r3, #0]
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff fbab 	bl	800e58c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	0802ef04 	.word	0x0802ef04

0800ee44 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7ff ffe7 	bl	800ee20 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800ee52:	2110      	movs	r1, #16
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f01d fc14 	bl	802c682 <_ZdlPvj>
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	68d2      	ldr	r2, [r2, #12]
 800ee74:	1052      	asrs	r2, r2, #1
 800ee76:	1899      	adds	r1, r3, r2
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	f003 0301 	and.w	r3, r3, #1
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d102      	bne.n	800ee8a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	e00a      	b.n	800eea0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	68d2      	ldr	r2, [r2, #12]
 800ee92:	1052      	asrs	r2, r2, #1
 800ee94:	4413      	add	r3, r2
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	687a      	ldr	r2, [r7, #4]
 800ee9a:	6892      	ldr	r2, [r2, #8]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4608      	mov	r0, r1
 800eea2:	4798      	blx	r3
    }
 800eea4:	bf00      	nop
 800eea6:	3708      	adds	r7, #8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}

0800eeac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d010      	beq.n	800eede <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d107      	bne.n	800eed4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	f003 0301 	and.w	r3, r3, #1
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d101      	bne.n	800eed4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800eed0:	2301      	movs	r3, #1
 800eed2:	e000      	b.n	800eed6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800eed4:	2300      	movs	r3, #0
 800eed6:	2b01      	cmp	r3, #1
 800eed8:	d001      	beq.n	800eede <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800eeda:	2301      	movs	r3, #1
 800eedc:	e000      	b.n	800eee0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800eede:	2300      	movs	r3, #0
    }
 800eee0:	4618      	mov	r0, r3
 800eee2:	370c      	adds	r7, #12
 800eee4:	46bd      	mov	sp, r7
 800eee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeea:	4770      	bx	lr

0800eeec <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
        : color(0)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2200      	movs	r2, #0
 800eef8:	601a      	str	r2, [r3, #0]
    {
    }
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800ef08:	b480      	push	{r7}
 800ef0a:	b083      	sub	sp, #12
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
        : color(col)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	601a      	str	r2, [r3, #0]
    {
    }
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	370c      	adds	r7, #12
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr

0800ef26 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 800ef26:	b480      	push	{r7}
 800ef28:	b083      	sub	sp, #12
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
    {
        return color;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
    }
 800ef32:	4618      	mov	r0, r3
 800ef34:	370c      	adds	r7, #12
 800ef36:	46bd      	mov	sp, r7
 800ef38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3c:	4770      	bx	lr

0800ef3e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800ef3e:	b480      	push	{r7}
 800ef40:	b083      	sub	sp, #12
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	801a      	strh	r2, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	805a      	strh	r2, [r3, #2]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	809a      	strh	r2, [r3, #4]
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	80da      	strh	r2, [r3, #6]
    {
    }
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4618      	mov	r0, r3
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800ef6c:	b480      	push	{r7}
 800ef6e:	b085      	sub	sp, #20
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	4608      	mov	r0, r1
 800ef76:	4611      	mov	r1, r2
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	817b      	strh	r3, [r7, #10]
 800ef7e:	460b      	mov	r3, r1
 800ef80:	813b      	strh	r3, [r7, #8]
 800ef82:	4613      	mov	r3, r2
 800ef84:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	897a      	ldrh	r2, [r7, #10]
 800ef8a:	801a      	strh	r2, [r3, #0]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	893a      	ldrh	r2, [r7, #8]
 800ef90:	805a      	strh	r2, [r3, #2]
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	88fa      	ldrh	r2, [r7, #6]
 800ef96:	809a      	strh	r2, [r3, #4]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	8b3a      	ldrh	r2, [r7, #24]
 800ef9c:	80da      	strh	r2, [r3, #6]
    {
    }
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	4618      	mov	r0, r3
 800efa2:	3714      	adds	r7, #20
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr

0800efac <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800efb4:	4a14      	ldr	r2, [pc, #80]	@ (800f008 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	601a      	str	r2, [r3, #0]
        : rect(),
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	3304      	adds	r3, #4
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7ff ffbd 	bl	800ef3e <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	330c      	adds	r3, #12
 800efc8:	4618      	mov	r0, r3
 800efca:	f7ff ffb8 	bl	800ef3e <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2200      	movs	r2, #0
 800efd8:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	845a      	strh	r2, [r3, #34]	@ 0x22
          touchable(false),
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2200      	movs	r2, #0
 800eff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          visible(true)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    {
    }
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	4618      	mov	r0, r3
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	08030470 	.word	0x08030470

0800f00c <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800f00c:	b480      	push	{r7}
 800f00e:	b083      	sub	sp, #12
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
    {
 800f014:	4a04      	ldr	r2, [pc, #16]	@ (800f028 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	601a      	str	r2, [r3, #0]
    }
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	4618      	mov	r0, r3
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	08030470 	.word	0x08030470

0800f02c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
    }
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7ff ffe9 	bl	800f00c <_ZN8touchgfx8DrawableD1Ev>
 800f03a:	2128      	movs	r1, #40	@ 0x28
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f01d fb20 	bl	802c682 <_ZdlPvj>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4618      	mov	r0, r3
 800f046:	3708      	adds	r7, #8
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b082      	sub	sp, #8
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d005      	beq.n	800f06a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	3314      	adds	r3, #20
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	4798      	blx	r3
        }
    }
 800f06a:	bf00      	nop
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}

0800f072 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800f072:	b480      	push	{r7}
 800f074:	b083      	sub	sp, #12
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f07a:	2300      	movs	r3, #0
    }
 800f07c:	4618      	mov	r0, r3
 800f07e:	370c      	adds	r7, #12
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	60f8      	str	r0, [r7, #12]
 800f090:	4608      	mov	r0, r1
 800f092:	4611      	mov	r1, r2
 800f094:	461a      	mov	r2, r3
 800f096:	4603      	mov	r3, r0
 800f098:	817b      	strh	r3, [r7, #10]
 800f09a:	460b      	mov	r3, r1
 800f09c:	813b      	strh	r3, [r7, #8]
 800f09e:	4613      	mov	r3, r2
 800f0a0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800f0a2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f0a6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f000 f844 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800f0b2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f0b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	f000 f898 	bl	800f1f2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800f0c2:	bf00      	nop
 800f0c4:	3710      	adds	r7, #16
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <_ZNK8touchgfx8Drawable8getWidthEv>:
    /**
     * Gets the width of this Drawable.
     *
     * @return The width of this Drawable.
     */
    int16_t getWidth() const
 800f0ca:	b480      	push	{r7}
 800f0cc:	b083      	sub	sp, #12
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
    {
        return rect.width;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800f0d8:	4618      	mov	r0, r3
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <_ZNK8touchgfx8Drawable9getHeightEv>:
    /**
     * Gets the height of this Drawable.
     *
     * @return The height of this Drawable.
     */
    int16_t getHeight() const
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
    {
        return rect.height;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800f0fe:	b480      	push	{r7}
 800f100:	b083      	sub	sp, #12
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	460b      	mov	r3, r1
 800f108:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	887a      	ldrh	r2, [r7, #2]
 800f10e:	809a      	strh	r2, [r3, #4]
    }
 800f110:	bf00      	nop
 800f112:	370c      	adds	r7, #12
 800f114:	46bd      	mov	sp, r7
 800f116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f11a:	4770      	bx	lr

0800f11c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800f11c:	b480      	push	{r7}
 800f11e:	b083      	sub	sp, #12
 800f120:	af00      	add	r7, sp, #0
 800f122:	6078      	str	r0, [r7, #4]
 800f124:	460b      	mov	r3, r1
 800f126:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	887a      	ldrh	r2, [r7, #2]
 800f12c:	80da      	strh	r2, [r3, #6]
    }
 800f12e:	bf00      	nop
 800f130:	370c      	adds	r7, #12
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr

0800f13a <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800f13a:	b580      	push	{r7, lr}
 800f13c:	b082      	sub	sp, #8
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]
 800f142:	460b      	mov	r3, r1
 800f144:	807b      	strh	r3, [r7, #2]
 800f146:	4613      	mov	r3, r2
 800f148:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	3330      	adds	r3, #48	@ 0x30
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f156:	4611      	mov	r1, r2
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	4798      	blx	r3
        setY(y);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	3334      	adds	r3, #52	@ 0x34
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f168:	4611      	mov	r1, r2
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	4798      	blx	r3
    }
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}

0800f176 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800f176:	b480      	push	{r7}
 800f178:	b083      	sub	sp, #12
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
 800f17e:	460b      	mov	r3, r1
 800f180:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	887a      	ldrh	r2, [r7, #2]
 800f186:	811a      	strh	r2, [r3, #8]
    }
 800f188:	bf00      	nop
 800f18a:	370c      	adds	r7, #12
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	460b      	mov	r3, r1
 800f19e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	887a      	ldrh	r2, [r7, #2]
 800f1a4:	815a      	strh	r2, [r3, #10]
    }
 800f1a6:	bf00      	nop
 800f1a8:	370c      	adds	r7, #12
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b0:	4770      	bx	lr

0800f1b2 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800f1b2:	b480      	push	{r7}
 800f1b4:	b083      	sub	sp, #12
 800f1b6:	af00      	add	r7, sp, #0
 800f1b8:	6078      	str	r0, [r7, #4]
    {
    }
 800f1ba:	bf00      	nop
 800f1bc:	370c      	adds	r7, #12
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c4:	4770      	bx	lr

0800f1c6 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f1c6:	b480      	push	{r7}
 800f1c8:	b083      	sub	sp, #12
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	6078      	str	r0, [r7, #4]
 800f1ce:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f1d0:	bf00      	nop
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f1e6:	bf00      	nop
 800f1e8:	370c      	adds	r7, #12
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800f1f2:	b580      	push	{r7, lr}
 800f1f4:	b082      	sub	sp, #8
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	6078      	str	r0, [r7, #4]
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	807b      	strh	r3, [r7, #2]
 800f1fe:	4613      	mov	r3, r2
 800f200:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	3338      	adds	r3, #56	@ 0x38
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f20e:	4611      	mov	r1, r2
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	4798      	blx	r3
        setHeight(height);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	333c      	adds	r3, #60	@ 0x3c
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f220:	4611      	mov	r1, r2
 800f222:	6878      	ldr	r0, [r7, #4]
 800f224:	4798      	blx	r3
    }
 800f226:	bf00      	nop
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f22e:	b480      	push	{r7}
 800f230:	b083      	sub	sp, #12
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
 800f236:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f238:	bf00      	nop
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
    {
    }
 800f24c:	bf00      	nop
 800f24e:	370c      	adds	r7, #12
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr

0800f258 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
    }
 800f266:	4618      	mov	r0, r3
 800f268:	370c      	adds	r7, #12
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr

0800f272 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800f272:	b480      	push	{r7}
 800f274:	b083      	sub	sp, #12
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
    }
 800f280:	4618      	mov	r0, r3
 800f282:	370c      	adds	r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	460b      	mov	r3, r1
 800f296:	807b      	strh	r3, [r7, #2]
 800f298:	4613      	mov	r3, r2
 800f29a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	3354      	adds	r3, #84	@ 0x54
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	8879      	ldrh	r1, [r7, #2]
 800f2a6:	687a      	ldr	r2, [r7, #4]
 800f2a8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f2ac:	b292      	uxth	r2, r2
 800f2ae:	1a8a      	subs	r2, r1, r2
 800f2b0:	b292      	uxth	r2, r2
 800f2b2:	b210      	sxth	r0, r2
 800f2b4:	8839      	ldrh	r1, [r7, #0]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f2bc:	b292      	uxth	r2, r2
 800f2be:	1a8a      	subs	r2, r1, r2
 800f2c0:	b292      	uxth	r2, r2
 800f2c2:	b212      	sxth	r2, r2
 800f2c4:	4601      	mov	r1, r0
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	4798      	blx	r3
    }
 800f2ca:	bf00      	nop
 800f2cc:	3708      	adds	r7, #8
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}

0800f2d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f2d2:	b480      	push	{r7}
 800f2d4:	b083      	sub	sp, #12
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2e0:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2e8:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f2f0:	845a      	strh	r2, [r3, #34]	@ 0x22
    }
 800f2f2:	bf00      	nop
 800f2f4:	370c      	adds	r7, #12
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fc:	4770      	bx	lr

0800f2fe <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f2fe:	b580      	push	{r7, lr}
 800f300:	b084      	sub	sp, #16
 800f302:	af00      	add	r7, sp, #0
 800f304:	60f8      	str	r0, [r7, #12]
 800f306:	60b9      	str	r1, [r7, #8]
 800f308:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800f30a:	68f8      	ldr	r0, [r7, #12]
 800f30c:	f7ff ffe1 	bl	800f2d2 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681a      	ldr	r2, [r3, #0]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	601a      	str	r2, [r3, #0]
    }
 800f31e:	bf00      	nop
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800f326:	b580      	push	{r7, lr}
 800f328:	b084      	sub	sp, #16
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	60f8      	str	r0, [r7, #12]
 800f32e:	607b      	str	r3, [r7, #4]
 800f330:	460b      	mov	r3, r1
 800f332:	817b      	strh	r3, [r7, #10]
 800f334:	4613      	mov	r3, r2
 800f336:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7ff ff8c 	bl	800f258 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f340:	4603      	mov	r3, r0
 800f342:	2b00      	cmp	r3, #0
 800f344:	d008      	beq.n	800f358 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	4618      	mov	r0, r3
 800f34a:	f7ff ff92 	bl	800f272 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d001      	beq.n	800f358 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f354:	2301      	movs	r3, #1
 800f356:	e000      	b.n	800f35a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f358:	2300      	movs	r3, #0
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d002      	beq.n	800f364 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	601a      	str	r2, [r3, #0]
        }
    }
 800f364:	bf00      	nop
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    }
 800f378:	4618      	mov	r0, r3
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    }
 800f390:	4618      	mov	r0, r3
 800f392:	370c      	adds	r7, #12
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b082      	sub	sp, #8
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
    {
 800f3a4:	4a06      	ldr	r2, [pc, #24]	@ (800f3c0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	601a      	str	r2, [r3, #0]
    }
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	3304      	adds	r3, #4
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f001 f8da 	bl	8010568 <_ZN8touchgfx9ContainerD1Ev>
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3708      	adds	r7, #8
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	0803057c 	.word	0x0803057c

0800f3c4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
    }
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f7ff ffe5 	bl	800f39c <_ZN8touchgfx6ScreenD1Ev>
 800f3d2:	213c      	movs	r1, #60	@ 0x3c
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f01d f954 	bl	802c682 <_ZdlPvj>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}

0800f3e4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
    {
    }
 800f3ec:	bf00      	nop
 800f3ee:	370c      	adds	r7, #12
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f6:	4770      	bx	lr

0800f3f8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f3f8:	b480      	push	{r7}
 800f3fa:	b083      	sub	sp, #12
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
    {
    }
 800f400:	bf00      	nop
 800f402:	370c      	adds	r7, #12
 800f404:	46bd      	mov	sp, r7
 800f406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40a:	4770      	bx	lr

0800f40c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
    {
    }
 800f414:	bf00      	nop
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
    {
    }
 800f428:	bf00      	nop
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	460b      	mov	r3, r1
 800f43e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800f440:	bf00      	nop
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b082      	sub	sp, #8
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	3304      	adds	r3, #4
 800f45a:	6839      	ldr	r1, [r7, #0]
 800f45c:	4618      	mov	r0, r3
 800f45e:	f005 ff2d 	bl	80152bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800f462:	bf00      	nop
 800f464:	3708      	adds	r7, #8
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
	...

0800f46c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	4618      	mov	r0, r3
 800f478:	f7ff fd98 	bl	800efac <_ZN8touchgfx8DrawableC1Ev>
 800f47c:	4a03      	ldr	r2, [pc, #12]	@ (800f48c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	4618      	mov	r0, r3
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	0802f474 	.word	0x0802f474

0800f490 <_ZN8touchgfx6WidgetD1Ev>:
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	4a05      	ldr	r2, [pc, #20]	@ (800f4b0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	601a      	str	r2, [r3, #0]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7ff fdb3 	bl	800f00c <_ZN8touchgfx8DrawableD1Ev>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	0802f474 	.word	0x0802f474

0800f4b4 <_ZN8touchgfx6WidgetD0Ev>:
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff ffe7 	bl	800f490 <_ZN8touchgfx6WidgetD1Ev>
 800f4c2:	2128      	movs	r1, #40	@ 0x28
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f01d f8dc 	bl	802c682 <_ZdlPvj>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	2326      	movs	r3, #38	@ 0x26
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	f01d fb00 	bl	802caea <memset>
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7ff ffbd 	bl	800f46c <_ZN8touchgfx6WidgetC1Ev>
 800f4f2:	4a09      	ldr	r2, [pc, #36]	@ (800f518 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	601a      	str	r2, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	22ff      	movs	r2, #255	@ 0xff
 800f4fc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	3328      	adds	r3, #40	@ 0x28
 800f504:	2100      	movs	r1, #0
 800f506:	4618      	mov	r0, r3
 800f508:	f7ff fcfe 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4618      	mov	r0, r3
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	080302bc 	.word	0x080302bc

0800f51c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800f51c:	b480      	push	{r7}
 800f51e:	b083      	sub	sp, #12
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	683a      	ldr	r2, [r7, #0]
 800f52a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 800f52c:	bf00      	nop
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800f538:	b480      	push	{r7}
 800f53a:	b083      	sub	sp, #12
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	460b      	mov	r3, r1
 800f542:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800f544:	4a06      	ldr	r2, [pc, #24]	@ (800f560 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	601a      	str	r2, [r3, #0]
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	887a      	ldrh	r2, [r7, #2]
 800f54e:	809a      	strh	r2, [r3, #4]
    }
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	4618      	mov	r0, r3
 800f554:	370c      	adds	r7, #12
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	0802ee14 	.word	0x0802ee14

0800f564 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	4618      	mov	r0, r3
 800f570:	2326      	movs	r3, #38	@ 0x26
 800f572:	461a      	mov	r2, r3
 800f574:	2100      	movs	r1, #0
 800f576:	f01d fab8 	bl	802caea <memset>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4618      	mov	r0, r3
 800f57e:	f7ff ff75 	bl	800f46c <_ZN8touchgfx6WidgetC1Ev>
 800f582:	4a16      	ldr	r2, [pc, #88]	@ (800f5dc <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	601a      	str	r2, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	3328      	adds	r3, #40	@ 0x28
 800f58c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800f590:	4618      	mov	r0, r3
 800f592:	f7ff ffd1 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	3330      	adds	r3, #48	@ 0x30
 800f59a:	2100      	movs	r1, #0
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7ff fcb3 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	869a      	strh	r2, [r3, #52]	@ 0x34
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	22ff      	movs	r2, #255	@ 0xff
 800f5ac:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	333c      	adds	r3, #60	@ 0x3c
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 f8f0 	bl	800f7b2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	0803022c 	.word	0x0803022c

0800f5e0 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800f5e0:	b590      	push	{r4, r7, lr}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6178      	str	r0, [r7, #20]
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f5f2:	4611      	mov	r1, r2
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7ff fdbe 	bl	800f176 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	3384      	adds	r3, #132	@ 0x84
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	697c      	ldr	r4, [r7, #20]
 800f604:	463a      	mov	r2, r7
 800f606:	6979      	ldr	r1, [r7, #20]
 800f608:	4610      	mov	r0, r2
 800f60a:	4798      	blx	r3
 800f60c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800f610:	463a      	mov	r2, r7
 800f612:	ca07      	ldmia	r2, {r0, r1, r2}
 800f614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f618:	bf00      	nop
 800f61a:	371c      	adds	r7, #28
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd90      	pop	{r4, r7, pc}

0800f620 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800f620:	b590      	push	{r4, r7, lr}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	6178      	str	r0, [r7, #20]
 800f628:	460b      	mov	r3, r1
 800f62a:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f632:	4611      	mov	r1, r2
 800f634:	4618      	mov	r0, r3
 800f636:	f7ff fdad 	bl	800f194 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	3384      	adds	r3, #132	@ 0x84
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	697c      	ldr	r4, [r7, #20]
 800f644:	463a      	mov	r2, r7
 800f646:	6979      	ldr	r1, [r7, #20]
 800f648:	4610      	mov	r0, r2
 800f64a:	4798      	blx	r3
 800f64c:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 800f650:	463a      	mov	r2, r7
 800f652:	ca07      	ldmia	r2, {r0, r1, r2}
 800f654:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f658:	bf00      	nop
 800f65a:	371c      	adds	r7, #28
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd90      	pop	{r4, r7, pc}

0800f660 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f7ff fc67 	bl	800ef3e <_ZN8touchgfx4RectC1Ev>
    }
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	3708      	adds	r7, #8
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800f678:	b480      	push	{r7}
 800f67a:	b083      	sub	sp, #12
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	460b      	mov	r3, r1
 800f682:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	78fa      	ldrb	r2, [r7, #3]
 800f688:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    }
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800f698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800f6a4:	687e      	ldr	r6, [r7, #4]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	3334      	adds	r3, #52	@ 0x34
 800f6ac:	681c      	ldr	r4, [r3, #0]
 800f6ae:	887d      	ldrh	r5, [r7, #2]
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f000 f867 	bl	800f784 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f6ba:	4b1c      	ldr	r3, [pc, #112]	@ (800f72c <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d105      	bne.n	800f6ce <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800f6c2:	4b1b      	ldr	r3, [pc, #108]	@ (800f730 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800f6c4:	4a1b      	ldr	r2, [pc, #108]	@ (800f734 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f6c6:	216c      	movs	r1, #108	@ 0x6c
 800f6c8:	481b      	ldr	r0, [pc, #108]	@ (800f738 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f6ca:	f01d f807 	bl	802c6dc <__assert_func>
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	889a      	ldrh	r2, [r3, #4]
 800f6d6:	4b19      	ldr	r3, [pc, #100]	@ (800f73c <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800f6d8:	881b      	ldrh	r3, [r3, #0]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	bf34      	ite	cc
 800f6de:	2301      	movcc	r3, #1
 800f6e0:	2300      	movcs	r3, #0
 800f6e2:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d105      	bne.n	800f6f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800f6e8:	4b15      	ldr	r3, [pc, #84]	@ (800f740 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800f6ea:	4a12      	ldr	r2, [pc, #72]	@ (800f734 <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800f6ec:	216d      	movs	r1, #109	@ 0x6d
 800f6ee:	4812      	ldr	r0, [pc, #72]	@ (800f738 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800f6f0:	f01c fff4 	bl	802c6dc <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f6f4:	4b13      	ldr	r3, [pc, #76]	@ (800f744 <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	4b0c      	ldr	r3, [pc, #48]	@ (800f72c <_ZN8touchgfx8TextArea12setBaselineYEs+0x94>)
 800f6fa:	6819      	ldr	r1, [r3, #0]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	889b      	ldrh	r3, [r3, #4]
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	440b      	add	r3, r1
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	009b      	lsls	r3, r3, #2
 800f708:	4413      	add	r3, r2
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	3230      	adds	r2, #48	@ 0x30
 800f710:	6812      	ldr	r2, [r2, #0]
 800f712:	4618      	mov	r0, r3
 800f714:	4790      	blx	r2
 800f716:	4603      	mov	r3, r0
 800f718:	1aeb      	subs	r3, r5, r3
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	b21b      	sxth	r3, r3
 800f71e:	4619      	mov	r1, r3
 800f720:	4630      	mov	r0, r6
 800f722:	47a0      	blx	r4
    }
 800f724:	bf00      	nop
 800f726:	3714      	adds	r7, #20
 800f728:	46bd      	mov	sp, r7
 800f72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f72c:	2001215c 	.word	0x2001215c
 800f730:	0802db40 	.word	0x0802db40
 800f734:	0802db84 	.word	0x0802db84
 800f738:	0802dbc0 	.word	0x0802dbc0
 800f73c:	20012160 	.word	0x20012160
 800f740:	0802dc04 	.word	0x0802dc04
 800f744:	20012164 	.word	0x20012164

0800f748 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	460b      	mov	r3, r1
 800f752:	807b      	strh	r3, [r7, #2]
 800f754:	4613      	mov	r3, r2
 800f756:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3330      	adds	r3, #48	@ 0x30
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f766:	4610      	mov	r0, r2
 800f768:	4798      	blx	r3
        setBaselineY(baselineY);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	3364      	adds	r3, #100	@ 0x64
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f776:	4611      	mov	r1, r2
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	4798      	blx	r3
    }
 800f77c:	bf00      	nop
 800f77e:	3708      	adds	r7, #8
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	3328      	adds	r3, #40	@ 0x28
    }
 800f790:	4618      	mov	r0, r3
 800f792:	370c      	adds	r7, #12
 800f794:	46bd      	mov	sp, r7
 800f796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79a:	4770      	bx	lr

0800f79c <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800f79c:	b480      	push	{r7}
 800f79e:	b083      	sub	sp, #12
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f7a4:	2300      	movs	r3, #0
    }
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b0:	4770      	bx	lr

0800f7b2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b084      	sub	sp, #16
 800f7b6:	af02      	add	r7, sp, #8
 800f7b8:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	2100      	movs	r1, #0
 800f7ca:	f7ff fbcf 	bl	800ef6c <_ZN8touchgfx4RectC1Essss>
              text(0)
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	609a      	str	r2, [r3, #8]
        {
        }
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3708      	adds	r7, #8
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
	...

0800f7e0 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	4a08      	ldr	r2, [pc, #32]	@ (800f80c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3328      	adds	r3, #40	@ 0x28
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7fe fc44 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7ff fe48 	bl	800f490 <_ZN8touchgfx6WidgetD1Ev>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4618      	mov	r0, r3
 800f804:	3708      	adds	r7, #8
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	0803022c 	.word	0x0803022c

0800f810 <_ZN8touchgfx8TextAreaD0Ev>:
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff ffe1 	bl	800f7e0 <_ZN8touchgfx8TextAreaD1Ev>
 800f81e:	2148      	movs	r1, #72	@ 0x48
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f01c ff2e 	bl	802c682 <_ZdlPvj>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4618      	mov	r0, r3
 800f82a:	3708      	adds	r7, #8
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
        : TextArea()
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7ff fe92 	bl	800f564 <_ZN8touchgfx8TextAreaC1Ev>
 800f840:	4a03      	ldr	r2, [pc, #12]	@ (800f850 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	601a      	str	r2, [r3, #0]
    {
    }
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	08030324 	.word	0x08030324

0800f854 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:

    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
    {
        Widget::invalidateContent();
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4618      	mov	r0, r3
 800f860:	f7ff fbf4 	bl	800f04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 800f864:	bf00      	nop
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff ff9b 	bl	800f7b2 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	4a05      	ldr	r2, [pc, #20]	@ (800f8a4 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	601a      	str	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	f7ff ffa3 	bl	800f7e0 <_ZN8touchgfx8TextAreaD1Ev>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4618      	mov	r0, r3
 800f89e:	3708      	adds	r7, #8
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}
 800f8a4:	08030324 	.word	0x08030324

0800f8a8 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f7ff ffe7 	bl	800f884 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f8b6:	2148      	movs	r1, #72	@ 0x48
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f01c fee2 	bl	802c682 <_ZdlPvj>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	3708      	adds	r7, #8
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	bd80      	pop	{r7, pc}

0800f8c8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7ff ffac 	bl	800f830 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800f8d8:	4a05      	ldr	r2, [pc, #20]	@ (800f8f0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	601a      	str	r2, [r3, #0]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	649a      	str	r2, [r3, #72]	@ 0x48
    {
    }
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3708      	adds	r7, #8
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	0802f3e4 	.word	0x0802f3e4

0800f8f4 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard1(const Unicode::UnicodeChar* value)
 800f8f4:	b480      	push	{r7}
 800f8f6:	b083      	sub	sp, #12
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
    {
        wc1 = value;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	683a      	ldr	r2, [r7, #0]
 800f902:	649a      	str	r2, [r3, #72]	@ 0x48
    }
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    }
 800f91c:	4618      	mov	r0, r3
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800f928:	b580      	push	{r7, lr}
 800f92a:	b082      	sub	sp, #8
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800f932:	6839      	ldr	r1, [r7, #0]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7ff ffdd 	bl	800f8f4 <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800f93a:	bf00      	nop
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
	...

0800f944 <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800f94c:	4a06      	ldr	r2, [pc, #24]	@ (800f968 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	601a      	str	r2, [r3, #0]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2200      	movs	r2, #0
 800f956:	809a      	strh	r2, [r3, #4]
    {
    }
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4618      	mov	r0, r3
 800f95c:	370c      	adds	r7, #12
 800f95e:	46bd      	mov	sp, r7
 800f960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f964:	4770      	bx	lr
 800f966:	bf00      	nop
 800f968:	0802f3c4 	.word	0x0802f3c4

0800f96c <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800f96c:	b480      	push	{r7}
 800f96e:	b083      	sub	sp, #12
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
    {
 800f974:	4a04      	ldr	r2, [pc, #16]	@ (800f988 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	601a      	str	r2, [r3, #0]
    }
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4618      	mov	r0, r3
 800f97e:	370c      	adds	r7, #12
 800f980:	46bd      	mov	sp, r7
 800f982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f986:	4770      	bx	lr
 800f988:	0802f3c4 	.word	0x0802f3c4

0800f98c <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b082      	sub	sp, #8
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
    }
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7ff ffe9 	bl	800f96c <_ZN8touchgfx15AbstractPainterD1Ev>
 800f99a:	2108      	movs	r1, #8
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f01c fe70 	bl	802c682 <_ZdlPvj>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800f9ac:	b480      	push	{r7}
 800f9ae:	b083      	sub	sp, #12
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800f9b4:	2300      	movs	r3, #0
    }
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	370c      	adds	r7, #12
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c0:	4770      	bx	lr

0800f9c2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800f9c2:	b480      	push	{r7}
 800f9c4:	b083      	sub	sp, #12
 800f9c6:	af00      	add	r7, sp, #0
 800f9c8:	6078      	str	r0, [r7, #4]
 800f9ca:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	809a      	strh	r2, [r3, #4]
        return true;
 800f9d6:	2301      	movs	r3, #1
    }
 800f9d8:	4618      	mov	r0, r3
 800f9da:	370c      	adds	r7, #12
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800f9e4:	b480      	push	{r7}
 800f9e6:	b083      	sub	sp, #12
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
    {
        return;
 800f9ec:	bf00      	nop
    }
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
            : v(i)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	683a      	ldr	r2, [r7, #0]
 800fa06:	601a      	str	r2, [r3, #0]
        {
        }
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	370c      	adds	r7, #12
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr

0800fa16 <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800fa16:	b480      	push	{r7}
 800fa18:	b083      	sub	sp, #12
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
        {
            return v;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
        }
 800fa22:	4618      	mov	r0, r3
 800fa24:	370c      	adds	r7, #12
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>:
         *
         * @param  q5 The Q5 to add to this.
         *
         * @return The result of the operation.
         */
        Q5 operator+(const Q5& q5) const
 800fa2e:	b580      	push	{r7, lr}
 800fa30:	b084      	sub	sp, #16
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
 800fa36:	6039      	str	r1, [r7, #0]
        {
            return Q5(v + q5.v);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	441a      	add	r2, r3
 800fa42:	f107 030c 	add.w	r3, r7, #12
 800fa46:	4611      	mov	r1, r2
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff ffd5 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fa4e:	68fb      	ldr	r3, [r7, #12]
        }
 800fa50:	4618      	mov	r0, r3
 800fa52:	3710      	adds	r7, #16
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>:
         *
         * @param  q5 The Q5 to subtract from this.
         *
         * @return The result of the operation.
         */
        Q5 operator-(const Q5& q5) const
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
        {
            return Q5(v - q5.v);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	1ad2      	subs	r2, r2, r3
 800fa6c:	f107 030c 	add.w	r3, r7, #12
 800fa70:	4611      	mov	r1, r2
 800fa72:	4618      	mov	r0, r3
 800fa74:	f7ff ffc0 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fa78:	68fb      	ldr	r3, [r7, #12]
        }
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor.
     */
    static Q5 muldivQ5(Q5 factor1, Q5 factor2, Q5 divisor)
 800fa82:	b5b0      	push	{r4, r5, r7, lr}
 800fa84:	b086      	sub	sp, #24
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	60f8      	str	r0, [r7, #12]
 800fa8a:	60b9      	str	r1, [r7, #8]
 800fa8c:	607a      	str	r2, [r7, #4]
    {
        return Q5(muldiv((int)factor1, (int)factor2, (int)divisor));
 800fa8e:	f107 030c 	add.w	r3, r7, #12
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7ff ffbf 	bl	800fa16 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800fa98:	4604      	mov	r4, r0
 800fa9a:	f107 0308 	add.w	r3, r7, #8
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7ff ffb9 	bl	800fa16 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800faa4:	4605      	mov	r5, r0
 800faa6:	1d3b      	adds	r3, r7, #4
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7ff ffb4 	bl	800fa16 <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800faae:	4603      	mov	r3, r0
 800fab0:	461a      	mov	r2, r3
 800fab2:	4629      	mov	r1, r5
 800fab4:	4620      	mov	r0, r4
 800fab6:	f00c f934 	bl	801bd22 <_ZN8touchgfx6muldivElll>
 800faba:	4602      	mov	r2, r0
 800fabc:	f107 0314 	add.w	r3, r7, #20
 800fac0:	4611      	mov	r1, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7ff ff98 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fac8:	697b      	ldr	r3, [r7, #20]
    }
 800faca:	4618      	mov	r0, r3
 800facc:	3718      	adds	r7, #24
 800face:	46bd      	mov	sp, r7
 800fad0:	bdb0      	pop	{r4, r5, r7, pc}

0800fad2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>:
     * @param  factor2 The second factor.
     * @param  divisor The divisor.
     *
     * @return factor1 * factor2 / divisor as a Q5
     */
    static Q5 muldiv_toQ5(int32_t factor1, int32_t factor2, int32_t divisor)
 800fad2:	b580      	push	{r7, lr}
 800fad4:	b094      	sub	sp, #80	@ 0x50
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	60f8      	str	r0, [r7, #12]
 800fada:	60b9      	str	r1, [r7, #8]
 800fadc:	607a      	str	r2, [r7, #4]
    {
        int32_t remainder;
        int32_t result = muldiv(factor1, factor2, divisor, remainder);
 800fade:	f107 0310 	add.w	r3, r7, #16
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	68b9      	ldr	r1, [r7, #8]
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f00c f8fc 	bl	801bce4 <_ZN8touchgfx6muldivElllRl>
 800faec:	64f8      	str	r0, [r7, #76]	@ 0x4c
        if (result >= 0)
 800faee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	db2f      	blt.n	800fb54 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0x82>
 800faf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800faf6:	64bb      	str	r3, [r7, #72]	@ 0x48
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800faf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fafa:	015a      	lsls	r2, r3, #5
 800fafc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800fb00:	4611      	mov	r1, r2
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7ff ff78 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {
            return toQ5(result) + muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800fb0a:	617b      	str	r3, [r7, #20]
 800fb0c:	f107 031c 	add.w	r3, r7, #28
 800fb10:	2120      	movs	r1, #32
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7ff ff70 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	f107 0320 	add.w	r3, r7, #32
 800fb1e:	4611      	mov	r1, r2
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7ff ff69 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fb2a:	6879      	ldr	r1, [r7, #4]
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f7ff ff63 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb34:	6a39      	ldr	r1, [r7, #32]
 800fb36:	69f8      	ldr	r0, [r7, #28]
 800fb38:	f7ff ffa3 	bl	800fa82 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	61bb      	str	r3, [r7, #24]
 800fb40:	f107 0218 	add.w	r2, r7, #24
 800fb44:	f107 0314 	add.w	r3, r7, #20
 800fb48:	4611      	mov	r1, r2
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff ff6f 	bl	800fa2e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 800fb50:	4603      	mov	r3, r0
 800fb52:	e02e      	b.n	800fbb2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll+0xe0>
 800fb54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb56:	647b      	str	r3, [r7, #68]	@ 0x44
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800fb58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb5a:	015a      	lsls	r2, r3, #5
 800fb5c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800fb60:	4611      	mov	r1, r2
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7ff ff48 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        }
        return toQ5(result) - muldivQ5(Q5(Rasterizer::POLY_BASE_SIZE), Q5(remainder), Q5(divisor));
 800fb6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800fb70:	2120      	movs	r1, #32
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff ff40 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb78:	693a      	ldr	r2, [r7, #16]
 800fb7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800fb7e:	4611      	mov	r1, r2
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7ff ff39 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800fb8a:	6879      	ldr	r1, [r7, #4]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7ff ff33 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800fb92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb94:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fb96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb98:	f7ff ff73 	bl	800fa82 <_ZN8touchgfx7CWRUtil8muldivQ5ENS0_2Q5ES1_S1_>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fba0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800fba4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fba8:	4611      	mov	r1, r2
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff ff54 	bl	800fa58 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 800fbb0:	4603      	mov	r3, r0
    }
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3750      	adds	r7, #80	@ 0x50
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleX, setScaleY, getScaleY
     */
    virtual int getScaleX() const
 800fbba:	b480      	push	{r7}
 800fbbc:	b083      	sub	sp, #12
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
    {
        return xScale;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    }
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	370c      	adds	r7, #12
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd0:	4770      	bx	lr

0800fbd2 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>:
     *
     * @return The scaling factor.
     *
     * @see setScaleY, setScaleX, getScaleX
     */
    virtual int getScaleY() const
 800fbd2:	b480      	push	{r7}
 800fbd4:	b083      	sub	sp, #12
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
    {
        return yScale;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 800fbde:	4618      	mov	r0, r3
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <_ZN8touchgfx17AbstractDataGraph8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha()
     *
     * @note All graph elements have to take this alpha into consideration.
     */
    virtual void setAlpha(uint8_t newAlpha)
 800fbea:	b480      	push	{r7}
 800fbec:	b083      	sub	sp, #12
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	78fa      	ldrb	r2, [r7, #3]
 800fbfa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 800fbfe:	bf00      	nop
 800fc00:	370c      	adds	r7, #12
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr

0800fc0a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>:
     * @param  min The minimum x value.
     * @param  max The maximum x value.
     *
     * @note The graph as well as the area above and below are automatically redrawn (invalidated).
     */
    virtual void setGraphRangeX(int min, int max)
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b08c      	sub	sp, #48	@ 0x30
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	60f8      	str	r0, [r7, #12]
 800fc12:	60b9      	str	r1, [r7, #8]
 800fc14:	607a      	str	r2, [r7, #4]
    {
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	33a4      	adds	r3, #164	@ 0xa4
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	68fa      	ldr	r2, [r7, #12]
 800fc20:	61fa      	str	r2, [r7, #28]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	61ba      	str	r2, [r7, #24]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int int2scaledX(int i) const
    {
        return int2scaled(i, xScale);
 800fc26:	69fa      	ldr	r2, [r7, #28]
 800fc28:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fc2a:	69b9      	ldr	r1, [r7, #24]
 800fc2c:	6179      	str	r1, [r7, #20]
 800fc2e:	613a      	str	r2, [r7, #16]
        return i * scale;
 800fc30:	697a      	ldr	r2, [r7, #20]
 800fc32:	6939      	ldr	r1, [r7, #16]
 800fc34:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, xScale);
 800fc38:	bf00      	nop
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fc42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fc46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc48:	6279      	str	r1, [r7, #36]	@ 0x24
 800fc4a:	623a      	str	r2, [r7, #32]
        return i * scale;
 800fc4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc4e:	6a39      	ldr	r1, [r7, #32]
 800fc50:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800fc54:	bf00      	nop
        setGraphRangeXScaled(int2scaledX(min), int2scaledX(max));
 800fc56:	4601      	mov	r1, r0
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	4798      	blx	r3
    }
 800fc5c:	bf00      	nop
 800fc5e:	3730      	adds	r7, #48	@ 0x30
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}

0800fc64 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff>:
    virtual void setGraphRangeX(float min, float max)
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b08e      	sub	sp, #56	@ 0x38
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	ed87 0a02 	vstr	s0, [r7, #8]
 800fc70:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	33a4      	adds	r3, #164	@ 0xa4
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	623a      	str	r2, [r7, #32]
 800fc80:	68ba      	ldr	r2, [r7, #8]
 800fc82:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledX(float f) const
    {
        return float2scaled(f, xScale);
 800fc84:	6a3a      	ldr	r2, [r7, #32]
 800fc86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fc88:	69f9      	ldr	r1, [r7, #28]
 800fc8a:	61b9      	str	r1, [r7, #24]
 800fc8c:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	ee07 2a90 	vmov	s15, r2
 800fc94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc98:	ed97 7a06 	vldr	s14, [r7, #24]
 800fc9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fca0:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800fca4:	edd7 7a04 	vldr	s15, [r7, #16]
 800fca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fcac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb0:	db0a      	blt.n	800fcc8 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x64>
            return (int)(fs + 0.5f);
 800fcb2:	edd7 7a04 	vldr	s15, [r7, #16]
 800fcb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fcba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcc2:	ee17 0a90 	vmov	r0, s15
 800fcc6:	e019      	b.n	800fcfc <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800fcc8:	edd7 7a04 	vldr	s15, [r7, #16]
 800fccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcd0:	ee17 2a90 	vmov	r2, s15
 800fcd4:	3a01      	subs	r2, #1
 800fcd6:	edd7 7a04 	vldr	s15, [r7, #16]
 800fcda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fce2:	ed97 7a04 	vldr	s14, [r7, #16]
 800fce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcea:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800fcee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fcf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fcf6:	ee17 1a90 	vmov	r1, s15
 800fcfa:	1850      	adds	r0, r2, r1
        return float2scaled(f, xScale);
 800fcfc:	bf00      	nop
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	637a      	str	r2, [r7, #52]	@ 0x34
 800fd02:	687a      	ldr	r2, [r7, #4]
 800fd04:	633a      	str	r2, [r7, #48]	@ 0x30
 800fd06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fd0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fd0c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800fd0e:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800fd10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd12:	ee07 2a90 	vmov	s15, r2
 800fd16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd1a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800fd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd22:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800fd26:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800fd2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd32:	db0a      	blt.n	800fd4a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0xe6>
            return (int)(fs + 0.5f);
 800fd34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800fd38:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fd3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd44:	ee17 2a90 	vmov	r2, s15
 800fd48:	e019      	b.n	800fd7e <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800fd4a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800fd4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd52:	ee17 2a90 	vmov	r2, s15
 800fd56:	3a01      	subs	r2, #1
 800fd58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800fd5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd64:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800fd68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd6c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800fd70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd78:	ee17 1a90 	vmov	r1, s15
 800fd7c:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800fd7e:	bf00      	nop
        setGraphRangeXScaled(float2scaledX(min), float2scaledX(max));
 800fd80:	4601      	mov	r1, r0
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	4798      	blx	r3
    }
 800fd86:	bf00      	nop
 800fd88:	3738      	adds	r7, #56	@ 0x38
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}

0800fd8e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbi>:
    virtual void setGraphRangeXAuto(bool showYaxis = true, int margin = 0)
 800fd8e:	b580      	push	{r7, lr}
 800fd90:	b088      	sub	sp, #32
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	60f8      	str	r0, [r7, #12]
 800fd96:	460b      	mov	r3, r1
 800fd98:	607a      	str	r2, [r7, #4]
 800fd9a:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	33b0      	adds	r3, #176	@ 0xb0
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	61fa      	str	r2, [r7, #28]
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, xScale);
 800fdac:	69fa      	ldr	r2, [r7, #28]
 800fdae:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fdb0:	69b9      	ldr	r1, [r7, #24]
 800fdb2:	6179      	str	r1, [r7, #20]
 800fdb4:	613a      	str	r2, [r7, #16]
        return i * scale;
 800fdb6:	697a      	ldr	r2, [r7, #20]
 800fdb8:	6939      	ldr	r1, [r7, #16]
 800fdba:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 800fdbe:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, int2scaledX(margin));
 800fdc0:	7af9      	ldrb	r1, [r7, #11]
 800fdc2:	68f8      	ldr	r0, [r7, #12]
 800fdc4:	4798      	blx	r3
    }
 800fdc6:	bf00      	nop
 800fdc8:	3720      	adds	r7, #32
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd80      	pop	{r7, pc}

0800fdce <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf>:
    virtual void setGraphRangeXAuto(bool showYaxis, float margin)
 800fdce:	b580      	push	{r7, lr}
 800fdd0:	b08a      	sub	sp, #40	@ 0x28
 800fdd2:	af00      	add	r7, sp, #0
 800fdd4:	60f8      	str	r0, [r7, #12]
 800fdd6:	460b      	mov	r3, r1
 800fdd8:	ed87 0a01 	vstr	s0, [r7, #4]
 800fddc:	72fb      	strb	r3, [r7, #11]
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	33b0      	adds	r3, #176	@ 0xb0
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	68fa      	ldr	r2, [r7, #12]
 800fde8:	627a      	str	r2, [r7, #36]	@ 0x24
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	623a      	str	r2, [r7, #32]
        return float2scaled(f, xScale);
 800fdee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdf0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800fdf2:	6a39      	ldr	r1, [r7, #32]
 800fdf4:	61f9      	str	r1, [r7, #28]
 800fdf6:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 800fdf8:	69ba      	ldr	r2, [r7, #24]
 800fdfa:	ee07 2a90 	vmov	s15, r2
 800fdfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe02:	ed97 7a07 	vldr	s14, [r7, #28]
 800fe06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe0a:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 800fe0e:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1a:	db0a      	blt.n	800fe32 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x64>
            return (int)(fs + 0.5f);
 800fe1c:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fe24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe2c:	ee17 2a90 	vmov	r2, s15
 800fe30:	e019      	b.n	800fe66 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeXAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800fe32:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe3a:	ee17 2a90 	vmov	r2, s15
 800fe3e:	3a01      	subs	r2, #1
 800fe40:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe4c:	ed97 7a05 	vldr	s14, [r7, #20]
 800fe50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe54:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800fe58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fe60:	ee17 1a90 	vmov	r1, s15
 800fe64:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 800fe66:	bf00      	nop
        setGraphRangeXAutoScaled(showYaxis, float2scaledX(margin));
 800fe68:	7af9      	ldrb	r1, [r7, #11]
 800fe6a:	68f8      	ldr	r0, [r7, #12]
 800fe6c:	4798      	blx	r3
    }
 800fe6e:	bf00      	nop
 800fe70:	3728      	adds	r7, #40	@ 0x28
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>:
    virtual void setGraphRangeY(int min, int max)
 800fe76:	b580      	push	{r7, lr}
 800fe78:	b08c      	sub	sp, #48	@ 0x30
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	60f8      	str	r0, [r7, #12]
 800fe7e:	60b9      	str	r1, [r7, #8]
 800fe80:	607a      	str	r2, [r7, #4]
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	33bc      	adds	r3, #188	@ 0xbc
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	68fa      	ldr	r2, [r7, #12]
 800fe8c:	61fa      	str	r2, [r7, #28]
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 800fe92:	69fa      	ldr	r2, [r7, #28]
 800fe94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fe96:	69b9      	ldr	r1, [r7, #24]
 800fe98:	6179      	str	r1, [r7, #20]
 800fe9a:	613a      	str	r2, [r7, #16]
        return i * scale;
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	6939      	ldr	r1, [r7, #16]
 800fea0:	fb01 f002 	mul.w	r0, r1, r2
        return int2scaled(i, yScale);
 800fea4:	bf00      	nop
 800fea6:	68fa      	ldr	r2, [r7, #12]
 800fea8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800feaa:	687a      	ldr	r2, [r7, #4]
 800feac:	62ba      	str	r2, [r7, #40]	@ 0x28
 800feae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800feb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800feb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800feb4:	6279      	str	r1, [r7, #36]	@ 0x24
 800feb6:	623a      	str	r2, [r7, #32]
        return i * scale;
 800feb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800feba:	6a39      	ldr	r1, [r7, #32]
 800febc:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 800fec0:	bf00      	nop
        setGraphRangeYScaled(int2scaledY(min), int2scaledY(max));
 800fec2:	4601      	mov	r1, r0
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	4798      	blx	r3
    }
 800fec8:	bf00      	nop
 800feca:	3730      	adds	r7, #48	@ 0x30
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}

0800fed0 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff>:
    virtual void setGraphRangeY(float min, float max)
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b08e      	sub	sp, #56	@ 0x38
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	ed87 0a02 	vstr	s0, [r7, #8]
 800fedc:	edc7 0a01 	vstr	s1, [r7, #4]
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	33bc      	adds	r3, #188	@ 0xbc
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	68fa      	ldr	r2, [r7, #12]
 800feea:	623a      	str	r2, [r7, #32]
 800feec:	68ba      	ldr	r2, [r7, #8]
 800feee:	61fa      	str	r2, [r7, #28]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int float2scaledY(float f) const
    {
        return float2scaled(f, yScale);
 800fef0:	6a3a      	ldr	r2, [r7, #32]
 800fef2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800fef4:	69f9      	ldr	r1, [r7, #28]
 800fef6:	61b9      	str	r1, [r7, #24]
 800fef8:	617a      	str	r2, [r7, #20]
        const float fs = f * (float)scale;
 800fefa:	697a      	ldr	r2, [r7, #20]
 800fefc:	ee07 2a90 	vmov	s15, r2
 800ff00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff04:	ed97 7a06 	vldr	s14, [r7, #24]
 800ff08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff0c:	edc7 7a04 	vstr	s15, [r7, #16]
        if (fs >= 0)
 800ff10:	edd7 7a04 	vldr	s15, [r7, #16]
 800ff14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff1c:	db0a      	blt.n	800ff34 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x64>
            return (int)(fs + 0.5f);
 800ff1e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ff22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ff26:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff2e:	ee17 0a90 	vmov	r0, s15
 800ff32:	e019      	b.n	800ff68 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800ff34:	edd7 7a04 	vldr	s15, [r7, #16]
 800ff38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff3c:	ee17 2a90 	vmov	r2, s15
 800ff40:	3a01      	subs	r2, #1
 800ff42:	edd7 7a04 	vldr	s15, [r7, #16]
 800ff46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff4e:	ed97 7a04 	vldr	s14, [r7, #16]
 800ff52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff56:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800ff5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff62:	ee17 1a90 	vmov	r1, s15
 800ff66:	1850      	adds	r0, r2, r1
        return float2scaled(f, yScale);
 800ff68:	bf00      	nop
 800ff6a:	68fa      	ldr	r2, [r7, #12]
 800ff6c:	637a      	str	r2, [r7, #52]	@ 0x34
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	633a      	str	r2, [r7, #48]	@ 0x30
 800ff72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ff74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ff76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ff78:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ff7a:	62ba      	str	r2, [r7, #40]	@ 0x28
        const float fs = f * (float)scale;
 800ff7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff7e:	ee07 2a90 	vmov	s15, r2
 800ff82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff86:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800ff8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        if (fs >= 0)
 800ff92:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ff96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ff9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9e:	db0a      	blt.n	800ffb6 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0xe6>
            return (int)(fs + 0.5f);
 800ffa0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ffa4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ffa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ffac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffb0:	ee17 2a90 	vmov	r2, s15
 800ffb4:	e019      	b.n	800ffea <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEff+0x11a>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 800ffb6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ffba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffbe:	ee17 2a90 	vmov	r2, s15
 800ffc2:	3a01      	subs	r2, #1
 800ffc4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ffc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ffd0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ffd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffd8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800ffdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ffe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ffe4:	ee17 1a90 	vmov	r1, s15
 800ffe8:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 800ffea:	bf00      	nop
        setGraphRangeYScaled(float2scaledY(min), float2scaledY(max));
 800ffec:	4601      	mov	r1, r0
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	4798      	blx	r3
    }
 800fff2:	bf00      	nop
 800fff4:	3738      	adds	r7, #56	@ 0x38
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbi>:
    virtual void setGraphRangeYAuto(bool showXaxis = true, int margin = 0)
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b088      	sub	sp, #32
 800fffe:	af00      	add	r7, sp, #0
 8010000:	60f8      	str	r0, [r7, #12]
 8010002:	460b      	mov	r3, r1
 8010004:	607a      	str	r2, [r7, #4]
 8010006:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	33c0      	adds	r3, #192	@ 0xc0
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	61fa      	str	r2, [r7, #28]
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	61ba      	str	r2, [r7, #24]
        return int2scaled(i, yScale);
 8010018:	69fa      	ldr	r2, [r7, #28]
 801001a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801001c:	69b9      	ldr	r1, [r7, #24]
 801001e:	6179      	str	r1, [r7, #20]
 8010020:	613a      	str	r2, [r7, #16]
        return i * scale;
 8010022:	697a      	ldr	r2, [r7, #20]
 8010024:	6939      	ldr	r1, [r7, #16]
 8010026:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, yScale);
 801002a:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, int2scaledY(margin));
 801002c:	7af9      	ldrb	r1, [r7, #11]
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	4798      	blx	r3
    }
 8010032:	bf00      	nop
 8010034:	3720      	adds	r7, #32
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf>:
    virtual void setGraphRangeYAuto(bool showXaxis, float margin)
 801003a:	b580      	push	{r7, lr}
 801003c:	b08a      	sub	sp, #40	@ 0x28
 801003e:	af00      	add	r7, sp, #0
 8010040:	60f8      	str	r0, [r7, #12]
 8010042:	460b      	mov	r3, r1
 8010044:	ed87 0a01 	vstr	s0, [r7, #4]
 8010048:	72fb      	strb	r3, [r7, #11]
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	33c0      	adds	r3, #192	@ 0xc0
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	627a      	str	r2, [r7, #36]	@ 0x24
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	623a      	str	r2, [r7, #32]
        return float2scaled(f, yScale);
 801005a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801005c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801005e:	6a39      	ldr	r1, [r7, #32]
 8010060:	61f9      	str	r1, [r7, #28]
 8010062:	61ba      	str	r2, [r7, #24]
        const float fs = f * (float)scale;
 8010064:	69ba      	ldr	r2, [r7, #24]
 8010066:	ee07 2a90 	vmov	s15, r2
 801006a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801006e:	ed97 7a07 	vldr	s14, [r7, #28]
 8010072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010076:	edc7 7a05 	vstr	s15, [r7, #20]
        if (fs >= 0)
 801007a:	edd7 7a05 	vldr	s15, [r7, #20]
 801007e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010086:	db0a      	blt.n	801009e <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x64>
            return (int)(fs + 0.5f);
 8010088:	edd7 7a05 	vldr	s15, [r7, #20]
 801008c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010090:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010098:	ee17 2a90 	vmov	r2, s15
 801009c:	e019      	b.n	80100d2 <_ZN8touchgfx17AbstractDataGraph18setGraphRangeYAutoEbf+0x98>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 801009e:	edd7 7a05 	vldr	s15, [r7, #20]
 80100a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100a6:	ee17 2a90 	vmov	r2, s15
 80100aa:	3a01      	subs	r2, #1
 80100ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80100b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80100bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80100c0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80100c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80100cc:	ee17 1a90 	vmov	r1, s15
 80100d0:	440a      	add	r2, r1
        return float2scaled(f, yScale);
 80100d2:	bf00      	nop
        setGraphRangeYAutoScaled(showXaxis, float2scaledY(margin));
 80100d4:	7af9      	ldrb	r1, [r7, #11]
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	4798      	blx	r3
    }
 80100da:	bf00      	nop
 80100dc:	3728      	adds	r7, #40	@ 0x28
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}

080100e2 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv>:
    virtual int getGraphRangeXMinAsInt() const
 80100e2:	b480      	push	{r7}
 80100e4:	b087      	sub	sp, #28
 80100e6:	af00      	add	r7, sp, #0
 80100e8:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMinX);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	617a      	str	r2, [r7, #20]
 80100f4:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION int scaled2intX(int i) const
    {
        return scaled2int(i, xScale);
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100fa:	693a      	ldr	r2, [r7, #16]
 80100fc:	60fa      	str	r2, [r7, #12]
 80100fe:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2b00      	cmp	r3, #0
 8010104:	db0a      	blt.n	801011c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	005a      	lsls	r2, r3, #1
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	441a      	add	r2, r3
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	fb92 f3f3 	sdiv	r3, r2, r3
 8010114:	0fda      	lsrs	r2, r3, #31
 8010116:	4413      	add	r3, r2
 8010118:	105b      	asrs	r3, r3, #1
 801011a:	e00f      	b.n	801013c <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMinAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	4613      	mov	r3, r2
 8010120:	07db      	lsls	r3, r3, #31
 8010122:	1a9b      	subs	r3, r3, r2
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	461a      	mov	r2, r3
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	4413      	add	r3, r2
 801012c:	1e5a      	subs	r2, r3, #1
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	fb92 f3f3 	sdiv	r3, r2, r3
 8010134:	0fda      	lsrs	r2, r3, #31
 8010136:	4413      	add	r3, r2
 8010138:	105b      	asrs	r3, r3, #1
 801013a:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 801013c:	bf00      	nop
    }
 801013e:	4618      	mov	r0, r3
 8010140:	371c      	adds	r7, #28
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMinAsFloatEv>:
    virtual float getGraphRangeXMinAsFloat() const
 801014a:	b480      	push	{r7}
 801014c:	b087      	sub	sp, #28
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMinX);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8010158:	687a      	ldr	r2, [r7, #4]
 801015a:	617a      	str	r2, [r7, #20]
 801015c:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatX(int i) const
    {
        return scaled2float(i, xScale);
 801015e:	697b      	ldr	r3, [r7, #20]
 8010160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010162:	693a      	ldr	r2, [r7, #16]
 8010164:	60fa      	str	r2, [r7, #12]
 8010166:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	ee07 3a90 	vmov	s15, r3
 801016e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	ee07 3a90 	vmov	s15, r3
 8010178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801017c:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 8010180:	bf00      	nop
        return scaled2floatX(graphRangeMinX);
 8010182:	eef0 7a66 	vmov.f32	s15, s13
    }
 8010186:	eeb0 0a67 	vmov.f32	s0, s15
 801018a:	371c      	adds	r7, #28
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMinScaledEv>:
    virtual int getGraphRangeXMinScaled() const
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
        return graphRangeMinX;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
    }
 80101a2:	4618      	mov	r0, r3
 80101a4:	370c      	adds	r7, #12
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr

080101ae <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv>:
    virtual int getGraphRangeXMaxAsInt() const
 80101ae:	b480      	push	{r7}
 80101b0:	b087      	sub	sp, #28
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
        return scaled2intX(graphRangeMaxX);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	617a      	str	r2, [r7, #20]
 80101c0:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101c6:	693a      	ldr	r2, [r7, #16]
 80101c8:	60fa      	str	r2, [r7, #12]
 80101ca:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	db0a      	blt.n	80101e8 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	005a      	lsls	r2, r3, #1
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	441a      	add	r2, r3
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80101e0:	0fda      	lsrs	r2, r3, #31
 80101e2:	4413      	add	r3, r2
 80101e4:	105b      	asrs	r3, r3, #1
 80101e6:	e00f      	b.n	8010208 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeXMaxAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	4613      	mov	r3, r2
 80101ec:	07db      	lsls	r3, r3, #31
 80101ee:	1a9b      	subs	r3, r3, r2
 80101f0:	005b      	lsls	r3, r3, #1
 80101f2:	461a      	mov	r2, r3
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	4413      	add	r3, r2
 80101f8:	1e5a      	subs	r2, r3, #1
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8010200:	0fda      	lsrs	r2, r3, #31
 8010202:	4413      	add	r3, r2
 8010204:	105b      	asrs	r3, r3, #1
 8010206:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 8010208:	bf00      	nop
    }
 801020a:	4618      	mov	r0, r3
 801020c:	371c      	adds	r7, #28
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeXMaxAsFloatEv>:
    virtual float getGraphRangeXMaxAsFloat() const
 8010216:	b480      	push	{r7}
 8010218:	b087      	sub	sp, #28
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
        return scaled2floatX(graphRangeMaxX);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	617a      	str	r2, [r7, #20]
 8010228:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801022e:	693a      	ldr	r2, [r7, #16]
 8010230:	60fa      	str	r2, [r7, #12]
 8010232:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	ee07 3a90 	vmov	s15, r3
 801023a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	ee07 3a90 	vmov	s15, r3
 8010244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010248:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 801024c:	bf00      	nop
        return scaled2floatX(graphRangeMaxX);
 801024e:	eef0 7a66 	vmov.f32	s15, s13
    }
 8010252:	eeb0 0a67 	vmov.f32	s0, s15
 8010256:	371c      	adds	r7, #28
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeXMaxScaledEv>:
    virtual int getGraphRangeXMaxScaled() const
 8010260:	b480      	push	{r7}
 8010262:	b083      	sub	sp, #12
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
        return graphRangeMaxX;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
    }
 801026e:	4618      	mov	r0, r3
 8010270:	370c      	adds	r7, #12
 8010272:	46bd      	mov	sp, r7
 8010274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010278:	4770      	bx	lr

0801027a <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv>:
    virtual int getGraphRangeYMinAsInt() const
 801027a:	b480      	push	{r7}
 801027c:	b087      	sub	sp, #28
 801027e:	af00      	add	r7, sp, #0
 8010280:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMinY);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	617a      	str	r2, [r7, #20]
 801028c:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010292:	693a      	ldr	r2, [r7, #16]
 8010294:	60fa      	str	r2, [r7, #12]
 8010296:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	2b00      	cmp	r3, #0
 801029c:	db0a      	blt.n	80102b4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	005a      	lsls	r2, r3, #1
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	441a      	add	r2, r3
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80102ac:	0fda      	lsrs	r2, r3, #31
 80102ae:	4413      	add	r3, r2
 80102b0:	105b      	asrs	r3, r3, #1
 80102b2:	e00f      	b.n	80102d4 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMinAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80102b4:	68fa      	ldr	r2, [r7, #12]
 80102b6:	4613      	mov	r3, r2
 80102b8:	07db      	lsls	r3, r3, #31
 80102ba:	1a9b      	subs	r3, r3, r2
 80102bc:	005b      	lsls	r3, r3, #1
 80102be:	461a      	mov	r2, r3
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	4413      	add	r3, r2
 80102c4:	1e5a      	subs	r2, r3, #1
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80102cc:	0fda      	lsrs	r2, r3, #31
 80102ce:	4413      	add	r3, r2
 80102d0:	105b      	asrs	r3, r3, #1
 80102d2:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 80102d4:	bf00      	nop
    }
 80102d6:	4618      	mov	r0, r3
 80102d8:	371c      	adds	r7, #28
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr

080102e2 <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMinAsFloatEv>:
    virtual float getGraphRangeYMinAsFloat() const
 80102e2:	b480      	push	{r7}
 80102e4:	b087      	sub	sp, #28
 80102e6:	af00      	add	r7, sp, #0
 80102e8:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMinY);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	617a      	str	r2, [r7, #20]
 80102f4:	613b      	str	r3, [r7, #16]
     *
     * @note For internal use.
     */
    FORCE_INLINE_FUNCTION float scaled2floatY(int i) const
    {
        return scaled2float(i, yScale);
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102fa:	693a      	ldr	r2, [r7, #16]
 80102fc:	60fa      	str	r2, [r7, #12]
 80102fe:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	ee07 3a90 	vmov	s15, r3
 8010306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	ee07 3a90 	vmov	s15, r3
 8010310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010314:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 8010318:	bf00      	nop
        return scaled2floatY(graphRangeMinY);
 801031a:	eef0 7a66 	vmov.f32	s15, s13
    }
 801031e:	eeb0 0a67 	vmov.f32	s0, s15
 8010322:	371c      	adds	r7, #28
 8010324:	46bd      	mov	sp, r7
 8010326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032a:	4770      	bx	lr

0801032c <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMinScaledEv>:
    virtual int getGraphRangeYMinScaled() const
 801032c:	b480      	push	{r7}
 801032e:	b083      	sub	sp, #12
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
        return graphRangeMinY;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
    }
 801033a:	4618      	mov	r0, r3
 801033c:	370c      	adds	r7, #12
 801033e:	46bd      	mov	sp, r7
 8010340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010344:	4770      	bx	lr

08010346 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv>:
    virtual int getGraphRangeYMaxAsInt() const
 8010346:	b480      	push	{r7}
 8010348:	b087      	sub	sp, #28
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
        return scaled2intY(graphRangeMaxY);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8010354:	687a      	ldr	r2, [r7, #4]
 8010356:	617a      	str	r2, [r7, #20]
 8010358:	613b      	str	r3, [r7, #16]
        return scaled2int(i, yScale);
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801035e:	693a      	ldr	r2, [r7, #16]
 8010360:	60fa      	str	r2, [r7, #12]
 8010362:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2b00      	cmp	r3, #0
 8010368:	db0a      	blt.n	8010380 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x3a>
            return ((i * 2 + scale) / scale) / 2;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	005a      	lsls	r2, r3, #1
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	441a      	add	r2, r3
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	fb92 f3f3 	sdiv	r3, r2, r3
 8010378:	0fda      	lsrs	r2, r3, #31
 801037a:	4413      	add	r3, r2
 801037c:	105b      	asrs	r3, r3, #1
 801037e:	e00f      	b.n	80103a0 <_ZNK8touchgfx17AbstractDataGraph22getGraphRangeYMaxAsIntEv+0x5a>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	4613      	mov	r3, r2
 8010384:	07db      	lsls	r3, r3, #31
 8010386:	1a9b      	subs	r3, r3, r2
 8010388:	005b      	lsls	r3, r3, #1
 801038a:	461a      	mov	r2, r3
 801038c:	68bb      	ldr	r3, [r7, #8]
 801038e:	4413      	add	r3, r2
 8010390:	1e5a      	subs	r2, r3, #1
 8010392:	68bb      	ldr	r3, [r7, #8]
 8010394:	fb92 f3f3 	sdiv	r3, r2, r3
 8010398:	0fda      	lsrs	r2, r3, #31
 801039a:	4413      	add	r3, r2
 801039c:	105b      	asrs	r3, r3, #1
 801039e:	425b      	negs	r3, r3
        return scaled2int(i, yScale);
 80103a0:	bf00      	nop
    }
 80103a2:	4618      	mov	r0, r3
 80103a4:	371c      	adds	r7, #28
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr

080103ae <_ZNK8touchgfx17AbstractDataGraph24getGraphRangeYMaxAsFloatEv>:
    virtual float getGraphRangeYMaxAsFloat() const
 80103ae:	b480      	push	{r7}
 80103b0:	b087      	sub	sp, #28
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
        return scaled2floatY(graphRangeMaxY);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	617a      	str	r2, [r7, #20]
 80103c0:	613b      	str	r3, [r7, #16]
        return scaled2float(i, yScale);
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80103c6:	693a      	ldr	r2, [r7, #16]
 80103c8:	60fa      	str	r2, [r7, #12]
 80103ca:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	ee07 3a90 	vmov	s15, r3
 80103d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	ee07 3a90 	vmov	s15, r3
 80103dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, yScale);
 80103e4:	bf00      	nop
        return scaled2floatY(graphRangeMaxY);
 80103e6:	eef0 7a66 	vmov.f32	s15, s13
    }
 80103ea:	eeb0 0a67 	vmov.f32	s0, s15
 80103ee:	371c      	adds	r7, #28
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr

080103f8 <_ZNK8touchgfx17AbstractDataGraph23getGraphRangeYMaxScaledEv>:
    virtual int getGraphRangeYMaxScaled() const
 80103f8:	b480      	push	{r7}
 80103fa:	b083      	sub	sp, #12
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
        return graphRangeMaxY;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
    }
 8010406:	4618      	mov	r0, r3
 8010408:	370c      	adds	r7, #12
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr

08010412 <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv>:
     * @return The given data converted to a new scale.
     */
    static int convertToNewScale(int value, int oldScale, int newScale);

    /** Invalidate content. */
    virtual void invalidateContent() const
 8010412:	b580      	push	{r7, lr}
 8010414:	b082      	sub	sp, #8
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
    {
        if (alpha > 0)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010420:	2b00      	cmp	r3, #0
 8010422:	d003      	beq.n	801042c <_ZNK8touchgfx17AbstractDataGraph17invalidateContentEv+0x1a>
        {
            Container::invalidateContent();
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	4618      	mov	r0, r3
 8010428:	f7fe fe10 	bl	800f04c <_ZNK8touchgfx8Drawable17invalidateContentEv>
        }
    }
 801042c:	bf00      	nop
 801042e:	3708      	adds	r7, #8
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenXQ5Ei>:
     *
     * @param  x The x value.
     *
     * @return The screen x coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenXQ5(int x) const
 8010434:	b590      	push	{r4, r7, lr}
 8010436:	b089      	sub	sp, #36	@ 0x24
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
    {
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8010444:	683a      	ldr	r2, [r7, #0]
 8010446:	1ad4      	subs	r4, r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 801044c:	69bb      	ldr	r3, [r7, #24]
 801044e:	3338      	adds	r3, #56	@ 0x38
 8010450:	4618      	mov	r0, r3
 8010452:	f7fe fe3a 	bl	800f0ca <_ZNK8touchgfx8Drawable8getWidthEv>
 8010456:	4603      	mov	r3, r0
 8010458:	b29a      	uxth	r2, r3
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 8010460:	b299      	uxth	r1, r3
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 8010468:	b29b      	uxth	r3, r3
 801046a:	440b      	add	r3, r1
 801046c:	b29b      	uxth	r3, r3
 801046e:	1ad3      	subs	r3, r2, r3
 8010470:	b29b      	uxth	r3, r3
 8010472:	b21b      	sxth	r3, r3
        return CWRUtil::muldiv_toQ5(x - graphRangeMinX, getGraphAreaWidth() - 1, graphRangeMaxX - graphRangeMinX) + CWRUtil::toQ5(leftPadding);
 8010474:	1e59      	subs	r1, r3, #1
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	461a      	mov	r2, r3
 8010486:	4620      	mov	r0, r4
 8010488:	f7ff fb23 	bl	800fad2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 801048c:	4603      	mov	r3, r0
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 8010496:	83fb      	strh	r3, [r7, #30]
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8010498:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801049c:	015a      	lsls	r2, r3, #5
 801049e:	f107 0314 	add.w	r3, r7, #20
 80104a2:	4611      	mov	r1, r2
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7ff faa7 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	613b      	str	r3, [r7, #16]
 80104ae:	f107 0210 	add.w	r2, r7, #16
 80104b2:	f107 030c 	add.w	r3, r7, #12
 80104b6:	4611      	mov	r1, r2
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7ff fab8 	bl	800fa2e <_ZNK8touchgfx7CWRUtil2Q5plERKS1_>
 80104be:	4603      	mov	r3, r0
    }
 80104c0:	4618      	mov	r0, r3
 80104c2:	3724      	adds	r7, #36	@ 0x24
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd90      	pop	{r4, r7, pc}

080104c8 <_ZNK8touchgfx17AbstractDataGraph16valueToScreenYQ5Ei>:
     *
     * @param  y The y value.
     *
     * @return The screen y coordinate for the given value.
     */
    virtual CWRUtil::Q5 valueToScreenYQ5(int y) const
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b088      	sub	sp, #32
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	6039      	str	r1, [r7, #0]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	617b      	str	r3, [r7, #20]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	3338      	adds	r3, #56	@ 0x38
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fe fe02 	bl	800f0e4 <_ZNK8touchgfx8Drawable9getHeightEv>
 80104e0:	4603      	mov	r3, r0
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 80104ea:	b299      	uxth	r1, r3
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	440b      	add	r3, r1
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	b21b      	sxth	r3, r3
    {
        const int16_t graphAreaHeight = getGraphAreaHeight();
 80104fe:	83fb      	strh	r3, [r7, #30]
        return CWRUtil::toQ5(graphAreaHeight + topPadding - 1) - CWRUtil::muldiv_toQ5(y - graphRangeMinY, graphAreaHeight - 1, graphRangeMaxY - graphRangeMinY);
 8010500:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	f9b2 2114 	ldrsh.w	r2, [r2, #276]	@ 0x114
 801050a:	4413      	add	r3, r2
 801050c:	3b01      	subs	r3, #1
 801050e:	61bb      	str	r3, [r7, #24]
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	015a      	lsls	r2, r3, #5
 8010514:	f107 0310 	add.w	r3, r7, #16
 8010518:	4611      	mov	r1, r2
 801051a:	4618      	mov	r0, r3
 801051c:	f7ff fa6c 	bl	800f9f8 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010520:	693b      	ldr	r3, [r7, #16]
 8010522:	60bb      	str	r3, [r7, #8]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 801052a:	683a      	ldr	r2, [r7, #0]
 801052c:	1ad0      	subs	r0, r2, r3
 801052e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010532:	1e59      	subs	r1, r3, #1
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f8d3 2138 	ldr.w	r2, [r3, #312]	@ 0x138
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8010540:	1ad3      	subs	r3, r2, r3
 8010542:	461a      	mov	r2, r3
 8010544:	f7ff fac5 	bl	800fad2 <_ZN8touchgfx7CWRUtil11muldiv_toQ5Elll>
 8010548:	4603      	mov	r3, r0
 801054a:	60fb      	str	r3, [r7, #12]
 801054c:	f107 020c 	add.w	r2, r7, #12
 8010550:	f107 0308 	add.w	r3, r7, #8
 8010554:	4611      	mov	r1, r2
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff fa7e 	bl	800fa58 <_ZNK8touchgfx7CWRUtil2Q5miERKS1_>
 801055c:	4603      	mov	r3, r0
    }
 801055e:	4618      	mov	r0, r3
 8010560:	3720      	adds	r7, #32
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}
	...

08010568 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 8010568:	b580      	push	{r7, lr}
 801056a:	b082      	sub	sp, #8
 801056c:	af00      	add	r7, sp, #0
 801056e:	6078      	str	r0, [r7, #4]
 8010570:	4a05      	ldr	r2, [pc, #20]	@ (8010588 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4618      	mov	r0, r3
 801057a:	f7fe fd47 	bl	800f00c <_ZN8touchgfx8DrawableD1Ev>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4618      	mov	r0, r3
 8010582:	3708      	adds	r7, #8
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}
 8010588:	0802fa00 	.word	0x0802fa00

0801058c <_ZN8touchgfx9ContainerD0Ev>:
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f7ff ffe7 	bl	8010568 <_ZN8touchgfx9ContainerD1Ev>
 801059a:	212c      	movs	r1, #44	@ 0x2c
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f01c f870 	bl	802c682 <_ZdlPvj>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	4618      	mov	r0, r3
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <_ZN8touchgfx17AbstractDataGraphD1Ev>:
class AbstractDataGraph : public Container
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b082      	sub	sp, #8
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	6078      	str	r0, [r7, #4]
 80105b4:	4a12      	ldr	r2, [pc, #72]	@ (8010600 <_ZN8touchgfx17AbstractDataGraphD1Ev+0x54>)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	601a      	str	r2, [r3, #0]
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	33e8      	adds	r3, #232	@ 0xe8
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff ffd2 	bl	8010568 <_ZN8touchgfx9ContainerD1Ev>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	33bc      	adds	r3, #188	@ 0xbc
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff ffcd 	bl	8010568 <_ZN8touchgfx9ContainerD1Ev>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	3390      	adds	r3, #144	@ 0x90
 80105d2:	4618      	mov	r0, r3
 80105d4:	f7ff ffc8 	bl	8010568 <_ZN8touchgfx9ContainerD1Ev>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	3364      	adds	r3, #100	@ 0x64
 80105dc:	4618      	mov	r0, r3
 80105de:	f7ff ffc3 	bl	8010568 <_ZN8touchgfx9ContainerD1Ev>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	3338      	adds	r3, #56	@ 0x38
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7ff ffbe 	bl	8010568 <_ZN8touchgfx9ContainerD1Ev>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4618      	mov	r0, r3
 80105f0:	f7ff ffba 	bl	8010568 <_ZN8touchgfx9ContainerD1Ev>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4618      	mov	r0, r3
 80105f8:	3708      	adds	r7, #8
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	0802fe30 	.word	0x0802fe30

08010604 <_ZN8touchgfx17AbstractDataGraphD0Ev>:
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f7ff ffcd 	bl	80105ac <_ZN8touchgfx17AbstractDataGraphD1Ev>
 8010612:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8010616:	6878      	ldr	r0, [r7, #4]
 8010618:	f01c f833 	bl	802c682 <_ZdlPvj>
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	4618      	mov	r0, r3
 8010620:	3708      	adds	r7, #8
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}
	...

08010628 <_ZN8touchgfx16DynamicDataGraphC1EsPi>:
     * Initializes a new instance of the AbstractDataGraphWithY class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Address where to store the y values of the graph.
     */
    DynamicDataGraph(int16_t capacity, int* values)
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	460b      	mov	r3, r1
 8010632:	607a      	str	r2, [r7, #4]
 8010634:	817b      	strh	r3, [r7, #10]
        : AbstractDataGraph(capacity), xAxisFactor(1), xAxisOffset(0), yValues(values), dataCounter(0)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801063c:	4611      	mov	r1, r2
 801063e:	4618      	mov	r0, r3
 8010640:	f006 fc04 	bl	8016e4c <_ZN8touchgfx17AbstractDataGraphC1Es>
 8010644:	4a0f      	ldr	r2, [pc, #60]	@ (8010684 <_ZN8touchgfx16DynamicDataGraphC1EsPi+0x5c>)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	601a      	str	r2, [r3, #0]
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2201      	movs	r2, #1
 801064e:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2200      	movs	r2, #0
 8010656:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	687a      	ldr	r2, [r7, #4]
 801065e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2200      	movs	r2, #0
 8010666:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
    {
        DynamicDataGraph::setGraphRangeX(0, capacity - 1);
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010670:	3b01      	subs	r3, #1
 8010672:	461a      	mov	r2, r3
 8010674:	2100      	movs	r1, #0
 8010676:	f7ff fac8 	bl	800fc0a <_ZN8touchgfx17AbstractDataGraph14setGraphRangeXEii>
    }
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	4618      	mov	r0, r3
 801067e:	3710      	adds	r7, #16
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	0802fc98 	.word	0x0802fc98

08010688 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>:
     * @see getScale
     *
     * @note The current xAxisFactor, xAxisOffet and xGraphRange values are updated to reflect the
     *       new scale being set.
     */
    virtual void setScale(int scale, bool updateData = false)
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	60f8      	str	r0, [r7, #12]
 8010690:	60b9      	str	r1, [r7, #8]
 8010692:	4613      	mov	r3, r2
 8010694:	71fb      	strb	r3, [r7, #7]
    {
        setScaleX(scale, updateData);
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	3388      	adds	r3, #136	@ 0x88
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	79fa      	ldrb	r2, [r7, #7]
 80106a0:	68b9      	ldr	r1, [r7, #8]
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	4798      	blx	r3
        setScaleY(scale, updateData);
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	3390      	adds	r3, #144	@ 0x90
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	79fa      	ldrb	r2, [r7, #7]
 80106b0:	68b9      	ldr	r1, [r7, #8]
 80106b2:	68f8      	ldr	r0, [r7, #12]
 80106b4:	4798      	blx	r3
    }
 80106b6:	bf00      	nop
 80106b8:	3710      	adds	r7, #16
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <_ZNK8touchgfx16DynamicDataGraph8getScaleEv>:
     *
     * @return The scaling factor.
     *
     * @see setScale
     */
    virtual int getScale() const
 80106be:	b580      	push	{r7, lr}
 80106c0:	b082      	sub	sp, #8
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
    {
        return getScaleY();
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	3394      	adds	r3, #148	@ 0x94
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	4798      	blx	r3
 80106d2:	4603      	mov	r3, r0
    }
 80106d4:	4618      	mov	r0, r3
 80106d6:	3708      	adds	r7, #8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMinEv>:
    /**
     * Gets the minimum x coordinate for the graph.
     *
     * @return The minimum x coordinate .
     */
    virtual int getGraphRangeXMin() const
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMinScaled();
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	33d4      	adds	r3, #212	@ 0xd4
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	4610      	mov	r0, r2
 80106f0:	4798      	blx	r3
 80106f2:	4603      	mov	r3, r0
    }
 80106f4:	4618      	mov	r0, r3
 80106f6:	3708      	adds	r7, #8
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <_ZNK8touchgfx16DynamicDataGraph17getGraphRangeXMaxEv>:
    /**
     * Gets the maximum x coordinate for the graph.
     *
     * @return The maximum x coordinate .
     */
    virtual int getGraphRangeXMax() const
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
    {
        return getGraphRangeXMaxScaled();
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	33e0      	adds	r3, #224	@ 0xe0
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4610      	mov	r0, r2
 8010710:	4798      	blx	r3
 8010712:	4603      	mov	r3, r0
    }
 8010714:	4618      	mov	r0, r3
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi>:

    virtual void setGraphRangeYAutoScaled(bool showXaxis, int margin);

    virtual void setGraphRangeXAutoScaled(bool /*showYaxis*/, int margin)
 801071c:	b5b0      	push	{r4, r5, r7, lr}
 801071e:	b08c      	sub	sp, #48	@ 0x30
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	460b      	mov	r3, r1
 8010726:	607a      	str	r2, [r7, #4]
 8010728:	72fb      	strb	r3, [r7, #11]
    {
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 801072a:	68f8      	ldr	r0, [r7, #12]
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	33a4      	adds	r3, #164	@ 0xa4
 8010732:	681c      	ldr	r4, [r3, #0]
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	61fb      	str	r3, [r7, #28]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010740:	69ba      	ldr	r2, [r7, #24]
 8010742:	617a      	str	r2, [r7, #20]
 8010744:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	2b00      	cmp	r3, #0
 801074a:	db0a      	blt.n	8010762 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x46>
            return ((i * 2 + scale) / scale) / 2;
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	005a      	lsls	r2, r3, #1
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	441a      	add	r2, r3
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	fb92 f3f3 	sdiv	r3, r2, r3
 801075a:	0fda      	lsrs	r2, r3, #31
 801075c:	4413      	add	r3, r2
 801075e:	105b      	asrs	r3, r3, #1
 8010760:	e00f      	b.n	8010782 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0x66>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8010762:	697a      	ldr	r2, [r7, #20]
 8010764:	4613      	mov	r3, r2
 8010766:	07db      	lsls	r3, r3, #31
 8010768:	1a9b      	subs	r3, r3, r2
 801076a:	005b      	lsls	r3, r3, #1
 801076c:	461a      	mov	r2, r3
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	4413      	add	r3, r2
 8010772:	1e5a      	subs	r2, r3, #1
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	fb92 f3f3 	sdiv	r3, r2, r3
 801077a:	0fda      	lsrs	r2, r3, #31
 801077c:	4413      	add	r3, r2
 801077e:	105b      	asrs	r3, r3, #1
 8010780:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 8010782:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 8010784:	425d      	negs	r5, r3
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 801078c:	1e59      	subs	r1, r3, #1
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	62bb      	str	r3, [r7, #40]	@ 0x28
        return scaled2int(i, xScale);
 8010796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801079a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801079c:	627a      	str	r2, [r7, #36]	@ 0x24
 801079e:	623b      	str	r3, [r7, #32]
        if (i >= 0)
 80107a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	db0a      	blt.n	80107bc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xa0>
            return ((i * 2 + scale) / scale) / 2;
 80107a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107a8:	005a      	lsls	r2, r3, #1
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	441a      	add	r2, r3
 80107ae:	6a3b      	ldr	r3, [r7, #32]
 80107b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80107b4:	0fda      	lsrs	r2, r3, #31
 80107b6:	4413      	add	r3, r2
 80107b8:	105b      	asrs	r3, r3, #1
 80107ba:	e00f      	b.n	80107dc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeXAutoScaledEbi+0xc0>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 80107bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107be:	4613      	mov	r3, r2
 80107c0:	07db      	lsls	r3, r3, #31
 80107c2:	1a9b      	subs	r3, r3, r2
 80107c4:	005b      	lsls	r3, r3, #1
 80107c6:	461a      	mov	r2, r3
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	4413      	add	r3, r2
 80107cc:	1e5a      	subs	r2, r3, #1
 80107ce:	6a3b      	ldr	r3, [r7, #32]
 80107d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80107d4:	0fda      	lsrs	r2, r3, #31
 80107d6:	4413      	add	r3, r2
 80107d8:	105b      	asrs	r3, r3, #1
 80107da:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 80107dc:	bf00      	nop
        setGraphRangeXScaled(-scaled2intX(margin), (usedCapacity - 1) + scaled2intX(margin));
 80107de:	440b      	add	r3, r1
 80107e0:	461a      	mov	r2, r3
 80107e2:	4629      	mov	r1, r5
 80107e4:	47a0      	blx	r4
    }
 80107e6:	bf00      	nop
 80107e8:	3730      	adds	r7, #48	@ 0x30
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bdb0      	pop	{r4, r5, r7, pc}

080107ee <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(int scale))
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b082      	sub	sp, #8
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactor(scale);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	6839      	ldr	r1, [r7, #0]
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	4798      	blx	r3
    }
 8010808:	bf00      	nop
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEi>:
     * Set x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @param  factor The x axis factor.
     */
    virtual void setXAxisFactor(int factor)
 8010810:	b580      	push	{r7, lr}
 8010812:	b086      	sub	sp, #24
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(int2scaledX(factor));
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	617a      	str	r2, [r7, #20]
 8010828:	683a      	ldr	r2, [r7, #0]
 801082a:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 801082c:	697a      	ldr	r2, [r7, #20]
 801082e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010830:	6939      	ldr	r1, [r7, #16]
 8010832:	60f9      	str	r1, [r7, #12]
 8010834:	60ba      	str	r2, [r7, #8]
        return i * scale;
 8010836:	68fa      	ldr	r2, [r7, #12]
 8010838:	68b9      	ldr	r1, [r7, #8]
 801083a:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 801083e:	bf00      	nop
        setXAxisFactorScaled(int2scaledX(factor));
 8010840:	4611      	mov	r1, r2
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	4798      	blx	r3
    }
 8010846:	bf00      	nop
 8010848:	3718      	adds	r7, #24
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <_ZN8touchgfx16DynamicDataGraph13setXAxisScaleEf>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactor()", virtual void setXAxisScale(float scale))
 801084e:	b580      	push	{r7, lr}
 8010850:	b082      	sub	sp, #8
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
 8010856:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactor(scale);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	ed97 0a00 	vldr	s0, [r7]
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	4798      	blx	r3
    }
 801086c:	bf00      	nop
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf>:

    /// @endcond

    /** @copydoc setXAxisFactor(int) */
    virtual void setXAxisFactor(float factor)
 8010874:	b580      	push	{r7, lr}
 8010876:	b088      	sub	sp, #32
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisFactorScaled(float2scaledX(factor));
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	687a      	ldr	r2, [r7, #4]
 801088c:	61fa      	str	r2, [r7, #28]
 801088e:	683a      	ldr	r2, [r7, #0]
 8010890:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 8010892:	69fa      	ldr	r2, [r7, #28]
 8010894:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010896:	69b9      	ldr	r1, [r7, #24]
 8010898:	6179      	str	r1, [r7, #20]
 801089a:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 801089c:	693a      	ldr	r2, [r7, #16]
 801089e:	ee07 2a90 	vmov	s15, r2
 80108a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80108aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80108ae:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 80108b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80108b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80108ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108be:	db0a      	blt.n	80108d6 <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x62>
            return (int)(fs + 0.5f);
 80108c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80108c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80108c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80108cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108d0:	ee17 2a90 	vmov	r2, s15
 80108d4:	e019      	b.n	801090a <_ZN8touchgfx16DynamicDataGraph14setXAxisFactorEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 80108d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80108da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108de:	ee17 2a90 	vmov	r2, s15
 80108e2:	3a01      	subs	r2, #1
 80108e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80108e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80108ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80108f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108f8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80108fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010904:	ee17 1a90 	vmov	r1, s15
 8010908:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 801090a:	bf00      	nop
        setXAxisFactorScaled(float2scaledX(factor));
 801090c:	4611      	mov	r1, r2
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	4798      	blx	r3
    }
 8010912:	bf00      	nop
 8010914:	3720      	adds	r7, #32
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <_ZN8touchgfx16DynamicDataGraph20setXAxisFactorScaledEi>:
     *
     * @param  factor The x axis factor.
     *
     * @see setXAxisFactorScaled,setXAxisFactor
     */
    virtual void setXAxisFactorScaled(int factor)
 801091a:	b480      	push	{r7}
 801091c:	b083      	sub	sp, #12
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
 8010922:	6039      	str	r1, [r7, #0]
    {
        xAxisFactor = factor;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	683a      	ldr	r2, [r7, #0]
 8010928:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    }
 801092c:	bf00      	nop
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <_ZNK8touchgfx16DynamicDataGraph18getXAxisScaleAsIntEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsInt()", virtual int getXAxisScaleAsInt() const)
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsInt();
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6878      	ldr	r0, [r7, #4]
 801094c:	4798      	blx	r3
 801094e:	4603      	mov	r3, r0
    }
 8010950:	4618      	mov	r0, r3
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}

08010958 <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv>:
     * Get x coordinate axis factor value. This is the real x value increment between two data
     * points added to the graph.
     *
     * @return The x axis factor.
     */
    virtual int getXAxisFactorAsInt() const
 8010958:	b590      	push	{r4, r7, lr}
 801095a:	b087      	sub	sp, #28
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisFactorScaled());
 8010960:	687c      	ldr	r4, [r7, #4]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	4798      	blx	r3
 8010970:	4603      	mov	r3, r0
 8010972:	617c      	str	r4, [r7, #20]
 8010974:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 8010976:	697b      	ldr	r3, [r7, #20]
 8010978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801097a:	693a      	ldr	r2, [r7, #16]
 801097c:	60fa      	str	r2, [r7, #12]
 801097e:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2b00      	cmp	r3, #0
 8010984:	db0a      	blt.n	801099c <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x44>
            return ((i * 2 + scale) / scale) / 2;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	005a      	lsls	r2, r3, #1
 801098a:	68bb      	ldr	r3, [r7, #8]
 801098c:	441a      	add	r2, r3
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	fb92 f3f3 	sdiv	r3, r2, r3
 8010994:	0fda      	lsrs	r2, r3, #31
 8010996:	4413      	add	r3, r2
 8010998:	105b      	asrs	r3, r3, #1
 801099a:	e00f      	b.n	80109bc <_ZNK8touchgfx16DynamicDataGraph19getXAxisFactorAsIntEv+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 801099c:	68fa      	ldr	r2, [r7, #12]
 801099e:	4613      	mov	r3, r2
 80109a0:	07db      	lsls	r3, r3, #31
 80109a2:	1a9b      	subs	r3, r3, r2
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	461a      	mov	r2, r3
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	4413      	add	r3, r2
 80109ac:	1e5a      	subs	r2, r3, #1
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80109b4:	0fda      	lsrs	r2, r3, #31
 80109b6:	4413      	add	r3, r2
 80109b8:	105b      	asrs	r3, r3, #1
 80109ba:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 80109bc:	bf00      	nop
    }
 80109be:	4618      	mov	r0, r3
 80109c0:	371c      	adds	r7, #28
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd90      	pop	{r4, r7, pc}

080109c6 <_ZNK8touchgfx16DynamicDataGraph20getXAxisScaleAsFloatEv>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorAsFloat()", virtual float getXAxisScaleAsFloat() const)
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b082      	sub	sp, #8
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorAsFloat();
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	4798      	blx	r3
 80109dc:	eef0 7a40 	vmov.f32	s15, s0
    }
 80109e0:	eeb0 0a67 	vmov.f32	s0, s15
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <_ZNK8touchgfx16DynamicDataGraph21getXAxisFactorAsFloatEv>:

    /// @endcond

    /** @copydoc getXAxisFactorAsInt() */
    virtual float getXAxisFactorAsFloat() const
 80109ea:	b590      	push	{r4, r7, lr}
 80109ec:	b087      	sub	sp, #28
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisFactorScaled());
 80109f2:	687c      	ldr	r4, [r7, #4]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	4798      	blx	r3
 8010a02:	4603      	mov	r3, r0
 8010a04:	617c      	str	r4, [r7, #20]
 8010a06:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a0c:	693a      	ldr	r2, [r7, #16]
 8010a0e:	60fa      	str	r2, [r7, #12]
 8010a10:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	ee07 3a90 	vmov	s15, r3
 8010a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	ee07 3a90 	vmov	s15, r3
 8010a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a26:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 8010a2a:	bf00      	nop
        return scaled2floatX(getXAxisFactorScaled());
 8010a2c:	eef0 7a66 	vmov.f32	s15, s13
    }
 8010a30:	eeb0 0a67 	vmov.f32	s0, s15
 8010a34:	371c      	adds	r7, #28
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd90      	pop	{r4, r7, pc}

08010a3a <_ZNK8touchgfx16DynamicDataGraph20getXAxisFactorScaledEv>:
     *
     * @return The x axis factor (scaled).
     *
     * @see getXAxisFactorAsInt, getXAxisFactorAsFloat, setXAxisFactor
     */
    virtual int getXAxisFactorScaled() const
 8010a3a:	b480      	push	{r7}
 8010a3c:	b083      	sub	sp, #12
 8010a3e:	af00      	add	r7, sp, #0
 8010a40:	6078      	str	r0, [r7, #4]
    {
        return xAxisFactor;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
    }
 8010a48:	4618      	mov	r0, r3
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEi>:
     * Set x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @param  offset The x axis offset.
     */
    virtual void setXAxisOffset(int offset)
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b086      	sub	sp, #24
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
    {
        setXAxisOffsetScaled(int2scaledX(offset));
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	617a      	str	r2, [r7, #20]
 8010a6c:	683a      	ldr	r2, [r7, #0]
 8010a6e:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010a74:	6939      	ldr	r1, [r7, #16]
 8010a76:	60f9      	str	r1, [r7, #12]
 8010a78:	60ba      	str	r2, [r7, #8]
        return i * scale;
 8010a7a:	68fa      	ldr	r2, [r7, #12]
 8010a7c:	68b9      	ldr	r1, [r7, #8]
 8010a7e:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 8010a82:	bf00      	nop
        setXAxisOffsetScaled(int2scaledX(offset));
 8010a84:	4611      	mov	r1, r2
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	4798      	blx	r3
    }
 8010a8a:	bf00      	nop
 8010a8c:	3718      	adds	r7, #24
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf>:

    /** @copydoc setXAxisOffset(int) */
    virtual void setXAxisOffset(float offset)
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b088      	sub	sp, #32
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	ed87 0a00 	vstr	s0, [r7]
    {
        setXAxisOffsetScaled(float2scaledX(offset));
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	687a      	ldr	r2, [r7, #4]
 8010aaa:	61fa      	str	r2, [r7, #28]
 8010aac:	683a      	ldr	r2, [r7, #0]
 8010aae:	61ba      	str	r2, [r7, #24]
        return float2scaled(f, xScale);
 8010ab0:	69fa      	ldr	r2, [r7, #28]
 8010ab2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010ab4:	69b9      	ldr	r1, [r7, #24]
 8010ab6:	6179      	str	r1, [r7, #20]
 8010ab8:	613a      	str	r2, [r7, #16]
        const float fs = f * (float)scale;
 8010aba:	693a      	ldr	r2, [r7, #16]
 8010abc:	ee07 2a90 	vmov	s15, r2
 8010ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ac4:	ed97 7a05 	vldr	s14, [r7, #20]
 8010ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010acc:	edc7 7a03 	vstr	s15, [r7, #12]
        if (fs >= 0)
 8010ad0:	edd7 7a03 	vldr	s15, [r7, #12]
 8010ad4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010adc:	db0a      	blt.n	8010af4 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x62>
            return (int)(fs + 0.5f);
 8010ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8010ae2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010aee:	ee17 2a90 	vmov	r2, s15
 8010af2:	e019      	b.n	8010b28 <_ZN8touchgfx16DynamicDataGraph14setXAxisOffsetEf+0x96>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8010af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8010af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010afc:	ee17 2a90 	vmov	r2, s15
 8010b00:	3a01      	subs	r2, #1
 8010b02:	edd7 7a03 	vldr	s15, [r7, #12]
 8010b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8010b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b16:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8010b1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b22:	ee17 1a90 	vmov	r1, s15
 8010b26:	440a      	add	r2, r1
        return float2scaled(f, xScale);
 8010b28:	bf00      	nop
        setXAxisOffsetScaled(float2scaledX(offset));
 8010b2a:	4611      	mov	r1, r2
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	4798      	blx	r3
    }
 8010b30:	bf00      	nop
 8010b32:	3720      	adds	r7, #32
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <_ZN8touchgfx16DynamicDataGraph20setXAxisOffsetScaledEi>:
     *
     * @see setXAxisOffset
     *
     * @see setXAxisOffset, getXAxisOffsetScaled
     */
    virtual void setXAxisOffsetScaled(int offset)
 8010b38:	b480      	push	{r7}
 8010b3a:	b083      	sub	sp, #12
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
    {
        xAxisOffset = offset;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	683a      	ldr	r2, [r7, #0]
 8010b46:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    }
 8010b4a:	bf00      	nop
 8010b4c:	370c      	adds	r7, #12
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv>:
     * Get x coordinate axis offset value. This is the real x value of the first data point
     * added to the graph (i.e. the data point at index 0).
     *
     * @return The x axis offset.
     */
    virtual int getXAxisOffsetAsInt() const
 8010b56:	b590      	push	{r4, r7, lr}
 8010b58:	b087      	sub	sp, #28
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
    {
        return scaled2intX(getXAxisOffsetScaled());
 8010b5e:	687c      	ldr	r4, [r7, #4]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	4798      	blx	r3
 8010b6e:	4603      	mov	r3, r0
 8010b70:	617c      	str	r4, [r7, #20]
 8010b72:	613b      	str	r3, [r7, #16]
        return scaled2int(i, xScale);
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b78:	693a      	ldr	r2, [r7, #16]
 8010b7a:	60fa      	str	r2, [r7, #12]
 8010b7c:	60bb      	str	r3, [r7, #8]
        if (i >= 0)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	db0a      	blt.n	8010b9a <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x44>
            return ((i * 2 + scale) / scale) / 2;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	005a      	lsls	r2, r3, #1
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	441a      	add	r2, r3
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8010b92:	0fda      	lsrs	r2, r3, #31
 8010b94:	4413      	add	r3, r2
 8010b96:	105b      	asrs	r3, r3, #1
 8010b98:	e00f      	b.n	8010bba <_ZNK8touchgfx16DynamicDataGraph19getXAxisOffsetAsIntEv+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	07db      	lsls	r3, r3, #31
 8010ba0:	1a9b      	subs	r3, r3, r2
 8010ba2:	005b      	lsls	r3, r3, #1
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	4413      	add	r3, r2
 8010baa:	1e5a      	subs	r2, r3, #1
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8010bb2:	0fda      	lsrs	r2, r3, #31
 8010bb4:	4413      	add	r3, r2
 8010bb6:	105b      	asrs	r3, r3, #1
 8010bb8:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 8010bba:	bf00      	nop
    }
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	371c      	adds	r7, #28
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd90      	pop	{r4, r7, pc}

08010bc4 <_ZNK8touchgfx16DynamicDataGraph21getXAxisOffsetAsFloatEv>:

    /** @copydoc getXAxisOffsetAsInt() */
    virtual float getXAxisOffsetAsFloat() const
 8010bc4:	b590      	push	{r4, r7, lr}
 8010bc6:	b087      	sub	sp, #28
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
    {
        return scaled2floatX(getXAxisOffsetScaled());
 8010bcc:	687c      	ldr	r4, [r7, #4]
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	f503 73ba 	add.w	r3, r3, #372	@ 0x174
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	4798      	blx	r3
 8010bdc:	4603      	mov	r3, r0
 8010bde:	617c      	str	r4, [r7, #20]
 8010be0:	613b      	str	r3, [r7, #16]
        return scaled2float(i, xScale);
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010be6:	693a      	ldr	r2, [r7, #16]
 8010be8:	60fa      	str	r2, [r7, #12]
 8010bea:	60bb      	str	r3, [r7, #8]
        return (float)i / (float)scale;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	ee07 3a90 	vmov	s15, r3
 8010bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	ee07 3a90 	vmov	s15, r3
 8010bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c00:	eec7 6a27 	vdiv.f32	s13, s14, s15
        return scaled2float(i, xScale);
 8010c04:	bf00      	nop
        return scaled2floatX(getXAxisOffsetScaled());
 8010c06:	eef0 7a66 	vmov.f32	s15, s13
    }
 8010c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8010c0e:	371c      	adds	r7, #28
 8010c10:	46bd      	mov	sp, r7
 8010c12:	bd90      	pop	{r4, r7, pc}

08010c14 <_ZNK8touchgfx16DynamicDataGraph20getXAxisOffsetScaledEv>:
     *
     * @return The x axis offset (scaled).
     *
     * @see getXAxisOffsetAsInt, getXAxisOffsetAsFloat, setXAxisOffsetScaled, setXAxisOffset
     */
    virtual int getXAxisOffsetScaled() const
 8010c14:	b480      	push	{r7}
 8010c16:	b083      	sub	sp, #12
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
    {
        return xAxisOffset;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
    }
 8010c22:	4618      	mov	r0, r3
 8010c24:	370c      	adds	r7, #12
 8010c26:	46bd      	mov	sp, r7
 8010c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c2c:	4770      	bx	lr
	...

08010c30 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs>:

    virtual int indexToDataPointXScaled(int16_t index) const
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	460b      	mov	r3, r1
 8010c3a:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 8010c3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	db06      	blt.n	8010c52 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x22>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 8010c4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	db06      	blt.n	8010c60 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x30>
 8010c52:	4b0f      	ldr	r3, [pc, #60]	@ (8010c90 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x60>)
 8010c54:	4a0f      	ldr	r2, [pc, #60]	@ (8010c94 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x64>)
 8010c56:	f240 6133 	movw	r1, #1587	@ 0x633
 8010c5a:	480f      	ldr	r0, [pc, #60]	@ (8010c98 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointXScaledEs+0x68>)
 8010c5c:	f01b fd3e 	bl	802c6dc <__assert_func>
        return (indexToGlobalIndex(index) * xAxisFactor) + xAxisOffset;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010c6e:	4611      	mov	r1, r2
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	4798      	blx	r3
 8010c74:	4602      	mov	r2, r0
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010c7c:	fb03 f202 	mul.w	r2, r3, r2
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010c86:	4413      	add	r3, r2
    }
 8010c88:	4618      	mov	r0, r3
 8010c8a:	3708      	adds	r7, #8
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}
 8010c90:	0802dc44 	.word	0x0802dc44
 8010c94:	0802dc68 	.word	0x0802dc68
 8010c98:	0802dcb8 	.word	0x0802dcb8

08010c9c <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs>:

    virtual int indexToDataPointYScaled(int16_t index) const
 8010c9c:	b590      	push	{r4, r7, lr}
 8010c9e:	b083      	sub	sp, #12
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	807b      	strh	r3, [r7, #2]
    {
        assert(index >= 0 && index < usedCapacity);
 8010ca8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	db06      	blt.n	8010cbe <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x22>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	@ 0x11e
 8010cb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	db06      	blt.n	8010ccc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x30>
 8010cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8010cf8 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x5c>)
 8010cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8010cfc <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x60>)
 8010cc2:	f240 6139 	movw	r1, #1593	@ 0x639
 8010cc6:	480e      	ldr	r0, [pc, #56]	@ (8010d00 <_ZNK8touchgfx16DynamicDataGraph23indexToDataPointYScaledEs+0x64>)
 8010cc8:	f01b fd08 	bl	802c6dc <__assert_func>
        return yValues[dataIndex(index)];
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 4144 	ldr.w	r4, [r3, #324]	@ 0x144
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010ce0:	4611      	mov	r1, r2
 8010ce2:	6878      	ldr	r0, [r7, #4]
 8010ce4:	4798      	blx	r3
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	009b      	lsls	r3, r3, #2
 8010cea:	4423      	add	r3, r4
 8010cec:	681b      	ldr	r3, [r3, #0]
    }
 8010cee:	4618      	mov	r0, r3
 8010cf0:	370c      	adds	r7, #12
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd90      	pop	{r4, r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	0802dc44 	.word	0x0802dc44
 8010cfc:	0802dd14 	.word	0x0802dd14
 8010d00:	0802dcb8 	.word	0x0802dcb8

08010d04 <_ZNK8touchgfx16DynamicDataGraph9dataIndexEs>:
     *
     * @param  screenIndex Zero-based screen index.
     *
     * @return The index in the yValues array.
     */
    virtual int16_t dataIndex(int16_t screenIndex) const
 8010d04:	b480      	push	{r7}
 8010d06:	b083      	sub	sp, #12
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	807b      	strh	r3, [r7, #2]
    {
        return screenIndex;
 8010d10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    }
 8010d14:	4618      	mov	r0, r3
 8010d16:	370c      	adds	r7, #12
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d1e:	4770      	bx	lr

08010d20 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii>:
    virtual int32_t indexToGlobalIndex(int16_t index) const
    {
        return (int32_t)index;
    }

    virtual int indexToXAxis(const int valueScaled, const int /*labelScaled*/) const
 8010d20:	b590      	push	{r4, r7, lr}
 8010d22:	b089      	sub	sp, #36	@ 0x24
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60f8      	str	r0, [r7, #12]
 8010d28:	60b9      	str	r1, [r7, #8]
 8010d2a:	607a      	str	r2, [r7, #4]
    {
        // Value is also index for these types of graphs.
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8010d34:	681c      	ldr	r4, [r3, #0]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	61fb      	str	r3, [r7, #28]
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	61bb      	str	r3, [r7, #24]
        return scaled2int(i, xScale);
 8010d3e:	69fb      	ldr	r3, [r7, #28]
 8010d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d42:	69ba      	ldr	r2, [r7, #24]
 8010d44:	617a      	str	r2, [r7, #20]
 8010d46:	613b      	str	r3, [r7, #16]
        if (i >= 0)
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	db0a      	blt.n	8010d64 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x44>
            return ((i * 2 + scale) / scale) / 2;
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	005a      	lsls	r2, r3, #1
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	441a      	add	r2, r3
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	fb92 f3f3 	sdiv	r3, r2, r3
 8010d5c:	0fda      	lsrs	r2, r3, #31
 8010d5e:	4413      	add	r3, r2
 8010d60:	105b      	asrs	r3, r3, #1
 8010d62:	e00f      	b.n	8010d84 <_ZNK8touchgfx16DynamicDataGraph12indexToXAxisEii+0x64>
        return -(((-i * 2 + scale - 1) / scale) / 2);
 8010d64:	697a      	ldr	r2, [r7, #20]
 8010d66:	4613      	mov	r3, r2
 8010d68:	07db      	lsls	r3, r3, #31
 8010d6a:	1a9b      	subs	r3, r3, r2
 8010d6c:	005b      	lsls	r3, r3, #1
 8010d6e:	461a      	mov	r2, r3
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	4413      	add	r3, r2
 8010d74:	1e5a      	subs	r2, r3, #1
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8010d7c:	0fda      	lsrs	r2, r3, #31
 8010d7e:	4413      	add	r3, r2
 8010d80:	105b      	asrs	r3, r3, #1
 8010d82:	425b      	negs	r3, r3
        return scaled2int(i, xScale);
 8010d84:	bf00      	nop
        return (indexToGlobalIndex(scaled2intX(valueScaled)) * xAxisFactor) + xAxisOffset;
 8010d86:	b21b      	sxth	r3, r3
 8010d88:	4619      	mov	r1, r3
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	47a0      	blx	r4
 8010d8e:	4602      	mov	r2, r0
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010d96:	fb03 f202 	mul.w	r2, r3, r2
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010da0:	4413      	add	r3, r2
    }
 8010da2:	4618      	mov	r0, r3
 8010da4:	3724      	adds	r7, #36	@ 0x24
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd90      	pop	{r4, r7, pc}

08010daa <_ZNK8touchgfx16DynamicDataGraph9getScaleXEv>:

    virtual bool xScreenRangeToIndexRange(int16_t xMin, int16_t xMax, int16_t& indexMin, int16_t& indexMax) const;

    virtual void setScaleX(int scale, bool updateData = false);

    virtual int getScaleX() const
 8010daa:	b580      	push	{r7, lr}
 8010dac:	b082      	sub	sp, #8
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleX();
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fe ff00 	bl	800fbba <_ZNK8touchgfx17AbstractDataGraph9getScaleXEv>
 8010dba:	4603      	mov	r3, r0
    }
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <_ZNK8touchgfx16DynamicDataGraph9getScaleYEv>:

    virtual void setScaleY(int scale, bool updateData = false);

    virtual int getScaleY() const
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
    {
        return AbstractDataGraph::getScaleY();
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fe feff 	bl	800fbd2 <_ZNK8touchgfx17AbstractDataGraph9getScaleYEv>
 8010dd4:	4603      	mov	r3, r0
    }
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3708      	adds	r7, #8
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}

08010dde <_ZN8touchgfx16DynamicDataGraph19setXAxisScaleScaledEi>:

    /// @cond
    TOUCHGFX_DEPRECATED("Please use setXAxisFactorScaled()", virtual void setXAxisScaleScaled(int scale))
 8010dde:	b580      	push	{r7, lr}
 8010de0:	b082      	sub	sp, #8
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	6078      	str	r0, [r7, #4]
 8010de6:	6039      	str	r1, [r7, #0]
    {
        setXAxisFactorScaled(scale);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	6839      	ldr	r1, [r7, #0]
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	4798      	blx	r3
    }
 8010df8:	bf00      	nop
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <_ZNK8touchgfx16DynamicDataGraph19getXAxisScaleScaledEv>:

    /// @endcond

    /// @cond
    TOUCHGFX_DEPRECATED("Please use getXAxisFactorScaled()", virtual int getXAxisScaleScaled() const)
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b082      	sub	sp, #8
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
    {
        return getXAxisFactorScaled();
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	4798      	blx	r3
 8010e16:	4603      	mov	r3, r0
    }
 8010e18:	4618      	mov	r0, r3
 8010e1a:	3708      	adds	r7, #8
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}

08010e20 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenXQ5Es>:

    /// @endcond

    virtual CWRUtil::Q5 indexToScreenXQ5(int16_t index) const
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b086      	sub	sp, #24
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenXQ5(int2scaledX(index));
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	6879      	ldr	r1, [r7, #4]
 8010e3a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010e3e:	6179      	str	r1, [r7, #20]
 8010e40:	613a      	str	r2, [r7, #16]
        return int2scaled(i, xScale);
 8010e42:	697a      	ldr	r2, [r7, #20]
 8010e44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8010e46:	6939      	ldr	r1, [r7, #16]
 8010e48:	60f9      	str	r1, [r7, #12]
 8010e4a:	60ba      	str	r2, [r7, #8]
        return i * scale;
 8010e4c:	68fa      	ldr	r2, [r7, #12]
 8010e4e:	68b9      	ldr	r1, [r7, #8]
 8010e50:	fb01 f202 	mul.w	r2, r1, r2
        return int2scaled(i, xScale);
 8010e54:	bf00      	nop
        return valueToScreenXQ5(int2scaledX(index));
 8010e56:	4611      	mov	r1, r2
 8010e58:	4798      	blx	r3
 8010e5a:	4603      	mov	r3, r0
    }
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3718      	adds	r7, #24
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <_ZNK8touchgfx16DynamicDataGraph16indexToScreenYQ5Es>:

    virtual CWRUtil::Q5 indexToScreenYQ5(int16_t index) const
 8010e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e66:	b083      	sub	sp, #12
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	6078      	str	r0, [r7, #4]
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	807b      	strh	r3, [r7, #2]
    {
        return valueToScreenYQ5(yValues[dataIndex(index)]);
 8010e70:	687e      	ldr	r6, [r7, #4]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8010e7a:	681c      	ldr	r4, [r3, #0]
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8d3 5144 	ldr.w	r5, [r3, #324]	@ 0x144
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8010e90:	4611      	mov	r1, r2
 8010e92:	6878      	ldr	r0, [r7, #4]
 8010e94:	4798      	blx	r3
 8010e96:	4603      	mov	r3, r0
 8010e98:	009b      	lsls	r3, r3, #2
 8010e9a:	442b      	add	r3, r5
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	47a0      	blx	r4
 8010ea4:	4603      	mov	r3, r0
    }
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08010eb0 <_ZN8touchgfx16DynamicDataGraphD1Ev>:
class DynamicDataGraph : public AbstractDataGraph
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b082      	sub	sp, #8
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	6078      	str	r0, [r7, #4]
 8010eb8:	4a05      	ldr	r2, [pc, #20]	@ (8010ed0 <_ZN8touchgfx16DynamicDataGraphD1Ev+0x20>)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	601a      	str	r2, [r3, #0]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7ff fb73 	bl	80105ac <_ZN8touchgfx17AbstractDataGraphD1Ev>
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	0802fc98 	.word	0x0802fc98

08010ed4 <_ZN8touchgfx16DynamicDataGraphD0Ev>:
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f7ff ffe7 	bl	8010eb0 <_ZN8touchgfx16DynamicDataGraphD1Ev>
 8010ee2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f01b fbcb 	bl	802c682 <_ZdlPvj>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
	...

08010ef8 <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi>:
     * Initializes a new instance of the GraphWrapAndOverwriteData class.
     *
     * @param      capacity The capacity.
     * @param [in] values   Pointer to memory with room for capacity elements of type T.
     */
    GraphWrapAndOverwriteData(int16_t capacity, int* values)
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b084      	sub	sp, #16
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	460b      	mov	r3, r1
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	817b      	strh	r3, [r7, #10]
        : DynamicDataGraph(capacity, values), current(0)
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8010f0c:	687a      	ldr	r2, [r7, #4]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7ff fb8a 	bl	8010628 <_ZN8touchgfx16DynamicDataGraphC1EsPi>
 8010f14:	4a05      	ldr	r2, [pc, #20]	@ (8010f2c <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi+0x34>)
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	601a      	str	r2, [r3, #0]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
    {
    }
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	4618      	mov	r0, r3
 8010f26:	3710      	adds	r7, #16
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	08030094 	.word	0x08030094

08010f30 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	683a      	ldr	r2, [r7, #0]
 8010f3e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
 8010f40:	bf00      	nop
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    {
        return canvasPainter;
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	460b      	mov	r3, r1
 8010f56:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	78fa      	ldrb	r2, [r7, #3]
 8010f5c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }
 8010f60:	bf00      	nop
 8010f62:	370c      	adds	r7, #12
 8010f64:	46bd      	mov	sp, r7
 8010f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6a:	4770      	bx	lr

08010f6c <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
 8010f6c:	b480      	push	{r7}
 8010f6e:	b083      	sub	sp, #12
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    }
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	370c      	adds	r7, #12
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8010f86:	b590      	push	{r4, r7, lr}
 8010f88:	b085      	sub	sp, #20
 8010f8a:	af02      	add	r7, sp, #8
 8010f8c:	6078      	str	r0, [r7, #4]
 8010f8e:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fe f899 	bl	800f0ca <_ZNK8touchgfx8Drawable8getWidthEv>
 8010f98:	4603      	mov	r3, r0
 8010f9a:	461c      	mov	r4, r3
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fe f8a0 	bl	800f0e4 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	4623      	mov	r3, r4
 8010faa:	2200      	movs	r2, #0
 8010fac:	2100      	movs	r1, #0
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f7fd ffdc 	bl	800ef6c <_ZN8touchgfx4RectC1Essss>
    }
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	370c      	adds	r7, #12
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd90      	pop	{r4, r7, pc}

08010fbc <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
     * @see draw
     *
     * @note Function draw() might fail for some horizontal lines due to memory constraints. These
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f7fd ffb9 	bl	800ef3e <_ZN8touchgfx4RectC1Ev>
    }
 8010fcc:	6878      	ldr	r0, [r7, #4]
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b082      	sub	sp, #8
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	4a05      	ldr	r2, [pc, #20]	@ (8010ff4 <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	601a      	str	r2, [r3, #0]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	f7fe fa53 	bl	800f490 <_ZN8touchgfx6WidgetD1Ev>
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	4618      	mov	r0, r3
 8010fee:	3708      	adds	r7, #8
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	0802fc20 	.word	0x0802fc20

08010ff8 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7ff ffe7 	bl	8010fd4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011006:	212c      	movs	r1, #44	@ 0x2c
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f01b fb3a 	bl	802c682 <_ZdlPvj>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	4618      	mov	r0, r3
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <_ZN8touchgfx20AbstractGraphElementC1Ev>:
 */
class AbstractGraphElement : public CanvasWidget
{
public:
    /** Default constructor. */
    AbstractGraphElement()
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
        : CanvasWidget()
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	4618      	mov	r0, r3
 8011024:	f005 fb8e 	bl	8016744 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8011028:	4a03      	ldr	r2, [pc, #12]	@ (8011038 <_ZN8touchgfx20AbstractGraphElementC1Ev+0x20>)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	601a      	str	r2, [r3, #0]
    {
    }
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	4618      	mov	r0, r3
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	0802f348 	.word	0x0802f348

0801103c <_ZN8touchgfx20AbstractGraphElementD1Ev>:
class AbstractGraphElement : public CanvasWidget
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
 8011044:	4a05      	ldr	r2, [pc, #20]	@ (801105c <_ZN8touchgfx20AbstractGraphElementD1Ev+0x20>)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	601a      	str	r2, [r3, #0]
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4618      	mov	r0, r3
 801104e:	f7ff ffc1 	bl	8010fd4 <_ZN8touchgfx12CanvasWidgetD1Ev>
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	4618      	mov	r0, r3
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	0802f348 	.word	0x0802f348

08011060 <_ZN8touchgfx20AbstractGraphElementD0Ev>:
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff ffe7 	bl	801103c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 801106e:	212c      	movs	r1, #44	@ 0x2c
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f01b fb06 	bl	802c682 <_ZdlPvj>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	4618      	mov	r0, r3
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>:
 * not use CWR (Canvas Widget Renderer).
 */
class AbstractGraphElementNoCWR : public AbstractGraphElement
{
public:
    AbstractGraphElementNoCWR()
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
        : color(0)
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	4618      	mov	r0, r3
 801108c:	f7ff ffc4 	bl	8011018 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 8011090:	4a06      	ldr	r2, [pc, #24]	@ (80110ac <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev+0x2c>)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	601a      	str	r2, [r3, #0]
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	332c      	adds	r3, #44	@ 0x2c
 801109a:	2100      	movs	r1, #0
 801109c:	4618      	mov	r0, r3
 801109e:	f7fd ff33 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	4618      	mov	r0, r3
 80110a6:	3708      	adds	r7, #8
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd80      	pop	{r7, pc}
 80110ac:	0802f2c0 	.word	0x0802f2c0

080110b0 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>:
     *
     * @param  newColor The new color.
     *
     * @see getColor
     */
    virtual void setColor(colortype newColor)
 80110b0:	b480      	push	{r7}
 80110b2:	b083      	sub	sp, #12
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	683a      	ldr	r2, [r7, #0]
 80110be:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 80110c0:	bf00      	nop
 80110c2:	370c      	adds	r7, #12
 80110c4:	46bd      	mov	sp, r7
 80110c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ca:	4770      	bx	lr

080110cc <_ZNK8touchgfx25AbstractGraphElementNoCWR8getColorEv>:
     *
     * @return The color.
     *
     * @see setColor
     */
    virtual colortype getColor() const
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
    {
        return color;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
 80110d8:	4618      	mov	r0, r3
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr

080110e4 <_ZNK8touchgfx25AbstractGraphElementNoCWR16drawCanvasWidgetERKNS_4RectE>:

    virtual bool drawCanvasWidget(const Rect&) const
 80110e4:	b480      	push	{r7}
 80110e6:	b083      	sub	sp, #12
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
    {
        return true;
 80110ee:	2301      	movs	r3, #1
    }
 80110f0:	4618      	mov	r0, r3
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr

080110fc <_ZN8touchgfx25AbstractGraphElementNoCWR10setPainterERNS_15AbstractPainterE>:
     * @param [in,out] r The rectangle.
     */
    void normalizeRect(Rect& r) const;

private:
    virtual void setPainter(AbstractPainter& /*painter*/)
 80110fc:	b480      	push	{r7}
 80110fe:	b083      	sub	sp, #12
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
    {
    }
 8011106:	bf00      	nop
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
	...

08011114 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>:
class AbstractGraphElementNoCWR : public AbstractGraphElement
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	4a05      	ldr	r2, [pc, #20]	@ (8011134 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev+0x20>)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	601a      	str	r2, [r3, #0]
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	4618      	mov	r0, r3
 8011126:	f7ff ff89 	bl	801103c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	4618      	mov	r0, r3
 801112e:	3708      	adds	r7, #8
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	0802f2c0 	.word	0x0802f2c0

08011138 <_ZN8touchgfx25AbstractGraphElementNoCWRD0Ev>:
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6878      	ldr	r0, [r7, #4]
 8011142:	f7ff ffe7 	bl	8011114 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 8011146:	2130      	movs	r1, #48	@ 0x30
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f01b fa9a 	bl	802c682 <_ZdlPvj>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <_ZN8touchgfx20GraphElementGridBaseC1Ev>:
 */
class GraphElementGridBase : public AbstractGraphElementNoCWR
{
public:
    /** Default constructor. */
    GraphElementGridBase()
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
        : dataScale(1), gridInterval(10), lineWidth(1), majorGrid(0)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff ff8c 	bl	8011080 <_ZN8touchgfx25AbstractGraphElementNoCWRC1Ev>
 8011168:	4a0a      	ldr	r2, [pc, #40]	@ (8011194 <_ZN8touchgfx20GraphElementGridBaseC1Ev+0x3c>)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	601a      	str	r2, [r3, #0]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2201      	movs	r2, #1
 8011172:	631a      	str	r2, [r3, #48]	@ 0x30
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	220a      	movs	r2, #10
 8011178:	635a      	str	r2, [r3, #52]	@ 0x34
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2201      	movs	r2, #1
 801117e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	63da      	str	r2, [r3, #60]	@ 0x3c
    {
    }
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	4618      	mov	r0, r3
 801118c:	3708      	adds	r7, #8
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	0802ffdc 	.word	0x0802ffdc

08011198 <_ZN8touchgfx20GraphElementGridBase22invalidateGraphPointAtEs>:
    FORCE_INLINE_FUNCTION uint8_t getLineWidth() const
    {
        return lineWidth;
    }

    virtual void invalidateGraphPointAt(int16_t)
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	460b      	mov	r3, r1
 80111a2:	807b      	strh	r3, [r7, #2]
    {
    }
 80111a4:	bf00      	nop
 80111a6:	370c      	adds	r7, #12
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE>:
     *
     * @param  graph The graph.
     *
     * @return The correctly scaled major interval.
     */
    virtual int getCorrectlyScaledMajorInterval(const AbstractDataGraph* graph) const
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b082      	sub	sp, #8
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
    {
        return majorGrid == 0 ? 0 : majorGrid->getCorrectlyScaledGridInterval(graph);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d00b      	beq.n	80111da <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2a>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	3380      	adds	r3, #128	@ 0x80
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	6839      	ldr	r1, [r7, #0]
 80111d2:	4610      	mov	r0, r2
 80111d4:	4798      	blx	r3
 80111d6:	4603      	mov	r3, r0
 80111d8:	e000      	b.n	80111dc <_ZNK8touchgfx20GraphElementGridBase31getCorrectlyScaledMajorIntervalEPKNS_17AbstractDataGraphE+0x2c>
 80111da:	2300      	movs	r3, #0
    }
 80111dc:	4618      	mov	r0, r3
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <_ZNK8touchgfx17GraphElementGridY30getCorrectlyScaledGridIntervalEPKNS_17AbstractDataGraphE>:
 * @note The grid lines are drawn using LCD::fillRect for higher performance.
 */
class GraphElementGridY : public GraphElementGridBase
{
public:
    virtual int getCorrectlyScaledGridInterval(const AbstractDataGraph* graph) const
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b086      	sub	sp, #24
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
    {
        return convertToGraphScaleY(graph, gridInterval, dataScale);
 80111ee:	6879      	ldr	r1, [r7, #4]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80111f8:	6179      	str	r1, [r7, #20]
 80111fa:	6839      	ldr	r1, [r7, #0]
 80111fc:	6139      	str	r1, [r7, #16]
 80111fe:	60fa      	str	r2, [r7, #12]
 8011200:	60bb      	str	r3, [r7, #8]
        return AbstractDataGraph::convertToNewScale(value, scale, graph->getScaleY());
 8011202:	693b      	ldr	r3, [r7, #16]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	3394      	adds	r3, #148	@ 0x94
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	6938      	ldr	r0, [r7, #16]
 801120c:	4798      	blx	r3
 801120e:	4603      	mov	r3, r0
 8011210:	461a      	mov	r2, r3
 8011212:	68b9      	ldr	r1, [r7, #8]
 8011214:	68f8      	ldr	r0, [r7, #12]
 8011216:	f005 fe7d 	bl	8016f14 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 801121a:	4603      	mov	r3, r0
 801121c:	bf00      	nop
    }
 801121e:	4618      	mov	r0, r3
 8011220:	3718      	adds	r7, #24
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <_ZNK8touchgfx17GraphElementGridY13enclosingAreaEPKNS_17AbstractDataGraphE>:

protected:
    virtual Rect enclosingArea(const AbstractDataGraph* graph) const
 8011226:	b5b0      	push	{r4, r5, r7, lr}
 8011228:	b08a      	sub	sp, #40	@ 0x28
 801122a:	af02      	add	r7, sp, #8
 801122c:	60f8      	str	r0, [r7, #12]
 801122e:	60b9      	str	r1, [r7, #8]
 8011230:	607a      	str	r2, [r7, #4]
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	617b      	str	r3, [r7, #20]
        return leftPadding;
 8011236:	697b      	ldr	r3, [r7, #20]
 8011238:	f9b3 4116 	ldrsh.w	r4, [r3, #278]	@ 0x116
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	61bb      	str	r3, [r7, #24]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8011240:	69bb      	ldr	r3, [r7, #24]
 8011242:	3338      	adds	r3, #56	@ 0x38
 8011244:	4618      	mov	r0, r3
 8011246:	f7fd ff40 	bl	800f0ca <_ZNK8touchgfx8Drawable8getWidthEv>
 801124a:	4603      	mov	r3, r0
 801124c:	b29a      	uxth	r2, r3
 801124e:	69bb      	ldr	r3, [r7, #24]
 8011250:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 8011254:	b299      	uxth	r1, r3
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 801125c:	b29b      	uxth	r3, r3
 801125e:	440b      	add	r3, r1
 8011260:	b29b      	uxth	r3, r3
 8011262:	1ad3      	subs	r3, r2, r3
 8011264:	b29b      	uxth	r3, r3
 8011266:	b21d      	sxth	r5, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	61fb      	str	r3, [r7, #28]
        return graphArea.getHeight();
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	3338      	adds	r3, #56	@ 0x38
 8011270:	4618      	mov	r0, r3
 8011272:	f7fd ff37 	bl	800f0e4 <_ZNK8touchgfx8Drawable9getHeightEv>
 8011276:	4603      	mov	r3, r0
 8011278:	bf00      	nop
    {
        return Rect(graph->getGraphAreaPaddingLeft(), 0, graph->getGraphAreaWidth(), graph->getGraphAreaHeightIncludingPadding());
 801127a:	9300      	str	r3, [sp, #0]
 801127c:	462b      	mov	r3, r5
 801127e:	2200      	movs	r2, #0
 8011280:	4621      	mov	r1, r4
 8011282:	68f8      	ldr	r0, [r7, #12]
 8011284:	f7fd fe72 	bl	800ef6c <_ZN8touchgfx4RectC1Essss>
    }
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	3720      	adds	r7, #32
 801128c:	46bd      	mov	sp, r7
 801128e:	bdb0      	pop	{r4, r5, r7, pc}

08011290 <_ZNK8touchgfx17GraphElementGridY8lineRectEssss>:

    virtual Rect lineRect(int16_t start, int16_t length, int16_t pos, int16_t width) const
 8011290:	b580      	push	{r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af02      	add	r7, sp, #8
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	4611      	mov	r1, r2
 801129c:	461a      	mov	r2, r3
 801129e:	460b      	mov	r3, r1
 80112a0:	80fb      	strh	r3, [r7, #6]
 80112a2:	4613      	mov	r3, r2
 80112a4:	80bb      	strh	r3, [r7, #4]
    {
        return Rect(start, pos, length, width);
 80112a6:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80112aa:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80112ae:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80112b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80112b6:	9300      	str	r3, [sp, #0]
 80112b8:	4603      	mov	r3, r0
 80112ba:	68f8      	ldr	r0, [r7, #12]
 80112bc:	f7fd fe56 	bl	800ef6c <_ZN8touchgfx4RectC1Essss>
    }
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}

080112c8 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMinScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMinScaled(const AbstractDataGraph* graph) const
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
 80112d0:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMinScaled();
 80112d2:	683b      	ldr	r3, [r7, #0]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	33ec      	adds	r3, #236	@ 0xec
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	6838      	ldr	r0, [r7, #0]
 80112dc:	4798      	blx	r3
 80112de:	4603      	mov	r3, r0
    }
 80112e0:	4618      	mov	r0, r3
 80112e2:	3708      	adds	r7, #8
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <_ZNK8touchgfx17GraphElementGridY22getGraphRangeMaxScaledEPKNS_17AbstractDataGraphE>:

    virtual int getGraphRangeMaxScaled(const AbstractDataGraph* graph) const
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
    {
        return graph->getGraphRangeYMaxScaled();
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	33f8      	adds	r3, #248	@ 0xf8
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	6838      	ldr	r0, [r7, #0]
 80112fc:	4798      	blx	r3
 80112fe:	4603      	mov	r3, r0
    }
 8011300:	4618      	mov	r0, r3
 8011302:	3708      	adds	r7, #8
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <_ZNK8touchgfx17GraphElementGridY17getGraphAreaStartEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStart(const AbstractDataGraph* graph) const
 8011308:	b480      	push	{r7}
 801130a:	b085      	sub	sp, #20
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	60fb      	str	r3, [r7, #12]
        return leftPadding;
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
    {
        return graph->getGraphAreaPaddingLeft();
    }
 801131c:	4618      	mov	r0, r3
 801131e:	3714      	adds	r7, #20
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr

08011328 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaLengthEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaLength(const AbstractDataGraph* graph) const
 8011328:	b580      	push	{r7, lr}
 801132a:	b084      	sub	sp, #16
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	60fb      	str	r3, [r7, #12]
        return graphArea.getWidth() - (leftPadding + rightPadding);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	3338      	adds	r3, #56	@ 0x38
 801133a:	4618      	mov	r0, r3
 801133c:	f7fd fec5 	bl	800f0ca <_ZNK8touchgfx8Drawable8getWidthEv>
 8011340:	4603      	mov	r3, r0
 8011342:	b29a      	uxth	r2, r3
 8011344:	68fb      	ldr	r3, [r7, #12]
 8011346:	f9b3 3116 	ldrsh.w	r3, [r3, #278]	@ 0x116
 801134a:	b299      	uxth	r1, r3
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	f9b3 3118 	ldrsh.w	r3, [r3, #280]	@ 0x118
 8011352:	b29b      	uxth	r3, r3
 8011354:	440b      	add	r3, r1
 8011356:	b29b      	uxth	r3, r3
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	b29b      	uxth	r3, r3
 801135c:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaWidth();
    }
 801135e:	4618      	mov	r0, r3
 8011360:	3710      	adds	r7, #16
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}

08011366 <_ZNK8touchgfx17GraphElementGridY20getGraphAreaStartPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaStartPos(const AbstractDataGraph* graph) const
 8011366:	b480      	push	{r7}
 8011368:	b085      	sub	sp, #20
 801136a:	af00      	add	r7, sp, #0
 801136c:	6078      	str	r0, [r7, #4]
 801136e:	6039      	str	r1, [r7, #0]
 8011370:	683b      	ldr	r3, [r7, #0]
 8011372:	60fb      	str	r3, [r7, #12]
        return topPadding;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
    {
        return graph->getGraphAreaPaddingTop();
    }
 801137a:	4618      	mov	r0, r3
 801137c:	3714      	adds	r7, #20
 801137e:	46bd      	mov	sp, r7
 8011380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011384:	4770      	bx	lr

08011386 <_ZNK8touchgfx17GraphElementGridY18getGraphAreaEndPosEPKNS_17AbstractDataGraphE>:

    virtual int getGraphAreaEndPos(const AbstractDataGraph* graph) const
 8011386:	b580      	push	{r7, lr}
 8011388:	b084      	sub	sp, #16
 801138a:	af00      	add	r7, sp, #0
 801138c:	6078      	str	r0, [r7, #4]
 801138e:	6039      	str	r1, [r7, #0]
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	60fb      	str	r3, [r7, #12]
        return graphArea.getHeight() - (topPadding + bottomPadding);
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	3338      	adds	r3, #56	@ 0x38
 8011398:	4618      	mov	r0, r3
 801139a:	f7fd fea3 	bl	800f0e4 <_ZNK8touchgfx8Drawable9getHeightEv>
 801139e:	4603      	mov	r3, r0
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	f9b3 3114 	ldrsh.w	r3, [r3, #276]	@ 0x114
 80113a8:	b299      	uxth	r1, r3
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	f9b3 311a 	ldrsh.w	r3, [r3, #282]	@ 0x11a
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	440b      	add	r3, r1
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	1ad3      	subs	r3, r2, r3
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	b21b      	sxth	r3, r3
    {
        return graph->getGraphAreaHeight();
    }
 80113bc:	4618      	mov	r0, r3
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <_ZNK8touchgfx17GraphElementGridY15valueToScreenQ5EPKNS_17AbstractDataGraphEi>:

    virtual CWRUtil::Q5 valueToScreenQ5(const AbstractDataGraph* graph, int value) const
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b088      	sub	sp, #32
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	60f8      	str	r0, [r7, #12]
 80113cc:	60b9      	str	r1, [r7, #8]
 80113ce:	607a      	str	r2, [r7, #4]
    {
        return valueToScreenYQ5(graph, value);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	61fb      	str	r3, [r7, #28]
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	61bb      	str	r3, [r7, #24]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	617b      	str	r3, [r7, #20]
        return graph->valueToScreenYQ5(y);
 80113dc:	69bb      	ldr	r3, [r7, #24]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	6979      	ldr	r1, [r7, #20]
 80113e8:	69b8      	ldr	r0, [r7, #24]
 80113ea:	4798      	blx	r3
 80113ec:	4603      	mov	r3, r0
 80113ee:	bf00      	nop
    }
 80113f0:	4618      	mov	r0, r3
 80113f2:	3720      	adds	r7, #32
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <_ZN8touchgfx16GraphElementLineC1Ev>:
 *       graphics.
 */
class GraphElementLine : public AbstractGraphElement
{
public:
    GraphElementLine()
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
        : lineWidth(2)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	4618      	mov	r0, r3
 8011404:	f7ff fe08 	bl	8011018 <_ZN8touchgfx20AbstractGraphElementC1Ev>
 8011408:	4a05      	ldr	r2, [pc, #20]	@ (8011420 <_ZN8touchgfx16GraphElementLineC1Ev+0x28>)
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	601a      	str	r2, [r3, #0]
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	2202      	movs	r2, #2
 8011412:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    {
    }
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	4618      	mov	r0, r3
 801141a:	3708      	adds	r7, #8
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}
 8011420:	0802ff60 	.word	0x0802ff60

08011424 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8011424:	b580      	push	{r7, lr}
 8011426:	b082      	sub	sp, #8
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
 801142c:	6039      	str	r1, [r7, #0]
    {
 801142e:	4a08      	ldr	r2, [pc, #32]	@ (8011450 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	601a      	str	r2, [r3, #0]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	3304      	adds	r3, #4
 8011438:	4618      	mov	r0, r3
 801143a:	f7fd fd57 	bl	800eeec <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 801143e:	6839      	ldr	r1, [r7, #0]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 f827 	bl	8011494 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4618      	mov	r0, r3
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	0802f1f4 	.word	0x0802f1f4

08011454 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8011454:	b480      	push	{r7}
 8011456:	b083      	sub	sp, #12
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
    {
 801145c:	4a04      	ldr	r2, [pc, #16]	@ (8011470 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	601a      	str	r2, [r3, #0]
    }
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	4618      	mov	r0, r3
 8011466:	370c      	adds	r7, #12
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr
 8011470:	0802f1f4 	.word	0x0802f1f4

08011474 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
    }
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f7ff ffe9 	bl	8011454 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8011482:	2108      	movs	r1, #8
 8011484:	6878      	ldr	r0, [r7, #4]
 8011486:	f01b f8fc 	bl	802c682 <_ZdlPvj>
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4618      	mov	r0, r3
 801148e:	3708      	adds	r7, #8
 8011490:	46bd      	mov	sp, r7
 8011492:	bd80      	pop	{r7, pc}

08011494 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 8011494:	b480      	push	{r7}
 8011496:	b083      	sub	sp, #12
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	683a      	ldr	r2, [r7, #0]
 80114a2:	605a      	str	r2, [r3, #4]
    }
 80114a4:	bf00      	nop
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>:
public:
    static const uint16_t RMASK = 0xF800; ///< Mask for red   (1111100000000000)
    static const uint16_t GMASK = 0x07E0; ///< Mask for green (0000011111100000)
    static const uint16_t BMASK = 0x001F; ///< Mask for blue  (0000000000011111)

    AbstractPainterRGB565()
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b084      	sub	sp, #16
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fe fa42 	bl	800f944 <_ZN8touchgfx15AbstractPainterC1Ev>
 80114c0:	4a26      	ldr	r2, [pc, #152]	@ (801155c <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xac>)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	601a      	str	r2, [r3, #0]
 80114c6:	2300      	movs	r3, #0
 80114c8:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80114ca:	f7fd f88b 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 80114ce:	4603      	mov	r3, r0
 80114d0:	681a      	ldr	r2, [r3, #0]
 80114d2:	322c      	adds	r2, #44	@ 0x2c
 80114d4:	6812      	ldr	r2, [r2, #0]
 80114d6:	4618      	mov	r0, r3
 80114d8:	4790      	blx	r2
 80114da:	4603      	mov	r3, r0
 80114dc:	461a      	mov	r2, r3
 80114de:	7bfb      	ldrb	r3, [r7, #15]
 80114e0:	4293      	cmp	r3, r2
 80114e2:	bf0c      	ite	eq
 80114e4:	2301      	moveq	r3, #1
 80114e6:	2300      	movne	r3, #0
 80114e8:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80114ea:	f7fd f86f 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 80114ee:	4603      	mov	r3, r0
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fd ff47 	bl	800f384 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	bf14      	ite	ne
 80114fc:	2301      	movne	r3, #1
 80114fe:	2300      	moveq	r3, #0
 8011500:	b2db      	uxtb	r3, r3
 8011502:	2b00      	cmp	r3, #0
 8011504:	d01b      	beq.n	801153e <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8011506:	f7fd f861 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 801150a:	4603      	mov	r3, r0
 801150c:	4618      	mov	r0, r3
 801150e:	f7fd ff39 	bl	800f384 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 8011512:	4603      	mov	r3, r0
 8011514:	681a      	ldr	r2, [r3, #0]
 8011516:	322c      	adds	r2, #44	@ 0x2c
 8011518:	6812      	ldr	r2, [r2, #0]
 801151a:	4618      	mov	r0, r3
 801151c:	4790      	blx	r2
 801151e:	4603      	mov	r3, r0
 8011520:	461a      	mov	r2, r3
 8011522:	7bfb      	ldrb	r3, [r7, #15]
 8011524:	4293      	cmp	r3, r2
 8011526:	bf0c      	ite	eq
 8011528:	2301      	moveq	r3, #1
 801152a:	2300      	movne	r3, #0
 801152c:	b2da      	uxtb	r2, r3
 801152e:	7bbb      	ldrb	r3, [r7, #14]
 8011530:	4313      	orrs	r3, r2
 8011532:	b2db      	uxtb	r3, r3
 8011534:	2b00      	cmp	r3, #0
 8011536:	bf14      	ite	ne
 8011538:	2301      	movne	r3, #1
 801153a:	2300      	moveq	r3, #0
 801153c:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 801153e:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::RGB565) && "The chosen painter only works with RGB565 displays");
 8011540:	2b00      	cmp	r3, #0
 8011542:	d105      	bne.n	8011550 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xa0>
 8011544:	4b06      	ldr	r3, [pc, #24]	@ (8011560 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb0>)
 8011546:	4a07      	ldr	r2, [pc, #28]	@ (8011564 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb4>)
 8011548:	212c      	movs	r1, #44	@ 0x2c
 801154a:	4807      	ldr	r0, [pc, #28]	@ (8011568 <_ZN8touchgfx21AbstractPainterRGB565C1Ev+0xb8>)
 801154c:	f01b f8c6 	bl	802c6dc <__assert_func>
    }
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	4618      	mov	r0, r3
 8011554:	3710      	adds	r7, #16
 8011556:	46bd      	mov	sp, r7
 8011558:	bd80      	pop	{r7, pc}
 801155a:	bf00      	nop
 801155c:	0802f1d4 	.word	0x0802f1d4
 8011560:	0802dd64 	.word	0x0802dd64
 8011564:	0802ddc4 	.word	0x0802ddc4
 8011568:	0802de00 	.word	0x0802de00

0801156c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>:
class AbstractPainterRGB565 : public AbstractPainter
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	4a05      	ldr	r2, [pc, #20]	@ (801158c <_ZN8touchgfx21AbstractPainterRGB565D1Ev+0x20>)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	601a      	str	r2, [r3, #0]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	4618      	mov	r0, r3
 801157e:	f7fe f9f5 	bl	800f96c <_ZN8touchgfx15AbstractPainterD1Ev>
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	4618      	mov	r0, r3
 8011586:	3708      	adds	r7, #8
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}
 801158c:	0802f1d4 	.word	0x0802f1d4

08011590 <_ZN8touchgfx21AbstractPainterRGB565D0Ev>:
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7ff ffe7 	bl	801156c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 801159e:	2108      	movs	r1, #8
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f01b f86e 	bl	802c682 <_ZdlPvj>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	4618      	mov	r0, r3
 80115aa:	3708      	adds	r7, #8
 80115ac:	46bd      	mov	sp, r7
 80115ae:	bd80      	pop	{r7, pc}

080115b0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterRGB565 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB565(colortype color = 0)
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	6039      	str	r1, [r7, #0]
        : AbstractPainterRGB565(), AbstractPainterColor(color)
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4618      	mov	r0, r3
 80115be:	f7ff ff77 	bl	80114b0 <_ZN8touchgfx21AbstractPainterRGB565C1Ev>
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	3308      	adds	r3, #8
 80115c6:	6839      	ldr	r1, [r7, #0]
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7ff ff2b 	bl	8011424 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 80115ce:	4a05      	ldr	r2, [pc, #20]	@ (80115e4 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x34>)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	601a      	str	r2, [r3, #0]
 80115d4:	4a04      	ldr	r2, [pc, #16]	@ (80115e8 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE+0x38>)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	609a      	str	r2, [r3, #8]
    {
    }
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4618      	mov	r0, r3
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	0802fbe8 	.word	0x0802fbe8
 80115e8:	0802fc0c 	.word	0x0802fc0c

080115ec <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 80115ec:	b590      	push	{r4, r7, lr}
 80115ee:	b085      	sub	sp, #20
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	3308      	adds	r3, #8
 80115fa:	6839      	ldr	r1, [r7, #0]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ff ff49 	bl	8011494 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	60fb      	str	r3, [r7, #12]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static uint16_t getNativeColor(colortype color)
    {
        return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 8011608:	f107 030c 	add.w	r3, r7, #12
 801160c:	4618      	mov	r0, r3
 801160e:	f7fd fc8a 	bl	800ef26 <_ZNK8touchgfx9colortypecvmEv>
 8011612:	4603      	mov	r3, r0
 8011614:	0a1b      	lsrs	r3, r3, #8
 8011616:	b29b      	uxth	r3, r3
 8011618:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 801161c:	f023 0307 	bic.w	r3, r3, #7
 8011620:	b29c      	uxth	r4, r3
 8011622:	f107 030c 	add.w	r3, r7, #12
 8011626:	4618      	mov	r0, r3
 8011628:	f7fd fc7d 	bl	800ef26 <_ZNK8touchgfx9colortypecvmEv>
 801162c:	4603      	mov	r3, r0
 801162e:	095b      	lsrs	r3, r3, #5
 8011630:	b29b      	uxth	r3, r3
 8011632:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011636:	b29b      	uxth	r3, r3
 8011638:	4323      	orrs	r3, r4
 801163a:	b29c      	uxth	r4, r3
 801163c:	f107 030c 	add.w	r3, r7, #12
 8011640:	4618      	mov	r0, r3
 8011642:	f7fd fc70 	bl	800ef26 <_ZNK8touchgfx9colortypecvmEv>
 8011646:	4603      	mov	r3, r0
 8011648:	08db      	lsrs	r3, r3, #3
 801164a:	b29b      	uxth	r3, r3
 801164c:	f003 031f 	and.w	r3, r3, #31
 8011650:	b29b      	uxth	r3, r3
 8011652:	4323      	orrs	r3, r4
 8011654:	b29a      	uxth	r2, r3
        color565 = LCD16bpp::getNativeColor(painterColor);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	821a      	strh	r2, [r3, #16]
    }
 801165a:	bf00      	nop
 801165c:	3714      	adds	r7, #20
 801165e:	46bd      	mov	sp, r7
 8011660:	bd90      	pop	{r4, r7, pc}

08011662 <_ZThn8_N8touchgfx13PainterRGB5658setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 8011662:	f1a0 0008 	sub.w	r0, r0, #8
 8011666:	e7c1      	b.n	80115ec <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>

08011668 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 8011668:	b580      	push	{r7, lr}
 801166a:	b082      	sub	sp, #8
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
 8011670:	4a05      	ldr	r2, [pc, #20]	@ (8011688 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	601a      	str	r2, [r3, #0]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4618      	mov	r0, r3
 801167a:	f7fd fe8f 	bl	800f39c <_ZN8touchgfx6ScreenD1Ev>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	4618      	mov	r0, r3
 8011682:	3708      	adds	r7, #8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	0802f1a0 	.word	0x0802f1a0

0801168c <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6878      	ldr	r0, [r7, #4]
 8011696:	f7ff ffe7 	bl	8011668 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801169a:	2140      	movs	r1, #64	@ 0x40
 801169c:	6878      	ldr	r0, [r7, #4]
 801169e:	f01a fff0 	bl	802c682 <_ZdlPvj>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	4618      	mov	r0, r3
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <_ZN8touchgfx20GraphElementGridBaseD1Ev>:
class GraphElementGridBase : public AbstractGraphElementNoCWR
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b082      	sub	sp, #8
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	4a05      	ldr	r2, [pc, #20]	@ (80116cc <_ZN8touchgfx20GraphElementGridBaseD1Ev+0x20>)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	601a      	str	r2, [r3, #0]
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	4618      	mov	r0, r3
 80116be:	f7ff fd29 	bl	8011114 <_ZN8touchgfx25AbstractGraphElementNoCWRD1Ev>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4618      	mov	r0, r3
 80116c6:	3708      	adds	r7, #8
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	0802ffdc 	.word	0x0802ffdc

080116d0 <_ZN8touchgfx20GraphElementGridBaseD0Ev>:
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b082      	sub	sp, #8
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f7ff ffe7 	bl	80116ac <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 80116de:	2140      	movs	r1, #64	@ 0x40
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f01a ffce 	bl	802c682 <_ZdlPvj>
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <_ZN8touchgfx17GraphElementGridYC1Ev>:
class GraphElementGridY : public GraphElementGridBase
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b082      	sub	sp, #8
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	6078      	str	r0, [r7, #4]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7ff fd2c 	bl	8011158 <_ZN8touchgfx20GraphElementGridBaseC1Ev>
 8011700:	4a03      	ldr	r2, [pc, #12]	@ (8011710 <_ZN8touchgfx17GraphElementGridYC1Ev+0x20>)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	601a      	str	r2, [r3, #0]
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	4618      	mov	r0, r3
 801170a:	3708      	adds	r7, #8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}
 8011710:	0802f208 	.word	0x0802f208

08011714 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase()
 8011714:	b590      	push	{r4, r7, lr}
 8011716:	b0d3      	sub	sp, #332	@ 0x14c
 8011718:	af02      	add	r7, sp, #8
 801171a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801171e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011722:	6018      	str	r0, [r3, #0]
 8011724:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011728:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	4618      	mov	r0, r3
 8011730:	f000 ff84 	bl	801263c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 8011734:	4ae8      	ldr	r2, [pc, #928]	@ (8011ad8 <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
 8011736:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801173a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	601a      	str	r2, [r3, #0]
 8011742:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011746:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	3340      	adds	r3, #64	@ 0x40
 801174e:	4618      	mov	r0, r3
 8011750:	f7fd fec0 	bl	800f4d4 <_ZN8touchgfx3BoxC1Ev>
 8011754:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011758:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	336c      	adds	r3, #108	@ 0x6c
 8011760:	4618      	mov	r0, r3
 8011762:	f7fd feb7 	bl	800f4d4 <_ZN8touchgfx3BoxC1Ev>
 8011766:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801176a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	3398      	adds	r3, #152	@ 0x98
 8011772:	4618      	mov	r0, r3
 8011774:	f7fd feae 	bl	800f4d4 <_ZN8touchgfx3BoxC1Ev>
 8011778:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801177c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	33c4      	adds	r3, #196	@ 0xc4
 8011784:	4618      	mov	r0, r3
 8011786:	f7fe f89f 	bl	800f8c8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801178a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801178e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8011798:	4618      	mov	r0, r3
 801179a:	f7fe f895 	bl	800f8c8 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801179e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80117a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80117ac:	4618      	mov	r0, r3
 80117ae:	f000 ff7f 	bl	80126b0 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EEC1Ev>
 80117b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80117b6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f203 53cc 	addw	r3, r3, #1484	@ 0x5cc
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff ff95 	bl	80116f0 <_ZN8touchgfx17GraphElementGridYC1Ev>
 80117c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80117ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7ff fe0f 	bl	80113f8 <_ZN8touchgfx16GraphElementLineC1Ev>
 80117da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80117de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f203 643c 	addw	r4, r3, #1596	@ 0x63c
 80117e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80117ec:	2100      	movs	r1, #0
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fd fb8a 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 80117f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80117f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80117fc:	6819      	ldr	r1, [r3, #0]
 80117fe:	4620      	mov	r0, r4
 8011800:	f7ff fed6 	bl	80115b0 <_ZN8touchgfx13PainterRGB565C1ENS_9colortypeE>
 8011804:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011808:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8011812:	4618      	mov	r0, r3
 8011814:	f7fd fea6 	bl	800f564 <_ZN8touchgfx8TextAreaC1Ev>
 8011818:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801181c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f503 63d3 	add.w	r3, r3, #1688	@ 0x698
 8011826:	4618      	mov	r0, r3
 8011828:	f7fd fe9c 	bl	800f564 <_ZN8touchgfx8TextAreaC1Ev>
 801182c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011830:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 801183a:	4618      	mov	r0, r3
 801183c:	f7fd fe92 	bl	800f564 <_ZN8touchgfx8TextAreaC1Ev>
 8011840:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011844:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 801184e:	4618      	mov	r0, r3
 8011850:	f7fd fe88 	bl	800f564 <_ZN8touchgfx8TextAreaC1Ev>
{
    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8011854:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011858:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	f203 7384 	addw	r3, r3, #1924	@ 0x784
 8011862:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8011866:	4618      	mov	r0, r3
 8011868:	f007 fb68 	bl	8018f3c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>
    
    __background.setPosition(0, 0, 240, 320);
 801186c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011870:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 801187a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 801187e:	9300      	str	r3, [sp, #0]
 8011880:	23f0      	movs	r3, #240	@ 0xf0
 8011882:	2200      	movs	r2, #0
 8011884:	2100      	movs	r1, #0
 8011886:	f7fd fbff 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 801188a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801188e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8011898:	2300      	movs	r3, #0
 801189a:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 801189e:	2300      	movs	r3, #0
 80118a0:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
 80118a4:	2300      	movs	r3, #0
 80118a6:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 80118aa:	f897 30a6 	ldrb.w	r3, [r7, #166]	@ 0xa6
 80118ae:	041a      	lsls	r2, r3, #16
 80118b0:	f897 30a5 	ldrb.w	r3, [r7, #165]	@ 0xa5
 80118b4:	021b      	lsls	r3, r3, #8
 80118b6:	431a      	orrs	r2, r3
 80118b8:	f897 30a4 	ldrb.w	r3, [r7, #164]	@ 0xa4
 80118bc:	4313      	orrs	r3, r2
 80118be:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80118c2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80118c6:	4611      	mov	r1, r2
 80118c8:	4618      	mov	r0, r3
 80118ca:	f7fd fb1d 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 80118ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80118d2:	4619      	mov	r1, r3
 80118d4:	4620      	mov	r0, r4
 80118d6:	f7fd fe21 	bl	800f51c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 80118da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80118de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80118e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	3340      	adds	r3, #64	@ 0x40
 80118f0:	4619      	mov	r1, r3
 80118f2:	4610      	mov	r0, r2
 80118f4:	f7fd fdaa 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box1.setPosition(0, 0, 240, 320);
 80118f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80118fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 8011906:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 801190a:	9300      	str	r3, [sp, #0]
 801190c:	23f0      	movs	r3, #240	@ 0xf0
 801190e:	2200      	movs	r2, #0
 8011910:	2100      	movs	r1, #0
 8011912:	f7fd fbb9 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011916:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801191a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	f103 046c 	add.w	r4, r3, #108	@ 0x6c
 8011924:	2300      	movs	r3, #0
 8011926:	f887 30a9 	strb.w	r3, [r7, #169]	@ 0xa9
 801192a:	2300      	movs	r3, #0
 801192c:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
 8011930:	2300      	movs	r3, #0
 8011932:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8011936:	f897 30a9 	ldrb.w	r3, [r7, #169]	@ 0xa9
 801193a:	041a      	lsls	r2, r3, #16
 801193c:	f897 30a8 	ldrb.w	r3, [r7, #168]	@ 0xa8
 8011940:	021b      	lsls	r3, r3, #8
 8011942:	431a      	orrs	r2, r3
 8011944:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8011948:	4313      	orrs	r3, r2
 801194a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801194e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8011952:	4611      	mov	r1, r2
 8011954:	4618      	mov	r0, r3
 8011956:	f7fd fad7 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 801195a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801195e:	4619      	mov	r1, r3
 8011960:	4620      	mov	r0, r4
 8011962:	f7fd fddb 	bl	800f51c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box1);
 8011966:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801196a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011974:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	336c      	adds	r3, #108	@ 0x6c
 801197c:	4619      	mov	r1, r3
 801197e:	4610      	mov	r0, r2
 8011980:	f7fd fd64 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    box2.setPosition(0, 0, 240, 97);
 8011984:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011988:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	f103 0098 	add.w	r0, r3, #152	@ 0x98
 8011992:	2361      	movs	r3, #97	@ 0x61
 8011994:	9300      	str	r3, [sp, #0]
 8011996:	23f0      	movs	r3, #240	@ 0xf0
 8011998:	2200      	movs	r2, #0
 801199a:	2100      	movs	r1, #0
 801199c:	f7fd fb74 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFromRGB(219, 219, 219));
 80119a0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80119a4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f103 0498 	add.w	r4, r3, #152	@ 0x98
 80119ae:	23db      	movs	r3, #219	@ 0xdb
 80119b0:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
 80119b4:	23db      	movs	r3, #219	@ 0xdb
 80119b6:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
 80119ba:	23db      	movs	r3, #219	@ 0xdb
 80119bc:	f887 30aa 	strb.w	r3, [r7, #170]	@ 0xaa
 80119c0:	f897 30ac 	ldrb.w	r3, [r7, #172]	@ 0xac
 80119c4:	041a      	lsls	r2, r3, #16
 80119c6:	f897 30ab 	ldrb.w	r3, [r7, #171]	@ 0xab
 80119ca:	021b      	lsls	r3, r3, #8
 80119cc:	431a      	orrs	r2, r3
 80119ce:	f897 30aa 	ldrb.w	r3, [r7, #170]	@ 0xaa
 80119d2:	4313      	orrs	r3, r2
 80119d4:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80119d8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80119dc:	4611      	mov	r1, r2
 80119de:	4618      	mov	r0, r3
 80119e0:	f7fd fa92 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 80119e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80119e8:	4619      	mov	r1, r3
 80119ea:	4620      	mov	r0, r4
 80119ec:	f7fd fd96 	bl	800f51c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(box2);
 80119f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80119f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80119f8:	681a      	ldr	r2, [r3, #0]
 80119fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80119fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	3398      	adds	r3, #152	@ 0x98
 8011a06:	4619      	mov	r1, r3
 8011a08:	4610      	mov	r0, r2
 8011a0a:	f7fd fd1f 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textAreaTemp.setXY(135, 74);
 8011a0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011a12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	33c4      	adds	r3, #196	@ 0xc4
 8011a1a:	224a      	movs	r2, #74	@ 0x4a
 8011a1c:	2187      	movs	r1, #135	@ 0x87
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fd fb8b 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
    textAreaTemp.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011a24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011a28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8011a32:	2300      	movs	r3, #0
 8011a34:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8011a38:	2300      	movs	r3, #0
 8011a3a:	f887 30ae 	strb.w	r3, [r7, #174]	@ 0xae
 8011a3e:	2300      	movs	r3, #0
 8011a40:	f887 30ad 	strb.w	r3, [r7, #173]	@ 0xad
 8011a44:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8011a48:	041a      	lsls	r2, r3, #16
 8011a4a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8011a4e:	021b      	lsls	r3, r3, #8
 8011a50:	431a      	orrs	r2, r3
 8011a52:	f897 30ad 	ldrb.w	r3, [r7, #173]	@ 0xad
 8011a56:	4313      	orrs	r3, r2
 8011a58:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011a5c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8011a60:	4611      	mov	r1, r2
 8011a62:	4618      	mov	r0, r3
 8011a64:	f7fd fa50 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 8011a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	f8c7 40b0 	str.w	r4, [r7, #176]	@ 0xb0
 8011a72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011a76:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8011a7a:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011a7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011a80:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8011a84:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8011a88:	6812      	ldr	r2, [r2, #0]
 8011a8a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8011a8c:	bf00      	nop
    textAreaTemp.setLinespacing(0);
 8011a8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011a92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	33c4      	adds	r3, #196	@ 0xc4
 8011a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
        linespace = space;
 8011aa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011aa8:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8011aac:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8011aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	3384      	adds	r3, #132	@ 0x84
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f8d7 40b8 	ldr.w	r4, [r7, #184]	@ 0xb8
 8011abc:	463a      	mov	r2, r7
 8011abe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8011ac2:	4610      	mov	r0, r2
 8011ac4:	4798      	blx	r3
 8011ac6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011aca:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8011ace:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8011ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8011ad4:	e002      	b.n	8011adc <_ZN15Screen1ViewBaseC1Ev+0x3c8>
 8011ad6:	bf00      	nop
 8011ad8:	0802efd4 	.word	0x0802efd4
 8011adc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011ae0:	bf00      	nop
    Unicode::snprintf(textAreaTempBuffer, TEXTAREATEMP_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_U2NK).getText());
 8011ae2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011ae6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	f503 64ee 	add.w	r4, r3, #1904	@ 0x770
 8011af0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011af4:	2104      	movs	r1, #4
 8011af6:	4618      	mov	r0, r3
 8011af8:	f7fd fd1e 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011afc:	4b86      	ldr	r3, [pc, #536]	@ (8011d18 <_ZN15Screen1ViewBaseC1Ev+0x604>)
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d105      	bne.n	8011b10 <_ZN15Screen1ViewBaseC1Ev+0x3fc>
 8011b04:	4b85      	ldr	r3, [pc, #532]	@ (8011d1c <_ZN15Screen1ViewBaseC1Ev+0x608>)
 8011b06:	4a86      	ldr	r2, [pc, #536]	@ (8011d20 <_ZN15Screen1ViewBaseC1Ev+0x60c>)
 8011b08:	2160      	movs	r1, #96	@ 0x60
 8011b0a:	4886      	ldr	r0, [pc, #536]	@ (8011d24 <_ZN15Screen1ViewBaseC1Ev+0x610>)
 8011b0c:	f01a fde6 	bl	802c6dc <__assert_func>
 8011b10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011b14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        return typedTextId < numberOfTypedTexts;
 8011b18:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011b1c:	889a      	ldrh	r2, [r3, #4]
 8011b1e:	4b82      	ldr	r3, [pc, #520]	@ (8011d28 <_ZN15Screen1ViewBaseC1Ev+0x614>)
 8011b20:	881b      	ldrh	r3, [r3, #0]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	bf34      	ite	cc
 8011b26:	2301      	movcc	r3, #1
 8011b28:	2300      	movcs	r3, #0
 8011b2a:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d105      	bne.n	8011b3c <_ZN15Screen1ViewBaseC1Ev+0x428>
 8011b30:	4b7e      	ldr	r3, [pc, #504]	@ (8011d2c <_ZN15Screen1ViewBaseC1Ev+0x618>)
 8011b32:	4a7b      	ldr	r2, [pc, #492]	@ (8011d20 <_ZN15Screen1ViewBaseC1Ev+0x60c>)
 8011b34:	2161      	movs	r1, #97	@ 0x61
 8011b36:	487b      	ldr	r0, [pc, #492]	@ (8011d24 <_ZN15Screen1ViewBaseC1Ev+0x610>)
 8011b38:	f01a fdd0 	bl	802c6dc <__assert_func>
        return texts->getText(typedTextId);
 8011b3c:	4b7c      	ldr	r3, [pc, #496]	@ (8011d30 <_ZN15Screen1ViewBaseC1Ev+0x61c>)
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011b44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8011b48:	889b      	ldrh	r3, [r3, #4]
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	4610      	mov	r0, r2
 8011b4e:	f001 f849 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8011b52:	4603      	mov	r3, r0
 8011b54:	bf00      	nop
 8011b56:	4a77      	ldr	r2, [pc, #476]	@ (8011d34 <_ZN15Screen1ViewBaseC1Ev+0x620>)
 8011b58:	2105      	movs	r1, #5
 8011b5a:	4620      	mov	r0, r4
 8011b5c:	f00b ff31 	bl	801d9c2 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011b60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7fc fa8b 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
    textAreaTemp.setWildcard(textAreaTempBuffer);
 8011b6a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011b6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8011b78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011b7c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f503 63ee 	add.w	r3, r3, #1904	@ 0x770
 8011b86:	4619      	mov	r1, r3
 8011b88:	4610      	mov	r0, r2
 8011b8a:	f7fd fecd 	bl	800f928 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaTemp.resizeToCurrentText();
 8011b8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011b92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	33c4      	adds	r3, #196	@ 0xc4
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f006 fa64 	bl	8018068 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaTemp.setTypedText(touchgfx::TypedText(T___SINGLEUSE_O79F));
 8011ba0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011ba4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8011bae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011bb2:	2107      	movs	r1, #7
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7fd fcbf 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
 8011bba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	4620      	mov	r0, r4
 8011bc2:	f006 fa71 	bl	80180a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011bc6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7fc fa58 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
    add(textAreaTemp);
 8011bd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011bd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011bde:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	33c4      	adds	r3, #196	@ 0xc4
 8011be6:	4619      	mov	r1, r3
 8011be8:	4610      	mov	r0, r2
 8011bea:	f7fd fc2f 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textAreaVolt.setXY(6, 74);
 8011bee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011bf2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8011bfc:	224a      	movs	r2, #74	@ 0x4a
 8011bfe:	2106      	movs	r1, #6
 8011c00:	4618      	mov	r0, r3
 8011c02:	f7fd fa9a 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
    textAreaVolt.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8011c06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8011c14:	2300      	movs	r3, #0
 8011c16:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	f887 30c2 	strb.w	r3, [r7, #194]	@ 0xc2
 8011c20:	2300      	movs	r3, #0
 8011c22:	f887 30c1 	strb.w	r3, [r7, #193]	@ 0xc1
 8011c26:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8011c2a:	041a      	lsls	r2, r3, #16
 8011c2c:	f897 30c2 	ldrb.w	r3, [r7, #194]	@ 0xc2
 8011c30:	021b      	lsls	r3, r3, #8
 8011c32:	431a      	orrs	r2, r3
 8011c34:	f897 30c1 	ldrb.w	r3, [r7, #193]	@ 0xc1
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011c3e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8011c42:	4611      	mov	r1, r2
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7fd f95f 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 8011c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011c4e:	461a      	mov	r2, r3
 8011c50:	f8c7 40c4 	str.w	r4, [r7, #196]	@ 0xc4
 8011c54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c58:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8011c5c:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011c5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c62:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8011c66:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8011c6a:	6812      	ldr	r2, [r2, #0]
 8011c6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8011c6e:	bf00      	nop
    textAreaVolt.setLinespacing(0);
 8011c70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011c74:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8011c7e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8011c82:	2300      	movs	r3, #0
 8011c84:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
        linespace = space;
 8011c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011c8c:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	@ 0xca
 8011c90:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8011c92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	3384      	adds	r3, #132	@ 0x84
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f8d7 40cc 	ldr.w	r4, [r7, #204]	@ 0xcc
 8011ca0:	463a      	mov	r2, r7
 8011ca2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8011ca6:	4610      	mov	r0, r2
 8011ca8:	4798      	blx	r3
 8011caa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011cae:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8011cb2:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8011cb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8011cb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011cbc:	bf00      	nop
    Unicode::snprintf(textAreaVoltBuffer, TEXTAREAVOLT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_D9QQ).getText());
 8011cbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011cc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f203 747a 	addw	r4, r3, #1914	@ 0x77a
 8011ccc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011cd0:	2105      	movs	r1, #5
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fd fc30 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8011d18 <_ZN15Screen1ViewBaseC1Ev+0x604>)
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d105      	bne.n	8011cec <_ZN15Screen1ViewBaseC1Ev+0x5d8>
 8011ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8011d1c <_ZN15Screen1ViewBaseC1Ev+0x608>)
 8011ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8011d20 <_ZN15Screen1ViewBaseC1Ev+0x60c>)
 8011ce4:	2160      	movs	r1, #96	@ 0x60
 8011ce6:	480f      	ldr	r0, [pc, #60]	@ (8011d24 <_ZN15Screen1ViewBaseC1Ev+0x610>)
 8011ce8:	f01a fcf8 	bl	802c6dc <__assert_func>
 8011cec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
        return typedTextId < numberOfTypedTexts;
 8011cf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011cf8:	889a      	ldrh	r2, [r3, #4]
 8011cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8011d28 <_ZN15Screen1ViewBaseC1Ev+0x614>)
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	bf34      	ite	cc
 8011d02:	2301      	movcc	r3, #1
 8011d04:	2300      	movcs	r3, #0
 8011d06:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d115      	bne.n	8011d38 <_ZN15Screen1ViewBaseC1Ev+0x624>
 8011d0c:	4b07      	ldr	r3, [pc, #28]	@ (8011d2c <_ZN15Screen1ViewBaseC1Ev+0x618>)
 8011d0e:	4a04      	ldr	r2, [pc, #16]	@ (8011d20 <_ZN15Screen1ViewBaseC1Ev+0x60c>)
 8011d10:	2161      	movs	r1, #97	@ 0x61
 8011d12:	4804      	ldr	r0, [pc, #16]	@ (8011d24 <_ZN15Screen1ViewBaseC1Ev+0x610>)
 8011d14:	f01a fce2 	bl	802c6dc <__assert_func>
 8011d18:	2001215c 	.word	0x2001215c
 8011d1c:	0802db40 	.word	0x0802db40
 8011d20:	0802de60 	.word	0x0802de60
 8011d24:	0802dbc0 	.word	0x0802dbc0
 8011d28:	20012160 	.word	0x20012160
 8011d2c:	0802dc04 	.word	0x0802dc04
 8011d30:	20012168 	.word	0x20012168
 8011d34:	0802deac 	.word	0x0802deac
        return texts->getText(typedTextId);
 8011d38:	4b88      	ldr	r3, [pc, #544]	@ (8011f5c <_ZN15Screen1ViewBaseC1Ev+0x848>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8011d40:	4611      	mov	r1, r2
 8011d42:	4618      	mov	r0, r3
 8011d44:	f000 ff4e 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	bf00      	nop
 8011d4c:	4a84      	ldr	r2, [pc, #528]	@ (8011f60 <_ZN15Screen1ViewBaseC1Ev+0x84c>)
 8011d4e:	2105      	movs	r1, #5
 8011d50:	4620      	mov	r0, r4
 8011d52:	f00b fe36 	bl	801d9c2 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011d56:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fc f990 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
    textAreaVolt.setWildcard(textAreaVoltBuffer);
 8011d60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011d64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	f503 7288 	add.w	r2, r3, #272	@ 0x110
 8011d6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011d72:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	f203 737a 	addw	r3, r3, #1914	@ 0x77a
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	4610      	mov	r0, r2
 8011d80:	f7fd fdd2 	bl	800f928 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textAreaVolt.resizeToCurrentText();
 8011d84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011d88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8011d92:	4618      	mov	r0, r3
 8011d94:	f006 f968 	bl	8018068 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    textAreaVolt.setTypedText(touchgfx::TypedText(T___SINGLEUSE_J8LP));
 8011d98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011d9c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f503 7488 	add.w	r4, r3, #272	@ 0x110
 8011da6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011daa:	2106      	movs	r1, #6
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fd fbc3 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
 8011db2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011db6:	4619      	mov	r1, r3
 8011db8:	4620      	mov	r0, r4
 8011dba:	f006 f975 	bl	80180a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011dbe:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fc f95c 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
    add(textAreaVolt);
 8011dc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011dcc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011dd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8011de0:	4619      	mov	r1, r3
 8011de2:	4610      	mov	r0, r2
 8011de4:	f7fd fb32 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    dynamicGraph1.setPosition(18, 119, 216, 100);
 8011de8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011dec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f503 70ae 	add.w	r0, r3, #348	@ 0x15c
 8011df6:	2364      	movs	r3, #100	@ 0x64
 8011df8:	9300      	str	r3, [sp, #0]
 8011dfa:	23d8      	movs	r3, #216	@ 0xd8
 8011dfc:	2277      	movs	r2, #119	@ 0x77
 8011dfe:	2112      	movs	r1, #18
 8011e00:	f7fd f942 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
    dynamicGraph1.setScale(10);
 8011e04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e08:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8011e12:	2200      	movs	r2, #0
 8011e14:	210a      	movs	r1, #10
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fe fc36 	bl	8010688 <_ZN8touchgfx16DynamicDataGraph8setScaleEib>
    dynamicGraph1.setGraphAreaMargin(0, 0, 0, 0);
 8011e1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	f503 70ae 	add.w	r0, r3, #348	@ 0x15c
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	9300      	str	r3, [sp, #0]
 8011e2e:	2300      	movs	r3, #0
 8011e30:	2200      	movs	r2, #0
 8011e32:	2100      	movs	r1, #0
 8011e34:	f004 ffbc 	bl	8016db0 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
    dynamicGraph1.setGraphAreaPadding(0, 0, 0, 0);
 8011e38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	f503 70ae 	add.w	r0, r3, #348	@ 0x15c
 8011e46:	2300      	movs	r3, #0
 8011e48:	9300      	str	r3, [sp, #0]
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	2100      	movs	r1, #0
 8011e50:	f004 feec 	bl	8016c2c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>
    dynamicGraph1.setGraphRangeY(0, 4);
 8011e54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8011e62:	2204      	movs	r2, #4
 8011e64:	2100      	movs	r1, #0
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7fe f805 	bl	800fe76 <_ZN8touchgfx17AbstractDataGraph14setGraphRangeYEii>
    dynamicGraph1MajorYAxisGrid.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011e6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011e70:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f203 54cc 	addw	r4, r3, #1484	@ 0x5cc
 8011e7a:	23ff      	movs	r3, #255	@ 0xff
 8011e7c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8011e80:	23ff      	movs	r3, #255	@ 0xff
 8011e82:	f887 30d6 	strb.w	r3, [r7, #214]	@ 0xd6
 8011e86:	23ff      	movs	r3, #255	@ 0xff
 8011e88:	f887 30d5 	strb.w	r3, [r7, #213]	@ 0xd5
 8011e8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8011e90:	041a      	lsls	r2, r3, #16
 8011e92:	f897 30d6 	ldrb.w	r3, [r7, #214]	@ 0xd6
 8011e96:	021b      	lsls	r3, r3, #8
 8011e98:	431a      	orrs	r2, r3
 8011e9a:	f897 30d5 	ldrb.w	r3, [r7, #213]	@ 0xd5
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011ea4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8011ea8:	4611      	mov	r1, r2
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7fd f82c 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 8011eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	4620      	mov	r0, r4
 8011eb8:	f7ff f8fa 	bl	80110b0 <_ZN8touchgfx25AbstractGraphElementNoCWR8setColorENS_9colortypeE>
    dynamicGraph1MajorYAxisGrid.setInterval(2);
 8011ebc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011ec0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	f203 53cc 	addw	r3, r3, #1484	@ 0x5cc
 8011eca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8011ece:	2302      	movs	r3, #2
 8011ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
        setIntervalScaled(abs(interval) * dataScale);
 8011ed4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8011ed8:	f000 fba1 	bl	801261e <_ZN8touchgfx3absIiEET_S1_>
 8011edc:	4602      	mov	r2, r0
 8011ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ee4:	fb02 f303 	mul.w	r3, r2, r3
 8011ee8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8011eec:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8011ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        gridInterval = abs(interval);
 8011ef4:	f8d7 00d8 	ldr.w	r0, [r7, #216]	@ 0xd8
 8011ef8:	f000 fb91 	bl	801261e <_ZN8touchgfx3absIiEET_S1_>
 8011efc:	4602      	mov	r2, r0
 8011efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011f02:	635a      	str	r2, [r3, #52]	@ 0x34
    }
 8011f04:	bf00      	nop
    }
 8011f06:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setLineWidth(1);
 8011f08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011f0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	f203 53cc 	addw	r3, r3, #1484	@ 0x5cc
 8011f16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb
        lineWidth = width;
 8011f20:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8011f24:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8011f28:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
 8011f2c:	bf00      	nop
    dynamicGraph1MajorYAxisGrid.setScale(10);
 8011f2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011f32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f203 53cc 	addw	r3, r3, #1484	@ 0x5cc
 8011f3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8011f40:	230a      	movs	r3, #10
 8011f42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
        assert(scale != 0);
 8011f46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d110      	bne.n	8011f70 <_ZN15Screen1ViewBaseC1Ev+0x85c>
 8011f4e:	4b05      	ldr	r3, [pc, #20]	@ (8011f64 <_ZN15Screen1ViewBaseC1Ev+0x850>)
 8011f50:	4a05      	ldr	r2, [pc, #20]	@ (8011f68 <_ZN15Screen1ViewBaseC1Ev+0x854>)
 8011f52:	f240 112f 	movw	r1, #303	@ 0x12f
 8011f56:	4805      	ldr	r0, [pc, #20]	@ (8011f6c <_ZN15Screen1ViewBaseC1Ev+0x858>)
 8011f58:	f01a fbc0 	bl	802c6dc <__assert_func>
 8011f5c:	20012168 	.word	0x20012168
 8011f60:	0802deac 	.word	0x0802deac
 8011f64:	0802deb0 	.word	0x0802deb0
 8011f68:	0802debc 	.word	0x0802debc
 8011f6c:	0802def0 	.word	0x0802def0
        gridInterval = AbstractDataGraph::convertToNewScale(gridInterval, dataScale, scale);
 8011f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f74:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f7c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8011f80:	4619      	mov	r1, r3
 8011f82:	f004 ffc7 	bl	8016f14 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8011f86:	4602      	mov	r2, r0
 8011f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f8c:	635a      	str	r2, [r3, #52]	@ 0x34
        dataScale = scale;
 8011f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011f92:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8011f96:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8011f98:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1MajorYAxisGrid);
 8011f9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	f503 72ae 	add.w	r2, r3, #348	@ 0x15c
 8011fa8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011fac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	f203 53cc 	addw	r3, r3, #1484	@ 0x5cc
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	4610      	mov	r0, r2
 8011fba:	f004 fe42 	bl	8016c42 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>

    dynamicGraph1Line1Painter.setColor(touchgfx::Color::getColorFromRGB(22, 196, 33));
 8011fbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8011fc2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	f203 643c 	addw	r4, r3, #1596	@ 0x63c
 8011fcc:	2316      	movs	r3, #22
 8011fce:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
 8011fd2:	23c4      	movs	r3, #196	@ 0xc4
 8011fd4:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
 8011fd8:	2321      	movs	r3, #33	@ 0x21
 8011fda:	f887 30f8 	strb.w	r3, [r7, #248]	@ 0xf8
 8011fde:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8011fe2:	041a      	lsls	r2, r3, #16
 8011fe4:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8011fe8:	021b      	lsls	r3, r3, #8
 8011fea:	431a      	orrs	r2, r3
 8011fec:	f897 30f8 	ldrb.w	r3, [r7, #248]	@ 0xf8
 8011ff0:	4313      	orrs	r3, r2
 8011ff2:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 8011ff6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8011ffa:	4611      	mov	r1, r2
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	f7fc ff83 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 8012002:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012006:	4619      	mov	r1, r3
 8012008:	4620      	mov	r0, r4
 801200a:	f7ff faef 	bl	80115ec <_ZN8touchgfx13PainterRGB5658setColorENS_9colortypeE>
    dynamicGraph1Line1.setPainter(dynamicGraph1Line1Painter);
 801200e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012012:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	f203 620c 	addw	r2, r3, #1548	@ 0x60c
 801201c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012020:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 801202a:	4619      	mov	r1, r3
 801202c:	4610      	mov	r0, r2
 801202e:	f7fe ff7f 	bl	8010f30 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    dynamicGraph1Line1.setLineWidth(2);
 8012032:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012036:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8012040:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012044:	2302      	movs	r3, #2
 8012046:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb
     *
     * @see getLineWidth
     */
    FORCE_INLINE_FUNCTION void setLineWidth(uint8_t width)
    {
        lineWidth = width;
 801204a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801204e:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8012052:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    }
 8012056:	bf00      	nop
    dynamicGraph1.addGraphElement(dynamicGraph1Line1);
 8012058:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801205c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	f503 72ae 	add.w	r2, r3, #348	@ 0x15c
 8012066:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801206a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8012074:	4619      	mov	r1, r3
 8012076:	4610      	mov	r0, r2
 8012078:	f004 fde3 	bl	8016c42 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>


    add(dynamicGraph1);
 801207c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012080:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801208a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8012094:	4619      	mov	r1, r3
 8012096:	4610      	mov	r0, r2
 8012098:	f7fd f9d8 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4.setXY(6, 97);
 801209c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80120a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80120aa:	2261      	movs	r2, #97	@ 0x61
 80120ac:	2106      	movs	r1, #6
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fd f843 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
    textArea4.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80120b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80120b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f503 64ca 	add.w	r4, r3, #1616	@ 0x650
 80120c2:	2300      	movs	r3, #0
 80120c4:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
 80120c8:	2300      	movs	r3, #0
 80120ca:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
 80120ce:	2300      	movs	r3, #0
 80120d0:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
 80120d4:	f897 3103 	ldrb.w	r3, [r7, #259]	@ 0x103
 80120d8:	041a      	lsls	r2, r3, #16
 80120da:	f897 3102 	ldrb.w	r3, [r7, #258]	@ 0x102
 80120de:	021b      	lsls	r3, r3, #8
 80120e0:	431a      	orrs	r2, r3
 80120e2:	f897 3101 	ldrb.w	r3, [r7, #257]	@ 0x101
 80120e6:	4313      	orrs	r3, r2
 80120e8:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 80120ec:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80120f0:	4611      	mov	r1, r2
 80120f2:	4618      	mov	r0, r3
 80120f4:	f7fc ff08 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 80120f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80120fc:	461a      	mov	r2, r3
 80120fe:	f8c7 4104 	str.w	r4, [r7, #260]	@ 0x104
 8012102:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012106:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801210a:	601a      	str	r2, [r3, #0]
        color = newColor;
 801210c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8012110:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8012114:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8012118:	6812      	ldr	r2, [r2, #0]
 801211a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 801211c:	bf00      	nop
    textArea4.setLinespacing(0);
 801211e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012122:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 801212c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8012130:	2300      	movs	r3, #0
 8012132:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
        linespace = space;
 8012136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801213a:	f8b7 210a 	ldrh.w	r2, [r7, #266]	@ 0x10a
 801213e:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8012140:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	3384      	adds	r3, #132	@ 0x84
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	f8d7 410c 	ldr.w	r4, [r7, #268]	@ 0x10c
 801214e:	463a      	mov	r2, r7
 8012150:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8012154:	4610      	mov	r0, r2
 8012156:	4798      	blx	r3
 8012158:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801215c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8012160:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8012164:	ca07      	ldmia	r2, {r0, r1, r2}
 8012166:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801216a:	bf00      	nop
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_FGFY));
 801216c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012170:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	f503 64ca 	add.w	r4, r3, #1616	@ 0x650
 801217a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801217e:	2103      	movs	r1, #3
 8012180:	4618      	mov	r0, r3
 8012182:	f7fd f9d9 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
 8012186:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801218a:	4619      	mov	r1, r3
 801218c:	4620      	mov	r0, r4
 801218e:	f005 ff8b 	bl	80180a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8012192:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8012196:	4618      	mov	r0, r3
 8012198:	f7fb ff72 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4);
 801219c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80121a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80121aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 80121b4:	4619      	mov	r1, r3
 80121b6:	4610      	mov	r0, r2
 80121b8:	f7fd f948 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1.setXY(6, 163);
 80121bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80121c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f503 63d3 	add.w	r3, r3, #1688	@ 0x698
 80121ca:	22a3      	movs	r2, #163	@ 0xa3
 80121cc:	2106      	movs	r1, #6
 80121ce:	4618      	mov	r0, r3
 80121d0:	f7fc ffb3 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80121d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80121d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	f503 64d3 	add.w	r4, r3, #1688	@ 0x698
 80121e2:	23ff      	movs	r3, #255	@ 0xff
 80121e4:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
 80121e8:	23ff      	movs	r3, #255	@ 0xff
 80121ea:	f887 3112 	strb.w	r3, [r7, #274]	@ 0x112
 80121ee:	23ff      	movs	r3, #255	@ 0xff
 80121f0:	f887 3111 	strb.w	r3, [r7, #273]	@ 0x111
 80121f4:	f897 3113 	ldrb.w	r3, [r7, #275]	@ 0x113
 80121f8:	041a      	lsls	r2, r3, #16
 80121fa:	f897 3112 	ldrb.w	r3, [r7, #274]	@ 0x112
 80121fe:	021b      	lsls	r3, r3, #8
 8012200:	431a      	orrs	r2, r3
 8012202:	f897 3111 	ldrb.w	r3, [r7, #273]	@ 0x111
 8012206:	4313      	orrs	r3, r2
 8012208:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801220c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8012210:	4611      	mov	r1, r2
 8012212:	4618      	mov	r0, r3
 8012214:	f7fc fe78 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 8012218:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801221c:	461a      	mov	r2, r3
 801221e:	f8c7 4114 	str.w	r4, [r7, #276]	@ 0x114
 8012222:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012226:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801222a:	601a      	str	r2, [r3, #0]
        color = newColor;
 801222c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012230:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8012234:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8012238:	6812      	ldr	r2, [r2, #0]
 801223a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 801223c:	bf00      	nop
    textArea4_1.setLinespacing(0);
 801223e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012242:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	f503 63d3 	add.w	r3, r3, #1688	@ 0x698
 801224c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8012250:	2300      	movs	r3, #0
 8012252:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
        linespace = space;
 8012256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801225a:	f8b7 211a 	ldrh.w	r2, [r7, #282]	@ 0x11a
 801225e:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 8012260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	3384      	adds	r3, #132	@ 0x84
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	f8d7 411c 	ldr.w	r4, [r7, #284]	@ 0x11c
 801226e:	463a      	mov	r2, r7
 8012270:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8012274:	4610      	mov	r0, r2
 8012276:	4798      	blx	r3
 8012278:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801227c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8012280:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 8012284:	ca07      	ldmia	r2, {r0, r1, r2}
 8012286:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801228a:	bf00      	nop
    textArea4_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_F7VS));
 801228c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012290:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f503 64d3 	add.w	r4, r3, #1688	@ 0x698
 801229a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801229e:	2102      	movs	r1, #2
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7fd f949 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
 80122a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80122aa:	4619      	mov	r1, r3
 80122ac:	4620      	mov	r0, r4
 80122ae:	f005 fefb 	bl	80180a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80122b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7fb fee2 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1);
 80122bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80122c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122c4:	681a      	ldr	r2, [r3, #0]
 80122c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80122ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f503 63d3 	add.w	r3, r3, #1688	@ 0x698
 80122d4:	4619      	mov	r1, r3
 80122d6:	4610      	mov	r0, r2
 80122d8:	f7fd f8b8 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1_1_2.setXY(6, 111);
 80122dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80122e0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 80122ea:	226f      	movs	r2, #111	@ 0x6f
 80122ec:	2106      	movs	r1, #6
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7fc ff23 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1_1_2.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80122f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80122f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f503 64dc 	add.w	r4, r3, #1760	@ 0x6e0
 8012302:	23ff      	movs	r3, #255	@ 0xff
 8012304:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
 8012308:	23ff      	movs	r3, #255	@ 0xff
 801230a:	f887 3122 	strb.w	r3, [r7, #290]	@ 0x122
 801230e:	23ff      	movs	r3, #255	@ 0xff
 8012310:	f887 3121 	strb.w	r3, [r7, #289]	@ 0x121
 8012314:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8012318:	041a      	lsls	r2, r3, #16
 801231a:	f897 3122 	ldrb.w	r3, [r7, #290]	@ 0x122
 801231e:	021b      	lsls	r3, r3, #8
 8012320:	431a      	orrs	r2, r3
 8012322:	f897 3121 	ldrb.w	r3, [r7, #289]	@ 0x121
 8012326:	4313      	orrs	r3, r2
 8012328:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801232c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8012330:	4611      	mov	r1, r2
 8012332:	4618      	mov	r0, r3
 8012334:	f7fc fde8 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 8012338:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801233a:	461a      	mov	r2, r3
 801233c:	f8c7 4124 	str.w	r4, [r7, #292]	@ 0x124
 8012340:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012344:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012348:	601a      	str	r2, [r3, #0]
        color = newColor;
 801234a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801234e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8012352:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8012356:	6812      	ldr	r2, [r2, #0]
 8012358:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 801235a:	bf00      	nop
    textArea4_1_1_1_2.setLinespacing(0);
 801235c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012360:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 801236a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801236e:	2300      	movs	r3, #0
 8012370:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
        linespace = space;
 8012374:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012378:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 801237c:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 801237e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	3384      	adds	r3, #132	@ 0x84
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f8d7 412c 	ldr.w	r4, [r7, #300]	@ 0x12c
 801238c:	463a      	mov	r2, r7
 801238e:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8012392:	4610      	mov	r0, r2
 8012394:	4798      	blx	r3
 8012396:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801239a:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 801239e:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80123a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80123a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80123a8:	bf00      	nop
    textArea4_1_1_1_2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BPQY));
 80123aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80123ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f503 64dc 	add.w	r4, r3, #1760	@ 0x6e0
 80123b8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80123bc:	2100      	movs	r1, #0
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fd f8ba 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
 80123c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80123c8:	4619      	mov	r1, r3
 80123ca:	4620      	mov	r0, r4
 80123cc:	f005 fe6c 	bl	80180a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80123d0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fb fe53 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1_1_2);
 80123da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80123de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80123e2:	681a      	ldr	r2, [r3, #0]
 80123e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80123e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 80123f2:	4619      	mov	r1, r3
 80123f4:	4610      	mov	r0, r2
 80123f6:	f7fd f829 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea4_1_1_1_1.setXY(6, 213);
 80123fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80123fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 8012408:	22d5      	movs	r2, #213	@ 0xd5
 801240a:	2106      	movs	r1, #6
 801240c:	4618      	mov	r0, r3
 801240e:	f7fc fe94 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
    textArea4_1_1_1_1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8012412:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012416:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	f503 64e5 	add.w	r4, r3, #1832	@ 0x728
 8012420:	23ff      	movs	r3, #255	@ 0xff
 8012422:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8012426:	23ff      	movs	r3, #255	@ 0xff
 8012428:	f887 3132 	strb.w	r3, [r7, #306]	@ 0x132
 801242c:	23ff      	movs	r3, #255	@ 0xff
 801242e:	f887 3131 	strb.w	r3, [r7, #305]	@ 0x131
 8012432:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8012436:	041a      	lsls	r2, r3, #16
 8012438:	f897 3132 	ldrb.w	r3, [r7, #306]	@ 0x132
 801243c:	021b      	lsls	r3, r3, #8
 801243e:	431a      	orrs	r2, r3
 8012440:	f897 3131 	ldrb.w	r3, [r7, #305]	@ 0x131
 8012444:	4313      	orrs	r3, r2
 8012446:	f043 427f 	orr.w	r2, r3, #4278190080	@ 0xff000000
 801244a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801244e:	4611      	mov	r1, r2
 8012450:	4618      	mov	r0, r3
 8012452:	f7fc fd59 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 8012456:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012458:	461a      	mov	r2, r3
 801245a:	f8c7 4134 	str.w	r4, [r7, #308]	@ 0x134
 801245e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012462:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8012466:	601a      	str	r2, [r3, #0]
        color = newColor;
 8012468:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801246c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8012470:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8012474:	6812      	ldr	r2, [r2, #0]
 8012476:	631a      	str	r2, [r3, #48]	@ 0x30
    }
 8012478:	bf00      	nop
    textArea4_1_1_1_1.setLinespacing(0);
 801247a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801247e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 8012488:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801248c:	2300      	movs	r3, #0
 801248e:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
        linespace = space;
 8012492:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8012496:	f8b7 213a 	ldrh.w	r2, [r7, #314]	@ 0x13a
 801249a:	869a      	strh	r2, [r3, #52]	@ 0x34
        boundingArea = calculateBoundingArea();
 801249c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	3384      	adds	r3, #132	@ 0x84
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	f8d7 413c 	ldr.w	r4, [r7, #316]	@ 0x13c
 80124aa:	463a      	mov	r2, r7
 80124ac:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80124b0:	4610      	mov	r0, r2
 80124b2:	4798      	blx	r3
 80124b4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80124b8:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80124bc:	f104 033c 	add.w	r3, r4, #60	@ 0x3c
 80124c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80124c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80124c6:	bf00      	nop
    textArea4_1_1_1_1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_88JH));
 80124c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80124cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	f503 64e5 	add.w	r4, r3, #1832	@ 0x728
 80124d6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80124da:	2101      	movs	r1, #1
 80124dc:	4618      	mov	r0, r3
 80124de:	f7fd f82b 	bl	800f538 <_ZN8touchgfx9TypedTextC1Et>
 80124e2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80124e6:	4619      	mov	r1, r3
 80124e8:	4620      	mov	r0, r4
 80124ea:	f005 fddd 	bl	80180a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80124ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7fb fdc4 	bl	800e080 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea4_1_1_1_1);
 80124f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80124fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012500:	681a      	ldr	r2, [r3, #0]
 8012502:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012506:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 8012510:	4619      	mov	r1, r3
 8012512:	4610      	mov	r0, r2
 8012514:	f7fc ff9a 	bl	800f44c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8012518:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801251c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	4618      	mov	r0, r3
 8012524:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8012528:	46bd      	mov	sp, r7
 801252a:	bd90      	pop	{r4, r7, pc}

0801252c <_ZN15Screen1ViewBaseD1Ev>:

Screen1ViewBase::~Screen1ViewBase()
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	4a2b      	ldr	r2, [pc, #172]	@ (80125e4 <_ZN15Screen1ViewBaseD1Ev+0xb8>)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	601a      	str	r2, [r3, #0]
{
    touchgfx::CanvasWidgetRenderer::resetBuffer();
 801253a:	f006 fd09 	bl	8018f50 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>
}
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f503 63e5 	add.w	r3, r3, #1832	@ 0x728
 8012544:	4618      	mov	r0, r3
 8012546:	f7fd f94b 	bl	800f7e0 <_ZN8touchgfx8TextAreaD1Ev>
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f503 63dc 	add.w	r3, r3, #1760	@ 0x6e0
 8012550:	4618      	mov	r0, r3
 8012552:	f7fd f945 	bl	800f7e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f503 63d3 	add.w	r3, r3, #1688	@ 0x698
 801255c:	4618      	mov	r0, r3
 801255e:	f7fd f93f 	bl	800f7e0 <_ZN8touchgfx8TextAreaD1Ev>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	f503 63ca 	add.w	r3, r3, #1616	@ 0x650
 8012568:	4618      	mov	r0, r3
 801256a:	f7fd f939 	bl	800f7e0 <_ZN8touchgfx8TextAreaD1Ev>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 8012574:	4618      	mov	r0, r3
 8012576:	f000 f95d 	bl	8012834 <_ZN8touchgfx13PainterRGB565D1Ev>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	f203 630c 	addw	r3, r3, #1548	@ 0x60c
 8012580:	4618      	mov	r0, r3
 8012582:	f000 f935 	bl	80127f0 <_ZN8touchgfx16GraphElementLineD1Ev>
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f203 53cc 	addw	r3, r3, #1484	@ 0x5cc
 801258c:	4618      	mov	r0, r3
 801258e:	f000 f8c9 	bl	8012724 <_ZN8touchgfx17GraphElementGridYD1Ev>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8012598:	4618      	mov	r0, r3
 801259a:	f000 f89f 	bl	80126dc <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED1Ev>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80125a4:	4618      	mov	r0, r3
 80125a6:	f000 f8df 	bl	8012768 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	33c4      	adds	r3, #196	@ 0xc4
 80125ae:	4618      	mov	r0, r3
 80125b0:	f000 f8da 	bl	8012768 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	3398      	adds	r3, #152	@ 0x98
 80125b8:	4618      	mov	r0, r3
 80125ba:	f000 f8f7 	bl	80127ac <_ZN8touchgfx3BoxD1Ev>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	336c      	adds	r3, #108	@ 0x6c
 80125c2:	4618      	mov	r0, r3
 80125c4:	f000 f8f2 	bl	80127ac <_ZN8touchgfx3BoxD1Ev>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	3340      	adds	r3, #64	@ 0x40
 80125cc:	4618      	mov	r0, r3
 80125ce:	f000 f8ed 	bl	80127ac <_ZN8touchgfx3BoxD1Ev>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7ff f847 	bl	8011668 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	4618      	mov	r0, r3
 80125de:	3708      	adds	r7, #8
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}
 80125e4:	0802efd4 	.word	0x0802efd4

080125e8 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
}
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f7ff ff9b 	bl	801252c <_ZN15Screen1ViewBaseD1Ev>
 80125f6:	f241 5194 	movw	r1, #5524	@ 0x1594
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f01a f841 	bl	802c682 <_ZdlPvj>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	4618      	mov	r0, r3
 8012604:	3708      	adds	r7, #8
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}

0801260a <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 801260a:	b480      	push	{r7}
 801260c:	b083      	sub	sp, #12
 801260e:	af00      	add	r7, sp, #0
 8012610:	6078      	str	r0, [r7, #4]

}
 8012612:	bf00      	nop
 8012614:	370c      	adds	r7, #12
 8012616:	46bd      	mov	sp, r7
 8012618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801261c:	4770      	bx	lr

0801261e <_ZN8touchgfx3absIiEET_S1_>:
 * @param  d The entity on which to perform the abs.
 *
 * @return The absolute (non-negative) value of d.
 */
template <typename T>
T abs(T d)
 801261e:	b480      	push	{r7}
 8012620:	b083      	sub	sp, #12
 8012622:	af00      	add	r7, sp, #0
 8012624:	6078      	str	r0, [r7, #4]
{
    return (d < 0) ? -d : d;
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2b00      	cmp	r3, #0
 801262a:	bfb8      	it	lt
 801262c:	425b      	neglt	r3, r3
}
 801262e:	4618      	mov	r0, r3
 8012630:	370c      	adds	r7, #12
 8012632:	46bd      	mov	sp, r7
 8012634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012638:	4770      	bx	lr
	...

0801263c <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	4618      	mov	r0, r3
 8012648:	f009 fd0e 	bl	801c068 <_ZN8touchgfx6ScreenC1Ev>
 801264c:	4a05      	ldr	r2, [pc, #20]	@ (8012664 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	601a      	str	r2, [r3, #0]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	2200      	movs	r2, #0
 8012656:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	4618      	mov	r0, r3
 801265c:	3708      	adds	r7, #8
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	0802f1a0 	.word	0x0802f1a0

08012668 <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>:
class GraphWrapAndOverwriteData : public DynamicDataGraph
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	4a05      	ldr	r2, [pc, #20]	@ (8012688 <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev+0x20>)
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	601a      	str	r2, [r3, #0]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	4618      	mov	r0, r3
 801267a:	f7fe fc19 	bl	8010eb0 <_ZN8touchgfx16DynamicDataGraphD1Ev>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	4618      	mov	r0, r3
 8012682:	3708      	adds	r7, #8
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	08030094 	.word	0x08030094

0801268c <_ZN8touchgfx25GraphWrapAndOverwriteDataD0Ev>:
 801268c:	b580      	push	{r7, lr}
 801268e:	b082      	sub	sp, #8
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7ff ffe7 	bl	8012668 <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>
 801269a:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f019 ffef 	bl	802c682 <_ZdlPvj>
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	4618      	mov	r0, r3
 80126a8:	3708      	adds	r7, #8
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
	...

080126b0 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EEC1Ev>:
 */
template <int16_t CAPACITY>
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
{
public:
    GraphWrapAndOverwrite()
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b082      	sub	sp, #8
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
        : GraphWrapAndOverwriteData(CAPACITY, y)
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80126c0:	461a      	mov	r2, r3
 80126c2:	21c8      	movs	r1, #200	@ 0xc8
 80126c4:	f7fe fc18 	bl	8010ef8 <_ZN8touchgfx25GraphWrapAndOverwriteDataC1EsPi>
 80126c8:	4a03      	ldr	r2, [pc, #12]	@ (80126d8 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EEC1Ev+0x28>)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	601a      	str	r2, [r3, #0]
    {
    }
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	4618      	mov	r0, r3
 80126d2:	3708      	adds	r7, #8
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	0802f008 	.word	0x0802f008

080126dc <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED1Ev>:
class GraphWrapAndOverwrite : public GraphWrapAndOverwriteData
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	4a05      	ldr	r2, [pc, #20]	@ (80126fc <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED1Ev+0x20>)
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	601a      	str	r2, [r3, #0]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	4618      	mov	r0, r3
 80126ee:	f7ff ffbb 	bl	8012668 <_ZN8touchgfx25GraphWrapAndOverwriteDataD1Ev>
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	4618      	mov	r0, r3
 80126f6:	3708      	adds	r7, #8
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	0802f008 	.word	0x0802f008

08012700 <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED0Ev>:
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	6878      	ldr	r0, [r7, #4]
 801270a:	f7ff ffe7 	bl	80126dc <_ZN8touchgfx21GraphWrapAndOverwriteILs200EED1Ev>
 801270e:	f44f 618e 	mov.w	r1, #1136	@ 0x470
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f019 ffb5 	bl	802c682 <_ZdlPvj>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	4618      	mov	r0, r3
 801271c:	3708      	adds	r7, #8
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
	...

08012724 <_ZN8touchgfx17GraphElementGridYD1Ev>:
class GraphElementGridY : public GraphElementGridBase
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	4a05      	ldr	r2, [pc, #20]	@ (8012744 <_ZN8touchgfx17GraphElementGridYD1Ev+0x20>)
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	601a      	str	r2, [r3, #0]
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	4618      	mov	r0, r3
 8012736:	f7fe ffb9 	bl	80116ac <_ZN8touchgfx20GraphElementGridBaseD1Ev>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4618      	mov	r0, r3
 801273e:	3708      	adds	r7, #8
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}
 8012744:	0802f208 	.word	0x0802f208

08012748 <_ZN8touchgfx17GraphElementGridYD0Ev>:
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f7ff ffe7 	bl	8012724 <_ZN8touchgfx17GraphElementGridYD1Ev>
 8012756:	2140      	movs	r1, #64	@ 0x40
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f019 ff92 	bl	802c682 <_ZdlPvj>
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	4618      	mov	r0, r3
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	4a05      	ldr	r2, [pc, #20]	@ (8012788 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	601a      	str	r2, [r3, #0]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4618      	mov	r0, r3
 801277a:	f7fd f883 	bl	800f884 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	3708      	adds	r7, #8
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}
 8012788:	0802f3e4 	.word	0x0802f3e4

0801278c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801278c:	b580      	push	{r7, lr}
 801278e:	b082      	sub	sp, #8
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6878      	ldr	r0, [r7, #4]
 8012796:	f7ff ffe7 	bl	8012768 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801279a:	214c      	movs	r1, #76	@ 0x4c
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f019 ff70 	bl	802c682 <_ZdlPvj>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	4618      	mov	r0, r3
 80127a6:	3708      	adds	r7, #8
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b082      	sub	sp, #8
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	4a05      	ldr	r2, [pc, #20]	@ (80127cc <_ZN8touchgfx3BoxD1Ev+0x20>)
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	601a      	str	r2, [r3, #0]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	4618      	mov	r0, r3
 80127be:	f7fc fe67 	bl	800f490 <_ZN8touchgfx6WidgetD1Ev>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	4618      	mov	r0, r3
 80127c6:	3708      	adds	r7, #8
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	080302bc 	.word	0x080302bc

080127d0 <_ZN8touchgfx3BoxD0Ev>:
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b082      	sub	sp, #8
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f7ff ffe7 	bl	80127ac <_ZN8touchgfx3BoxD1Ev>
 80127de:	212c      	movs	r1, #44	@ 0x2c
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f019 ff4e 	bl	802c682 <_ZdlPvj>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	4618      	mov	r0, r3
 80127ea:	3708      	adds	r7, #8
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <_ZN8touchgfx16GraphElementLineD1Ev>:
class GraphElementLine : public AbstractGraphElement
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b082      	sub	sp, #8
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	4a05      	ldr	r2, [pc, #20]	@ (8012810 <_ZN8touchgfx16GraphElementLineD1Ev+0x20>)
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	601a      	str	r2, [r3, #0]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	4618      	mov	r0, r3
 8012802:	f7fe fc1b 	bl	801103c <_ZN8touchgfx20AbstractGraphElementD1Ev>
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4618      	mov	r0, r3
 801280a:	3708      	adds	r7, #8
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	0802ff60 	.word	0x0802ff60

08012814 <_ZN8touchgfx16GraphElementLineD0Ev>:
 8012814:	b580      	push	{r7, lr}
 8012816:	b082      	sub	sp, #8
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
 801281c:	6878      	ldr	r0, [r7, #4]
 801281e:	f7ff ffe7 	bl	80127f0 <_ZN8touchgfx16GraphElementLineD1Ev>
 8012822:	2130      	movs	r1, #48	@ 0x30
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f019 ff2c 	bl	802c682 <_ZdlPvj>
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	4618      	mov	r0, r3
 801282e:	3708      	adds	r7, #8
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <_ZN8touchgfx13PainterRGB565D1Ev>:
class PainterRGB565 : public AbstractPainterRGB565, public AbstractPainterColor
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	4a09      	ldr	r2, [pc, #36]	@ (8012864 <_ZN8touchgfx13PainterRGB565D1Ev+0x30>)
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	601a      	str	r2, [r3, #0]
 8012842:	4a09      	ldr	r2, [pc, #36]	@ (8012868 <_ZN8touchgfx13PainterRGB565D1Ev+0x34>)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	609a      	str	r2, [r3, #8]
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	3308      	adds	r3, #8
 801284c:	4618      	mov	r0, r3
 801284e:	f7fe fe01 	bl	8011454 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	4618      	mov	r0, r3
 8012856:	f7fe fe89 	bl	801156c <_ZN8touchgfx21AbstractPainterRGB565D1Ev>
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	4618      	mov	r0, r3
 801285e:	3708      	adds	r7, #8
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	0802fbe8 	.word	0x0802fbe8
 8012868:	0802fc0c 	.word	0x0802fc0c

0801286c <_ZThn8_N8touchgfx13PainterRGB565D1Ev>:
 801286c:	f1a0 0008 	sub.w	r0, r0, #8
 8012870:	e7e0      	b.n	8012834 <_ZN8touchgfx13PainterRGB565D1Ev>
 8012872:	bf00      	nop

08012874 <_ZN8touchgfx13PainterRGB565D0Ev>:
 8012874:	b580      	push	{r7, lr}
 8012876:	b082      	sub	sp, #8
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6878      	ldr	r0, [r7, #4]
 801287e:	f7ff ffd9 	bl	8012834 <_ZN8touchgfx13PainterRGB565D1Ev>
 8012882:	2114      	movs	r1, #20
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f019 fefc 	bl	802c682 <_ZdlPvj>
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	4618      	mov	r0, r3
 801288e:	3708      	adds	r7, #8
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}

08012894 <_ZThn8_N8touchgfx13PainterRGB565D0Ev>:
 8012894:	f1a0 0008 	sub.w	r0, r0, #8
 8012898:	e7ec      	b.n	8012874 <_ZN8touchgfx13PainterRGB565D0Ev>
	...

0801289c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801289c:	b480      	push	{r7}
 801289e:	af00      	add	r7, sp, #0
    return bitmap_database;
 80128a0:	4b02      	ldr	r3, [pc, #8]	@ (80128ac <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr
 80128ac:	0802f4d4 	.word	0x0802f4d4

080128b0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 80128b0:	b480      	push	{r7}
 80128b2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 80128b4:	2301      	movs	r3, #1
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	46bd      	mov	sp, r7
 80128ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128be:	4770      	bx	lr

080128c0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 80128c0:	b480      	push	{r7}
 80128c2:	b085      	sub	sp, #20
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	60f8      	str	r0, [r7, #12]
 80128c8:	460b      	mov	r3, r1
 80128ca:	607a      	str	r2, [r7, #4]
 80128cc:	817b      	strh	r3, [r7, #10]
        return 0;
 80128ce:	2300      	movs	r3, #0
    }
 80128d0:	4618      	mov	r0, r3
 80128d2:	3714      	adds	r7, #20
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    virtual const uint16_t* getGSUBTable() const
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
        return 0;
 80128e4:	2300      	movs	r3, #0
    }
 80128e6:	4618      	mov	r0, r3
 80128e8:	370c      	adds	r7, #12
 80128ea:	46bd      	mov	sp, r7
 80128ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f0:	4770      	bx	lr

080128f2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80128f2:	b480      	push	{r7}
 80128f4:	b083      	sub	sp, #12
 80128f6:	af00      	add	r7, sp, #0
 80128f8:	6078      	str	r0, [r7, #4]
        return 0;
 80128fa:	2300      	movs	r3, #0
    }
 80128fc:	4618      	mov	r0, r3
 80128fe:	370c      	adds	r7, #12
 8012900:	46bd      	mov	sp, r7
 8012902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012906:	4770      	bx	lr

08012908 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8012908:	b480      	push	{r7}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
 801290e:	60f8      	str	r0, [r7, #12]
 8012910:	60b9      	str	r1, [r7, #8]
 8012912:	4613      	mov	r3, r2
 8012914:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8012916:	4a07      	ldr	r2, [pc, #28]	@ (8012934 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	6013      	str	r3, [r2, #0]
        fonts = f;
 801291c:	4a06      	ldr	r2, [pc, #24]	@ (8012938 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8012922:	4a06      	ldr	r2, [pc, #24]	@ (801293c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8012924:	88fb      	ldrh	r3, [r7, #6]
 8012926:	8013      	strh	r3, [r2, #0]
    }
 8012928:	bf00      	nop
 801292a:	3714      	adds	r7, #20
 801292c:	46bd      	mov	sp, r7
 801292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012932:	4770      	bx	lr
 8012934:	2001215c 	.word	0x2001215c
 8012938:	20012164 	.word	0x20012164
 801293c:	20012160 	.word	0x20012160

08012940 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012940:	b40e      	push	{r1, r2, r3}
 8012942:	b580      	push	{r7, lr}
 8012944:	b085      	sub	sp, #20
 8012946:	af00      	add	r7, sp, #0
 8012948:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 801294a:	f107 0320 	add.w	r3, r7, #32
 801294e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	69fa      	ldr	r2, [r7, #28]
 8012954:	2100      	movs	r1, #0
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f008 feee 	bl	801b738 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 801295c:	4603      	mov	r3, r0
 801295e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012960:	89fb      	ldrh	r3, [r7, #14]
}
 8012962:	4618      	mov	r0, r3
 8012964:	3714      	adds	r7, #20
 8012966:	46bd      	mov	sp, r7
 8012968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801296c:	b003      	add	sp, #12
 801296e:	4770      	bx	lr

08012970 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8012970:	b40c      	push	{r2, r3}
 8012972:	b580      	push	{r7, lr}
 8012974:	b084      	sub	sp, #16
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
 801297a:	460b      	mov	r3, r1
 801297c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 801297e:	f107 031c 	add.w	r3, r7, #28
 8012982:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8012984:	78f9      	ldrb	r1, [r7, #3]
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	69ba      	ldr	r2, [r7, #24]
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f008 fed4 	bl	801b738 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8012990:	4603      	mov	r3, r0
 8012992:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8012994:	89fb      	ldrh	r3, [r7, #14]
}
 8012996:	4618      	mov	r0, r3
 8012998:	3710      	adds	r7, #16
 801299a:	46bd      	mov	sp, r7
 801299c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80129a0:	b002      	add	sp, #8
 80129a2:	4770      	bx	lr

080129a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b08a      	sub	sp, #40	@ 0x28
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
 80129ac:	460b      	mov	r3, r1
 80129ae:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d016      	beq.n	80129e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	3322      	adds	r3, #34	@ 0x22
 80129bc:	627b      	str	r3, [r7, #36]	@ 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80129be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c0:	8adb      	ldrh	r3, [r3, #22]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d105      	bne.n	80129d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80129c6:	4b43      	ldr	r3, [pc, #268]	@ (8012ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 80129c8:	4a43      	ldr	r2, [pc, #268]	@ (8012ad8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 80129ca:	21c5      	movs	r1, #197	@ 0xc5
 80129cc:	4843      	ldr	r0, [pc, #268]	@ (8012adc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80129ce:	f019 fe85 	bl	802c6dc <__assert_func>
            return buffer[pos];
 80129d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d4:	8a9b      	ldrh	r3, [r3, #20]
 80129d6:	461a      	mov	r2, r3
 80129d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d001      	beq.n	80129e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80129e2:	2301      	movs	r3, #1
 80129e4:	e000      	b.n	80129e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 80129e6:	2300      	movs	r3, #0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d06a      	beq.n	8012ac2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 80129ec:	6878      	ldr	r0, [r7, #4]
 80129ee:	f00a fa40 	bl	801ce72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	3322      	adds	r3, #34	@ 0x22
 80129f6:	623b      	str	r3, [r7, #32]
 80129f8:	2301      	movs	r3, #1
 80129fa:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 80129fc:	6a3b      	ldr	r3, [r7, #32]
 80129fe:	8adb      	ldrh	r3, [r3, #22]
 8012a00:	8bfa      	ldrh	r2, [r7, #30]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d305      	bcc.n	8012a12 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8012a06:	4b36      	ldr	r3, [pc, #216]	@ (8012ae0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8012a08:	4a36      	ldr	r2, [pc, #216]	@ (8012ae4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8012a0a:	21cb      	movs	r1, #203	@ 0xcb
 8012a0c:	4833      	ldr	r0, [pc, #204]	@ (8012adc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012a0e:	f019 fe65 	bl	802c6dc <__assert_func>
            const uint16_t index = pos + offset;
 8012a12:	6a3b      	ldr	r3, [r7, #32]
 8012a14:	8a9a      	ldrh	r2, [r3, #20]
 8012a16:	8bfb      	ldrh	r3, [r7, #30]
 8012a18:	4413      	add	r3, r2
 8012a1a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8012a1c:	8bbb      	ldrh	r3, [r7, #28]
 8012a1e:	2b09      	cmp	r3, #9
 8012a20:	d801      	bhi.n	8012a26 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8012a22:	8bbb      	ldrh	r3, [r7, #28]
 8012a24:	e001      	b.n	8012a2a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8012a26:	8bbb      	ldrh	r3, [r7, #28]
 8012a28:	3b0a      	subs	r3, #10
 8012a2a:	6a3a      	ldr	r2, [r7, #32]
 8012a2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a30:	f640 123f 	movw	r2, #2367	@ 0x93f
 8012a34:	4293      	cmp	r3, r2
 8012a36:	bf0c      	ite	eq
 8012a38:	2301      	moveq	r3, #1
 8012a3a:	2300      	movne	r3, #0
 8012a3c:	b2db      	uxtb	r3, r3
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d03f      	beq.n	8012ac2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	3322      	adds	r3, #34	@ 0x22
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	3222      	adds	r2, #34	@ 0x22
 8012a4a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8012a4c:	68ba      	ldr	r2, [r7, #8]
 8012a4e:	8ad2      	ldrh	r2, [r2, #22]
 8012a50:	2a00      	cmp	r2, #0
 8012a52:	d105      	bne.n	8012a60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8012a54:	4b1f      	ldr	r3, [pc, #124]	@ (8012ad4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8012a56:	4a20      	ldr	r2, [pc, #128]	@ (8012ad8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8012a58:	21c5      	movs	r1, #197	@ 0xc5
 8012a5a:	4820      	ldr	r0, [pc, #128]	@ (8012adc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012a5c:	f019 fe3e 	bl	802c6dc <__assert_func>
            return buffer[pos];
 8012a60:	68ba      	ldr	r2, [r7, #8]
 8012a62:	8a92      	ldrh	r2, [r2, #20]
 8012a64:	4611      	mov	r1, r2
 8012a66:	68ba      	ldr	r2, [r7, #8]
 8012a68:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8012a6c:	613b      	str	r3, [r7, #16]
 8012a6e:	4613      	mov	r3, r2
 8012a70:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	8adb      	ldrh	r3, [r3, #22]
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d806      	bhi.n	8012a88 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8012a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8012ae8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8012a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8012aec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8012a7e:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 8012a82:	4816      	ldr	r0, [pc, #88]	@ (8012adc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8012a84:	f019 fe2a 	bl	802c6dc <__assert_func>
            const uint16_t index = pos + 1;
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	8a9b      	ldrh	r3, [r3, #20]
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8012a90:	89bb      	ldrh	r3, [r7, #12]
 8012a92:	2b09      	cmp	r3, #9
 8012a94:	d801      	bhi.n	8012a9a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8012a96:	89bb      	ldrh	r3, [r7, #12]
 8012a98:	e000      	b.n	8012a9c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	693a      	ldr	r2, [r7, #16]
 8012a9e:	89f9      	ldrh	r1, [r7, #14]
 8012aa0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8012aa4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	3322      	adds	r3, #34	@ 0x22
 8012aaa:	61bb      	str	r3, [r7, #24]
 8012aac:	f640 133f 	movw	r3, #2367	@ 0x93f
 8012ab0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	8a9b      	ldrh	r3, [r3, #20]
 8012ab6:	4619      	mov	r1, r3
 8012ab8:	69bb      	ldr	r3, [r7, #24]
 8012aba:	8afa      	ldrh	r2, [r7, #22]
 8012abc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8012ac0:	bf00      	nop
        }
    }
    return getNextChar();
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f00a f8d8 	bl	801cc78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012ac8:	4603      	mov	r3, r0
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3728      	adds	r7, #40	@ 0x28
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	0802df48 	.word	0x0802df48
 8012ad8:	0802df54 	.word	0x0802df54
 8012adc:	0802e000 	.word	0x0802e000
 8012ae0:	0802e048 	.word	0x0802e048
 8012ae4:	0802e058 	.word	0x0802e058
 8012ae8:	0802e12c 	.word	0x0802e12c
 8012aec:	0802e138 	.word	0x0802e138

08012af0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b082      	sub	sp, #8
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f00a f884 	bl	801cc06 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8012afe:	bf00      	nop
 8012b00:	3708      	adds	r7, #8
 8012b02:	46bd      	mov	sp, r7
 8012b04:	bd80      	pop	{r7, pc}

08012b06 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8012b06:	b580      	push	{r7, lr}
 8012b08:	b088      	sub	sp, #32
 8012b0a:	af02      	add	r7, sp, #8
 8012b0c:	60f8      	str	r0, [r7, #12]
 8012b0e:	1d38      	adds	r0, r7, #4
 8012b10:	e880 0006 	stmia.w	r0, {r1, r2}
 8012b14:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8012b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8012b1a:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8012b1c:	1d39      	adds	r1, r7, #4
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	9301      	str	r3, [sp, #4]
 8012b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b24:	9300      	str	r3, [sp, #0]
 8012b26:	6a3b      	ldr	r3, [r7, #32]
 8012b28:	683a      	ldr	r2, [r7, #0]
 8012b2a:	68f8      	ldr	r0, [r7, #12]
 8012b2c:	f007 faa6 	bl	801a07c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8012b30:	bf00      	nop
 8012b32:	3718      	adds	r7, #24
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}

08012b38 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8012b38:	b590      	push	{r4, r7, lr}
 8012b3a:	b085      	sub	sp, #20
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	4603      	mov	r3, r0
 8012b40:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8012b42:	2300      	movs	r3, #0
 8012b44:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8012b46:	88fb      	ldrh	r3, [r7, #6]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d127      	bne.n	8012b9c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8012b4c:	88fb      	ldrh	r3, [r7, #6]
 8012b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8012bc8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d016      	beq.n	8012b86 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8012b58:	88fb      	ldrh	r3, [r7, #6]
 8012b5a:	4a1b      	ldr	r2, [pc, #108]	@ (8012bc8 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8012b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b60:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	68ba      	ldr	r2, [r7, #8]
 8012b68:	4413      	add	r3, r2
 8012b6a:	4a18      	ldr	r2, [pc, #96]	@ (8012bcc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012b6c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8012b6e:	68bb      	ldr	r3, [r7, #8]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	68ba      	ldr	r2, [r7, #8]
 8012b74:	4413      	add	r3, r2
 8012b76:	4a16      	ldr	r2, [pc, #88]	@ (8012bd0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012b78:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	689b      	ldr	r3, [r3, #8]
 8012b7e:	68ba      	ldr	r2, [r7, #8]
 8012b80:	4413      	add	r3, r2
 8012b82:	60fb      	str	r3, [r7, #12]
 8012b84:	e00a      	b.n	8012b9c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8012b86:	4b11      	ldr	r3, [pc, #68]	@ (8012bcc <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8012b88:	4a12      	ldr	r2, [pc, #72]	@ (8012bd4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8012b8a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8012b8c:	4a12      	ldr	r2, [pc, #72]	@ (8012bd8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8012b8e:	4b10      	ldr	r3, [pc, #64]	@ (8012bd0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8012b90:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8012b92:	88fb      	ldrh	r3, [r7, #6]
 8012b94:	4a11      	ldr	r2, [pc, #68]	@ (8012bdc <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b9a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d00d      	beq.n	8012bbe <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 8012ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8012be0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012ba4:	88fb      	ldrh	r3, [r7, #6]
 8012ba6:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012ba8:	f000 f83e 	bl	8012c28 <_ZN17TypedTextDatabase8getFontsEv>
 8012bac:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8012bae:	f000 f833 	bl	8012c18 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	461a      	mov	r2, r3
 8012bb6:	4621      	mov	r1, r4
 8012bb8:	68f8      	ldr	r0, [r7, #12]
 8012bba:	f7ff fea5 	bl	8012908 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 8012bbe:	bf00      	nop
 8012bc0:	3714      	adds	r7, #20
 8012bc2:	46bd      	mov	sp, r7
 8012bc4:	bd90      	pop	{r4, r7, pc}
 8012bc6:	bf00      	nop
 8012bc8:	2000d814 	.word	0x2000d814
 8012bcc:	2000d81c 	.word	0x2000d81c
 8012bd0:	2000d820 	.word	0x2000d820
 8012bd4:	0803abb0 	.word	0x0803abb0
 8012bd8:	0803ab90 	.word	0x0803ab90
 8012bdc:	0803ac18 	.word	0x0803ac18
 8012be0:	2000d818 	.word	0x2000d818

08012be4 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012be4:	b480      	push	{r7}
 8012be6:	b083      	sub	sp, #12
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	460b      	mov	r3, r1
 8012bee:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8012bf0:	4b07      	ldr	r3, [pc, #28]	@ (8012c10 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 8012bf2:	681a      	ldr	r2, [r3, #0]
 8012bf4:	4b07      	ldr	r3, [pc, #28]	@ (8012c14 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012bf6:	6819      	ldr	r1, [r3, #0]
 8012bf8:	887b      	ldrh	r3, [r7, #2]
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	440b      	add	r3, r1
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	005b      	lsls	r3, r3, #1
 8012c02:	4413      	add	r3, r2
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	370c      	adds	r7, #12
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr
 8012c10:	2000d81c 	.word	0x2000d81c
 8012c14:	2000d820 	.word	0x2000d820

08012c18 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012c18:	b480      	push	{r7}
 8012c1a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012c1c:	2308      	movs	r3, #8
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012c28:	b480      	push	{r7}
 8012c2a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8012c2c:	4b02      	ldr	r3, [pc, #8]	@ (8012c38 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr
 8012c38:	2000d824 	.word	0x2000d824

08012c3c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
 8012c44:	6039      	str	r1, [r7, #0]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d113      	bne.n	8012c74 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d10e      	bne.n	8012c74 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 8012c56:	f7fb fb4d 	bl	800e2f4 <_Z23getFont_verdana_20_4bppv>
 8012c5a:	4603      	mov	r3, r0
};
 8012c5c:	4a07      	ldr	r2, [pc, #28]	@ (8012c7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8012c5e:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8012c60:	f7fb fba0 	bl	800e3a4 <_Z23getFont_verdana_40_4bppv>
 8012c64:	4603      	mov	r3, r0
};
 8012c66:	4a05      	ldr	r2, [pc, #20]	@ (8012c7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8012c68:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 8012c6a:	f7fb faeb 	bl	800e244 <_Z23getFont_verdana_10_4bppv>
 8012c6e:	4603      	mov	r3, r0
};
 8012c70:	4a02      	ldr	r2, [pc, #8]	@ (8012c7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8012c72:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8012c74:	bf00      	nop
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	2000d824 	.word	0x2000d824

08012c80 <_GLOBAL__sub_I_touchgfx_fonts>:
 8012c80:	b580      	push	{r7, lr}
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8012c88:	2001      	movs	r0, #1
 8012c8a:	f7ff ffd7 	bl	8012c3c <_Z41__static_initialization_and_destruction_0ii>
 8012c8e:	bd80      	pop	{r7, pc}

08012c90 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
 8012c98:	4a05      	ldr	r2, [pc, #20]	@ (8012cb0 <_ZN19FrontendApplicationD1Ev+0x20>)
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	601a      	str	r2, [r3, #0]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	f7fb fddd 	bl	800e860 <_ZN23FrontendApplicationBaseD1Ev>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3708      	adds	r7, #8
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}
 8012cb0:	0802f554 	.word	0x0802f554

08012cb4 <_ZN19FrontendApplicationD0Ev>:
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f7ff ffe7 	bl	8012c90 <_ZN19FrontendApplicationD1Ev>
 8012cc2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f019 fcdb 	bl	802c682 <_ZdlPvj>
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}

08012cd6 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	b082      	sub	sp, #8
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f000 f82d 	bl	8012d44 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	4618      	mov	r0, r3
 8012cee:	f007 fe59 	bl	801a9a4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012cf2:	bf00      	nop
 8012cf4:	3708      	adds	r7, #8
 8012cf6:	46bd      	mov	sp, r7
 8012cf8:	bd80      	pop	{r7, pc}
	...

08012cfc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b084      	sub	sp, #16
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	60f8      	str	r0, [r7, #12]
 8012d04:	60b9      	str	r1, [r7, #8]
 8012d06:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	687a      	ldr	r2, [r7, #4]
 8012d0c:	68b9      	ldr	r1, [r7, #8]
 8012d0e:	4618      	mov	r0, r3
 8012d10:	f7fb fdf6 	bl	800e900 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8012d14:	4a03      	ldr	r2, [pc, #12]	@ (8012d24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	601a      	str	r2, [r3, #0]
{

}
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3710      	adds	r7, #16
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}
 8012d24:	0802f554 	.word	0x0802f554

08012d28 <_ZN5ModelC1Ev>:
extern osMessageQueueId_t myQueueUIHandle;

}

#endif
Model::Model() :
 8012d28:	b480      	push	{r7}
 8012d2a:	b083      	sub	sp, #12
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
		modelListener(0) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2200      	movs	r2, #0
 8012d34:	601a      	str	r2, [r3, #0]

}
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4618      	mov	r0, r3
 8012d3a:	370c      	adds	r7, #12
 8012d3c:	46bd      	mov	sp, r7
 8012d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d42:	4770      	bx	lr

08012d44 <_ZN5Model4tickEv>:
int count_data = 0;
void Model::tick() {
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
#ifndef SIMULATOR
	int16_t val = 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	81fb      	strh	r3, [r7, #14]
	if (osMessageQueueGet(myQueueUIHandle, (void*) &val, 0, 0) == osOK) // if the message is read successfully
 8012d50:	4b13      	ldr	r3, [pc, #76]	@ (8012da0 <_ZN5Model4tickEv+0x5c>)
 8012d52:	6818      	ldr	r0, [r3, #0]
 8012d54:	f107 010e 	add.w	r1, r7, #14
 8012d58:	2300      	movs	r3, #0
 8012d5a:	2200      	movs	r2, #0
 8012d5c:	f7f7 ffb2 	bl	800acc4 <osMessageQueueGet>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	bf0c      	ite	eq
 8012d66:	2301      	moveq	r3, #1
 8012d68:	2300      	movne	r3, #0
 8012d6a:	b2db      	uxtb	r3, r3
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d013      	beq.n	8012d98 <_ZN5Model4tickEv+0x54>
			{

		val = Adc_Convert_To_mV(val);
 8012d70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7ed fedc 	bl	8000b34 <Adc_Convert_To_mV>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	b21b      	sxth	r3, r3
 8012d80:	81fb      	strh	r3, [r7, #14]
		modelListener->updateVolt(val);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681a      	ldr	r2, [r3, #0]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	330c      	adds	r3, #12
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8012d94:	4610      	mov	r0, r2
 8012d96:	4798      	blx	r3
	}
#endif

}
 8012d98:	bf00      	nop
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	20000348 	.word	0x20000348

08012da4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
    {
    }
 8012dac:	bf00      	nop
 8012dae:	370c      	adds	r7, #12
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr

08012db8 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012db8:	b480      	push	{r7}
 8012dba:	b083      	sub	sp, #12
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
    {
    }
 8012dc0:	bf00      	nop
 8012dc2:	370c      	adds	r7, #12
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr

08012dcc <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012dcc:	b480      	push	{r7}
 8012dce:	b083      	sub	sp, #12
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
    {
 8012dd4:	4a04      	ldr	r2, [pc, #16]	@ (8012de8 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	601a      	str	r2, [r3, #0]
    }
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	370c      	adds	r7, #12
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr
 8012de8:	0802f5f8 	.word	0x0802f5f8

08012dec <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
    }
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7ff ffe9 	bl	8012dcc <_ZN8touchgfx9PresenterD1Ev>
 8012dfa:	2104      	movs	r1, #4
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f019 fc40 	bl	802c682 <_ZdlPvj>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4618      	mov	r0, r3
 8012e06:	3708      	adds	r7, #8
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8012e0c:	b480      	push	{r7}
 8012e0e:	b083      	sub	sp, #12
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
    {
 8012e14:	4a04      	ldr	r2, [pc, #16]	@ (8012e28 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	601a      	str	r2, [r3, #0]
    }
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	370c      	adds	r7, #12
 8012e20:	46bd      	mov	sp, r7
 8012e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e26:	4770      	bx	lr
 8012e28:	0802f5f8 	.word	0x0802f5f8

08012e2c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8012e2c:	b480      	push	{r7}
 8012e2e:	b083      	sub	sp, #12
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	4a06      	ldr	r2, [pc, #24]	@ (8012e50 <_ZN13ModelListenerC1Ev+0x24>)
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	601a      	str	r2, [r3, #0]
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	605a      	str	r2, [r3, #4]
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	4618      	mov	r0, r3
 8012e44:	370c      	adds	r7, #12
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	0802f5e0 	.word	0x0802f5e0

08012e54 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	4a04      	ldr	r2, [pc, #16]	@ (8012e70 <_ZN13ModelListenerD1Ev+0x1c>)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	601a      	str	r2, [r3, #0]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	4618      	mov	r0, r3
 8012e66:	370c      	adds	r7, #12
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr
 8012e70:	0802f5e0 	.word	0x0802f5e0

08012e74 <_ZN13ModelListenerD0Ev>:
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b082      	sub	sp, #8
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6878      	ldr	r0, [r7, #4]
 8012e7e:	f7ff ffe9 	bl	8012e54 <_ZN13ModelListenerD1Ev>
 8012e82:	2108      	movs	r1, #8
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f019 fbfc 	bl	802c682 <_ZdlPvj>
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <_ZN13ModelListener10updateTempEj>:
    virtual void updateTemp(unsigned int val){}
 8012e94:	b480      	push	{r7}
 8012e96:	b083      	sub	sp, #12
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
 8012e9e:	bf00      	nop
 8012ea0:	370c      	adds	r7, #12
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea8:	4770      	bx	lr

08012eaa <_ZN13ModelListener10updateVoltEj>:
    virtual void updateVolt(unsigned int val){}
 8012eaa:	b480      	push	{r7}
 8012eac:	b083      	sub	sp, #12
 8012eae:	af00      	add	r7, sp, #0
 8012eb0:	6078      	str	r0, [r7, #4]
 8012eb2:	6039      	str	r1, [r7, #0]
 8012eb4:	bf00      	nop
 8012eb6:	370c      	adds	r7, #12
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr

08012ec0 <_ZN16Screen1PresenterD1Ev>:
    virtual void deactivate();
    virtual void updateTemp(unsigned int val);
    virtual void updateVolt(unsigned int val);


    virtual ~Screen1Presenter() {}
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b082      	sub	sp, #8
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	4a09      	ldr	r2, [pc, #36]	@ (8012ef0 <_ZN16Screen1PresenterD1Ev+0x30>)
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	601a      	str	r2, [r3, #0]
 8012ece:	4a09      	ldr	r2, [pc, #36]	@ (8012ef4 <_ZN16Screen1PresenterD1Ev+0x34>)
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	605a      	str	r2, [r3, #4]
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	3304      	adds	r3, #4
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f7ff ffbb 	bl	8012e54 <_ZN13ModelListenerD1Ev>
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f7ff ff73 	bl	8012dcc <_ZN8touchgfx9PresenterD1Ev>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	3708      	adds	r7, #8
 8012eec:	46bd      	mov	sp, r7
 8012eee:	bd80      	pop	{r7, pc}
 8012ef0:	0802f5a8 	.word	0x0802f5a8
 8012ef4:	0802f5c8 	.word	0x0802f5c8

08012ef8 <_ZThn4_N16Screen1PresenterD1Ev>:
 8012ef8:	f1a0 0004 	sub.w	r0, r0, #4
 8012efc:	e7e0      	b.n	8012ec0 <_ZN16Screen1PresenterD1Ev>
 8012efe:	bf00      	nop

08012f00 <_ZN16Screen1PresenterD0Ev>:
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f7ff ffd9 	bl	8012ec0 <_ZN16Screen1PresenterD1Ev>
 8012f0e:	2110      	movs	r1, #16
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f019 fbb6 	bl	802c682 <_ZdlPvj>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	3708      	adds	r7, #8
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	bd80      	pop	{r7, pc}

08012f20 <_ZThn4_N16Screen1PresenterD0Ev>:
 8012f20:	f1a0 0004 	sub.w	r0, r0, #4
 8012f24:	e7ec      	b.n	8012f00 <_ZN16Screen1PresenterD0Ev>
	...

08012f28 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8012f28:	b580      	push	{r7, lr}
 8012f2a:	b082      	sub	sp, #8
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
 8012f30:	6039      	str	r1, [r7, #0]
    : view(v)
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7ff ff69 	bl	8012e0c <_ZN8touchgfx9PresenterC1Ev>
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	3304      	adds	r3, #4
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7ff ff74 	bl	8012e2c <_ZN13ModelListenerC1Ev>
 8012f44:	4a06      	ldr	r2, [pc, #24]	@ (8012f60 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	601a      	str	r2, [r3, #0]
 8012f4a:	4a06      	ldr	r2, [pc, #24]	@ (8012f64 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	605a      	str	r2, [r3, #4]
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	683a      	ldr	r2, [r7, #0]
 8012f54:	60da      	str	r2, [r3, #12]
{

}
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3708      	adds	r7, #8
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	0802f5a8 	.word	0x0802f5a8
 8012f64:	0802f5c8 	.word	0x0802f5c8

08012f68 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]

}
 8012f70:	bf00      	nop
 8012f72:	370c      	adds	r7, #12
 8012f74:	46bd      	mov	sp, r7
 8012f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7a:	4770      	bx	lr

08012f7c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b083      	sub	sp, #12
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]

}
 8012f84:	bf00      	nop
 8012f86:	370c      	adds	r7, #12
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8e:	4770      	bx	lr

08012f90 <_ZN16Screen1Presenter10updateTempEj>:

void Screen1Presenter::updateTemp(unsigned int val)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
	view.updateTemp(val);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	68da      	ldr	r2, [r3, #12]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	332c      	adds	r3, #44	@ 0x2c
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	6839      	ldr	r1, [r7, #0]
 8012faa:	4610      	mov	r0, r2
 8012fac:	4798      	blx	r3
}
 8012fae:	bf00      	nop
 8012fb0:	3708      	adds	r7, #8
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <_ZThn4_N16Screen1Presenter10updateTempEj>:
    virtual void updateTemp(unsigned int val);
 8012fb6:	f1a0 0004 	sub.w	r0, r0, #4
 8012fba:	f7ff bfe9 	b.w	8012f90 <_ZN16Screen1Presenter10updateTempEj>

08012fbe <_ZN16Screen1Presenter10updateVoltEj>:
void Screen1Presenter::updateVolt(unsigned int val)
{
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b082      	sub	sp, #8
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	6039      	str	r1, [r7, #0]
	view.updateVolt(val);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	68da      	ldr	r2, [r3, #12]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	3330      	adds	r3, #48	@ 0x30
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	6839      	ldr	r1, [r7, #0]
 8012fd8:	4610      	mov	r0, r2
 8012fda:	4798      	blx	r3
}
 8012fdc:	bf00      	nop
 8012fde:	3708      	adds	r7, #8
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}

08012fe4 <_ZThn4_N16Screen1Presenter10updateVoltEj>:
    virtual void updateVolt(unsigned int val);
 8012fe4:	f1a0 0004 	sub.w	r0, r0, #4
 8012fe8:	f7ff bfe9 	b.w	8012fbe <_ZN16Screen1Presenter10updateVoltEj>

08012fec <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8012fec:	b580      	push	{r7, lr}
 8012fee:	b082      	sub	sp, #8
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	4a05      	ldr	r2, [pc, #20]	@ (801300c <_ZN11Screen1ViewD1Ev+0x20>)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	601a      	str	r2, [r3, #0]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	f7ff fa95 	bl	801252c <_ZN15Screen1ViewBaseD1Ev>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4618      	mov	r0, r3
 8013006:	3708      	adds	r7, #8
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	0802f610 	.word	0x0802f610

08013010 <_ZN11Screen1ViewD0Ev>:
 8013010:	b580      	push	{r7, lr}
 8013012:	b082      	sub	sp, #8
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7ff ffe7 	bl	8012fec <_ZN11Screen1ViewD1Ev>
 801301e:	f241 5194 	movw	r1, #5524	@ 0x1594
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f019 fb2d 	bl	802c682 <_ZdlPvj>
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	4618      	mov	r0, r3
 801302c:	3708      	adds	r7, #8
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
	...

08013034 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 8013034:	b580      	push	{r7, lr}
 8013036:	b082      	sub	sp, #8
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	4618      	mov	r0, r3
 8013040:	f7fe fb68 	bl	8011714 <_ZN15Screen1ViewBaseC1Ev>
 8013044:	4a03      	ldr	r2, [pc, #12]	@ (8013054 <_ZN11Screen1ViewC1Ev+0x20>)
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	601a      	str	r2, [r3, #0]
{

}
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	4618      	mov	r0, r3
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	0802f610 	.word	0x0802f610

08013058 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b082      	sub	sp, #8
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	4618      	mov	r0, r3
 8013064:	f7ff fad1 	bl	801260a <_ZN15Screen1ViewBase11setupScreenEv>
}
 8013068:	bf00      	nop
 801306a:	3708      	adds	r7, #8
 801306c:	46bd      	mov	sp, r7
 801306e:	bd80      	pop	{r7, pc}

08013070 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8013070:	b580      	push	{r7, lr}
 8013072:	b082      	sub	sp, #8
 8013074:	af00      	add	r7, sp, #0
 8013076:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	4618      	mov	r0, r3
 801307c:	f7fc f9c6 	bl	800f40c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8013080:	bf00      	nop
 8013082:	3708      	adds	r7, #8
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}

08013088 <_ZN11Screen1View10updateTempEj>:

void Screen1View::updateTemp(unsigned int val)
{
 8013088:	b480      	push	{r7}
 801308a:	b083      	sub	sp, #12
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
//
//	dynamicGraph2.addDataPoint((float)val);
//	dynamicGraph2.invalidate();
	//dynamicGraph1.clear();

}
 8013092:	bf00      	nop
 8013094:	370c      	adds	r7, #12
 8013096:	46bd      	mov	sp, r7
 8013098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309c:	4770      	bx	lr
	...

080130a0 <_ZN11Screen1View10updateVoltEj>:
int graph_point_count = 0;
void Screen1View::updateVolt(unsigned int val)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b08a      	sub	sp, #40	@ 0x28
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
	//update ui.
	memset((void*)textAreaVoltBuffer, 0, TEXTAREAVOLT_SIZE*2);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f203 737a 	addw	r3, r3, #1914	@ 0x77a
 80130b0:	220a      	movs	r2, #10
 80130b2:	2100      	movs	r1, #0
 80130b4:	4618      	mov	r0, r3
 80130b6:	f019 fd18 	bl	802caea <memset>
	Unicode::snprintf(textAreaVoltBuffer,TEXTAREAVOLT_SIZE, "%d", val);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	f203 707a 	addw	r0, r3, #1914	@ 0x77a
 80130c0:	683b      	ldr	r3, [r7, #0]
 80130c2:	4a40      	ldr	r2, [pc, #256]	@ (80131c4 <_ZN11Screen1View10updateVoltEj+0x124>)
 80130c4:	2105      	movs	r1, #5
 80130c6:	f00a fc7c 	bl	801d9c2 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	textAreaVolt.invalidate();
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80130d0:	4618      	mov	r0, r3
 80130d2:	f008 fc5b 	bl	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>
	//3300 - 100
	//val - x
	float gval = ((float)val)/1000; //in V
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	ee07 3a90 	vmov	s15, r3
 80130dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80130e0:	eddf 6a39 	vldr	s13, [pc, #228]	@ 80131c8 <_ZN11Screen1View10updateVoltEj+0x128>
 80130e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80130e8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	dynamicGraph1.addDataPoint(gval);
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80130f2:	623b      	str	r3, [r7, #32]
 80130f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f6:	61fb      	str	r3, [r7, #28]
        return addDataPointScaled(float2scaledY(y));
 80130f8:	6a3b      	ldr	r3, [r7, #32]
 80130fa:	61bb      	str	r3, [r7, #24]
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	617b      	str	r3, [r7, #20]
        return float2scaled(f, yScale);
 8013100:	69bb      	ldr	r3, [r7, #24]
 8013102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013104:	697a      	ldr	r2, [r7, #20]
 8013106:	613a      	str	r2, [r7, #16]
 8013108:	60fb      	str	r3, [r7, #12]
        const float fs = f * (float)scale;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	ee07 3a90 	vmov	s15, r3
 8013110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013114:	ed97 7a04 	vldr	s14, [r7, #16]
 8013118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801311c:	edc7 7a02 	vstr	s15, [r7, #8]
        if (fs >= 0)
 8013120:	edd7 7a02 	vldr	s15, [r7, #8]
 8013124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801312c:	db0a      	blt.n	8013144 <_ZN11Screen1View10updateVoltEj+0xa4>
            return (int)(fs + 0.5f);
 801312e:	edd7 7a02 	vldr	s15, [r7, #8]
 8013132:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013136:	ee77 7a87 	vadd.f32	s15, s15, s14
 801313a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801313e:	ee17 3a90 	vmov	r3, s15
 8013142:	e019      	b.n	8013178 <_ZN11Screen1View10updateVoltEj+0xd8>
        return ((int)fs - 1) + (int)(1.5f + (fs - (float)(int)fs));
 8013144:	edd7 7a02 	vldr	s15, [r7, #8]
 8013148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801314c:	ee17 3a90 	vmov	r3, s15
 8013150:	3b01      	subs	r3, #1
 8013152:	edd7 7a02 	vldr	s15, [r7, #8]
 8013156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801315a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801315e:	ed97 7a02 	vldr	s14, [r7, #8]
 8013162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013166:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801316a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801316e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013172:	ee17 2a90 	vmov	r2, s15
 8013176:	4413      	add	r3, r2
        return float2scaled(f, yScale);
 8013178:	bf00      	nop
        return addDataPointScaled(float2scaledY(y));
 801317a:	4619      	mov	r1, r3
 801317c:	6a38      	ldr	r0, [r7, #32]
 801317e:	f003 ff23 	bl	8016fc8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>
 8013182:	bf00      	nop
	dynamicGraph1.invalidate();
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 801318a:	4618      	mov	r0, r3
 801318c:	f008 fbfe 	bl	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>

	if(graph_point_count++ == 200)
 8013190:	4b0e      	ldr	r3, [pc, #56]	@ (80131cc <_ZN11Screen1View10updateVoltEj+0x12c>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	1c5a      	adds	r2, r3, #1
 8013196:	490d      	ldr	r1, [pc, #52]	@ (80131cc <_ZN11Screen1View10updateVoltEj+0x12c>)
 8013198:	600a      	str	r2, [r1, #0]
 801319a:	2bc8      	cmp	r3, #200	@ 0xc8
 801319c:	bf0c      	ite	eq
 801319e:	2301      	moveq	r3, #1
 80131a0:	2300      	movne	r3, #0
 80131a2:	b2db      	uxtb	r3, r3
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d008      	beq.n	80131ba <_ZN11Screen1View10updateVoltEj+0x11a>
	{
		graph_point_count = 0;
 80131a8:	4b08      	ldr	r3, [pc, #32]	@ (80131cc <_ZN11Screen1View10updateVoltEj+0x12c>)
 80131aa:	2200      	movs	r2, #0
 80131ac:	601a      	str	r2, [r3, #0]
		dynamicGraph1.clear();
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 80131b4:	4618      	mov	r0, r3
 80131b6:	f004 fb6a 	bl	801788e <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>
		//dynamicGraph1.setScale(1000, true);, to change the scale of the graphic, to match with the input waveform freq.
		//For example, if the waveform freq = 10Khz, then the scale should be set for 1/(10Khz)/10, then 10 points will be display.

	}
}
 80131ba:	bf00      	nop
 80131bc:	3728      	adds	r7, #40	@ 0x28
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	0802e1ec 	.word	0x0802e1ec
 80131c8:	447a0000 	.word	0x447a0000
 80131cc:	2000d830 	.word	0x2000d830

080131d0 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80131d0:	b480      	push	{r7}
 80131d2:	b083      	sub	sp, #12
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
    {
 80131d8:	4a04      	ldr	r2, [pc, #16]	@ (80131ec <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	601a      	str	r2, [r3, #0]
    }
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	4618      	mov	r0, r3
 80131e2:	370c      	adds	r7, #12
 80131e4:	46bd      	mov	sp, r7
 80131e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ea:	4770      	bx	lr
 80131ec:	0802f664 	.word	0x0802f664

080131f0 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
    }
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7ff ffe9 	bl	80131d0 <_ZN8touchgfx15TouchControllerD1Ev>
 80131fe:	2104      	movs	r1, #4
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f019 fa3e 	bl	802c682 <_ZdlPvj>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	4618      	mov	r0, r3
 801320a:	3708      	adds	r7, #8
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}

08013210 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8013218:	bf00      	nop
 801321a:	370c      	adds	r7, #12
 801321c:	46bd      	mov	sp, r7
 801321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013222:	4770      	bx	lr

08013224 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8013224:	b480      	push	{r7}
 8013226:	b085      	sub	sp, #20
 8013228:	af00      	add	r7, sp, #0
 801322a:	60f8      	str	r0, [r7, #12]
 801322c:	60b9      	str	r1, [r7, #8]
 801322e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	3714      	adds	r7, #20
 8013236:	46bd      	mov	sp, r7
 8013238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323c:	4770      	bx	lr
	...

08013240 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
 8013248:	4a05      	ldr	r2, [pc, #20]	@ (8013260 <_ZN20STM32TouchControllerD1Ev+0x20>)
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	601a      	str	r2, [r3, #0]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	4618      	mov	r0, r3
 8013252:	f7ff ffbd 	bl	80131d0 <_ZN8touchgfx15TouchControllerD1Ev>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4618      	mov	r0, r3
 801325a:	3708      	adds	r7, #8
 801325c:	46bd      	mov	sp, r7
 801325e:	bd80      	pop	{r7, pc}
 8013260:	0802f64c 	.word	0x0802f64c

08013264 <_ZN20STM32TouchControllerD0Ev>:
 8013264:	b580      	push	{r7, lr}
 8013266:	b082      	sub	sp, #8
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6878      	ldr	r0, [r7, #4]
 801326e:	f7ff ffe7 	bl	8013240 <_ZN20STM32TouchControllerD1Ev>
 8013272:	2104      	movs	r1, #4
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f019 fa04 	bl	802c682 <_ZdlPvj>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	4618      	mov	r0, r3
 801327e:	3708      	adds	r7, #8
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 8013284:	b480      	push	{r7}
 8013286:	af00      	add	r7, sp, #0

}
 8013288:	bf00      	nop
 801328a:	46bd      	mov	sp, r7
 801328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013290:	4770      	bx	lr
	...

08013294 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8013294:	b480      	push	{r7}
 8013296:	b083      	sub	sp, #12
 8013298:	af00      	add	r7, sp, #0
 801329a:	4603      	mov	r3, r0
 801329c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801329e:	79fb      	ldrb	r3, [r7, #7]
 80132a0:	2b03      	cmp	r3, #3
 80132a2:	d80c      	bhi.n	80132be <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 80132a4:	a201      	add	r2, pc, #4	@ (adr r2, 80132ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80132a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132aa:	bf00      	nop
 80132ac:	080132bd 	.word	0x080132bd
 80132b0:	080132bd 	.word	0x080132bd
 80132b4:	080132bd 	.word	0x080132bd
 80132b8:	080132bd 	.word	0x080132bd
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 80132bc:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80132be:	bf00      	nop
 80132c0:	370c      	adds	r7, #12
 80132c2:	46bd      	mov	sp, r7
 80132c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c8:	4770      	bx	lr
 80132ca:	bf00      	nop

080132cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80132cc:	b480      	push	{r7}
 80132ce:	b083      	sub	sp, #12
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	4603      	mov	r3, r0
 80132d4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80132d6:	79fb      	ldrb	r3, [r7, #7]
 80132d8:	2b03      	cmp	r3, #3
 80132da:	d80c      	bhi.n	80132f6 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80132dc:	a201      	add	r2, pc, #4	@ (adr r2, 80132e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80132de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132e2:	bf00      	nop
 80132e4:	080132f5 	.word	0x080132f5
 80132e8:	080132f5 	.word	0x080132f5
 80132ec:	080132f5 	.word	0x080132f5
 80132f0:	080132f5 	.word	0x080132f5
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80132f4:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80132f6:	bf00      	nop
 80132f8:	370c      	adds	r7, #12
 80132fa:	46bd      	mov	sp, r7
 80132fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013300:	4770      	bx	lr
 8013302:	bf00      	nop

08013304 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8013304:	b480      	push	{r7}
 8013306:	b083      	sub	sp, #12
 8013308:	af00      	add	r7, sp, #0
 801330a:	4603      	mov	r3, r0
 801330c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801330e:	79fb      	ldrb	r3, [r7, #7]
 8013310:	2b03      	cmp	r3, #3
 8013312:	d80c      	bhi.n	801332e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8013314:	a201      	add	r2, pc, #4	@ (adr r2, 801331c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8013316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801331a:	bf00      	nop
 801331c:	0801332d 	.word	0x0801332d
 8013320:	0801332d 	.word	0x0801332d
 8013324:	0801332d 	.word	0x0801332d
 8013328:	0801332d 	.word	0x0801332d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 801332c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801332e:	bf00      	nop
 8013330:	370c      	adds	r7, #12
 8013332:	46bd      	mov	sp, r7
 8013334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop

0801333c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 801333c:	b480      	push	{r7}
 801333e:	b083      	sub	sp, #12
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
    {
 8013344:	4a04      	ldr	r2, [pc, #16]	@ (8013358 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	601a      	str	r2, [r3, #0]
    }
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	4618      	mov	r0, r3
 801334e:	370c      	adds	r7, #12
 8013350:	46bd      	mov	sp, r7
 8013352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013356:	4770      	bx	lr
 8013358:	0802fa9c 	.word	0x0802fa9c

0801335c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 801335c:	b580      	push	{r7, lr}
 801335e:	b082      	sub	sp, #8
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
    }
 8013364:	6878      	ldr	r0, [r7, #4]
 8013366:	f7ff ffe9 	bl	801333c <_ZN8touchgfx3HALD1Ev>
 801336a:	217c      	movs	r1, #124	@ 0x7c
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f019 f988 	bl	802c682 <_ZdlPvj>
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	4618      	mov	r0, r3
 8013376:	3708      	adds	r7, #8
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}

0801337c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	460b      	mov	r3, r1
 8013386:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	78fa      	ldrb	r2, [r7, #3]
 801338c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	2201      	movs	r2, #1
 8013394:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
    }
 8013398:	bf00      	nop
 801339a:	370c      	adds	r7, #12
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b082      	sub	sp, #8
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
 80133ac:	460b      	mov	r3, r1
 80133ae:	807b      	strh	r3, [r7, #2]
 80133b0:	4613      	mov	r3, r2
 80133b2:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80133b4:	4b0c      	ldr	r3, [pc, #48]	@ (80133e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	887a      	ldrh	r2, [r7, #2]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d304      	bcc.n	80133c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80133be:	4b0b      	ldr	r3, [pc, #44]	@ (80133ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80133c0:	881b      	ldrh	r3, [r3, #0]
 80133c2:	883a      	ldrh	r2, [r7, #0]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d205      	bcs.n	80133d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80133c8:	4b09      	ldr	r3, [pc, #36]	@ (80133f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80133ca:	4a0a      	ldr	r2, [pc, #40]	@ (80133f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80133cc:	219e      	movs	r1, #158	@ 0x9e
 80133ce:	480a      	ldr	r0, [pc, #40]	@ (80133f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80133d0:	f019 f984 	bl	802c6dc <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80133d4:	4a09      	ldr	r2, [pc, #36]	@ (80133fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80133d6:	887b      	ldrh	r3, [r7, #2]
 80133d8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80133da:	4a09      	ldr	r2, [pc, #36]	@ (8013400 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80133dc:	883b      	ldrh	r3, [r7, #0]
 80133de:	8013      	strh	r3, [r2, #0]
    }
 80133e0:	bf00      	nop
 80133e2:	3708      	adds	r7, #8
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	200120f8 	.word	0x200120f8
 80133ec:	200120fa 	.word	0x200120fa
 80133f0:	0802e1f0 	.word	0x0802e1f0
 80133f4:	0802e254 	.word	0x0802e254
 80133f8:	0802e298 	.word	0x0802e298
 80133fc:	200120fe 	.word	0x200120fe
 8013400:	20012100 	.word	0x20012100

08013404 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	f893 307a 	ldrb.w	r3, [r3, #122]	@ 0x7a
 8013412:	2b00      	cmp	r3, #0
 8013414:	d009      	beq.n	801342a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	685a      	ldr	r2, [r3, #4]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4610      	mov	r0, r2
 8013424:	4798      	blx	r3
 8013426:	4603      	mov	r3, r0
 8013428:	e000      	b.n	801342c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 801342a:	2300      	movs	r3, #0
    }
 801342c:	4618      	mov	r0, r3
 801342e:	3708      	adds	r7, #8
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}

08013434 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8013434:	b580      	push	{r7, lr}
 8013436:	b082      	sub	sp, #8
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f002 ff69 	bl	8016314 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	33ac      	adds	r3, #172	@ 0xac
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	4798      	blx	r3
    }
 801344e:	bf00      	nop
 8013450:	3708      	adds	r7, #8
 8013452:	46bd      	mov	sp, r7
 8013454:	bd80      	pop	{r7, pc}

08013456 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8013456:	b480      	push	{r7}
 8013458:	b083      	sub	sp, #12
 801345a:	af00      	add	r7, sp, #0
 801345c:	6078      	str	r0, [r7, #4]
 801345e:	6039      	str	r1, [r7, #0]
        return false;
 8013460:	2300      	movs	r3, #0
    }
 8013462:	4618      	mov	r0, r3
 8013464:	370c      	adds	r7, #12
 8013466:	46bd      	mov	sp, r7
 8013468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346c:	4770      	bx	lr
	...

08013470 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8013470:	b580      	push	{r7, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	af00      	add	r7, sp, #0
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	607a      	str	r2, [r7, #4]
 801347c:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d106      	bne.n	8013492 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8013484:	4b0f      	ldr	r3, [pc, #60]	@ (80134c4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8013486:	4a10      	ldr	r2, [pc, #64]	@ (80134c8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8013488:	f240 21d2 	movw	r1, #722	@ 0x2d2
 801348c:	480f      	ldr	r0, [pc, #60]	@ (80134cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801348e:	f019 f925 	bl	802c6dc <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	68ba      	ldr	r2, [r7, #8]
 8013496:	63da      	str	r2, [r3, #60]	@ 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	641a      	str	r2, [r3, #64]	@ 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	bf14      	ite	ne
 80134a4:	2301      	movne	r3, #1
 80134a6:	2300      	moveq	r3, #0
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	4b09      	ldr	r3, [pc, #36]	@ (80134d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80134ac:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	338c      	adds	r3, #140	@ 0x8c
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	6839      	ldr	r1, [r7, #0]
 80134b8:	68f8      	ldr	r0, [r7, #12]
 80134ba:	4798      	blx	r3
    }
 80134bc:	bf00      	nop
 80134be:	3710      	adds	r7, #16
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	0802e2dc 	.word	0x0802e2dc
 80134c8:	0802e314 	.word	0x0802e314
 80134cc:	0802e298 	.word	0x0802e298
 80134d0:	20012102 	.word	0x20012102

080134d4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 80134d4:	b480      	push	{r7}
 80134d6:	b083      	sub	sp, #12
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
 80134dc:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	645a      	str	r2, [r3, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	bf14      	ite	ne
 80134ea:	2301      	movne	r3, #1
 80134ec:	2300      	moveq	r3, #0
 80134ee:	b2da      	uxtb	r2, r3
 80134f0:	4b03      	ldr	r3, [pc, #12]	@ (8013500 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80134f2:	701a      	strb	r2, [r3, #0]
    }
 80134f4:	bf00      	nop
 80134f6:	370c      	adds	r7, #12
 80134f8:	46bd      	mov	sp, r7
 80134fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134fe:	4770      	bx	lr
 8013500:	20012103 	.word	0x20012103

08013504 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 8013504:	b480      	push	{r7}
 8013506:	b083      	sub	sp, #12
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
        return 0;
 801350c:	2300      	movs	r3, #0
    }
 801350e:	4618      	mov	r0, r3
 8013510:	370c      	adds	r7, #12
 8013512:	46bd      	mov	sp, r7
 8013514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013518:	4770      	bx	lr

0801351a <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 801351a:	b580      	push	{r7, lr}
 801351c:	b082      	sub	sp, #8
 801351e:	af00      	add	r7, sp, #0
 8013520:	6078      	str	r0, [r7, #4]
 8013522:	460b      	mov	r3, r1
 8013524:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801352a:	2b00      	cmp	r3, #0
 801352c:	d004      	beq.n	8013538 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013532:	887a      	ldrh	r2, [r7, #2]
 8013534:	4610      	mov	r0, r2
 8013536:	4798      	blx	r3
    }
 8013538:	bf00      	nop
 801353a:	3708      	adds	r7, #8
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}

08013540 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
    virtual uint16_t getTFTCurrentLine()
 8013540:	b480      	push	{r7}
 8013542:	b083      	sub	sp, #12
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
        return 0xFFFFu;
 8013548:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }
 801354c:	4618      	mov	r0, r3
 801354e:	370c      	adds	r7, #12
 8013550:	46bd      	mov	sp, r7
 8013552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013556:	4770      	bx	lr

08013558 <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	685a      	ldr	r2, [r3, #4]
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	3318      	adds	r3, #24
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	4610      	mov	r0, r2
 8013570:	4798      	blx	r3
 8013572:	4603      	mov	r3, r0
    }
 8013574:	4618      	mov	r0, r3
 8013576:	3708      	adds	r7, #8
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 801357c:	b480      	push	{r7}
 801357e:	b085      	sub	sp, #20
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	f893 2078 	ldrb.w	r2, [r3, #120]	@ 0x78
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013590:	429a      	cmp	r2, r3
 8013592:	d011      	beq.n	80135b8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8013594:	4b14      	ldr	r3, [pc, #80]	@ (80135e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8013596:	781b      	ldrb	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d11e      	bne.n	80135da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 801359c:	4b13      	ldr	r3, [pc, #76]	@ (80135ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801359e:	881b      	ldrh	r3, [r3, #0]
 80135a0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80135a2:	4b13      	ldr	r3, [pc, #76]	@ (80135f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80135a4:	881a      	ldrh	r2, [r3, #0]
 80135a6:	4b11      	ldr	r3, [pc, #68]	@ (80135ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80135a8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 80135aa:	4a11      	ldr	r2, [pc, #68]	@ (80135f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80135ac:	89bb      	ldrh	r3, [r7, #12]
 80135ae:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80135b0:	4b0d      	ldr	r3, [pc, #52]	@ (80135e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80135b2:	2201      	movs	r2, #1
 80135b4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80135b6:	e010      	b.n	80135da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 80135b8:	4b0b      	ldr	r3, [pc, #44]	@ (80135e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d00c      	beq.n	80135da <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 80135c0:	4b0a      	ldr	r3, [pc, #40]	@ (80135ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80135c2:	881b      	ldrh	r3, [r3, #0]
 80135c4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80135c6:	4b0a      	ldr	r3, [pc, #40]	@ (80135f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80135c8:	881a      	ldrh	r2, [r3, #0]
 80135ca:	4b08      	ldr	r3, [pc, #32]	@ (80135ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80135cc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80135ce:	4a08      	ldr	r2, [pc, #32]	@ (80135f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80135d0:	89fb      	ldrh	r3, [r7, #14]
 80135d2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80135d4:	4b04      	ldr	r3, [pc, #16]	@ (80135e8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80135d6:	2200      	movs	r2, #0
 80135d8:	701a      	strb	r2, [r3, #0]
    }
 80135da:	bf00      	nop
 80135dc:	3714      	adds	r7, #20
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	200120fc 	.word	0x200120fc
 80135ec:	200120fa 	.word	0x200120fa
 80135f0:	200120f8 	.word	0x200120f8

080135f4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 80135f4:	b480      	push	{r7}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
    {
    }
 80135fc:	bf00      	nop
 80135fe:	370c      	adds	r7, #12
 8013600:	46bd      	mov	sp, r7
 8013602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013606:	4770      	bx	lr

08013608 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8013608:	b480      	push	{r7}
 801360a:	b083      	sub	sp, #12
 801360c:	af00      	add	r7, sp, #0
 801360e:	6078      	str	r0, [r7, #4]
    {
    }
 8013610:	bf00      	nop
 8013612:	370c      	adds	r7, #12
 8013614:	46bd      	mov	sp, r7
 8013616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361a:	4770      	bx	lr

0801361c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801361c:	b580      	push	{r7, lr}
 801361e:	b082      	sub	sp, #8
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	4618      	mov	r0, r3
 8013628:	f002 f8d2 	bl	80157d0 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801362c:	bf00      	nop
 801362e:	3708      	adds	r7, #8
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8013634:	b580      	push	{r7, lr}
 8013636:	b082      	sub	sp, #8
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	4a05      	ldr	r2, [pc, #20]	@ (8013654 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	601a      	str	r2, [r3, #0]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4618      	mov	r0, r3
 8013646:	f7ff fe79 	bl	801333c <_ZN8touchgfx3HALD1Ev>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4618      	mov	r0, r3
 801364e:	3708      	adds	r7, #8
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}
 8013654:	0802f8c8 	.word	0x0802f8c8

08013658 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8013658:	b580      	push	{r7, lr}
 801365a:	b082      	sub	sp, #8
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f7ff ffe7 	bl	8013634 <_ZN20TouchGFXGeneratedHALD1Ev>
 8013666:	217c      	movs	r1, #124	@ 0x7c
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f019 f80a 	bl	802c682 <_ZdlPvj>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	4618      	mov	r0, r3
 8013672:	3708      	adds	r7, #8
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}

08013678 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8013678:	b580      	push	{r7, lr}
 801367a:	b082      	sub	sp, #8
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	4618      	mov	r0, r3
 8013684:	f7ff ffca 	bl	801361c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8013688:	bf00      	nop
 801368a:	3708      	adds	r7, #8
 801368c:	46bd      	mov	sp, r7
 801368e:	bd80      	pop	{r7, pc}

08013690 <_ZN11TouchGFXHAL10initializeEv>:
 */
//#warning "A user must call touchgfx::startNewTransfer(); once touchgfxDisplayDriverTransmitBlock() has succesfully sent a block."
//#warning "A user must implement C-methods touchgfxDisplayDriverTransmitActive() and touchgfxDisplayDriverTransmitBlock() used by the Partial Framebuffer Strategy."

void TouchGFXHAL::initialize()
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	4618      	mov	r0, r3
 801369c:	f001 fa40 	bl	8014b20 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80136a0:	bf00      	nop
 80136a2:	3708      	adds	r7, #8
 80136a4:	46bd      	mov	sp, r7
 80136a6:	bd80      	pop	{r7, pc}

080136a8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b082      	sub	sp, #8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f001 faa4 	bl	8014c00 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80136b8:	4603      	mov	r3, r0
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	3708      	adds	r7, #8
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd80      	pop	{r7, pc}

080136c2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80136c2:	b580      	push	{r7, lr}
 80136c4:	b082      	sub	sp, #8
 80136c6:	af00      	add	r7, sp, #0
 80136c8:	6078      	str	r0, [r7, #4]
 80136ca:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6839      	ldr	r1, [r7, #0]
 80136d0:	4618      	mov	r0, r3
 80136d2:	f001 faa0 	bl	8014c16 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 80136d6:	bf00      	nop
 80136d8:	3708      	adds	r7, #8
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}

080136de <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b082      	sub	sp, #8
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	6078      	str	r0, [r7, #4]
 80136e6:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate the start address of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	6839      	ldr	r1, [r7, #0]
 80136ec:	4618      	mov	r0, r3
 80136ee:	f001 fa9d 	bl	8014c2c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 80136f2:	bf00      	nop
 80136f4:	3708      	adds	r7, #8
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}

080136fa <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80136fa:	b580      	push	{r7, lr}
 80136fc:	b084      	sub	sp, #16
 80136fe:	af00      	add	r7, sp, #0
 8013700:	60f8      	str	r0, [r7, #12]
 8013702:	60b9      	str	r1, [r7, #8]
 8013704:	607a      	str	r2, [r7, #4]
 8013706:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	687a      	ldr	r2, [r7, #4]
 801370e:	68b9      	ldr	r1, [r7, #8]
 8013710:	f001 facf 	bl	8014cb2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8013714:	4603      	mov	r3, r0
}
 8013716:	4618      	mov	r0, r3
 8013718:	3710      	adds	r7, #16
 801371a:	46bd      	mov	sp, r7
 801371c:	bd80      	pop	{r7, pc}

0801371e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801371e:	b580      	push	{r7, lr}
 8013720:	b082      	sub	sp, #8
 8013722:	af00      	add	r7, sp, #0
 8013724:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	4618      	mov	r0, r3
 801372a:	f001 fa1d 	bl	8014b68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801372e:	bf00      	nop
 8013730:	3708      	adds	r7, #8
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}

08013736 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8013736:	b580      	push	{r7, lr}
 8013738:	b082      	sub	sp, #8
 801373a:	af00      	add	r7, sp, #0
 801373c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	4618      	mov	r0, r3
 8013742:	f001 fa1b 	bl	8014b7c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8013746:	bf00      	nop
 8013748:	3708      	adds	r7, #8
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b082      	sub	sp, #8
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	4618      	mov	r0, r3
 801375a:	f001 fa19 	bl	8014b90 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801375e:	bf00      	nop
 8013760:	3708      	adds	r7, #8
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}

08013766 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8013766:	b580      	push	{r7, lr}
 8013768:	b082      	sub	sp, #8
 801376a:	af00      	add	r7, sp, #0
 801376c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit the call to the parent function
    // and implement the needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	4618      	mov	r0, r3
 8013772:	f001 fa17 	bl	8014ba4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8013776:	bf00      	nop
 8013778:	3708      	adds	r7, #8
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}

0801377e <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 801377e:	b580      	push	{r7, lr}
 8013780:	b082      	sub	sp, #8
 8013782:	af00      	add	r7, sp, #0
 8013784:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	4618      	mov	r0, r3
 801378a:	f001 fa15 	bl	8014bb8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 801378e:	4603      	mov	r3, r0
}
 8013790:	4618      	mov	r0, r3
 8013792:	3708      	adds	r7, #8
 8013794:	46bd      	mov	sp, r7
 8013796:	bd80      	pop	{r7, pc}

08013798 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b082      	sub	sp, #8
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	4618      	mov	r0, r3
 80137a4:	f001 fa15 	bl	8014bd2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80137a8:	bf00      	nop
 80137aa:	3708      	adds	r7, #8
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	4a05      	ldr	r2, [pc, #20]	@ (80137d0 <_ZN11TouchGFXHALD1Ev+0x20>)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	601a      	str	r2, [r3, #0]
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7ff ff37 	bl	8013634 <_ZN20TouchGFXGeneratedHALD1Ev>
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	4618      	mov	r0, r3
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	0802f67c 	.word	0x0802f67c

080137d4 <_ZN11TouchGFXHALD0Ev>:
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f7ff ffe7 	bl	80137b0 <_ZN11TouchGFXHALD1Ev>
 80137e2:	217c      	movs	r1, #124	@ 0x7c
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f018 ff4c 	bl	802c682 <_ZdlPvj>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4618      	mov	r0, r3
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 80137f8:	2200      	movs	r2, #0
 80137fa:	2101      	movs	r1, #1
 80137fc:	2001      	movs	r0, #1
 80137fe:	f7f7 f882 	bl	800a906 <osSemaphoreNew>
 8013802:	4603      	mov	r3, r0
 8013804:	4a0f      	ldr	r2, [pc, #60]	@ (8013844 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013806:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8013808:	4b0e      	ldr	r3, [pc, #56]	@ (8013844 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d105      	bne.n	801381c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8013810:	4b0d      	ldr	r3, [pc, #52]	@ (8013848 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8013812:	4a0e      	ldr	r2, [pc, #56]	@ (801384c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013814:	2128      	movs	r1, #40	@ 0x28
 8013816:	480e      	ldr	r0, [pc, #56]	@ (8013850 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013818:	f018 ff60 	bl	802c6dc <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 801381c:	2200      	movs	r2, #0
 801381e:	2104      	movs	r1, #4
 8013820:	2001      	movs	r0, #1
 8013822:	f7f7 f983 	bl	800ab2c <osMessageQueueNew>
 8013826:	4603      	mov	r3, r0
 8013828:	4a0a      	ldr	r2, [pc, #40]	@ (8013854 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801382a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 801382c:	4b09      	ldr	r3, [pc, #36]	@ (8013854 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d105      	bne.n	8013840 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8013834:	4b08      	ldr	r3, [pc, #32]	@ (8013858 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8013836:	4a05      	ldr	r2, [pc, #20]	@ (801384c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013838:	212c      	movs	r1, #44	@ 0x2c
 801383a:	4805      	ldr	r0, [pc, #20]	@ (8013850 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801383c:	f018 ff4e 	bl	802c6dc <__assert_func>
}
 8013840:	bf00      	nop
 8013842:	bd80      	pop	{r7, pc}
 8013844:	2000d834 	.word	0x2000d834
 8013848:	0802e364 	.word	0x0802e364
 801384c:	0802e3b0 	.word	0x0802e3b0
 8013850:	0802e3e0 	.word	0x0802e3e0
 8013854:	2000d838 	.word	0x2000d838
 8013858:	0802e40c 	.word	0x0802e40c

0801385c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801385c:	b580      	push	{r7, lr}
 801385e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8013860:	4b04      	ldr	r3, [pc, #16]	@ (8013874 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f04f 31ff 	mov.w	r1, #4294967295
 8013868:	4618      	mov	r0, r3
 801386a:	f7f7 f8d5 	bl	800aa18 <osSemaphoreAcquire>
}
 801386e:	bf00      	nop
 8013870:	bd80      	pop	{r7, pc}
 8013872:	bf00      	nop
 8013874:	2000d834 	.word	0x2000d834

08013878 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013878:	b580      	push	{r7, lr}
 801387a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 801387c:	4b03      	ldr	r3, [pc, #12]	@ (801388c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	4618      	mov	r0, r3
 8013882:	f7f7 f915 	bl	800aab0 <osSemaphoreRelease>
}
 8013886:	bf00      	nop
 8013888:	bd80      	pop	{r7, pc}
 801388a:	bf00      	nop
 801388c:	2000d834 	.word	0x2000d834

08013890 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013890:	b580      	push	{r7, lr}
 8013892:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8013894:	4b03      	ldr	r3, [pc, #12]	@ (80138a4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	2100      	movs	r1, #0
 801389a:	4618      	mov	r0, r3
 801389c:	f7f7 f8bc 	bl	800aa18 <osSemaphoreAcquire>
}
 80138a0:	bf00      	nop
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	2000d834 	.word	0x2000d834

080138a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80138a8:	b580      	push	{r7, lr}
 80138aa:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80138ac:	4b03      	ldr	r3, [pc, #12]	@ (80138bc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7f7 f8fd 	bl	800aab0 <osSemaphoreRelease>
}
 80138b6:	bf00      	nop
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	2000d834 	.word	0x2000d834

080138c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 80138c4:	4b04      	ldr	r3, [pc, #16]	@ (80138d8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 80138c6:	6818      	ldr	r0, [r3, #0]
 80138c8:	2300      	movs	r3, #0
 80138ca:	2200      	movs	r2, #0
 80138cc:	4903      	ldr	r1, [pc, #12]	@ (80138dc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 80138ce:	f7f7 f99f 	bl	800ac10 <osMessageQueuePut>
}
 80138d2:	bf00      	nop
 80138d4:	bd80      	pop	{r7, pc}
 80138d6:	bf00      	nop
 80138d8:	2000d838 	.word	0x2000d838
 80138dc:	20000020 	.word	0x20000020

080138e0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b082      	sub	sp, #8
 80138e4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80138e6:	4b09      	ldr	r3, [pc, #36]	@ (801390c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80138e8:	6818      	ldr	r0, [r3, #0]
 80138ea:	1d39      	adds	r1, r7, #4
 80138ec:	2300      	movs	r3, #0
 80138ee:	2200      	movs	r2, #0
 80138f0:	f7f7 f9e8 	bl	800acc4 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80138f4:	4b05      	ldr	r3, [pc, #20]	@ (801390c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80138f6:	6818      	ldr	r0, [r3, #0]
 80138f8:	1d39      	adds	r1, r7, #4
 80138fa:	f04f 33ff 	mov.w	r3, #4294967295
 80138fe:	2200      	movs	r2, #0
 8013900:	f7f7 f9e0 	bl	800acc4 <osMessageQueueGet>
}
 8013904:	bf00      	nop
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	2000d838 	.word	0x2000d838

08013910 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8013910:	b480      	push	{r7}
 8013912:	b083      	sub	sp, #12
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
    {
 8013918:	4a04      	ldr	r2, [pc, #16]	@ (801392c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	601a      	str	r2, [r3, #0]
    }
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	4618      	mov	r0, r3
 8013922:	370c      	adds	r7, #12
 8013924:	46bd      	mov	sp, r7
 8013926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392a:	4770      	bx	lr
 801392c:	0802f7a4 	.word	0x0802f7a4

08013930 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
    }
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7ff ffe9 	bl	8013910 <_ZN8touchgfx9DMA_QueueD1Ev>
 801393e:	2104      	movs	r1, #4
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f018 fe9e 	bl	802c682 <_ZdlPvj>
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	4618      	mov	r0, r3
 801394a:	3708      	adds	r7, #8
 801394c:	46bd      	mov	sp, r7
 801394e:	bd80      	pop	{r7, pc}

08013950 <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 8013950:	b480      	push	{r7}
 8013952:	b083      	sub	sp, #12
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
    {
    }
 8013958:	bf00      	nop
 801395a:	370c      	adds	r7, #12
 801395c:	46bd      	mov	sp, r7
 801395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013962:	4770      	bx	lr

08013964 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 8013964:	b480      	push	{r7}
 8013966:	b083      	sub	sp, #12
 8013968:	af00      	add	r7, sp, #0
 801396a:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 801396c:	2300      	movs	r3, #0
    }
 801396e:	4618      	mov	r0, r3
 8013970:	370c      	adds	r7, #12
 8013972:	46bd      	mov	sp, r7
 8013974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013978:	4770      	bx	lr
	...

0801397c <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 801397c:	b480      	push	{r7}
 801397e:	b083      	sub	sp, #12
 8013980:	af00      	add	r7, sp, #0
 8013982:	6078      	str	r0, [r7, #4]
    {
 8013984:	4a04      	ldr	r2, [pc, #16]	@ (8013998 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	601a      	str	r2, [r3, #0]
    }
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	4618      	mov	r0, r3
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr
 8013998:	0802fb74 	.word	0x0802fb74

0801399c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801399c:	b580      	push	{r7, lr}
 801399e:	b082      	sub	sp, #8
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
    }
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f7ff ffe9 	bl	801397c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80139aa:	210c      	movs	r1, #12
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f018 fe68 	bl	802c682 <_ZdlPvj>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	4618      	mov	r0, r3
 80139b6:	3708      	adds	r7, #8
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80139bc:	b480      	push	{r7}
 80139be:	b083      	sub	sp, #12
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80139c6:	4a09      	ldr	r2, [pc, #36]	@ (80139ec <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	601a      	str	r2, [r3, #0]
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	683a      	ldr	r2, [r7, #0]
 80139d0:	605a      	str	r2, [r3, #4]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2200      	movs	r2, #0
 80139d6:	721a      	strb	r2, [r3, #8]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2200      	movs	r2, #0
 80139dc:	725a      	strb	r2, [r3, #9]
    {
    }
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	4618      	mov	r0, r3
 80139e2:	370c      	adds	r7, #12
 80139e4:	46bd      	mov	sp, r7
 80139e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ea:	4770      	bx	lr
 80139ec:	0802fb74 	.word	0x0802fb74

080139f0 <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 80139f0:	b480      	push	{r7}
 80139f2:	b083      	sub	sp, #12
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
    {
    }
 80139f8:	bf00      	nop
 80139fa:	370c      	adds	r7, #12
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8013a04:	b480      	push	{r7}
 8013a06:	b083      	sub	sp, #12
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
    {
    }
 8013a0c:	bf00      	nop
 8013a0e:	370c      	adds	r7, #12
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr

08013a18 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	330c      	adds	r3, #12
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7fb fa61 	bl	800eeec <_ZN8touchgfx9colortypeC1Ev>
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	3708      	adds	r7, #8
 8013a30:	46bd      	mov	sp, r7
 8013a32:	bd80      	pop	{r7, pc}

08013a34 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	330c      	adds	r3, #12
 8013a42:	4619      	mov	r1, r3
 8013a44:	4610      	mov	r0, r2
 8013a46:	f7ff ffb9 	bl	80139bc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8013a4a:	4a0b      	ldr	r2, [pc, #44]	@ (8013a78 <_ZN8STM32DMAC1Ev+0x44>)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	601a      	str	r2, [r3, #0]
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f103 000c 	add.w	r0, r3, #12
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	3320      	adds	r3, #32
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	f002 fdad 	bl	80165bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	3320      	adds	r3, #32
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7ff ffd6 	bl	8013a18 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3708      	adds	r7, #8
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	0802f754 	.word	0x0802f754

08013a7c <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 8013a7c:	b480      	push	{r7}
 8013a7e:	b083      	sub	sp, #12
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 8013a84:	2300      	movs	r3, #0
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	370c      	adds	r7, #12
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a90:	4770      	bx	lr
	...

08013a94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b082      	sub	sp, #8
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8013a9e:	4b03      	ldr	r3, [pc, #12]	@ (8013aac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 8013aa0:	4a03      	ldr	r2, [pc, #12]	@ (8013ab0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 8013aa2:	2122      	movs	r1, #34	@ 0x22
 8013aa4:	4803      	ldr	r0, [pc, #12]	@ (8013ab4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 8013aa6:	f018 fe19 	bl	802c6dc <__assert_func>
 8013aaa:	bf00      	nop
 8013aac:	0802e450 	.word	0x0802e450
 8013ab0:	0802e474 	.word	0x0802e474
 8013ab4:	0802e4b4 	.word	0x0802e4b4

08013ab8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 8013ac2:	4b03      	ldr	r3, [pc, #12]	@ (8013ad0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 8013ac4:	4a03      	ldr	r2, [pc, #12]	@ (8013ad4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 8013ac6:	2127      	movs	r1, #39	@ 0x27
 8013ac8:	4803      	ldr	r0, [pc, #12]	@ (8013ad8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 8013aca:	f018 fe07 	bl	802c6dc <__assert_func>
 8013ace:	bf00      	nop
 8013ad0:	0802e450 	.word	0x0802e450
 8013ad4:	0802e4e0 	.word	0x0802e4e0
 8013ad8:	0802e4b4 	.word	0x0802e4b4

08013adc <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	4a08      	ldr	r2, [pc, #32]	@ (8013b08 <_ZN8STM32DMAD1Ev+0x2c>)
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	601a      	str	r2, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	330c      	adds	r3, #12
 8013aee:	4618      	mov	r0, r3
 8013af0:	f000 f81c 	bl	8013b2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7ff ff40 	bl	801397c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	4618      	mov	r0, r3
 8013b00:	3708      	adds	r7, #8
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	bf00      	nop
 8013b08:	0802f754 	.word	0x0802f754

08013b0c <_ZN8STM32DMAD0Ev>:
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b082      	sub	sp, #8
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f7ff ffe1 	bl	8013adc <_ZN8STM32DMAD1Ev>
 8013b1a:	2144      	movs	r1, #68	@ 0x44
 8013b1c:	6878      	ldr	r0, [r7, #4]
 8013b1e:	f018 fdb0 	bl	802c682 <_ZdlPvj>
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	4618      	mov	r0, r3
 8013b26:	3708      	adds	r7, #8
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}

08013b2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	4a05      	ldr	r2, [pc, #20]	@ (8013b4c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	601a      	str	r2, [r3, #0]
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7ff fee7 	bl	8013910 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	4618      	mov	r0, r3
 8013b46:	3708      	adds	r7, #8
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	0802fbc4 	.word	0x0802fbc4

08013b50 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f7ff ffe7 	bl	8013b2c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013b5e:	2114      	movs	r1, #20
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f018 fd8e 	bl	802c682 <_ZdlPvj>
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	4618      	mov	r0, r3
 8013b6a:	3708      	adds	r7, #8
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	bd80      	pop	{r7, pc}

08013b70 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8013b70:	b480      	push	{r7}
 8013b72:	b083      	sub	sp, #12
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8013b78:	4a04      	ldr	r2, [pc, #16]	@ (8013b8c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6013      	str	r3, [r2, #0]
    }
 8013b7e:	bf00      	nop
 8013b80:	370c      	adds	r7, #12
 8013b82:	46bd      	mov	sp, r7
 8013b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b88:	4770      	bx	lr
 8013b8a:	bf00      	nop
 8013b8c:	20012168 	.word	0x20012168

08013b90 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013b90:	b480      	push	{r7}
 8013b92:	b085      	sub	sp, #20
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	60f8      	str	r0, [r7, #12]
 8013b98:	60b9      	str	r1, [r7, #8]
 8013b9a:	607a      	str	r2, [r7, #4]
 8013b9c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8013b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8013bcc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	683a      	ldr	r2, [r7, #0]
 8013bb4:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	69ba      	ldr	r2, [r7, #24]
 8013bba:	611a      	str	r2, [r3, #16]
    {
    }
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3714      	adds	r7, #20
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc8:	4770      	bx	lr
 8013bca:	bf00      	nop
 8013bcc:	0802f88c 	.word	0x0802f88c

08013bd0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
    {
 8013bd8:	4a04      	ldr	r2, [pc, #16]	@ (8013bec <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	601a      	str	r2, [r3, #0]
    }
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4618      	mov	r0, r3
 8013be2:	370c      	adds	r7, #12
 8013be4:	46bd      	mov	sp, r7
 8013be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bea:	4770      	bx	lr
 8013bec:	0802f88c 	.word	0x0802f88c

08013bf0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b082      	sub	sp, #8
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	6078      	str	r0, [r7, #4]
    }
 8013bf8:	6878      	ldr	r0, [r7, #4]
 8013bfa:	f7ff ffe9 	bl	8013bd0 <_ZN8touchgfx7MVPHeapD1Ev>
 8013bfe:	2114      	movs	r1, #20
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f018 fd3e 	bl	802c682 <_ZdlPvj>
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3708      	adds	r7, #8
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0), vectorFontRenderer(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8013c10:	b480      	push	{r7}
 8013c12:	b083      	sub	sp, #12
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
    {
 8013c18:	4a04      	ldr	r2, [pc, #16]	@ (8013c2c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	601a      	str	r2, [r3, #0]
    }
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	4618      	mov	r0, r3
 8013c22:	370c      	adds	r7, #12
 8013c24:	46bd      	mov	sp, r7
 8013c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2a:	4770      	bx	lr
 8013c2c:	080303c4 	.word	0x080303c4

08013c30 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
    }
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7ff ffe9 	bl	8013c10 <_ZN8touchgfx3LCDD1Ev>
 8013c3e:	210c      	movs	r1, #12
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f018 fd1e 	bl	802c682 <_ZdlPvj>
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	3708      	adds	r7, #8
 8013c4c:	46bd      	mov	sp, r7
 8013c4e:	bd80      	pop	{r7, pc}

08013c50 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8013c50:	b480      	push	{r7}
 8013c52:	b083      	sub	sp, #12
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
            : startX(0),
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	801a      	strh	r2, [r3, #0]
              startY(0),
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2200      	movs	r2, #0
 8013c62:	805a      	strh	r2, [r3, #2]
              downX(0),
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2200      	movs	r2, #0
 8013c68:	809a      	strh	r2, [r3, #4]
              downY(0),
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	2200      	movs	r2, #0
 8013c74:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2200      	movs	r2, #0
 8013c86:	739a      	strb	r2, [r3, #14]
        {
        }
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	370c      	adds	r7, #12
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c94:	4770      	bx	lr

08013c96 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8013c96:	b580      	push	{r7, lr}
 8013c98:	b082      	sub	sp, #8
 8013c9a:	af00      	add	r7, sp, #0
 8013c9c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7ff ffd5 	bl	8013c50 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	611a      	str	r2, [r3, #16]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2200      	movs	r2, #0
 8013cb0:	829a      	strh	r2, [r3, #20]
    {
    }
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	4618      	mov	r0, r3
 8013cb6:	3708      	adds	r7, #8
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	bd80      	pop	{r7, pc}

08013cbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b084      	sub	sp, #16
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	60f8      	str	r0, [r7, #12]
 8013cc4:	60b9      	str	r1, [r7, #8]
 8013cc6:	607a      	str	r2, [r7, #4]
 8013cc8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8013cca:	4a55      	ldr	r2, [pc, #340]	@ (8013e20 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	68ba      	ldr	r2, [r7, #8]
 8013cd4:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	683a      	ldr	r2, [r7, #0]
 8013ce0:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	611a      	str	r2, [r3, #16]
          buttonController(0),
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	2200      	movs	r2, #0
 8013cec:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	619a      	str	r2, [r3, #24]
          gestures(),
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	331c      	adds	r3, #28
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7ff ffcc 	bl	8013c96 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	2200      	movs	r2, #0
 8013d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          taskDelayFunc(0),
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	639a      	str	r2, [r3, #56]	@ 0x38
          frameBuffer0(0),
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	2200      	movs	r2, #0
 8013d10:	63da      	str	r2, [r3, #60]	@ 0x3c
          frameBuffer1(0),
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2200      	movs	r2, #0
 8013d16:	641a      	str	r2, [r3, #64]	@ 0x40
          frameBuffer2(0),
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	645a      	str	r2, [r3, #68]	@ 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2200      	movs	r2, #0
 8013d22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
          fingerSize(1),
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	2201      	movs	r2, #1
 8013d2a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
          lockDMAToPorch(false),
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	2200      	movs	r2, #0
 8013d32:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
          frameBufferUpdatedThisFrame(false),
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
          auxiliaryLCD(0),
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	2200      	movs	r2, #0
 8013d42:	64da      	str	r2, [r3, #76]	@ 0x4c
          partialFrameBufferRect(),
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	3350      	adds	r3, #80	@ 0x50
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f7fb f8f8 	bl	800ef3e <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	2200      	movs	r2, #0
 8013d52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
          listener(0),
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
          lastX(0),
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	661a      	str	r2, [r3, #96]	@ 0x60
          lastY(0),
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2200      	movs	r2, #0
 8013d66:	665a      	str	r2, [r3, #100]	@ 0x64
          touchSampleRate(1),
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2201      	movs	r2, #1
 8013d6c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
          mcuLoadPct(0),
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	2200      	movs	r2, #0
 8013d74:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
          vSyncCnt(0),
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
          vSyncForFrame(1),
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	2201      	movs	r2, #1
 8013d84:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
          vSyncCompensationEnabled(false),
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
          clientDirty(false),
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	2200      	movs	r2, #0
 8013d94:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
          swapRequested(false),
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
          lastTouched(false),
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	2200      	movs	r2, #0
 8013da4:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
          updateMCULoad(0),
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	2200      	movs	r2, #0
 8013dac:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
          cc_begin(0),
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	2200      	movs	r2, #0
 8013db4:	675a      	str	r2, [r3, #116]	@ 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	2200      	movs	r2, #0
 8013dba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
          displayOrientationChangeRequested(false),
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79
          useDMAAcceleration(true),
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2201      	movs	r2, #1
 8013dca:	f883 207a 	strb.w	r2, [r3, #122]	@ 0x7a
          lastRenderMethod(HARDWARE)
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2201      	movs	r2, #1
 8013dd2:	f883 207b 	strb.w	r2, [r3, #123]	@ 0x7b
        instance = this;
 8013dd6:	4a13      	ldr	r2, [pc, #76]	@ (8013e24 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8013ddc:	4a12      	ldr	r2, [pc, #72]	@ (8013e28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8013dde:	8b3b      	ldrh	r3, [r7, #24]
 8013de0:	8013      	strh	r3, [r2, #0]
 8013de2:	4b11      	ldr	r3, [pc, #68]	@ (8013e28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8013de4:	881a      	ldrh	r2, [r3, #0]
 8013de6:	4b11      	ldr	r3, [pc, #68]	@ (8013e2c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8013de8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8013dea:	4a11      	ldr	r2, [pc, #68]	@ (8013e30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8013dec:	8bbb      	ldrh	r3, [r7, #28]
 8013dee:	8013      	strh	r3, [r2, #0]
 8013df0:	4b0f      	ldr	r3, [pc, #60]	@ (8013e30 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8013df2:	881a      	ldrh	r2, [r3, #0]
 8013df4:	4b0f      	ldr	r3, [pc, #60]	@ (8013e34 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8013df6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8013df8:	4b0f      	ldr	r3, [pc, #60]	@ (8013e38 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8013dfe:	8b3a      	ldrh	r2, [r7, #24]
 8013e00:	8bbb      	ldrh	r3, [r7, #28]
 8013e02:	429a      	cmp	r2, r3
 8013e04:	bf34      	ite	cc
 8013e06:	2301      	movcc	r3, #1
 8013e08:	2300      	movcs	r3, #0
 8013e0a:	b2db      	uxtb	r3, r3
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	4618      	mov	r0, r3
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	0802fa9c 	.word	0x0802fa9c
 8013e24:	20012104 	.word	0x20012104
 8013e28:	200120f8 	.word	0x200120f8
 8013e2c:	200120fe 	.word	0x200120fe
 8013e30:	200120fa 	.word	0x200120fa
 8013e34:	20012100 	.word	0x20012100
 8013e38:	200120fc 	.word	0x200120fc

08013e3c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b082      	sub	sp, #8
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
 8013e44:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7fa fdc1 	bl	800e9d0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8013e4e:	bf00      	nop
 8013e50:	3708      	adds	r7, #8
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
	...

08013e58 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b086      	sub	sp, #24
 8013e5c:	af02      	add	r7, sp, #8
 8013e5e:	60f8      	str	r0, [r7, #12]
 8013e60:	60b9      	str	r1, [r7, #8]
 8013e62:	607a      	str	r2, [r7, #4]
 8013e64:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013e66:	68f8      	ldr	r0, [r7, #12]
 8013e68:	69bb      	ldr	r3, [r7, #24]
 8013e6a:	9300      	str	r3, [sp, #0]
 8013e6c:	683b      	ldr	r3, [r7, #0]
 8013e6e:	687a      	ldr	r2, [r7, #4]
 8013e70:	68b9      	ldr	r1, [r7, #8]
 8013e72:	f7ff fe8d 	bl	8013b90 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013e76:	4a04      	ldr	r2, [pc, #16]	@ (8013e88 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	601a      	str	r2, [r3, #0]
    {

    }
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3710      	adds	r7, #16
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	0802f878 	.word	0x0802f878

08013e8c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	4801      	ldr	r0, [pc, #4]	@ (8013e98 <__tcf_0+0xc>)
 8013e92:	f000 f969 	bl	8014168 <_ZN12FrontendHeapD1Ev>
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	2000d83c 	.word	0x2000d83c

08013e9c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8013ea0:	4b11      	ldr	r3, [pc, #68]	@ (8013ee8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013ea2:	e8d3 3faf 	lda	r3, [r3]
 8013ea6:	f003 0301 	and.w	r3, r3, #1
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	bf0c      	ite	eq
 8013eae:	2301      	moveq	r3, #1
 8013eb0:	2300      	movne	r3, #0
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d013      	beq.n	8013ee0 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8013eb8:	480b      	ldr	r0, [pc, #44]	@ (8013ee8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013eba:	f018 fbe4 	bl	802c686 <__cxa_guard_acquire>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	bf14      	ite	ne
 8013ec4:	2301      	movne	r3, #1
 8013ec6:	2300      	moveq	r3, #0
 8013ec8:	b2db      	uxtb	r3, r3
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d008      	beq.n	8013ee0 <_ZN12FrontendHeap11getInstanceEv+0x44>
 8013ece:	4807      	ldr	r0, [pc, #28]	@ (8013eec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8013ed0:	f000 f868 	bl	8013fa4 <_ZN12FrontendHeapC1Ev>
 8013ed4:	4806      	ldr	r0, [pc, #24]	@ (8013ef0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8013ed6:	f018 fc1f 	bl	802c718 <atexit>
 8013eda:	4803      	ldr	r0, [pc, #12]	@ (8013ee8 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 8013edc:	f018 fbdf 	bl	802c69e <__cxa_guard_release>
        return instance;
 8013ee0:	4b02      	ldr	r3, [pc, #8]	@ (8013eec <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	bd80      	pop	{r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	2000ef78 	.word	0x2000ef78
 8013eec:	2000d83c 	.word	0x2000d83c
 8013ef0:	08013e8d 	.word	0x08013e8d

08013ef4 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	4a05      	ldr	r2, [pc, #20]	@ (8013f14 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	601a      	str	r2, [r3, #0]
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7ff fe63 	bl	8013bd0 <_ZN8touchgfx7MVPHeapD1Ev>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3708      	adds	r7, #8
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	0802f878 	.word	0x0802f878

08013f18 <_ZN16FrontendHeapBaseD0Ev>:
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b082      	sub	sp, #8
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	6078      	str	r0, [r7, #4]
 8013f20:	6878      	ldr	r0, [r7, #4]
 8013f22:	f7ff ffe7 	bl	8013ef4 <_ZN16FrontendHeapBaseD1Ev>
 8013f26:	2114      	movs	r1, #20
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f018 fbaa 	bl	802c682 <_ZdlPvj>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	4618      	mov	r0, r3
 8013f32:	3708      	adds	r7, #8
 8013f34:	46bd      	mov	sp, r7
 8013f36:	bd80      	pop	{r7, pc}

08013f38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b082      	sub	sp, #8
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	4618      	mov	r0, r3
 8013f44:	f001 f9a8 	bl	8015298 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013f48:	4a03      	ldr	r2, [pc, #12]	@ (8013f58 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	601a      	str	r2, [r3, #0]
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	4618      	mov	r0, r3
 8013f52:	3708      	adds	r7, #8
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	0802f844 	.word	0x0802f844

08013f5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b082      	sub	sp, #8
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	6078      	str	r0, [r7, #4]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f001 f996 	bl	8015298 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013f6c:	4a03      	ldr	r2, [pc, #12]	@ (8013f7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	601a      	str	r2, [r3, #0]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4618      	mov	r0, r3
 8013f76:	3708      	adds	r7, #8
 8013f78:	46bd      	mov	sp, r7
 8013f7a:	bd80      	pop	{r7, pc}
 8013f7c:	0802f810 	.word	0x0802f810

08013f80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013f80:	b580      	push	{r7, lr}
 8013f82:	b082      	sub	sp, #8
 8013f84:	af00      	add	r7, sp, #0
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f001 f984 	bl	8015298 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013f90:	4a03      	ldr	r2, [pc, #12]	@ (8013fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	601a      	str	r2, [r3, #0]
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3708      	adds	r7, #8
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}
 8013fa0:	0802f7dc 	.word	0x0802f7dc

08013fa4 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013fa4:	b590      	push	{r4, r7, lr}
 8013fa6:	b085      	sub	sp, #20
 8013fa8:	af02      	add	r7, sp, #8
 8013faa:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f103 0114 	add.w	r1, r3, #20
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 8013fc0:	3308      	adds	r3, #8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8013fc2:	687a      	ldr	r2, [r7, #4]
 8013fc4:	f502 52af 	add.w	r2, r2, #5600	@ 0x15e0
                     app(model, *this)
 8013fc8:	9200      	str	r2, [sp, #0]
 8013fca:	4622      	mov	r2, r4
 8013fcc:	f7ff ff44 	bl	8013e58 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8013fd0:	4a19      	ldr	r2, [pc, #100]	@ (8014038 <_ZN12FrontendHeapC1Ev+0x94>)
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	601a      	str	r2, [r3, #0]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	3314      	adds	r3, #20
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7ff ffac 	bl	8013f38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	332c      	adds	r3, #44	@ 0x2c
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7ff ffb9 	bl	8013f5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 8013ff0:	3308      	adds	r3, #8
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7ff ffc4 	bl	8013f80 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 8013ffe:	331c      	adds	r3, #28
 8014000:	4618      	mov	r0, r3
 8014002:	f7fe fe91 	bl	8012d28 <_ZN5ModelC1Ev>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f503 50af 	add.w	r0, r3, #5600	@ 0x15e0
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 8014012:	331c      	adds	r3, #28
 8014014:	687a      	ldr	r2, [r7, #4]
 8014016:	4619      	mov	r1, r3
 8014018:	f7fe fe70 	bl	8012cfc <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f503 53af 	add.w	r3, r3, #5600	@ 0x15e0
 8014024:	4619      	mov	r1, r3
 8014026:	4610      	mov	r0, r2
 8014028:	f7ff ff08 	bl	8013e3c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	4618      	mov	r0, r3
 8014030:	370c      	adds	r7, #12
 8014032:	46bd      	mov	sp, r7
 8014034:	bd90      	pop	{r4, r7, pc}
 8014036:	bf00      	nop
 8014038:	0802f7c8 	.word	0x0802f7c8

0801403c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 801403c:	b580      	push	{r7, lr}
 801403e:	b086      	sub	sp, #24
 8014040:	af02      	add	r7, sp, #8
 8014042:	60f8      	str	r0, [r7, #12]
 8014044:	60b9      	str	r1, [r7, #8]
 8014046:	607a      	str	r2, [r7, #4]
 8014048:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 801404a:	68f8      	ldr	r0, [r7, #12]
 801404c:	8bbb      	ldrh	r3, [r7, #28]
 801404e:	9301      	str	r3, [sp, #4]
 8014050:	8b3b      	ldrh	r3, [r7, #24]
 8014052:	9300      	str	r3, [sp, #0]
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	68b9      	ldr	r1, [r7, #8]
 801405a:	f7ff fe2f 	bl	8013cbc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 801405e:	4a04      	ldr	r2, [pc, #16]	@ (8014070 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	601a      	str	r2, [r3, #0]
    }
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	4618      	mov	r0, r3
 8014068:	3710      	adds	r7, #16
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	0802f8c8 	.word	0x0802f8c8

08014074 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8014074:	b580      	push	{r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af02      	add	r7, sp, #8
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
 8014080:	603b      	str	r3, [r7, #0]
 8014082:	68f8      	ldr	r0, [r7, #12]
 8014084:	8bbb      	ldrh	r3, [r7, #28]
 8014086:	9301      	str	r3, [sp, #4]
 8014088:	8b3b      	ldrh	r3, [r7, #24]
 801408a:	9300      	str	r3, [sp, #0]
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	68b9      	ldr	r1, [r7, #8]
 8014092:	f7ff ffd3 	bl	801403c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014096:	4a04      	ldr	r2, [pc, #16]	@ (80140a8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	601a      	str	r2, [r3, #0]
    }
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	4618      	mov	r0, r3
 80140a0:	3710      	adds	r7, #16
 80140a2:	46bd      	mov	sp, r7
 80140a4:	bd80      	pop	{r7, pc}
 80140a6:	bf00      	nop
 80140a8:	0802f67c 	.word	0x0802f67c

080140ac <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 80140ac:	b480      	push	{r7}
 80140ae:	b083      	sub	sp, #12
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
 80140b4:	4a04      	ldr	r2, [pc, #16]	@ (80140c8 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	601a      	str	r2, [r3, #0]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	4618      	mov	r0, r3
 80140be:	370c      	adds	r7, #12
 80140c0:	46bd      	mov	sp, r7
 80140c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c6:	4770      	bx	lr
 80140c8:	0802f664 	.word	0x0802f664

080140cc <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b082      	sub	sp, #8
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	4618      	mov	r0, r3
 80140d8:	f7ff ffe8 	bl	80140ac <_ZN8touchgfx15TouchControllerC1Ev>
 80140dc:	4a03      	ldr	r2, [pc, #12]	@ (80140ec <_ZN20STM32TouchControllerC1Ev+0x20>)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	4618      	mov	r0, r3
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	0802f64c 	.word	0x0802f64c

080140f0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 80140f0:	b590      	push	{r4, r7, lr}
 80140f2:	b085      	sub	sp, #20
 80140f4:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80140f6:	f7fe fbd1 	bl	801289c <_ZN14BitmapDatabase11getInstanceEv>
 80140fa:	4604      	mov	r4, r0
 80140fc:	f7fe fbd8 	bl	80128b0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014100:	4603      	mov	r3, r0
 8014102:	4619      	mov	r1, r3
 8014104:	2300      	movs	r3, #0
 8014106:	9300      	str	r3, [sp, #0]
 8014108:	2300      	movs	r3, #0
 801410a:	2200      	movs	r2, #0
 801410c:	4620      	mov	r0, r4
 801410e:	f009 fcfd 	bl	801db0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8014112:	4809      	ldr	r0, [pc, #36]	@ (8014138 <touchgfx_init+0x48>)
 8014114:	f7ff fd2c 	bl	8013b70 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8014118:	2000      	movs	r0, #0
 801411a:	f7fe fd0d 	bl	8012b38 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801411e:	4807      	ldr	r0, [pc, #28]	@ (801413c <touchgfx_init+0x4c>)
 8014120:	f009 fc5c 	bl	801d9dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8014124:	f7ff feba 	bl	8013e9c <_ZN12FrontendHeap11getInstanceEv>
 8014128:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 801412a:	4805      	ldr	r0, [pc, #20]	@ (8014140 <touchgfx_init+0x50>)
 801412c:	f7ff fab0 	bl	8013690 <_ZN11TouchGFXHAL10initializeEv>
}
 8014130:	bf00      	nop
 8014132:	370c      	adds	r7, #12
 8014134:	46bd      	mov	sp, r7
 8014136:	bd90      	pop	{r4, r7, pc}
 8014138:	2000f050 	.word	0x2000f050
 801413c:	20000024 	.word	0x20000024
 8014140:	2000f054 	.word	0x2000f054

08014144 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8014144:	b480      	push	{r7}
 8014146:	af00      	add	r7, sp, #0
}
 8014148:	bf00      	nop
 801414a:	46bd      	mov	sp, r7
 801414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014150:	4770      	bx	lr
	...

08014154 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 8014154:	b580      	push	{r7, lr}
 8014156:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8014158:	4802      	ldr	r0, [pc, #8]	@ (8014164 <touchgfx_taskEntry+0x10>)
 801415a:	f001 fba2 	bl	80158a2 <_ZN8touchgfx3HAL9taskEntryEv>
}
 801415e:	bf00      	nop
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	2000f054 	.word	0x2000f054

08014168 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
 801416e:	6078      	str	r0, [r7, #4]
 8014170:	4a11      	ldr	r2, [pc, #68]	@ (80141b8 <_ZN12FrontendHeapD1Ev+0x50>)
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	601a      	str	r2, [r3, #0]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f503 53af 	add.w	r3, r3, #5600	@ 0x15e0
 801417c:	4618      	mov	r0, r3
 801417e:	f7fe fd87 	bl	8012c90 <_ZN19FrontendApplicationD1Ev>
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f503 53ae 	add.w	r3, r3, #5568	@ 0x15c0
 8014188:	3308      	adds	r3, #8
 801418a:	4618      	mov	r0, r3
 801418c:	f000 f828 	bl	80141e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	332c      	adds	r3, #44	@ 0x2c
 8014194:	4618      	mov	r0, r3
 8014196:	f000 f845 	bl	8014224 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	3314      	adds	r3, #20
 801419e:	4618      	mov	r0, r3
 80141a0:	f000 f864 	bl	801426c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7ff fea4 	bl	8013ef4 <_ZN16FrontendHeapBaseD1Ev>
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	4618      	mov	r0, r3
 80141b0:	3708      	adds	r7, #8
 80141b2:	46bd      	mov	sp, r7
 80141b4:	bd80      	pop	{r7, pc}
 80141b6:	bf00      	nop
 80141b8:	0802f7c8 	.word	0x0802f7c8

080141bc <_ZN12FrontendHeapD0Ev>:
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
 80141c4:	6878      	ldr	r0, [r7, #4]
 80141c6:	f7ff ffcf 	bl	8014168 <_ZN12FrontendHeapD1Ev>
 80141ca:	f241 713c 	movw	r1, #5948	@ 0x173c
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f018 fa57 	bl	802c682 <_ZdlPvj>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	4618      	mov	r0, r3
 80141d8:	3708      	adds	r7, #8
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
	...

080141e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b082      	sub	sp, #8
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	4a05      	ldr	r2, [pc, #20]	@ (8014200 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	601a      	str	r2, [r3, #0]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	4618      	mov	r0, r3
 80141f2:	f001 f850 	bl	8015296 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	4618      	mov	r0, r3
 80141fa:	3708      	adds	r7, #8
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}
 8014200:	0802f7dc 	.word	0x0802f7dc

08014204 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f7ff ffe7 	bl	80141e0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014212:	2114      	movs	r1, #20
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f018 fa34 	bl	802c682 <_ZdlPvj>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	4618      	mov	r0, r3
 801421e:	3708      	adds	r7, #8
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	4a05      	ldr	r2, [pc, #20]	@ (8014244 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	601a      	str	r2, [r3, #0]
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	4618      	mov	r0, r3
 8014236:	f001 f82e 	bl	8015296 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	4618      	mov	r0, r3
 801423e:	3708      	adds	r7, #8
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	0802f810 	.word	0x0802f810

08014248 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014248:	b580      	push	{r7, lr}
 801424a:	b082      	sub	sp, #8
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6878      	ldr	r0, [r7, #4]
 8014252:	f7ff ffe7 	bl	8014224 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014256:	f241 519c 	movw	r1, #5532	@ 0x159c
 801425a:	6878      	ldr	r0, [r7, #4]
 801425c:	f018 fa11 	bl	802c682 <_ZdlPvj>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	4618      	mov	r0, r3
 8014264:	3708      	adds	r7, #8
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}
	...

0801426c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	4a05      	ldr	r2, [pc, #20]	@ (801428c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	601a      	str	r2, [r3, #0]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	4618      	mov	r0, r3
 801427e:	f001 f80a 	bl	8015296 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	4618      	mov	r0, r3
 8014286:	3708      	adds	r7, #8
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}
 801428c:	0802f844 	.word	0x0802f844

08014290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7ff ffe7 	bl	801426c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801429e:	2118      	movs	r1, #24
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f018 f9ee 	bl	802c682 <_ZdlPvj>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	4618      	mov	r0, r3
 80142aa:	3708      	adds	r7, #8
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <_ZN8touchgfx8LCD16bppD1Ev>:
class LCD16bpp : public LCD
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
 80142b8:	4a05      	ldr	r2, [pc, #20]	@ (80142d0 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	601a      	str	r2, [r3, #0]
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7ff fca5 	bl	8013c10 <_ZN8touchgfx3LCDD1Ev>
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	4618      	mov	r0, r3
 80142ca:	3708      	adds	r7, #8
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}
 80142d0:	0803084c 	.word	0x0803084c

080142d4 <_ZN8touchgfx8LCD16bppD0Ev>:
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b082      	sub	sp, #8
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	6878      	ldr	r0, [r7, #4]
 80142de:	f7ff ffe7 	bl	80142b0 <_ZN8touchgfx8LCD16bppD1Ev>
 80142e2:	218c      	movs	r1, #140	@ 0x8c
 80142e4:	6878      	ldr	r0, [r7, #4]
 80142e6:	f018 f9cc 	bl	802c682 <_ZdlPvj>
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	4618      	mov	r0, r3
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <_Z41__static_initialization_and_destruction_0ii>:
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b084      	sub	sp, #16
 80142f8:	af02      	add	r7, sp, #8
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	6039      	str	r1, [r7, #0]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	2b01      	cmp	r3, #1
 8014302:	d118      	bne.n	8014336 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801430a:	4293      	cmp	r3, r2
 801430c:	d113      	bne.n	8014336 <_Z41__static_initialization_and_destruction_0ii+0x42>
static STM32TouchController tc;
 801430e:	4817      	ldr	r0, [pc, #92]	@ (801436c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8014310:	f7ff fedc 	bl	80140cc <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8014314:	4816      	ldr	r0, [pc, #88]	@ (8014370 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014316:	f7ff fb8d 	bl	8013a34 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 801431a:	4816      	ldr	r0, [pc, #88]	@ (8014374 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801431c:	f00e fcf6 	bl	8022d0c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 320);
 8014320:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8014324:	9301      	str	r3, [sp, #4]
 8014326:	23f0      	movs	r3, #240	@ 0xf0
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	4b10      	ldr	r3, [pc, #64]	@ (801436c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 801432c:	4a11      	ldr	r2, [pc, #68]	@ (8014374 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 801432e:	4910      	ldr	r1, [pc, #64]	@ (8014370 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014330:	4811      	ldr	r0, [pc, #68]	@ (8014378 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014332:	f7ff fe9f 	bl	8014074 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d113      	bne.n	8014364 <_Z41__static_initialization_and_destruction_0ii+0x70>
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014342:	4293      	cmp	r3, r2
 8014344:	d10e      	bne.n	8014364 <_Z41__static_initialization_and_destruction_0ii+0x70>
 8014346:	480c      	ldr	r0, [pc, #48]	@ (8014378 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014348:	f7ff fa32 	bl	80137b0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 801434c:	480b      	ldr	r0, [pc, #44]	@ (801437c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 801434e:	f7f9 fd89 	bl	800de64 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8014352:	4808      	ldr	r0, [pc, #32]	@ (8014374 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014354:	f7ff ffac 	bl	80142b0 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8014358:	4805      	ldr	r0, [pc, #20]	@ (8014370 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 801435a:	f7ff fbbf 	bl	8013adc <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 801435e:	4803      	ldr	r0, [pc, #12]	@ (801436c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8014360:	f7fe ff6e 	bl	8013240 <_ZN20STM32TouchControllerD1Ev>
}
 8014364:	bf00      	nop
 8014366:	3708      	adds	r7, #8
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}
 801436c:	2000ef7c 	.word	0x2000ef7c
 8014370:	2000ef80 	.word	0x2000ef80
 8014374:	2000efc4 	.word	0x2000efc4
 8014378:	2000f054 	.word	0x2000f054
 801437c:	20000024 	.word	0x20000024

08014380 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8014380:	b480      	push	{r7}
 8014382:	b083      	sub	sp, #12
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014388:	2301      	movs	r3, #1
    }
 801438a:	4618      	mov	r0, r3
 801438c:	370c      	adds	r7, #12
 801438e:	46bd      	mov	sp, r7
 8014390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014394:	4770      	bx	lr

08014396 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8014396:	b480      	push	{r7}
 8014398:	b083      	sub	sp, #12
 801439a:	af00      	add	r7, sp, #0
 801439c:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 801439e:	230c      	movs	r3, #12
    }
 80143a0:	4618      	mov	r0, r3
 80143a2:	370c      	adds	r7, #12
 80143a4:	46bd      	mov	sp, r7
 80143a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143aa:	4770      	bx	lr

080143ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	460b      	mov	r3, r1
 80143b6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80143b8:	887a      	ldrh	r2, [r7, #2]
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	009b      	lsls	r3, r3, #2
 80143c2:	3308      	adds	r3, #8
 80143c4:	687a      	ldr	r2, [r7, #4]
 80143c6:	4413      	add	r3, r2
    }
 80143c8:	4618      	mov	r0, r3
 80143ca:	370c      	adds	r7, #12
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80143d4:	b480      	push	{r7}
 80143d6:	b083      	sub	sp, #12
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	460b      	mov	r3, r1
 80143de:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80143e0:	887a      	ldrh	r2, [r7, #2]
 80143e2:	4613      	mov	r3, r2
 80143e4:	005b      	lsls	r3, r3, #1
 80143e6:	4413      	add	r3, r2
 80143e8:	009b      	lsls	r3, r3, #2
 80143ea:	3308      	adds	r3, #8
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	4413      	add	r3, r2
    }
 80143f0:	4618      	mov	r0, r3
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr

080143fc <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80143fc:	b480      	push	{r7}
 80143fe:	b083      	sub	sp, #12
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014404:	2301      	movs	r3, #1
    }
 8014406:	4618      	mov	r0, r3
 8014408:	370c      	adds	r7, #12
 801440a:	46bd      	mov	sp, r7
 801440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014410:	4770      	bx	lr

08014412 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014412:	b480      	push	{r7}
 8014414:	b083      	sub	sp, #12
 8014416:	af00      	add	r7, sp, #0
 8014418:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801441a:	f241 5394 	movw	r3, #5524	@ 0x1594
    }
 801441e:	4618      	mov	r0, r3
 8014420:	370c      	adds	r7, #12
 8014422:	46bd      	mov	sp, r7
 8014424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014428:	4770      	bx	lr

0801442a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801442a:	b480      	push	{r7}
 801442c:	b083      	sub	sp, #12
 801442e:	af00      	add	r7, sp, #0
 8014430:	6078      	str	r0, [r7, #4]
 8014432:	460b      	mov	r3, r1
 8014434:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014436:	887b      	ldrh	r3, [r7, #2]
 8014438:	f241 5294 	movw	r2, #5524	@ 0x1594
 801443c:	fb02 f303 	mul.w	r3, r2, r3
 8014440:	3308      	adds	r3, #8
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	4413      	add	r3, r2
    }
 8014446:	4618      	mov	r0, r3
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr

08014452 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014452:	b480      	push	{r7}
 8014454:	b083      	sub	sp, #12
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
 801445a:	460b      	mov	r3, r1
 801445c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801445e:	887b      	ldrh	r3, [r7, #2]
 8014460:	f241 5294 	movw	r2, #5524	@ 0x1594
 8014464:	fb02 f303 	mul.w	r3, r2, r3
 8014468:	3308      	adds	r3, #8
 801446a:	687a      	ldr	r2, [r7, #4]
 801446c:	4413      	add	r3, r2
    }
 801446e:	4618      	mov	r0, r3
 8014470:	370c      	adds	r7, #12
 8014472:	46bd      	mov	sp, r7
 8014474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014478:	4770      	bx	lr

0801447a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 801447a:	b480      	push	{r7}
 801447c:	b083      	sub	sp, #12
 801447e:	af00      	add	r7, sp, #0
 8014480:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014482:	2301      	movs	r3, #1
    }
 8014484:	4618      	mov	r0, r3
 8014486:	370c      	adds	r7, #12
 8014488:	46bd      	mov	sp, r7
 801448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448e:	4770      	bx	lr

08014490 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014490:	b480      	push	{r7}
 8014492:	b083      	sub	sp, #12
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014498:	2310      	movs	r3, #16
    }
 801449a:	4618      	mov	r0, r3
 801449c:	370c      	adds	r7, #12
 801449e:	46bd      	mov	sp, r7
 80144a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144a4:	4770      	bx	lr

080144a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80144a6:	b480      	push	{r7}
 80144a8:	b083      	sub	sp, #12
 80144aa:	af00      	add	r7, sp, #0
 80144ac:	6078      	str	r0, [r7, #4]
 80144ae:	460b      	mov	r3, r1
 80144b0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80144b2:	887b      	ldrh	r3, [r7, #2]
 80144b4:	011b      	lsls	r3, r3, #4
 80144b6:	3308      	adds	r3, #8
 80144b8:	687a      	ldr	r2, [r7, #4]
 80144ba:	4413      	add	r3, r2
    }
 80144bc:	4618      	mov	r0, r3
 80144be:	370c      	adds	r7, #12
 80144c0:	46bd      	mov	sp, r7
 80144c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c6:	4770      	bx	lr

080144c8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80144c8:	b480      	push	{r7}
 80144ca:	b083      	sub	sp, #12
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	460b      	mov	r3, r1
 80144d2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80144d4:	887b      	ldrh	r3, [r7, #2]
 80144d6:	011b      	lsls	r3, r3, #4
 80144d8:	3308      	adds	r3, #8
 80144da:	687a      	ldr	r2, [r7, #4]
 80144dc:	4413      	add	r3, r2
    }
 80144de:	4618      	mov	r0, r3
 80144e0:	370c      	adds	r7, #12
 80144e2:	46bd      	mov	sp, r7
 80144e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e8:	4770      	bx	lr

080144ea <_GLOBAL__sub_I_touchgfx_init>:
 80144ea:	b580      	push	{r7, lr}
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80144f2:	2001      	movs	r0, #1
 80144f4:	f7ff fefe 	bl	80142f4 <_Z41__static_initialization_and_destruction_0ii>
 80144f8:	bd80      	pop	{r7, pc}

080144fa <_GLOBAL__sub_D_touchgfx_init>:
 80144fa:	b580      	push	{r7, lr}
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8014502:	2000      	movs	r0, #0
 8014504:	f7ff fef6 	bl	80142f4 <_Z41__static_initialization_and_destruction_0ii>
 8014508:	bd80      	pop	{r7, pc}
	...

0801450c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>:
     * transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer() = 0;

    /** Finalizes an instance of the FrameBufferAllocator class. */
    virtual ~FrameBufferAllocator()
 801450c:	b480      	push	{r7}
 801450e:	b083      	sub	sp, #12
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
    {
 8014514:	4a04      	ldr	r2, [pc, #16]	@ (8014528 <_ZN8touchgfx20FrameBufferAllocatorD1Ev+0x1c>)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	601a      	str	r2, [r3, #0]
    }
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	4618      	mov	r0, r3
 801451e:	370c      	adds	r7, #12
 8014520:	46bd      	mov	sp, r7
 8014522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014526:	4770      	bx	lr
 8014528:	0802f9a0 	.word	0x0802f9a0

0801452c <_ZN8touchgfx20FrameBufferAllocatorD0Ev>:
    virtual ~FrameBufferAllocator()
 801452c:	b580      	push	{r7, lr}
 801452e:	b082      	sub	sp, #8
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
    }
 8014534:	6878      	ldr	r0, [r7, #4]
 8014536:	f7ff ffe9 	bl	801450c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 801453a:	2104      	movs	r1, #4
 801453c:	6878      	ldr	r0, [r7, #4]
 801453e:	f018 f8a0 	bl	802c682 <_ZdlPvj>
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	4618      	mov	r0, r3
 8014546:	3708      	adds	r7, #8
 8014548:	46bd      	mov	sp, r7
 801454a:	bd80      	pop	{r7, pc}

0801454c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 801454c:	b480      	push	{r7}
 801454e:	b083      	sub	sp, #12
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 801455a:	3301      	adds	r3, #1
 801455c:	b2da      	uxtb	r2, r3
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
    }
 8014564:	bf00      	nop
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>:
    void setFrameBufferAllocator(FrameBufferAllocator* allocator)
 8014570:	b480      	push	{r7}
 8014572:	b083      	sub	sp, #12
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
 8014578:	6039      	str	r1, [r7, #0]
        frameBufferAllocator = allocator;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	683a      	ldr	r2, [r7, #0]
 801457e:	619a      	str	r2, [r3, #24]
    }
 8014580:	bf00      	nop
 8014582:	370c      	adds	r7, #12
 8014584:	46bd      	mov	sp, r7
 8014586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458a:	4770      	bx	lr

0801458c <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>:
    FrameBufferAllocator* getFrameBufferAllocator()
 801458c:	b480      	push	{r7}
 801458e:	b083      	sub	sp, #12
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
        return frameBufferAllocator;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	699b      	ldr	r3, [r3, #24]
    }
 8014598:	4618      	mov	r0, r3
 801459a:	370c      	adds	r7, #12
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr

080145a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b082      	sub	sp, #8
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
 80145ac:	460b      	mov	r3, r1
 80145ae:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 80145b0:	78fb      	ldrb	r3, [r7, #3]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d002      	beq.n	80145bc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 80145b6:	78fb      	ldrb	r3, [r7, #3]
 80145b8:	2b02      	cmp	r3, #2
 80145ba:	d105      	bne.n	80145c8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	78fa      	ldrb	r2, [r7, #3]
 80145c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            return true;
 80145c4:	2301      	movs	r3, #1
 80145c6:	e027      	b.n	8014618 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 80145c8:	78fb      	ldrb	r3, [r7, #3]
 80145ca:	2b01      	cmp	r3, #1
 80145cc:	d123      	bne.n	8014616 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d014      	beq.n	8014600 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	339c      	adds	r3, #156	@ 0x9c
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	4798      	blx	r3
 80145e2:	4603      	mov	r3, r0
 80145e4:	461a      	mov	r2, r3
 80145e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d008      	beq.n	8014600 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80145ee:	4b0c      	ldr	r3, [pc, #48]	@ (8014620 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 80145f0:	781b      	ldrb	r3, [r3, #0]
 80145f2:	f083 0301 	eor.w	r3, r3, #1
 80145f6:	b2db      	uxtb	r3, r3
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d001      	beq.n	8014600 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 80145fc:	2301      	movs	r3, #1
 80145fe:	e000      	b.n	8014602 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014600:	2300      	movs	r3, #0
 8014602:	2b00      	cmp	r3, #0
 8014604:	d005      	beq.n	8014612 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	78fa      	ldrb	r2, [r7, #3]
 801460a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                return true;
 801460e:	2301      	movs	r3, #1
 8014610:	e002      	b.n	8014618 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014612:	2300      	movs	r3, #0
 8014614:	e000      	b.n	8014618 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014616:	2300      	movs	r3, #0
    }
 8014618:	4618      	mov	r0, r3
 801461a:	3708      	adds	r7, #8
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	20012102 	.word	0x20012102

08014624 <_ZN8touchgfx5paint8tearDownEv>:
{
    blendL8CLUT = data;
}

void tearDown()
{
 8014624:	b480      	push	{r7}
 8014626:	af00      	add	r7, sp, #0
}
 8014628:	bf00      	nop
 801462a:	46bd      	mov	sp, r7
 801462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014630:	4770      	bx	lr

08014632 <_ZN8touchgfx5paint9flushLineEPmi>:

void flushLine(uint32_t* addr, int sizebytes)
{
 8014632:	b480      	push	{r7}
 8014634:	b083      	sub	sp, #12
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
 801463a:	6039      	str	r1, [r7, #0]
}
 801463c:	bf00      	nop
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014646:	4770      	bx	lr

08014648 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>:
{
    return ((red << 8) & 0xF800) | ((green << 3) & 0x07E0) | ((blue >> 3) & 0x001F);
}

void lineFromColor(uint16_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha, const uint32_t color565)
{
 8014648:	b480      	push	{r7}
 801464a:	b08b      	sub	sp, #44	@ 0x2c
 801464c:	af00      	add	r7, sp, #0
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
 8014654:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	627b      	str	r3, [r7, #36]	@ 0x24
    const uint16_t* const lineEnd = framebuffer + count;
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	005b      	lsls	r3, r3, #1
 801465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014660:	4413      	add	r3, r2
 8014662:	623b      	str	r3, [r7, #32]
    if (alpha == 0xFF)
 8014664:	78fb      	ldrb	r3, [r7, #3]
 8014666:	2bff      	cmp	r3, #255	@ 0xff
 8014668:	d110      	bne.n	801468c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
    {
        do
        {
            *framebuffer = color565;
 801466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801466c:	b29a      	uxth	r2, r3
 801466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014670:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 8014672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014674:	3302      	adds	r3, #2
 8014676:	627b      	str	r3, [r7, #36]	@ 0x24
 8014678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801467a:	6a3b      	ldr	r3, [r7, #32]
 801467c:	429a      	cmp	r2, r3
 801467e:	bf34      	ite	cc
 8014680:	2301      	movcc	r3, #1
 8014682:	2300      	movcs	r3, #0
 8014684:	b2db      	uxtb	r3, r3
 8014686:	2b00      	cmp	r3, #0
 8014688:	d1ef      	bne.n	801466a <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x22>
        do
        {
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
        } while (++framebuffer < lineEnd);
    }
}
 801468a:	e077      	b.n	801477c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x134>
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
 801468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801468e:	b29a      	uxth	r2, r3
 8014690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014692:	881b      	ldrh	r3, [r3, #0]
 8014694:	83fa      	strh	r2, [r7, #30]
 8014696:	83bb      	strh	r3, [r7, #28]
 8014698:	78fb      	ldrb	r3, [r7, #3]
 801469a:	76fb      	strb	r3, [r7, #27]
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 801469c:	8bfb      	ldrh	r3, [r7, #30]
 801469e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80146a2:	f023 0307 	bic.w	r3, r3, #7
 80146a6:	b299      	uxth	r1, r3
 80146a8:	8bfb      	ldrh	r3, [r7, #30]
 80146aa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	8bfb      	ldrh	r3, [r7, #30]
 80146b2:	f003 031f 	and.w	r3, r3, #31
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	8339      	strh	r1, [r7, #24]
 80146ba:	82fa      	strh	r2, [r7, #22]
 80146bc:	82bb      	strh	r3, [r7, #20]
 80146be:	8bbb      	ldrh	r3, [r7, #28]
 80146c0:	827b      	strh	r3, [r7, #18]
 80146c2:	7efb      	ldrb	r3, [r7, #27]
 80146c4:	747b      	strb	r3, [r7, #17]
    const uint8_t ialpha = 0xFF - alpha;
 80146c6:	7c7b      	ldrb	r3, [r7, #17]
 80146c8:	43db      	mvns	r3, r3
 80146ca:	743b      	strb	r3, [r7, #16]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 80146cc:	8b3b      	ldrh	r3, [r7, #24]
 80146ce:	7c7a      	ldrb	r2, [r7, #17]
 80146d0:	fb03 f202 	mul.w	r2, r3, r2
 80146d4:	8a7b      	ldrh	r3, [r7, #18]
 80146d6:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80146da:	7c39      	ldrb	r1, [r7, #16]
 80146dc:	fb01 f303 	mul.w	r3, r1, r3
 80146e0:	4413      	add	r3, r2
 80146e2:	4a29      	ldr	r2, [pc, #164]	@ (8014788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 80146e4:	fb82 1203 	smull	r1, r2, r2, r3
 80146e8:	441a      	add	r2, r3
 80146ea:	11d2      	asrs	r2, r2, #7
 80146ec:	17db      	asrs	r3, r3, #31
 80146ee:	1ad3      	subs	r3, r2, r3
 80146f0:	b21b      	sxth	r3, r3
 80146f2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80146f6:	f023 0307 	bic.w	r3, r3, #7
 80146fa:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 80146fc:	8afb      	ldrh	r3, [r7, #22]
 80146fe:	7c79      	ldrb	r1, [r7, #17]
 8014700:	fb03 f101 	mul.w	r1, r3, r1
 8014704:	8a7b      	ldrh	r3, [r7, #18]
 8014706:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801470a:	7c38      	ldrb	r0, [r7, #16]
 801470c:	fb00 f303 	mul.w	r3, r0, r3
 8014710:	440b      	add	r3, r1
 8014712:	491d      	ldr	r1, [pc, #116]	@ (8014788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 8014714:	fb81 0103 	smull	r0, r1, r1, r3
 8014718:	4419      	add	r1, r3
 801471a:	11c9      	asrs	r1, r1, #7
 801471c:	17db      	asrs	r3, r3, #31
 801471e:	1acb      	subs	r3, r1, r3
 8014720:	b21b      	sxth	r3, r3
 8014722:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014726:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8014728:	4313      	orrs	r3, r2
 801472a:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801472c:	8abb      	ldrh	r3, [r7, #20]
 801472e:	7c79      	ldrb	r1, [r7, #17]
 8014730:	fb03 f101 	mul.w	r1, r3, r1
 8014734:	8a7b      	ldrh	r3, [r7, #18]
 8014736:	f003 031f 	and.w	r3, r3, #31
 801473a:	7c38      	ldrb	r0, [r7, #16]
 801473c:	fb00 f303 	mul.w	r3, r0, r3
 8014740:	440b      	add	r3, r1
 8014742:	4911      	ldr	r1, [pc, #68]	@ (8014788 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x140>)
 8014744:	fb81 0103 	smull	r0, r1, r1, r3
 8014748:	4419      	add	r1, r3
 801474a:	11c9      	asrs	r1, r1, #7
 801474c:	17db      	asrs	r3, r3, #31
 801474e:	1acb      	subs	r3, r1, r3
 8014750:	b21b      	sxth	r3, r3
 8014752:	f003 031f 	and.w	r3, r3, #31
 8014756:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 8014758:	4313      	orrs	r3, r2
 801475a:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801475c:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 801475e:	bf00      	nop
            *framebuffer = alphaBlend(color565, *framebuffer, alpha);
 8014760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014762:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < lineEnd);
 8014764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014766:	3302      	adds	r3, #2
 8014768:	627b      	str	r3, [r7, #36]	@ 0x24
 801476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801476c:	6a3b      	ldr	r3, [r7, #32]
 801476e:	429a      	cmp	r2, r3
 8014770:	bf34      	ite	cc
 8014772:	2301      	movcc	r3, #1
 8014774:	2300      	movcs	r3, #0
 8014776:	b2db      	uxtb	r3, r3
 8014778:	2b00      	cmp	r3, #0
 801477a:	d187      	bne.n	801468c <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm+0x44>
}
 801477c:	bf00      	nop
 801477e:	372c      	adds	r7, #44	@ 0x2c
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr
 8014788:	80808081 	.word	0x80808081

0801478c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>:

void lineFromRGB565(uint16_t* const ptr, const uint16_t* const data, const unsigned count, const uint8_t alpha)
{
 801478c:	b480      	push	{r7}
 801478e:	b08d      	sub	sp, #52	@ 0x34
 8014790:	af00      	add	r7, sp, #0
 8014792:	60f8      	str	r0, [r7, #12]
 8014794:	60b9      	str	r1, [r7, #8]
 8014796:	607a      	str	r2, [r7, #4]
 8014798:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint16_t* bitmapPointer = data;
 801479e:	68bb      	ldr	r3, [r7, #8]
 80147a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    const uint16_t* const chunkend = framebuffer + count;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	005b      	lsls	r3, r3, #1
 80147a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80147a8:	4413      	add	r3, r2
 80147aa:	627b      	str	r3, [r7, #36]	@ 0x24

    if (alpha == 0xFF)
 80147ac:	78fb      	ldrb	r3, [r7, #3]
 80147ae:	2bff      	cmp	r3, #255	@ 0xff
 80147b0:	d112      	bne.n	80147d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>
    {
        do
        {
            *framebuffer = *bitmapPointer++;
 80147b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147b4:	1c9a      	adds	r2, r3, #2
 80147b6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80147b8:	881a      	ldrh	r2, [r3, #0]
 80147ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147bc:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < chunkend);
 80147be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147c0:	3302      	adds	r3, #2
 80147c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80147c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80147c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147c8:	429a      	cmp	r2, r3
 80147ca:	bf34      	ite	cc
 80147cc:	2301      	movcc	r3, #1
 80147ce:	2300      	movcs	r3, #0
 80147d0:	b2db      	uxtb	r3, r3
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d1ed      	bne.n	80147b2 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x26>
        do
        {
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
        } while (++framebuffer < chunkend);
    }
}
 80147d6:	e079      	b.n	80148cc <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x140>
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
 80147d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80147da:	1c9a      	adds	r2, r3, #2
 80147dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80147de:	881a      	ldrh	r2, [r3, #0]
 80147e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147e2:	881b      	ldrh	r3, [r3, #0]
 80147e4:	847a      	strh	r2, [r7, #34]	@ 0x22
 80147e6:	843b      	strh	r3, [r7, #32]
 80147e8:	78fb      	ldrb	r3, [r7, #3]
 80147ea:	77fb      	strb	r3, [r7, #31]
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 80147ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80147ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80147f2:	f023 0307 	bic.w	r3, r3, #7
 80147f6:	b299      	uxth	r1, r3
 80147f8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80147fa:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80147fe:	b29a      	uxth	r2, r3
 8014800:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014802:	f003 031f 	and.w	r3, r3, #31
 8014806:	b29b      	uxth	r3, r3
 8014808:	83b9      	strh	r1, [r7, #28]
 801480a:	837a      	strh	r2, [r7, #26]
 801480c:	833b      	strh	r3, [r7, #24]
 801480e:	8c3b      	ldrh	r3, [r7, #32]
 8014810:	82fb      	strh	r3, [r7, #22]
 8014812:	7ffb      	ldrb	r3, [r7, #31]
 8014814:	757b      	strb	r3, [r7, #21]
    const uint8_t ialpha = 0xFF - alpha;
 8014816:	7d7b      	ldrb	r3, [r7, #21]
 8014818:	43db      	mvns	r3, r3
 801481a:	753b      	strb	r3, [r7, #20]
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 801481c:	8bbb      	ldrh	r3, [r7, #28]
 801481e:	7d7a      	ldrb	r2, [r7, #21]
 8014820:	fb03 f202 	mul.w	r2, r3, r2
 8014824:	8afb      	ldrh	r3, [r7, #22]
 8014826:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 801482a:	7d39      	ldrb	r1, [r7, #20]
 801482c:	fb01 f303 	mul.w	r3, r1, r3
 8014830:	4413      	add	r3, r2
 8014832:	4a29      	ldr	r2, [pc, #164]	@ (80148d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 8014834:	fb82 1203 	smull	r1, r2, r2, r3
 8014838:	441a      	add	r2, r3
 801483a:	11d2      	asrs	r2, r2, #7
 801483c:	17db      	asrs	r3, r3, #31
 801483e:	1ad3      	subs	r3, r2, r3
 8014840:	b21b      	sxth	r3, r3
 8014842:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8014846:	f023 0307 	bic.w	r3, r3, #7
 801484a:	b21a      	sxth	r2, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 801484c:	8b7b      	ldrh	r3, [r7, #26]
 801484e:	7d79      	ldrb	r1, [r7, #21]
 8014850:	fb03 f101 	mul.w	r1, r3, r1
 8014854:	8afb      	ldrh	r3, [r7, #22]
 8014856:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 801485a:	7d38      	ldrb	r0, [r7, #20]
 801485c:	fb00 f303 	mul.w	r3, r0, r3
 8014860:	440b      	add	r3, r1
 8014862:	491d      	ldr	r1, [pc, #116]	@ (80148d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 8014864:	fb81 0103 	smull	r0, r1, r1, r3
 8014868:	4419      	add	r1, r3
 801486a:	11c9      	asrs	r1, r1, #7
 801486c:	17db      	asrs	r3, r3, #31
 801486e:	1acb      	subs	r3, r1, r3
 8014870:	b21b      	sxth	r3, r3
 8014872:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014876:	b21b      	sxth	r3, r3
    return (((R * alpha + (bufpix & RMASK) * ialpha) / 255) & RMASK) |
 8014878:	4313      	orrs	r3, r2
 801487a:	b21a      	sxth	r2, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 801487c:	8b3b      	ldrh	r3, [r7, #24]
 801487e:	7d79      	ldrb	r1, [r7, #21]
 8014880:	fb03 f101 	mul.w	r1, r3, r1
 8014884:	8afb      	ldrh	r3, [r7, #22]
 8014886:	f003 031f 	and.w	r3, r3, #31
 801488a:	7d38      	ldrb	r0, [r7, #20]
 801488c:	fb00 f303 	mul.w	r3, r0, r3
 8014890:	440b      	add	r3, r1
 8014892:	4911      	ldr	r1, [pc, #68]	@ (80148d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x14c>)
 8014894:	fb81 0103 	smull	r0, r1, r1, r3
 8014898:	4419      	add	r1, r3
 801489a:	11c9      	asrs	r1, r1, #7
 801489c:	17db      	asrs	r3, r3, #31
 801489e:	1acb      	subs	r3, r1, r3
 80148a0:	b21b      	sxth	r3, r3
 80148a2:	f003 031f 	and.w	r3, r3, #31
 80148a6:	b21b      	sxth	r3, r3
           (((G * alpha + (bufpix & GMASK) * ialpha) / 255) & GMASK) |
 80148a8:	4313      	orrs	r3, r2
 80148aa:	b21b      	sxth	r3, r3
           (((B * alpha + (bufpix & BMASK) * ialpha) / 255) & BMASK);
 80148ac:	b29a      	uxth	r2, r3
    return alphaBlend(newpix & RMASK, newpix & GMASK, newpix & BMASK, bufpix, alpha);
 80148ae:	bf00      	nop
            *framebuffer = alphaBlend(*bitmapPointer++, *framebuffer, alpha);
 80148b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148b2:	801a      	strh	r2, [r3, #0]
        } while (++framebuffer < chunkend);
 80148b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80148b6:	3302      	adds	r3, #2
 80148b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80148ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80148bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148be:	429a      	cmp	r2, r3
 80148c0:	bf34      	ite	cc
 80148c2:	2301      	movcc	r3, #1
 80148c4:	2300      	movcs	r3, #0
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d185      	bne.n	80147d8 <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh+0x4c>
}
 80148cc:	bf00      	nop
 80148ce:	3734      	adds	r7, #52	@ 0x34
 80148d0:	46bd      	mov	sp, r7
 80148d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d6:	4770      	bx	lr
 80148d8:	80808081 	.word	0x80808081

080148dc <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>:

void lineFromARGB8888(uint16_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80148dc:	b590      	push	{r4, r7, lr}
 80148de:	b093      	sub	sp, #76	@ 0x4c
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	60f8      	str	r0, [r7, #12]
 80148e4:	60b9      	str	r1, [r7, #8]
 80148e6:	607a      	str	r2, [r7, #4]
 80148e8:	70fb      	strb	r3, [r7, #3]
    uint16_t* framebuffer = ptr;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	647b      	str	r3, [r7, #68]	@ 0x44
    const uint32_t* bitmapPointer = data;
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	643b      	str	r3, [r7, #64]	@ 0x40
    const uint16_t* const chunkend = framebuffer + count;
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	005b      	lsls	r3, r3, #1
 80148f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80148f8:	4413      	add	r3, r2
 80148fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    do
    {
        const uint8_t srcAlpha = (*bitmapPointer) >> 24;
 80148fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	0e1b      	lsrs	r3, r3, #24
 8014902:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        const uint8_t a = LCD::div255(alpha * srcAlpha);
 8014906:	78fb      	ldrb	r3, [r7, #3]
 8014908:	b29a      	uxth	r2, r3
 801490a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801490e:	b29b      	uxth	r3, r3
 8014910:	fb12 f303 	smulbb	r3, r2, r3
 8014914:	b29b      	uxth	r3, r3
 8014916:	867b      	strh	r3, [r7, #50]	@ 0x32
     *
     * @return The result of a division by 255.
     */
    FORCE_INLINE_FUNCTION static uint8_t div255(uint16_t num)
    {
        return (num + 1 + (num >> 8)) >> 8;
 8014918:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801491a:	3301      	adds	r3, #1
 801491c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801491e:	0a12      	lsrs	r2, r2, #8
 8014920:	b292      	uxth	r2, r2
 8014922:	4413      	add	r3, r2
 8014924:	121b      	asrs	r3, r3, #8
 8014926:	b2db      	uxtb	r3, r3
 8014928:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
        if (a == 0xFF)
 801492c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8014930:	2bff      	cmp	r3, #255	@ 0xff
 8014932:	d133      	bne.n	801499c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0xc0>
        {
            *framebuffer = getNativeColor(*bitmapPointer);
 8014934:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014936:	681a      	ldr	r2, [r3, #0]
 8014938:	f107 0318 	add.w	r3, r7, #24
 801493c:	4611      	mov	r1, r2
 801493e:	4618      	mov	r0, r3
 8014940:	f7fa fae2 	bl	800ef08 <_ZN8touchgfx9colortypeC1Em>
 8014944:	69bb      	ldr	r3, [r7, #24]
 8014946:	617b      	str	r3, [r7, #20]
    return ((color >> 8) & 0xF800) | ((color >> 5) & 0x07E0) | ((color >> 3) & 0x001F);
 8014948:	f107 0314 	add.w	r3, r7, #20
 801494c:	4618      	mov	r0, r3
 801494e:	f7fa faea 	bl	800ef26 <_ZNK8touchgfx9colortypecvmEv>
 8014952:	4603      	mov	r3, r0
 8014954:	0a1b      	lsrs	r3, r3, #8
 8014956:	b29b      	uxth	r3, r3
 8014958:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 801495c:	f023 0307 	bic.w	r3, r3, #7
 8014960:	b29c      	uxth	r4, r3
 8014962:	f107 0314 	add.w	r3, r7, #20
 8014966:	4618      	mov	r0, r3
 8014968:	f7fa fadd 	bl	800ef26 <_ZNK8touchgfx9colortypecvmEv>
 801496c:	4603      	mov	r3, r0
 801496e:	095b      	lsrs	r3, r3, #5
 8014970:	b29b      	uxth	r3, r3
 8014972:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014976:	b29b      	uxth	r3, r3
 8014978:	4323      	orrs	r3, r4
 801497a:	b29c      	uxth	r4, r3
 801497c:	f107 0314 	add.w	r3, r7, #20
 8014980:	4618      	mov	r0, r3
 8014982:	f7fa fad0 	bl	800ef26 <_ZNK8touchgfx9colortypecvmEv>
 8014986:	4603      	mov	r3, r0
 8014988:	08db      	lsrs	r3, r3, #3
 801498a:	b29b      	uxth	r3, r3
 801498c:	f003 031f 	and.w	r3, r3, #31
 8014990:	b29b      	uxth	r3, r3
 8014992:	4323      	orrs	r3, r4
 8014994:	b29a      	uxth	r2, r3
            *framebuffer = getNativeColor(*bitmapPointer);
 8014996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014998:	801a      	strh	r2, [r3, #0]
 801499a:	e0a9      	b.n	8014af0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x214>
        }
        else if (a)
 801499c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	f000 80a5 	beq.w	8014af0 <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x214>
        {
            const uint32_t newpix = *bitmapPointer;
 80149a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	637b      	str	r3, [r7, #52]	@ 0x34
            *framebuffer = alphaBlend24bit((newpix >> 16), (newpix >> 8), (newpix), *framebuffer, a);
 80149ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149ae:	0c1b      	lsrs	r3, r3, #16
 80149b0:	b2d8      	uxtb	r0, r3
 80149b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149b4:	0a1b      	lsrs	r3, r3, #8
 80149b6:	b2d9      	uxtb	r1, r3
 80149b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149ba:	b2da      	uxtb	r2, r3
 80149bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80149be:	881b      	ldrh	r3, [r3, #0]
 80149c0:	f887 0031 	strb.w	r0, [r7, #49]	@ 0x31
 80149c4:	f887 1030 	strb.w	r1, [r7, #48]	@ 0x30
 80149c8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80149cc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80149ce:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80149d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    const uint8_t ialpha = 0xFF - alpha;
 80149d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80149da:	43db      	mvns	r3, r3
 80149dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80149e0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80149e2:	853b      	strh	r3, [r7, #40]	@ 0x28
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRedFromRGB565(uint16_t color)
    {
        const uint8_t red = (color >> 8) & 0xF8;
 80149e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80149e6:	0a1b      	lsrs	r3, r3, #8
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	b2db      	uxtb	r3, r3
 80149ec:	f023 0307 	bic.w	r3, r3, #7
 80149f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        return red | (red >> 5);
 80149f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80149f8:	095b      	lsrs	r3, r3, #5
 80149fa:	b2da      	uxtb	r2, r3
 80149fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014a00:	4313      	orrs	r3, r2
 8014a02:	b2db      	uxtb	r3, r3
    const uint8_t fbred = Color::getRedFromRGB565(bufpix);
 8014a04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014a08:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014a0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreenFromRGB565(uint16_t color)
    {
        const uint8_t green = (color >> 3) & 0xFC;
 8014a0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014a0e:	08db      	lsrs	r3, r3, #3
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	b2db      	uxtb	r3, r3
 8014a14:	f023 0303 	bic.w	r3, r3, #3
 8014a18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        return green | (green >> 6);
 8014a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014a20:	099b      	lsrs	r3, r3, #6
 8014a22:	b2da      	uxtb	r2, r3
 8014a24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014a28:	4313      	orrs	r3, r2
 8014a2a:	b2db      	uxtb	r3, r3
    const uint8_t fbgreen = Color::getGreenFromRGB565(bufpix);
 8014a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014a30:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014a32:	843b      	strh	r3, [r7, #32]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlueFromRGB565(uint16_t color)
    {
        const uint8_t blue = color << 3;
 8014a34:	8c3b      	ldrh	r3, [r7, #32]
 8014a36:	b2db      	uxtb	r3, r3
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	77fb      	strb	r3, [r7, #31]
        return blue | (blue >> 5);
 8014a3c:	7ffb      	ldrb	r3, [r7, #31]
 8014a3e:	095b      	lsrs	r3, r3, #5
 8014a40:	b2da      	uxtb	r2, r3
 8014a42:	7ffb      	ldrb	r3, [r7, #31]
 8014a44:	4313      	orrs	r3, r2
 8014a46:	b2db      	uxtb	r3, r3
    const uint8_t fbblue = Color::getBlueFromRGB565(bufpix);
 8014a48:	77bb      	strb	r3, [r7, #30]
    return ((((R * alpha + fbred * ialpha) / 255) << 8) & RMASK) |
 8014a4a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8014a4e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8014a52:	fb03 f202 	mul.w	r2, r3, r2
 8014a56:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014a5a:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8014a5e:	fb01 f303 	mul.w	r3, r1, r3
 8014a62:	4413      	add	r3, r2
 8014a64:	4a2d      	ldr	r2, [pc, #180]	@ (8014b1c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8014a66:	fb82 1203 	smull	r1, r2, r2, r3
 8014a6a:	441a      	add	r2, r3
 8014a6c:	11d2      	asrs	r2, r2, #7
 8014a6e:	17db      	asrs	r3, r3, #31
 8014a70:	1ad3      	subs	r3, r2, r3
 8014a72:	021b      	lsls	r3, r3, #8
 8014a74:	b21b      	sxth	r3, r3
 8014a76:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8014a7a:	f023 0307 	bic.w	r3, r3, #7
 8014a7e:	b21a      	sxth	r2, r3
           ((((G * alpha + fbgreen * ialpha) / 255) << 3) & GMASK) |
 8014a80:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8014a84:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8014a88:	fb03 f101 	mul.w	r1, r3, r1
 8014a8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014a90:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8014a94:	fb00 f303 	mul.w	r3, r0, r3
 8014a98:	440b      	add	r3, r1
 8014a9a:	4920      	ldr	r1, [pc, #128]	@ (8014b1c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8014a9c:	fb81 0103 	smull	r0, r1, r1, r3
 8014aa0:	4419      	add	r1, r3
 8014aa2:	11c9      	asrs	r1, r1, #7
 8014aa4:	17db      	asrs	r3, r3, #31
 8014aa6:	1acb      	subs	r3, r1, r3
 8014aa8:	00db      	lsls	r3, r3, #3
 8014aaa:	b21b      	sxth	r3, r3
 8014aac:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8014ab0:	b21b      	sxth	r3, r3
    return ((((R * alpha + fbred * ialpha) / 255) << 8) & RMASK) |
 8014ab2:	4313      	orrs	r3, r2
 8014ab4:	b21a      	sxth	r2, r3
           ((((B * alpha + fbblue * ialpha) / 255) >> 3) & BMASK);
 8014ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014aba:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8014abe:	fb03 f101 	mul.w	r1, r3, r1
 8014ac2:	7fbb      	ldrb	r3, [r7, #30]
 8014ac4:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8014ac8:	fb00 f303 	mul.w	r3, r0, r3
 8014acc:	440b      	add	r3, r1
 8014ace:	4913      	ldr	r1, [pc, #76]	@ (8014b1c <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x240>)
 8014ad0:	fb81 0103 	smull	r0, r1, r1, r3
 8014ad4:	4419      	add	r1, r3
 8014ad6:	11c9      	asrs	r1, r1, #7
 8014ad8:	17db      	asrs	r3, r3, #31
 8014ada:	1acb      	subs	r3, r1, r3
 8014adc:	10db      	asrs	r3, r3, #3
 8014ade:	b21b      	sxth	r3, r3
 8014ae0:	f003 031f 	and.w	r3, r3, #31
 8014ae4:	b21b      	sxth	r3, r3
           ((((G * alpha + fbgreen * ialpha) / 255) << 3) & GMASK) |
 8014ae6:	4313      	orrs	r3, r2
 8014ae8:	b21b      	sxth	r3, r3
           ((((B * alpha + fbblue * ialpha) / 255) >> 3) & BMASK);
 8014aea:	b29a      	uxth	r2, r3
            *framebuffer = alphaBlend24bit((newpix >> 16), (newpix >> 8), (newpix), *framebuffer, a);
 8014aec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014aee:	801a      	strh	r2, [r3, #0]
        }
        bitmapPointer++;
 8014af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014af2:	3304      	adds	r3, #4
 8014af4:	643b      	str	r3, [r7, #64]	@ 0x40
    } while (++framebuffer < chunkend);
 8014af6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014af8:	3302      	adds	r3, #2
 8014afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8014afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014b00:	429a      	cmp	r2, r3
 8014b02:	bf34      	ite	cc
 8014b04:	2301      	movcc	r3, #1
 8014b06:	2300      	movcs	r3, #0
 8014b08:	b2db      	uxtb	r3, r3
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	f47f aef6 	bne.w	80148fc <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh+0x20>
}
 8014b10:	bf00      	nop
 8014b12:	bf00      	nop
 8014b14:	374c      	adds	r7, #76	@ 0x4c
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd90      	pop	{r4, r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	80808081 	.word	0x80808081

08014b20 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
       3, /* number of blocks */
       2 /* bytes per pixel */
       > blockAllocator;

void TouchGFXGeneratedHAL::initialize()
{
 8014b20:	b5b0      	push	{r4, r5, r7, lr}
 8014b22:	b082      	sub	sp, #8
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f000 fea5 	bl	801587a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8014b30:	687d      	ldr	r5, [r7, #4]
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	3364      	adds	r3, #100	@ 0x64
 8014b38:	681c      	ldr	r4, [r3, #0]
 8014b3a:	f005 feb1 	bl	801a8a0 <_ZN8touchgfx11Application11getInstanceEv>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	4619      	mov	r1, r3
 8014b42:	4628      	mov	r0, r5
 8014b44:	47a0      	blx	r4
    // Partial framebuffer strategy
    setFrameBufferAllocator(&blockAllocator);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	4906      	ldr	r1, [pc, #24]	@ (8014b64 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7ff fd10 	bl	8014570 <_ZN8touchgfx3HAL23setFrameBufferAllocatorEPNS_20FrameBufferAllocatorE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	2102      	movs	r1, #2
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7ff fd25 	bl	80145a4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
}
 8014b5a:	bf00      	nop
 8014b5c:	3708      	adds	r7, #8
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bdb0      	pop	{r4, r5, r7, pc}
 8014b62:	bf00      	nop
 8014b64:	2000f0d0 	.word	0x2000f0d0

08014b68 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014b68:	b480      	push	{r7}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
}
 8014b70:	bf00      	nop
 8014b72:	370c      	adds	r7, #12
 8014b74:	46bd      	mov	sp, r7
 8014b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7a:	4770      	bx	lr

08014b7c <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014b7c:	b480      	push	{r7}
 8014b7e:	b083      	sub	sp, #12
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
}
 8014b84:	bf00      	nop
 8014b86:	370c      	adds	r7, #12
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8e:	4770      	bx	lr

08014b90 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8014b90:	b480      	push	{r7}
 8014b92:	b083      	sub	sp, #12
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
}
 8014b98:	bf00      	nop
 8014b9a:	370c      	adds	r7, #12
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr

08014ba4 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8014ba4:	b480      	push	{r7}
 8014ba6:	b083      	sub	sp, #12
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
}
 8014bac:	bf00      	nop
 8014bae:	370c      	adds	r7, #12
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb6:	4770      	bx	lr

08014bb8 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b082      	sub	sp, #8
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f000 fe40 	bl	8015848 <_ZN8touchgfx3HAL10beginFrameEv>
 8014bc8:	4603      	mov	r3, r0
}
 8014bca:	4618      	mov	r0, r3
 8014bcc:	3708      	adds	r7, #8
 8014bce:	46bd      	mov	sp, r7
 8014bd0:	bd80      	pop	{r7, pc}

08014bd2 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8014bd2:	b580      	push	{r7, lr}
 8014bd4:	b082      	sub	sp, #8
 8014bd6:	af00      	add	r7, sp, #0
 8014bd8:	6078      	str	r0, [r7, #4]
    // We must guard the next frame until we're done transferring all blocks over our display interface
    // through either a semaphore if user is running an OS or a simple variable if not
    // Wait until all blocks have been transmitted
    while (touchgfxDisplayDriverTransmitActive()){}
 8014bda:	bf00      	nop
 8014bdc:	f7ec ff5e 	bl	8001a9c <touchgfxDisplayDriverTransmitActive>
 8014be0:	4603      	mov	r3, r0
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	bf14      	ite	ne
 8014be6:	2301      	movne	r3, #1
 8014be8:	2300      	moveq	r3, #0
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d1f5      	bne.n	8014bdc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xa>

    HAL::endFrame();
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f000 fe34 	bl	8015860 <_ZN8touchgfx3HAL8endFrameEv>
}
 8014bf8:	bf00      	nop
 8014bfa:	3708      	adds	r7, #8
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bd80      	pop	{r7, pc}

08014c00 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    fbPtr += rect.y * lcd().framebufferStride() + rect.x * 2;
    return fbPtr;
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014c00:	b480      	push	{r7}
 8014c02:	b083      	sub	sp, #12
 8014c04:	af00      	add	r7, sp, #0
 8014c06:	6078      	str	r0, [r7, #4]
    //getTFTFrameBuffer() not used for selected Frame Buffer Strategy
    return 0;
 8014c08:	2300      	movs	r3, #0
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	370c      	adds	r7, #12
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c14:	4770      	bx	lr

08014c16 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8014c16:	b480      	push	{r7}
 8014c18:	b083      	sub	sp, #12
 8014c1a:	af00      	add	r7, sp, #0
 8014c1c:	6078      	str	r0, [r7, #4]
 8014c1e:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8014c20:	bf00      	nop
 8014c22:	370c      	adds	r7, #12
 8014c24:	46bd      	mov	sp, r7
 8014c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2a:	4770      	bx	lr

08014c2c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b088      	sub	sp, #32
 8014c30:	af02      	add	r7, sp, #8
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	6839      	ldr	r1, [r7, #0]
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f000 fdce 	bl	80157dc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // Once flushFrameBuffer() is called by the framework a block is already for transfer
    // Mark it ready for transfer and transmit it if user defined method isTransmittingData() does not return false
    // If data is not being transmitted, transfer the data with user defined method transmitFrameBufferBlock().
    frameBufferAllocator->markBlockReadyForTransfer();
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	699a      	ldr	r2, [r3, #24]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	699b      	ldr	r3, [r3, #24]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	3304      	adds	r3, #4
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	4610      	mov	r0, r2
 8014c50:	4798      	blx	r3
    if (!touchgfxDisplayDriverTransmitActive())
 8014c52:	f7ec ff23 	bl	8001a9c <touchgfxDisplayDriverTransmitActive>
 8014c56:	4603      	mov	r3, r0
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	bf0c      	ite	eq
 8014c5c:	2301      	moveq	r3, #1
 8014c5e:	2300      	movne	r3, #0
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d021      	beq.n	8014caa <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x7e>
    {
        touchgfx::Rect r;
 8014c66:	f107 030c 	add.w	r3, r7, #12
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	f7fa f967 	bl	800ef3e <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = frameBufferAllocator->getBlockForTransfer(r);
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	699a      	ldr	r2, [r3, #24]
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	699b      	ldr	r3, [r3, #24]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	330c      	adds	r3, #12
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	f107 010c 	add.w	r1, r7, #12
 8014c82:	4610      	mov	r0, r2
 8014c84:	4798      	blx	r3
 8014c86:	6178      	str	r0, [r7, #20]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8014c88:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8014c8c:	b299      	uxth	r1, r3
 8014c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c92:	b29a      	uxth	r2, r3
 8014c94:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8014c98:	b298      	uxth	r0, r3
 8014c9a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	9300      	str	r3, [sp, #0]
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	6978      	ldr	r0, [r7, #20]
 8014ca6:	f7ec ff0b 	bl	8001ac0 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8014caa:	bf00      	nop
 8014cac:	3718      	adds	r7, #24
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}

08014cb2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8014cb2:	b580      	push	{r7, lr}
 8014cb4:	b084      	sub	sp, #16
 8014cb6:	af00      	add	r7, sp, #0
 8014cb8:	60f8      	str	r0, [r7, #12]
 8014cba:	60b9      	str	r1, [r7, #8]
 8014cbc:	607a      	str	r2, [r7, #4]
 8014cbe:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8014cc0:	68f8      	ldr	r0, [r7, #12]
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	687a      	ldr	r2, [r7, #4]
 8014cc6:	68b9      	ldr	r1, [r7, #8]
 8014cc8:	f000 fef9 	bl	8015abe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 8014ccc:	4603      	mov	r3, r0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3710      	adds	r7, #16
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}

08014cd6 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>:
/**
 * This function is called by FrameBufferAllocator if no block is
 * available.
 */
void FrameBufferAllocatorWaitOnTransfer()
{
 8014cd6:	b480      	push	{r7}
 8014cd8:	af00      	add	r7, sp, #0
    /* NOTE: This function should not be modified, when the fuction is needed,
     *       FrameBufferAllocatorWaitOnTransfer should be implemented in the user file
     */
}
 8014cda:	bf00      	nop
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce2:	4770      	bx	lr

08014ce4 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>:
 * Called by FrameBufferAllocator when a block is drawn and
 * therefore ready for transfer. The LCD driver should use this
 * method to start a transfer.
 */
void FrameBufferAllocatorSignalBlockDrawn()
{
 8014ce4:	b480      	push	{r7}
 8014ce6:	af00      	add	r7, sp, #0
    /* NOTE: This function should not be modified, when the fuction is needed,
     *       FrameBufferAllocatorSignalBlockDrawn should be implemented in the user file
     */
}
 8014ce8:	bf00      	nop
 8014cea:	46bd      	mov	sp, r7
 8014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf0:	4770      	bx	lr

08014cf2 <_ZN8touchgfx16startNewTransferEv>:

// A user must call touchgfx::startNewTransfer(); once transmitFrameBufferBlock() has successfully sent a block.
void startNewTransfer()
{
 8014cf2:	b580      	push	{r7, lr}
 8014cf4:	b086      	sub	sp, #24
 8014cf6:	af02      	add	r7, sp, #8
    FrameBufferAllocator* fba = HAL::getInstance()->getFrameBufferAllocator();
 8014cf8:	f7f9 fc68 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7ff fc44 	bl	801458c <_ZN8touchgfx3HAL23getFrameBufferAllocatorEv>
 8014d04:	60f8      	str	r0, [r7, #12]

    // Free the previous transmitted block, marking it ready for rendering
    fba->freeBlockAfterTransfer();
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	3318      	adds	r3, #24
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	68f8      	ldr	r0, [r7, #12]
 8014d10:	4798      	blx	r3
    if (fba->hasBlockReadyForTransfer())
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	3308      	adds	r3, #8
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	68f8      	ldr	r0, [r7, #12]
 8014d1c:	4798      	blx	r3
 8014d1e:	4603      	mov	r3, r0
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d01d      	beq.n	8014d60 <_ZN8touchgfx16startNewTransferEv+0x6e>
    {
        touchgfx::Rect r;
 8014d24:	463b      	mov	r3, r7
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7fa f909 	bl	800ef3e <_ZN8touchgfx4RectC1Ev>
        // Get pointer to block buffer and coordinates of the rect
        const uint8_t* pixels = fba->getBlockForTransfer(r);
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	330c      	adds	r3, #12
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	463a      	mov	r2, r7
 8014d36:	4611      	mov	r1, r2
 8014d38:	68f8      	ldr	r0, [r7, #12]
 8014d3a:	4798      	blx	r3
 8014d3c:	60b8      	str	r0, [r7, #8]
        // Start transmission of the block
        touchgfxDisplayDriverTransmitBlock((uint8_t*)pixels, r.x, r.y, r.width, r.height);
 8014d3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8014d42:	b299      	uxth	r1, r3
 8014d44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014d48:	b29a      	uxth	r2, r3
 8014d4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8014d4e:	b298      	uxth	r0, r3
 8014d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	9300      	str	r3, [sp, #0]
 8014d58:	4603      	mov	r3, r0
 8014d5a:	68b8      	ldr	r0, [r7, #8]
 8014d5c:	f7ec feb0 	bl	8001ac0 <touchgfxDisplayDriverTransmitBlock>
    }
}
 8014d60:	bf00      	nop
 8014d62:	3710      	adds	r7, #16
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}

08014d68 <DisplayDriver_TransferCompleteCallback>:

extern "C"
void DisplayDriver_TransferCompleteCallback()
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	af00      	add	r7, sp, #0
    // After completed transmission start new transfer if blocks are ready.
    touchgfx::startNewTransfer();
 8014d6c:	f7ff ffc1 	bl	8014cf2 <_ZN8touchgfx16startNewTransferEv>
}
 8014d70:	bf00      	nop
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <touchgfxSignalVSync>:
}

extern "C"
void touchgfxSignalVSync(void)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	af00      	add	r7, sp, #0
    /* VSync has occurred, increment TouchGFX engine vsync counter */
    touchgfx::HAL::getInstance()->vSync();
 8014d78:	f7f9 fc28 	bl	800e5cc <_ZN8touchgfx3HAL11getInstanceEv>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7ff fbe4 	bl	801454c <_ZN8touchgfx3HAL5vSyncEv>

    /* VSync has occurred, signal TouchGFX engine */
    touchgfx::OSWrappers::signalVSync();
 8014d84:	f7fe fd9c 	bl	80138c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
}
 8014d88:	bf00      	nop
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <_ZN8touchgfx20FrameBufferAllocatorC1Ev>:
class FrameBufferAllocator
 8014d8c:	b480      	push	{r7}
 8014d8e:	b083      	sub	sp, #12
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
 8014d94:	4a04      	ldr	r2, [pc, #16]	@ (8014da8 <_ZN8touchgfx20FrameBufferAllocatorC1Ev+0x1c>)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	601a      	str	r2, [r3, #0]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	370c      	adds	r7, #12
 8014da0:	46bd      	mov	sp, r7
 8014da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da6:	4770      	bx	lr
 8014da8:	0802f9a0 	.word	0x0802f9a0

08014dac <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev>:
 */
template <uint32_t block_size, uint32_t blocks, uint32_t bytes_pr_pixel>
class ManyBlockAllocator : public FrameBufferAllocator
{
public:
    ManyBlockAllocator()
 8014dac:	b5b0      	push	{r4, r5, r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
    {
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	4618      	mov	r0, r3
 8014db8:	f7ff ffe8 	bl	8014d8c <_ZN8touchgfx20FrameBufferAllocatorC1Ev>
 8014dbc:	4a19      	ldr	r2, [pc, #100]	@ (8014e24 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x78>)
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	601a      	str	r2, [r3, #0]
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014dc8:	3308      	adds	r3, #8
 8014dca:	2402      	movs	r4, #2
 8014dcc:	461d      	mov	r5, r3
 8014dce:	e004      	b.n	8014dda <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x2e>
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	f7fa f8b4 	bl	800ef3e <_ZN8touchgfx4RectC1Ev>
 8014dd6:	3c01      	subs	r4, #1
 8014dd8:	3508      	adds	r5, #8
 8014dda:	2c00      	cmp	r4, #0
 8014ddc:	daf8      	bge.n	8014dd0 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x24>
        sendingBlock = -1;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014de4:	461a      	mov	r2, r3
 8014de6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dea:	6213      	str	r3, [r2, #32]
        drawingBlock = -1;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014df2:	461a      	mov	r2, r3
 8014df4:	f04f 33ff 	mov.w	r3, #4294967295
 8014df8:	6253      	str	r3, [r2, #36]	@ 0x24
        for (uint32_t i = 0; i < blocks; i++)
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	60fb      	str	r3, [r7, #12]
 8014dfe:	e008      	b.n	8014e12 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x66>
        {
            state[i] = EMPTY;
 8014e00:	687a      	ldr	r2, [r7, #4]
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	4413      	add	r3, r2
 8014e06:	3304      	adds	r3, #4
 8014e08:	2200      	movs	r2, #0
 8014e0a:	701a      	strb	r2, [r3, #0]
        for (uint32_t i = 0; i < blocks; i++)
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	3301      	adds	r3, #1
 8014e10:	60fb      	str	r3, [r7, #12]
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	2b02      	cmp	r3, #2
 8014e16:	d9f3      	bls.n	8014e00 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev+0x54>
        }
    }
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3710      	adds	r7, #16
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bdb0      	pop	{r4, r5, r7, pc}
 8014e22:	bf00      	nop
 8014e24:	0802f89c 	.word	0x0802f89c

08014e28 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>:
class ManyBlockAllocator : public FrameBufferAllocator
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b082      	sub	sp, #8
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	4a05      	ldr	r2, [pc, #20]	@ (8014e48 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev+0x20>)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	601a      	str	r2, [r3, #0]
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7ff fb67 	bl	801450c <_ZN8touchgfx20FrameBufferAllocatorD1Ev>
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	4618      	mov	r0, r3
 8014e42:	3708      	adds	r7, #8
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}
 8014e48:	0802f89c 	.word	0x0802f89c

08014e4c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED0Ev>:
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b082      	sub	sp, #8
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f7ff ffe7 	bl	8014e28 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>
 8014e5a:	f243 0128 	movw	r1, #12328	@ 0x3028
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f017 fc0f 	bl	802c682 <_ZdlPvj>
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	4618      	mov	r0, r3
 8014e68:	3708      	adds	r7, #8
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}
	...

08014e70 <_Z41__static_initialization_and_destruction_0ii>:
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b082      	sub	sp, #8
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
 8014e78:	6039      	str	r1, [r7, #0]
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2b01      	cmp	r3, #1
 8014e7e:	d107      	bne.n	8014e90 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8014e80:	683b      	ldr	r3, [r7, #0]
 8014e82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014e86:	4293      	cmp	r3, r2
 8014e88:	d102      	bne.n	8014e90 <_Z41__static_initialization_and_destruction_0ii+0x20>
       > blockAllocator;
 8014e8a:	4809      	ldr	r0, [pc, #36]	@ (8014eb0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014e8c:	f7ff ff8e 	bl	8014dac <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EEC1Ev>
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d107      	bne.n	8014ea6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8014e96:	683b      	ldr	r3, [r7, #0]
 8014e98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014e9c:	4293      	cmp	r3, r2
 8014e9e:	d102      	bne.n	8014ea6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8014ea0:	4803      	ldr	r0, [pc, #12]	@ (8014eb0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8014ea2:	f7ff ffc1 	bl	8014e28 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EED1Ev>
}
 8014ea6:	bf00      	nop
 8014ea8:	3708      	adds	r7, #8
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	2000f0d0 	.word	0x2000f0d0

08014eb4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh>:
     * @param          height The height of the block.
     * @param [in,out] block  Pointer to pointer to return the block address in.
     *
     * @return The height of the allocated block.
     */
    virtual uint16_t allocateBlock(const uint16_t x, const uint16_t y, const uint16_t width, const uint16_t height, uint8_t** block)
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b086      	sub	sp, #24
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	60f8      	str	r0, [r7, #12]
 8014ebc:	4608      	mov	r0, r1
 8014ebe:	4611      	mov	r1, r2
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	817b      	strh	r3, [r7, #10]
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	813b      	strh	r3, [r7, #8]
 8014eca:	4613      	mov	r3, r2
 8014ecc:	80fb      	strh	r3, [r7, #6]
    {
        drawingBlock++;
 8014ece:	68fb      	ldr	r3, [r7, #12]
 8014ed0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	68fa      	ldr	r2, [r7, #12]
 8014eda:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8014ede:	6253      	str	r3, [r2, #36]	@ 0x24
        if (drawingBlock == blocks)
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ee8:	2b03      	cmp	r3, #3
 8014eea:	d108      	bne.n	8014efe <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x4a>
        {
            drawingBlock = 0;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014ef2:	461a      	mov	r2, r3
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	6253      	str	r3, [r2, #36]	@ 0x24
        }
        while (state[drawingBlock] != EMPTY)
 8014ef8:	e001      	b.n	8014efe <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x4a>
        {
            FrameBufferAllocatorWaitOnTransfer();
 8014efa:	f7ff feec 	bl	8014cd6 <_ZN8touchgfx34FrameBufferAllocatorWaitOnTransferEv>
        while (state[drawingBlock] != EMPTY)
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f06:	68fa      	ldr	r2, [r7, #12]
 8014f08:	4413      	add	r3, r2
 8014f0a:	791b      	ldrb	r3, [r3, #4]
 8014f0c:	b2db      	uxtb	r3, r3
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	bf14      	ite	ne
 8014f12:	2301      	movne	r3, #1
 8014f14:	2300      	moveq	r3, #0
 8014f16:	b2db      	uxtb	r3, r3
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d1ee      	bne.n	8014efa <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x46>
        }
        assert(state[drawingBlock] == EMPTY);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f24:	68fa      	ldr	r2, [r7, #12]
 8014f26:	4413      	add	r3, r2
 8014f28:	791b      	ldrb	r3, [r3, #4]
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d005      	beq.n	8014f3c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x88>
 8014f30:	4b33      	ldr	r3, [pc, #204]	@ (8015000 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x14c>)
 8014f32:	4a34      	ldr	r2, [pc, #208]	@ (8015004 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x150>)
 8014f34:	21aa      	movs	r1, #170	@ 0xaa
 8014f36:	4834      	ldr	r0, [pc, #208]	@ (8015008 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13allocateBlockEttttPPh+0x154>)
 8014f38:	f017 fbd0 	bl	802c6dc <__assert_func>
        state[drawingBlock] = ALLOCATED;
 8014f3c:	68fb      	ldr	r3, [r7, #12]
 8014f3e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	4413      	add	r3, r2
 8014f48:	2201      	movs	r2, #1
 8014f4a:	711a      	strb	r2, [r3, #4]
        const int32_t stride = width * bytes_pr_pixel;
 8014f4c:	88fb      	ldrh	r3, [r7, #6]
 8014f4e:	005b      	lsls	r3, r3, #1
 8014f50:	617b      	str	r3, [r7, #20]
        const int32_t lines = block_size / stride;
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8014f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f5c:	613b      	str	r3, [r7, #16]
        *block = (uint8_t*)&memory[drawingBlock][0];
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f66:	031b      	lsls	r3, r3, #12
 8014f68:	3308      	adds	r3, #8
 8014f6a:	68fa      	ldr	r2, [r7, #12]
 8014f6c:	441a      	add	r2, r3
 8014f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f70:	601a      	str	r2, [r3, #0]
        blockRect[drawingBlock].x = x;
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014f78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f7a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	f202 6201 	addw	r2, r2, #1537	@ 0x601
 8014f84:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
        blockRect[drawingBlock].y = y;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f90:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8014f94:	68fa      	ldr	r2, [r7, #12]
 8014f96:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8014f9a:	00db      	lsls	r3, r3, #3
 8014f9c:	4413      	add	r3, r2
 8014f9e:	460a      	mov	r2, r1
 8014fa0:	805a      	strh	r2, [r3, #2]
        blockRect[drawingBlock].width = width;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014faa:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8014fae:	68fa      	ldr	r2, [r7, #12]
 8014fb0:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8014fb4:	00db      	lsls	r3, r3, #3
 8014fb6:	4413      	add	r3, r2
 8014fb8:	460a      	mov	r2, r1
 8014fba:	809a      	strh	r2, [r3, #4]
        blockRect[drawingBlock].height = MIN(height, lines);
 8014fbc:	8c3a      	ldrh	r2, [r7, #32]
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	bfa8      	it	ge
 8014fc4:	461a      	movge	r2, r3
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fce:	b211      	sxth	r1, r2
 8014fd0:	68fa      	ldr	r2, [r7, #12]
 8014fd2:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8014fd6:	00db      	lsls	r3, r3, #3
 8014fd8:	4413      	add	r3, r2
 8014fda:	460a      	mov	r2, r1
 8014fdc:	80da      	strh	r2, [r3, #6]
        return blockRect[drawingBlock].height;
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8014fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fe6:	68fa      	ldr	r2, [r7, #12]
 8014fe8:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8014fec:	00db      	lsls	r3, r3, #3
 8014fee:	4413      	add	r3, r2
 8014ff0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8014ff4:	b29b      	uxth	r3, r3
    }
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	3718      	adds	r7, #24
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}
 8014ffe:	bf00      	nop
 8015000:	0802e694 	.word	0x0802e694
 8015004:	0802e6b4 	.word	0x0802e6b4
 8015008:	0802e7e8 	.word	0x0802e7e8

0801500c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv>:

    /** Marks a previously allocated block as ready to be transferred to the LCD. */
    virtual void markBlockReadyForTransfer()
 801500c:	b580      	push	{r7, lr}
 801500e:	b082      	sub	sp, #8
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
    {
        assert(state[drawingBlock] == ALLOCATED);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801501c:	687a      	ldr	r2, [r7, #4]
 801501e:	4413      	add	r3, r2
 8015020:	791b      	ldrb	r3, [r3, #4]
 8015022:	b2db      	uxtb	r3, r3
 8015024:	2b01      	cmp	r3, #1
 8015026:	d005      	beq.n	8015034 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x28>
 8015028:	4b09      	ldr	r3, [pc, #36]	@ (8015050 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x44>)
 801502a:	4a0a      	ldr	r2, [pc, #40]	@ (8015054 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x48>)
 801502c:	21b9      	movs	r1, #185	@ 0xb9
 801502e:	480a      	ldr	r0, [pc, #40]	@ (8015058 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE25markBlockReadyForTransferEv+0x4c>)
 8015030:	f017 fb54 	bl	802c6dc <__assert_func>
        state[drawingBlock] = DRAWN;
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801503c:	687a      	ldr	r2, [r7, #4]
 801503e:	4413      	add	r3, r2
 8015040:	2202      	movs	r2, #2
 8015042:	711a      	strb	r2, [r3, #4]
        FrameBufferAllocatorSignalBlockDrawn();
 8015044:	f7ff fe4e 	bl	8014ce4 <_ZN8touchgfx36FrameBufferAllocatorSignalBlockDrawnEv>
    }
 8015048:	bf00      	nop
 801504a:	3708      	adds	r7, #8
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	0802e83c 	.word	0x0802e83c
 8015054:	0802e860 	.word	0x0802e860
 8015058:	0802e7e8 	.word	0x0802e7e8

0801505c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv>:
    /**
     * Check if a block is ready for transfer to the LCD.
     *
     * @return True if a block is ready for transfer.
     */
    virtual bool hasBlockReadyForTransfer()
 801505c:	b480      	push	{r7}
 801505e:	b085      	sub	sp, #20
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t i = 0; i < blocks; i++)
 8015064:	2300      	movs	r3, #0
 8015066:	60fb      	str	r3, [r7, #12]
 8015068:	e011      	b.n	801508e <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x32>
        {
            if (state[i] == DRAWN)
 801506a:	687a      	ldr	r2, [r7, #4]
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	4413      	add	r3, r2
 8015070:	3304      	adds	r3, #4
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	b2db      	uxtb	r3, r3
 8015076:	2b02      	cmp	r3, #2
 8015078:	bf0c      	ite	eq
 801507a:	2301      	moveq	r3, #1
 801507c:	2300      	movne	r3, #0
 801507e:	b2db      	uxtb	r3, r3
 8015080:	2b00      	cmp	r3, #0
 8015082:	d001      	beq.n	8015088 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x2c>
            {
                return true;
 8015084:	2301      	movs	r3, #1
 8015086:	e006      	b.n	8015096 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0x3a>
        for (uint32_t i = 0; i < blocks; i++)
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	3301      	adds	r3, #1
 801508c:	60fb      	str	r3, [r7, #12]
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2b02      	cmp	r3, #2
 8015092:	d9ea      	bls.n	801506a <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE24hasBlockReadyForTransferEv+0xe>
            }
        }
        return false;
 8015094:	2300      	movs	r3, #0
    }
 8015096:	4618      	mov	r0, r3
 8015098:	3714      	adds	r7, #20
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr
	...

080150a4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE>:
     *
     * @param [in,out] rect Reference to rect to write block x, y, width, and height.
     *
     * @return Returns the address of the block ready for transfer.
     */
    virtual const uint8_t* getBlockForTransfer(Rect& rect)
 80150a4:	b580      	push	{r7, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	6078      	str	r0, [r7, #4]
 80150ac:	6039      	str	r1, [r7, #0]
    {
        sendingBlock++;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80150b4:	6a1b      	ldr	r3, [r3, #32]
 80150b6:	3301      	adds	r3, #1
 80150b8:	687a      	ldr	r2, [r7, #4]
 80150ba:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80150be:	6213      	str	r3, [r2, #32]
        if (sendingBlock == blocks)
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80150c6:	6a1b      	ldr	r3, [r3, #32]
 80150c8:	2b03      	cmp	r3, #3
 80150ca:	d105      	bne.n	80150d8 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x34>
        {
            sendingBlock = 0;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80150d2:	461a      	mov	r2, r3
 80150d4:	2300      	movs	r3, #0
 80150d6:	6213      	str	r3, [r2, #32]
        }
        assert(state[sendingBlock] == DRAWN);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80150de:	6a1b      	ldr	r3, [r3, #32]
 80150e0:	687a      	ldr	r2, [r7, #4]
 80150e2:	4413      	add	r3, r2
 80150e4:	791b      	ldrb	r3, [r3, #4]
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	2b02      	cmp	r3, #2
 80150ea:	d005      	beq.n	80150f8 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x54>
 80150ec:	4b13      	ldr	r3, [pc, #76]	@ (801513c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x98>)
 80150ee:	4a14      	ldr	r2, [pc, #80]	@ (8015140 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0x9c>)
 80150f0:	21dd      	movs	r1, #221	@ 0xdd
 80150f2:	4814      	ldr	r0, [pc, #80]	@ (8015144 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE19getBlockForTransferERNS_4RectE+0xa0>)
 80150f4:	f017 faf2 	bl	802c6dc <__assert_func>
        rect = blockRect[sendingBlock];
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80150fe:	6a1b      	ldr	r3, [r3, #32]
 8015100:	683a      	ldr	r2, [r7, #0]
 8015102:	6879      	ldr	r1, [r7, #4]
 8015104:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8015108:	00db      	lsls	r3, r3, #3
 801510a:	440b      	add	r3, r1
 801510c:	cb03      	ldmia	r3!, {r0, r1}
 801510e:	6010      	str	r0, [r2, #0]
 8015110:	6051      	str	r1, [r2, #4]
        state[sendingBlock] = SENDING;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8015118:	6a1b      	ldr	r3, [r3, #32]
 801511a:	687a      	ldr	r2, [r7, #4]
 801511c:	4413      	add	r3, r2
 801511e:	2203      	movs	r2, #3
 8015120:	711a      	strb	r2, [r3, #4]
        return (const uint8_t*)&memory[sendingBlock][0];
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8015128:	6a1b      	ldr	r3, [r3, #32]
 801512a:	031b      	lsls	r3, r3, #12
 801512c:	3308      	adds	r3, #8
 801512e:	687a      	ldr	r2, [r7, #4]
 8015130:	4413      	add	r3, r2
    }
 8015132:	4618      	mov	r0, r3
 8015134:	3708      	adds	r7, #8
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
 801513a:	bf00      	nop
 801513c:	0802e934 	.word	0x0802e934
 8015140:	0802e954 	.word	0x0802e954
 8015144:	0802e7e8 	.word	0x0802e7e8

08015148 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv>:

    virtual const Rect& peekBlockForTransfer()
 8015148:	b580      	push	{r7, lr}
 801514a:	b084      	sub	sp, #16
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
    {
        int nextSendingBlock = sendingBlock + 1;
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8015156:	6a1b      	ldr	r3, [r3, #32]
 8015158:	3301      	adds	r3, #1
 801515a:	60fb      	str	r3, [r7, #12]
        if (nextSendingBlock == blocks)
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2b03      	cmp	r3, #3
 8015160:	d101      	bne.n	8015166 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x1e>
        {
            nextSendingBlock = 0;
 8015162:	2300      	movs	r3, #0
 8015164:	60fb      	str	r3, [r7, #12]
        }
        assert(state[nextSendingBlock] == DRAWN);
 8015166:	687a      	ldr	r2, [r7, #4]
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	4413      	add	r3, r2
 801516c:	3304      	adds	r3, #4
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	b2db      	uxtb	r3, r3
 8015172:	2b02      	cmp	r3, #2
 8015174:	d005      	beq.n	8015182 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x3a>
 8015176:	4b08      	ldr	r3, [pc, #32]	@ (8015198 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x50>)
 8015178:	4a08      	ldr	r2, [pc, #32]	@ (801519c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x54>)
 801517a:	21ea      	movs	r1, #234	@ 0xea
 801517c:	4808      	ldr	r0, [pc, #32]	@ (80151a0 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE20peekBlockForTransferEv+0x58>)
 801517e:	f017 faad 	bl	802c6dc <__assert_func>
        return blockRect[nextSendingBlock];
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	f203 6301 	addw	r3, r3, #1537	@ 0x601
 8015188:	00db      	lsls	r3, r3, #3
 801518a:	687a      	ldr	r2, [r7, #4]
 801518c:	4413      	add	r3, r2
    }
 801518e:	4618      	mov	r0, r3
 8015190:	3710      	adds	r7, #16
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}
 8015196:	bf00      	nop
 8015198:	0802ea54 	.word	0x0802ea54
 801519c:	0802ea78 	.word	0x0802ea78
 80151a0:	0802e7e8 	.word	0x0802e7e8

080151a4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13hasEmptyBlockEv>:

    virtual bool hasEmptyBlock()
 80151a4:	b480      	push	{r7}
 80151a6:	b085      	sub	sp, #20
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
    {
        int nextDrawingBlock = drawingBlock + 1;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80151b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151b4:	3301      	adds	r3, #1
 80151b6:	60fb      	str	r3, [r7, #12]
        if (nextDrawingBlock == blocks)
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	2b03      	cmp	r3, #3
 80151bc:	d101      	bne.n	80151c2 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE13hasEmptyBlockEv+0x1e>
        {
            nextDrawingBlock = 0;
 80151be:	2300      	movs	r3, #0
 80151c0:	60fb      	str	r3, [r7, #12]
        }
        return (state[nextDrawingBlock] == EMPTY);
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	4413      	add	r3, r2
 80151c8:	3304      	adds	r3, #4
 80151ca:	781b      	ldrb	r3, [r3, #0]
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	bf0c      	ite	eq
 80151d2:	2301      	moveq	r3, #1
 80151d4:	2300      	movne	r3, #0
 80151d6:	b2db      	uxtb	r3, r3
    }
 80151d8:	4618      	mov	r0, r3
 80151da:	3714      	adds	r7, #20
 80151dc:	46bd      	mov	sp, r7
 80151de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e2:	4770      	bx	lr

080151e4 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv>:
    /**
     * Free a block after transfer to the LCD.
     *
     * Marks a previously allocated block as transferred and ready to reuse.
     */
    virtual void freeBlockAfterTransfer()
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b082      	sub	sp, #8
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	6078      	str	r0, [r7, #4]
    {
        assert(state[sendingBlock] == SENDING);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80151f2:	6a1b      	ldr	r3, [r3, #32]
 80151f4:	687a      	ldr	r2, [r7, #4]
 80151f6:	4413      	add	r3, r2
 80151f8:	791b      	ldrb	r3, [r3, #4]
 80151fa:	b2db      	uxtb	r3, r3
 80151fc:	2b03      	cmp	r3, #3
 80151fe:	d005      	beq.n	801520c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x28>
 8015200:	4b08      	ldr	r3, [pc, #32]	@ (8015224 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x40>)
 8015202:	4a09      	ldr	r2, [pc, #36]	@ (8015228 <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x44>)
 8015204:	21ff      	movs	r1, #255	@ 0xff
 8015206:	4809      	ldr	r0, [pc, #36]	@ (801522c <_ZN8touchgfx18ManyBlockAllocatorILm4096ELm3ELm2EE22freeBlockAfterTransferEv+0x48>)
 8015208:	f017 fa68 	bl	802c6dc <__assert_func>
        state[sendingBlock] = EMPTY;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8015212:	6a1b      	ldr	r3, [r3, #32]
 8015214:	687a      	ldr	r2, [r7, #4]
 8015216:	4413      	add	r3, r2
 8015218:	2200      	movs	r2, #0
 801521a:	711a      	strb	r2, [r3, #4]
    }
 801521c:	bf00      	nop
 801521e:	3708      	adds	r7, #8
 8015220:	46bd      	mov	sp, r7
 8015222:	bd80      	pop	{r7, pc}
 8015224:	0802eb58 	.word	0x0802eb58
 8015228:	0802eb78 	.word	0x0802eb78
 801522c:	0802e7e8 	.word	0x0802e7e8

08015230 <_GLOBAL__sub_I__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8015230:	b580      	push	{r7, lr}
 8015232:	af00      	add	r7, sp, #0
 8015234:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015238:	2001      	movs	r0, #1
 801523a:	f7ff fe19 	bl	8014e70 <_Z41__static_initialization_and_destruction_0ii>
 801523e:	bd80      	pop	{r7, pc}

08015240 <_GLOBAL__sub_D__ZN8touchgfx5paint12setL8PaletteEPKh>:
 8015240:	b580      	push	{r7, lr}
 8015242:	af00      	add	r7, sp, #0
 8015244:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015248:	2000      	movs	r0, #0
 801524a:	f7ff fe11 	bl	8014e70 <_Z41__static_initialization_and_destruction_0ii>
 801524e:	bd80      	pop	{r7, pc}

08015250 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8015250:	8880      	ldrh	r0, [r0, #4]
 8015252:	4770      	bx	lr

08015254 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015254:	b570      	push	{r4, r5, r6, lr}
 8015256:	6803      	ldr	r3, [r0, #0]
 8015258:	4605      	mov	r5, r0
 801525a:	460c      	mov	r4, r1
 801525c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801525e:	2100      	movs	r1, #0
 8015260:	4798      	blx	r3
 8015262:	682b      	ldr	r3, [r5, #0]
 8015264:	4606      	mov	r6, r0
 8015266:	6a1b      	ldr	r3, [r3, #32]
 8015268:	4628      	mov	r0, r5
 801526a:	4798      	blx	r3
 801526c:	1ba4      	subs	r4, r4, r6
 801526e:	b2a4      	uxth	r4, r4
 8015270:	fbb4 f0f0 	udiv	r0, r4, r0
 8015274:	bd70      	pop	{r4, r5, r6, pc}

08015276 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015276:	2300      	movs	r3, #0
 8015278:	8083      	strh	r3, [r0, #4]
 801527a:	4770      	bx	lr

0801527c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801527c:	b510      	push	{r4, lr}
 801527e:	4604      	mov	r4, r0
 8015280:	6803      	ldr	r3, [r0, #0]
 8015282:	8881      	ldrh	r1, [r0, #4]
 8015284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015286:	4798      	blx	r3
 8015288:	88a3      	ldrh	r3, [r4, #4]
 801528a:	3301      	adds	r3, #1
 801528c:	80a3      	strh	r3, [r4, #4]
 801528e:	bd10      	pop	{r4, pc}

08015290 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8015290:	6803      	ldr	r3, [r0, #0]
 8015292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015294:	4718      	bx	r3

08015296 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015296:	4770      	bx	lr

08015298 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015298:	4a02      	ldr	r2, [pc, #8]	@ (80152a4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801529a:	6002      	str	r2, [r0, #0]
 801529c:	2200      	movs	r2, #0
 801529e:	8082      	strh	r2, [r0, #4]
 80152a0:	4770      	bx	lr
 80152a2:	bf00      	nop
 80152a4:	0802f9cc 	.word	0x0802f9cc

080152a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80152a8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80152aa:	2000      	movs	r0, #0
 80152ac:	b12b      	cbz	r3, 80152ba <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80152ae:	b920      	cbnz	r0, 80152ba <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80152b0:	1a5a      	subs	r2, r3, r1
 80152b2:	4250      	negs	r0, r2
 80152b4:	4150      	adcs	r0, r2
 80152b6:	699b      	ldr	r3, [r3, #24]
 80152b8:	e7f8      	b.n	80152ac <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80152ba:	4770      	bx	lr

080152bc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80152bc:	2300      	movs	r3, #0
 80152be:	6148      	str	r0, [r1, #20]
 80152c0:	618b      	str	r3, [r1, #24]
 80152c2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80152c4:	b913      	cbnz	r3, 80152cc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80152c6:	6281      	str	r1, [r0, #40]	@ 0x28
 80152c8:	4770      	bx	lr
 80152ca:	4613      	mov	r3, r2
 80152cc:	699a      	ldr	r2, [r3, #24]
 80152ce:	2a00      	cmp	r2, #0
 80152d0:	d1fb      	bne.n	80152ca <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80152d2:	6199      	str	r1, [r3, #24]
 80152d4:	4770      	bx	lr

080152d6 <_ZN8touchgfx9Container9removeAllEv>:
 80152d6:	2200      	movs	r2, #0
 80152d8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80152da:	b123      	cbz	r3, 80152e6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80152dc:	6999      	ldr	r1, [r3, #24]
 80152de:	6281      	str	r1, [r0, #40]	@ 0x28
 80152e0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80152e4:	e7f8      	b.n	80152d8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80152e6:	4770      	bx	lr

080152e8 <_ZN8touchgfx9Container6unlinkEv>:
 80152e8:	2300      	movs	r3, #0
 80152ea:	6283      	str	r3, [r0, #40]	@ 0x28
 80152ec:	4770      	bx	lr

080152ee <_ZNK8touchgfx9Container12getSolidRectEv>:
 80152ee:	2200      	movs	r2, #0
 80152f0:	8002      	strh	r2, [r0, #0]
 80152f2:	8042      	strh	r2, [r0, #2]
 80152f4:	8082      	strh	r2, [r0, #4]
 80152f6:	80c2      	strh	r2, [r0, #6]
 80152f8:	4770      	bx	lr

080152fa <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80152fa:	b570      	push	{r4, r5, r6, lr}
 80152fc:	460d      	mov	r5, r1
 80152fe:	4616      	mov	r6, r2
 8015300:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8015302:	b13c      	cbz	r4, 8015314 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8015304:	6823      	ldr	r3, [r4, #0]
 8015306:	4620      	mov	r0, r4
 8015308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801530a:	4632      	mov	r2, r6
 801530c:	4629      	mov	r1, r5
 801530e:	4798      	blx	r3
 8015310:	69a4      	ldr	r4, [r4, #24]
 8015312:	e7f6      	b.n	8015302 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8015314:	bd70      	pop	{r4, r5, r6, pc}

08015316 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8015316:	b538      	push	{r3, r4, r5, lr}
 8015318:	460d      	mov	r5, r1
 801531a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801531c:	b134      	cbz	r4, 801532c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801531e:	682b      	ldr	r3, [r5, #0]
 8015320:	4621      	mov	r1, r4
 8015322:	689b      	ldr	r3, [r3, #8]
 8015324:	4628      	mov	r0, r5
 8015326:	4798      	blx	r3
 8015328:	69a4      	ldr	r4, [r4, #24]
 801532a:	e7f7      	b.n	801531c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 801532c:	bd38      	pop	{r3, r4, r5, pc}

0801532e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801532e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8015330:	b19b      	cbz	r3, 801535a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015332:	428b      	cmp	r3, r1
 8015334:	d109      	bne.n	801534a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015336:	2100      	movs	r1, #0
 8015338:	699a      	ldr	r2, [r3, #24]
 801533a:	6159      	str	r1, [r3, #20]
 801533c:	6282      	str	r2, [r0, #40]	@ 0x28
 801533e:	b902      	cbnz	r2, 8015342 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015340:	4770      	bx	lr
 8015342:	6199      	str	r1, [r3, #24]
 8015344:	4770      	bx	lr
 8015346:	4613      	mov	r3, r2
 8015348:	b13a      	cbz	r2, 801535a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801534a:	699a      	ldr	r2, [r3, #24]
 801534c:	428a      	cmp	r2, r1
 801534e:	d1fa      	bne.n	8015346 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015350:	698a      	ldr	r2, [r1, #24]
 8015352:	619a      	str	r2, [r3, #24]
 8015354:	2300      	movs	r3, #0
 8015356:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801535a:	4770      	bx	lr

0801535c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801535c:	b410      	push	{r4}
 801535e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8015360:	4604      	mov	r4, r0
 8015362:	b92b      	cbnz	r3, 8015370 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015364:	6803      	ldr	r3, [r0, #0]
 8015366:	4611      	mov	r1, r2
 8015368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801536a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801536e:	4718      	bx	r3
 8015370:	b941      	cbnz	r1, 8015384 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015372:	6193      	str	r3, [r2, #24]
 8015374:	6282      	str	r2, [r0, #40]	@ 0x28
 8015376:	6154      	str	r4, [r2, #20]
 8015378:	f85d 4b04 	ldr.w	r4, [sp], #4
 801537c:	4770      	bx	lr
 801537e:	4603      	mov	r3, r0
 8015380:	2800      	cmp	r0, #0
 8015382:	d0f9      	beq.n	8015378 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015384:	4299      	cmp	r1, r3
 8015386:	6998      	ldr	r0, [r3, #24]
 8015388:	d1f9      	bne.n	801537e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801538a:	6190      	str	r0, [r2, #24]
 801538c:	618a      	str	r2, [r1, #24]
 801538e:	e7f2      	b.n	8015376 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08015390 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015394:	461f      	mov	r7, r3
 8015396:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 801539a:	460d      	mov	r5, r1
 801539c:	4616      	mov	r6, r2
 801539e:	b103      	cbz	r3, 80153a2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80153a0:	6038      	str	r0, [r7, #0]
 80153a2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80153a4:	b314      	cbz	r4, 80153ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80153a6:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80153aa:	b1eb      	cbz	r3, 80153e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153ac:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80153b0:	428d      	cmp	r5, r1
 80153b2:	db19      	blt.n	80153e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153b4:	8923      	ldrh	r3, [r4, #8]
 80153b6:	b289      	uxth	r1, r1
 80153b8:	440b      	add	r3, r1
 80153ba:	b21b      	sxth	r3, r3
 80153bc:	429d      	cmp	r5, r3
 80153be:	da13      	bge.n	80153e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153c0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80153c4:	4296      	cmp	r6, r2
 80153c6:	db0f      	blt.n	80153e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153c8:	8963      	ldrh	r3, [r4, #10]
 80153ca:	b292      	uxth	r2, r2
 80153cc:	4413      	add	r3, r2
 80153ce:	b21b      	sxth	r3, r3
 80153d0:	429e      	cmp	r6, r3
 80153d2:	da09      	bge.n	80153e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153d4:	6823      	ldr	r3, [r4, #0]
 80153d6:	1ab2      	subs	r2, r6, r2
 80153d8:	1a69      	subs	r1, r5, r1
 80153da:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 80153de:	b212      	sxth	r2, r2
 80153e0:	463b      	mov	r3, r7
 80153e2:	b209      	sxth	r1, r1
 80153e4:	4620      	mov	r0, r4
 80153e6:	47c0      	blx	r8
 80153e8:	69a4      	ldr	r4, [r4, #24]
 80153ea:	e7db      	b.n	80153a4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80153ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080153f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80153f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153f4:	4c6c      	ldr	r4, [pc, #432]	@ (80155a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 80153f6:	b0a1      	sub	sp, #132	@ 0x84
 80153f8:	6824      	ldr	r4, [r4, #0]
 80153fa:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 80153fc:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8015400:	2400      	movs	r4, #0
 8015402:	802c      	strh	r4, [r5, #0]
 8015404:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8015406:	4606      	mov	r6, r0
 8015408:	802c      	strh	r4, [r5, #0]
 801540a:	601c      	str	r4, [r3, #0]
 801540c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8015410:	9303      	str	r3, [sp, #12]
 8015412:	f7ff ffbd 	bl	8015390 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015416:	f1b9 0f03 	cmp.w	r9, #3
 801541a:	f340 80bf 	ble.w	801559c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 801541e:	4631      	mov	r1, r6
 8015420:	a80c      	add	r0, sp, #48	@ 0x30
 8015422:	f006 fb4f 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015426:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801542a:	9306      	str	r3, [sp, #24]
 801542c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8015430:	9307      	str	r3, [sp, #28]
 8015432:	9b03      	ldr	r3, [sp, #12]
 8015434:	f8d3 a000 	ldr.w	sl, [r3]
 8015438:	f1ba 0f00 	cmp.w	sl, #0
 801543c:	f000 80b1 	beq.w	80155a2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8015440:	4651      	mov	r1, sl
 8015442:	a810      	add	r0, sp, #64	@ 0x40
 8015444:	f006 fb3e 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015448:	2002      	movs	r0, #2
 801544a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 801544e:	9b01      	ldr	r3, [sp, #4]
 8015450:	fb91 f1f0 	sdiv	r1, r1, r0
 8015454:	9a06      	ldr	r2, [sp, #24]
 8015456:	189d      	adds	r5, r3, r2
 8015458:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 801545c:	9a07      	ldr	r2, [sp, #28]
 801545e:	4419      	add	r1, r3
 8015460:	9b02      	ldr	r3, [sp, #8]
 8015462:	1a6d      	subs	r5, r5, r1
 8015464:	4413      	add	r3, r2
 8015466:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 801546a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 801546e:	fb92 f2f0 	sdiv	r2, r2, r0
 8015472:	440a      	add	r2, r1
 8015474:	1a9b      	subs	r3, r3, r2
 8015476:	435b      	muls	r3, r3
 8015478:	fb05 3505 	mla	r5, r5, r5, r3
 801547c:	4f4b      	ldr	r7, [pc, #300]	@ (80155ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801547e:	ac10      	add	r4, sp, #64	@ 0x40
 8015480:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015484:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015486:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015488:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801548a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801548c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8015490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015494:	2303      	movs	r3, #3
 8015496:	f1b9 0f0c 	cmp.w	r9, #12
 801549a:	bfda      	itte	le
 801549c:	f109 32ff 	addle.w	r2, r9, #4294967295
 80154a0:	fb92 f8f3 	sdivle	r8, r2, r3
 80154a4:	4698      	movgt	r8, r3
 80154a6:	2400      	movs	r4, #0
 80154a8:	f8cd 9000 	str.w	r9, [sp]
 80154ac:	1c63      	adds	r3, r4, #1
 80154ae:	9308      	str	r3, [sp, #32]
 80154b0:	9b00      	ldr	r3, [sp, #0]
 80154b2:	f04f 0b00 	mov.w	fp, #0
 80154b6:	fb93 f3f8 	sdiv	r3, r3, r8
 80154ba:	f004 0401 	and.w	r4, r4, #1
 80154be:	aa10      	add	r2, sp, #64	@ 0x40
 80154c0:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	3404      	adds	r4, #4
 80154c8:	9304      	str	r3, [sp, #16]
 80154ca:	9a04      	ldr	r2, [sp, #16]
 80154cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80154d0:	fb13 f302 	smulbb	r3, r3, r2
 80154d4:	9a01      	ldr	r2, [sp, #4]
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	1899      	adds	r1, r3, r2
 80154da:	9305      	str	r3, [sp, #20]
 80154dc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80154e0:	b209      	sxth	r1, r1
 80154e2:	4299      	cmp	r1, r3
 80154e4:	db4d      	blt.n	8015582 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80154e6:	8932      	ldrh	r2, [r6, #8]
 80154e8:	4413      	add	r3, r2
 80154ea:	b21b      	sxth	r3, r3
 80154ec:	4299      	cmp	r1, r3
 80154ee:	da48      	bge.n	8015582 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80154f0:	9b04      	ldr	r3, [sp, #16]
 80154f2:	6827      	ldr	r7, [r4, #0]
 80154f4:	fb17 f703 	smulbb	r7, r7, r3
 80154f8:	9b02      	ldr	r3, [sp, #8]
 80154fa:	b2bf      	uxth	r7, r7
 80154fc:	18fa      	adds	r2, r7, r3
 80154fe:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015502:	b212      	sxth	r2, r2
 8015504:	429a      	cmp	r2, r3
 8015506:	db3c      	blt.n	8015582 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015508:	8970      	ldrh	r0, [r6, #10]
 801550a:	4403      	add	r3, r0
 801550c:	b21b      	sxth	r3, r3
 801550e:	429a      	cmp	r2, r3
 8015510:	da37      	bge.n	8015582 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015512:	2300      	movs	r3, #0
 8015514:	4630      	mov	r0, r6
 8015516:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015518:	ab0b      	add	r3, sp, #44	@ 0x2c
 801551a:	f7ff ff39 	bl	8015390 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801551e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015520:	b37a      	cbz	r2, 8015582 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015522:	4552      	cmp	r2, sl
 8015524:	d02d      	beq.n	8015582 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8015526:	4611      	mov	r1, r2
 8015528:	a80e      	add	r0, sp, #56	@ 0x38
 801552a:	9209      	str	r2, [sp, #36]	@ 0x24
 801552c:	f006 faca 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015530:	f04f 0e02 	mov.w	lr, #2
 8015534:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8015538:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 801553c:	fb91 f1fe 	sdiv	r1, r1, lr
 8015540:	fb9c fcfe 	sdiv	ip, ip, lr
 8015544:	9a06      	ldr	r2, [sp, #24]
 8015546:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 801554a:	9b01      	ldr	r3, [sp, #4]
 801554c:	4401      	add	r1, r0
 801554e:	4413      	add	r3, r2
 8015550:	1a58      	subs	r0, r3, r1
 8015552:	9a07      	ldr	r2, [sp, #28]
 8015554:	9b02      	ldr	r3, [sp, #8]
 8015556:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 801555a:	4413      	add	r3, r2
 801555c:	448c      	add	ip, r1
 801555e:	eba3 030c 	sub.w	r3, r3, ip
 8015562:	435b      	muls	r3, r3
 8015564:	fb00 3300 	mla	r3, r0, r0, r3
 8015568:	42ab      	cmp	r3, r5
 801556a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801556c:	d208      	bcs.n	8015580 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 801556e:	461d      	mov	r5, r3
 8015570:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015572:	9803      	ldr	r0, [sp, #12]
 8015574:	6001      	str	r1, [r0, #0]
 8015576:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8015578:	9805      	ldr	r0, [sp, #20]
 801557a:	8008      	strh	r0, [r1, #0]
 801557c:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801557e:	800f      	strh	r7, [r1, #0]
 8015580:	4692      	mov	sl, r2
 8015582:	f10b 0b01 	add.w	fp, fp, #1
 8015586:	f1bb 0f04 	cmp.w	fp, #4
 801558a:	f104 0408 	add.w	r4, r4, #8
 801558e:	d19c      	bne.n	80154ca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 8015590:	9b00      	ldr	r3, [sp, #0]
 8015592:	9c08      	ldr	r4, [sp, #32]
 8015594:	444b      	add	r3, r9
 8015596:	4544      	cmp	r4, r8
 8015598:	9300      	str	r3, [sp, #0]
 801559a:	d187      	bne.n	80154ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 801559c:	b021      	add	sp, #132	@ 0x84
 801559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155a2:	f04f 35ff 	mov.w	r5, #4294967295
 80155a6:	e769      	b.n	801547c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80155a8:	20012104 	.word	0x20012104
 80155ac:	0802ec48 	.word	0x0802ec48

080155b0 <_ZN8touchgfx4RectaNERKS0_>:
 80155b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155b4:	f9b1 7000 	ldrsh.w	r7, [r1]
 80155b8:	888c      	ldrh	r4, [r1, #4]
 80155ba:	f9b0 9000 	ldrsh.w	r9, [r0]
 80155be:	443c      	add	r4, r7
 80155c0:	b2a4      	uxth	r4, r4
 80155c2:	fa0f f884 	sxth.w	r8, r4
 80155c6:	45c1      	cmp	r9, r8
 80155c8:	da2f      	bge.n	801562a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80155ca:	8882      	ldrh	r2, [r0, #4]
 80155cc:	444a      	add	r2, r9
 80155ce:	b292      	uxth	r2, r2
 80155d0:	fa0f fe82 	sxth.w	lr, r2
 80155d4:	4577      	cmp	r7, lr
 80155d6:	da28      	bge.n	801562a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80155d8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80155dc:	88cb      	ldrh	r3, [r1, #6]
 80155de:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80155e2:	442b      	add	r3, r5
 80155e4:	b21b      	sxth	r3, r3
 80155e6:	429e      	cmp	r6, r3
 80155e8:	da1f      	bge.n	801562a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80155ea:	88c3      	ldrh	r3, [r0, #6]
 80155ec:	4433      	add	r3, r6
 80155ee:	b29b      	uxth	r3, r3
 80155f0:	fa0f fc83 	sxth.w	ip, r3
 80155f4:	4565      	cmp	r5, ip
 80155f6:	da18      	bge.n	801562a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80155f8:	454f      	cmp	r7, r9
 80155fa:	bfb8      	it	lt
 80155fc:	464f      	movlt	r7, r9
 80155fe:	42b5      	cmp	r5, r6
 8015600:	bfb8      	it	lt
 8015602:	4635      	movlt	r5, r6
 8015604:	45f0      	cmp	r8, lr
 8015606:	bfd8      	it	le
 8015608:	4622      	movle	r2, r4
 801560a:	1bd2      	subs	r2, r2, r7
 801560c:	8082      	strh	r2, [r0, #4]
 801560e:	884a      	ldrh	r2, [r1, #2]
 8015610:	88c9      	ldrh	r1, [r1, #6]
 8015612:	8007      	strh	r7, [r0, #0]
 8015614:	440a      	add	r2, r1
 8015616:	b292      	uxth	r2, r2
 8015618:	b211      	sxth	r1, r2
 801561a:	458c      	cmp	ip, r1
 801561c:	bfa8      	it	ge
 801561e:	4613      	movge	r3, r2
 8015620:	1b5b      	subs	r3, r3, r5
 8015622:	80c3      	strh	r3, [r0, #6]
 8015624:	8045      	strh	r5, [r0, #2]
 8015626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801562a:	2300      	movs	r3, #0
 801562c:	8003      	strh	r3, [r0, #0]
 801562e:	8043      	strh	r3, [r0, #2]
 8015630:	8083      	strh	r3, [r0, #4]
 8015632:	80c3      	strh	r3, [r0, #6]
 8015634:	e7f7      	b.n	8015626 <_ZN8touchgfx4RectaNERKS0_+0x76>

08015636 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8015636:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801563a:	2b00      	cmp	r3, #0
 801563c:	dd06      	ble.n	801564c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801563e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015642:	2800      	cmp	r0, #0
 8015644:	bfcc      	ite	gt
 8015646:	2000      	movgt	r0, #0
 8015648:	2001      	movle	r0, #1
 801564a:	4770      	bx	lr
 801564c:	2001      	movs	r0, #1
 801564e:	4770      	bx	lr

08015650 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015650:	2300      	movs	r3, #0
 8015652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015656:	4604      	mov	r4, r0
 8015658:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801565a:	8003      	strh	r3, [r0, #0]
 801565c:	8043      	strh	r3, [r0, #2]
 801565e:	8083      	strh	r3, [r0, #4]
 8015660:	80c3      	strh	r3, [r0, #6]
 8015662:	2d00      	cmp	r5, #0
 8015664:	d040      	beq.n	80156e8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8015666:	1d28      	adds	r0, r5, #4
 8015668:	f7ff ffe5 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801566c:	b988      	cbnz	r0, 8015692 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801566e:	4620      	mov	r0, r4
 8015670:	f7ff ffe1 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015674:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8015678:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801567c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015680:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015684:	b138      	cbz	r0, 8015696 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8015686:	8022      	strh	r2, [r4, #0]
 8015688:	8063      	strh	r3, [r4, #2]
 801568a:	f8a4 e004 	strh.w	lr, [r4, #4]
 801568e:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015692:	69ad      	ldr	r5, [r5, #24]
 8015694:	e7e5      	b.n	8015662 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8015696:	f9b4 0000 	ldrsh.w	r0, [r4]
 801569a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801569e:	4290      	cmp	r0, r2
 80156a0:	4607      	mov	r7, r0
 80156a2:	bfa8      	it	ge
 80156a4:	4617      	movge	r7, r2
 80156a6:	4299      	cmp	r1, r3
 80156a8:	460e      	mov	r6, r1
 80156aa:	bfa8      	it	ge
 80156ac:	461e      	movge	r6, r3
 80156ae:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80156b2:	4472      	add	r2, lr
 80156b4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80156b8:	4440      	add	r0, r8
 80156ba:	4471      	add	r1, lr
 80156bc:	4463      	add	r3, ip
 80156be:	b200      	sxth	r0, r0
 80156c0:	b212      	sxth	r2, r2
 80156c2:	b209      	sxth	r1, r1
 80156c4:	b21b      	sxth	r3, r3
 80156c6:	4290      	cmp	r0, r2
 80156c8:	bfac      	ite	ge
 80156ca:	ebc7 0200 	rsbge	r2, r7, r0
 80156ce:	ebc7 0202 	rsblt	r2, r7, r2
 80156d2:	4299      	cmp	r1, r3
 80156d4:	bfac      	ite	ge
 80156d6:	ebc6 0301 	rsbge	r3, r6, r1
 80156da:	ebc6 0303 	rsblt	r3, r6, r3
 80156de:	8027      	strh	r7, [r4, #0]
 80156e0:	8066      	strh	r6, [r4, #2]
 80156e2:	80a2      	strh	r2, [r4, #4]
 80156e4:	80e3      	strh	r3, [r4, #6]
 80156e6:	e7d4      	b.n	8015692 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80156e8:	4620      	mov	r0, r4
 80156ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080156ee <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80156ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80156f2:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80156f6:	b383      	cbz	r3, 801575a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80156f8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80156fa:	b374      	cbz	r4, 801575a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80156fc:	f9b1 5000 	ldrsh.w	r5, [r1]
 8015700:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8015704:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8015708:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 801570c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8015710:	b303      	cbz	r3, 8015754 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015712:	4668      	mov	r0, sp
 8015714:	1d21      	adds	r1, r4, #4
 8015716:	f8ad 5000 	strh.w	r5, [sp]
 801571a:	f8ad 6002 	strh.w	r6, [sp, #2]
 801571e:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015722:	f8ad 8006 	strh.w	r8, [sp, #6]
 8015726:	f7ff ff43 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801572a:	4668      	mov	r0, sp
 801572c:	f7ff ff83 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015730:	b980      	cbnz	r0, 8015754 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015732:	f8bd 3000 	ldrh.w	r3, [sp]
 8015736:	88a2      	ldrh	r2, [r4, #4]
 8015738:	4669      	mov	r1, sp
 801573a:	1a9b      	subs	r3, r3, r2
 801573c:	f8ad 3000 	strh.w	r3, [sp]
 8015740:	88e2      	ldrh	r2, [r4, #6]
 8015742:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015746:	4620      	mov	r0, r4
 8015748:	1a9b      	subs	r3, r3, r2
 801574a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801574e:	6823      	ldr	r3, [r4, #0]
 8015750:	689b      	ldr	r3, [r3, #8]
 8015752:	4798      	blx	r3
 8015754:	69a4      	ldr	r4, [r4, #24]
 8015756:	2c00      	cmp	r4, #0
 8015758:	d1d8      	bne.n	801570c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801575a:	b002      	add	sp, #8
 801575c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015760 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015760:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015762:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8015766:	460d      	mov	r5, r1
 8015768:	4616      	mov	r6, r2
 801576a:	b323      	cbz	r3, 80157b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801576c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801576e:	b314      	cbz	r4, 80157b6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015770:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8015774:	b1eb      	cbz	r3, 80157b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015776:	466b      	mov	r3, sp
 8015778:	6828      	ldr	r0, [r5, #0]
 801577a:	6869      	ldr	r1, [r5, #4]
 801577c:	c303      	stmia	r3!, {r0, r1}
 801577e:	4668      	mov	r0, sp
 8015780:	1d21      	adds	r1, r4, #4
 8015782:	f7ff ff15 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 8015786:	4668      	mov	r0, sp
 8015788:	f7ff ff55 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801578c:	b988      	cbnz	r0, 80157b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801578e:	f8bd 3000 	ldrh.w	r3, [sp]
 8015792:	88a2      	ldrh	r2, [r4, #4]
 8015794:	4669      	mov	r1, sp
 8015796:	1a9b      	subs	r3, r3, r2
 8015798:	f8ad 3000 	strh.w	r3, [sp]
 801579c:	88e2      	ldrh	r2, [r4, #6]
 801579e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80157a2:	4620      	mov	r0, r4
 80157a4:	1a9b      	subs	r3, r3, r2
 80157a6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80157aa:	6823      	ldr	r3, [r4, #0]
 80157ac:	4632      	mov	r2, r6
 80157ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157b0:	4798      	blx	r3
 80157b2:	69a4      	ldr	r4, [r4, #24]
 80157b4:	e7db      	b.n	801576e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80157b6:	b002      	add	sp, #8
 80157b8:	bd70      	pop	{r4, r5, r6, pc}

080157ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80157ba:	b513      	push	{r0, r1, r4, lr}
 80157bc:	6803      	ldr	r3, [r0, #0]
 80157be:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 80157c2:	2300      	movs	r3, #0
 80157c4:	e9cd 3300 	strd	r3, r3, [sp]
 80157c8:	466b      	mov	r3, sp
 80157ca:	47a0      	blx	r4
 80157cc:	b002      	add	sp, #8
 80157ce:	bd10      	pop	{r4, pc}

080157d0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80157d0:	2301      	movs	r3, #1
 80157d2:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80157d6:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80157da:	4770      	bx	lr

080157dc <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80157dc:	2301      	movs	r3, #1
 80157de:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80157e2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80157e6:	4770      	bx	lr

080157e8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80157e8:	2201      	movs	r2, #1
 80157ea:	6843      	ldr	r3, [r0, #4]
 80157ec:	725a      	strb	r2, [r3, #9]
 80157ee:	6840      	ldr	r0, [r0, #4]
 80157f0:	6803      	ldr	r3, [r0, #0]
 80157f2:	691b      	ldr	r3, [r3, #16]
 80157f4:	4718      	bx	r3

080157f6 <_ZN8touchgfx3HAL8flushDMAEv>:
 80157f6:	6840      	ldr	r0, [r0, #4]
 80157f8:	6803      	ldr	r3, [r0, #0]
 80157fa:	689b      	ldr	r3, [r3, #8]
 80157fc:	4718      	bx	r3

080157fe <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80157fe:	b530      	push	{r4, r5, lr}
 8015800:	b08b      	sub	sp, #44	@ 0x2c
 8015802:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8015806:	6804      	ldr	r4, [r0, #0]
 8015808:	9509      	str	r5, [sp, #36]	@ 0x24
 801580a:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801580e:	9508      	str	r5, [sp, #32]
 8015810:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8015814:	9507      	str	r5, [sp, #28]
 8015816:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 801581a:	9506      	str	r5, [sp, #24]
 801581c:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8015820:	9505      	str	r5, [sp, #20]
 8015822:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8015826:	9504      	str	r5, [sp, #16]
 8015828:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 801582c:	9503      	str	r5, [sp, #12]
 801582e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8015832:	9502      	str	r5, [sp, #8]
 8015834:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8015838:	e9cd 3500 	strd	r3, r5, [sp]
 801583c:	4613      	mov	r3, r2
 801583e:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 8015840:	2200      	movs	r2, #0
 8015842:	47a0      	blx	r4
 8015844:	b00b      	add	sp, #44	@ 0x2c
 8015846:	bd30      	pop	{r4, r5, pc}

08015848 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015848:	4b04      	ldr	r3, [pc, #16]	@ (801585c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	b123      	cbz	r3, 8015858 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801584e:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 8015852:	f080 0001 	eor.w	r0, r0, #1
 8015856:	4770      	bx	lr
 8015858:	2001      	movs	r0, #1
 801585a:	4770      	bx	lr
 801585c:	20012102 	.word	0x20012102

08015860 <_ZN8touchgfx3HAL8endFrameEv>:
 8015860:	b510      	push	{r4, lr}
 8015862:	4604      	mov	r4, r0
 8015864:	6840      	ldr	r0, [r0, #4]
 8015866:	6803      	ldr	r3, [r0, #0]
 8015868:	689b      	ldr	r3, [r3, #8]
 801586a:	4798      	blx	r3
 801586c:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 8015870:	b113      	cbz	r3, 8015878 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015872:	2301      	movs	r3, #1
 8015874:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8015878:	bd10      	pop	{r4, pc}

0801587a <_ZN8touchgfx3HAL10initializeEv>:
 801587a:	b510      	push	{r4, lr}
 801587c:	4604      	mov	r4, r0
 801587e:	f7fd ffb9 	bl	80137f4 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015882:	f7fd fcff 	bl	8013284 <_ZN8touchgfx4GPIO4initEv>
 8015886:	6860      	ldr	r0, [r4, #4]
 8015888:	6803      	ldr	r3, [r0, #0]
 801588a:	68db      	ldr	r3, [r3, #12]
 801588c:	4798      	blx	r3
 801588e:	68e0      	ldr	r0, [r4, #12]
 8015890:	6803      	ldr	r3, [r0, #0]
 8015892:	689b      	ldr	r3, [r3, #8]
 8015894:	4798      	blx	r3
 8015896:	6823      	ldr	r3, [r4, #0]
 8015898:	4620      	mov	r0, r4
 801589a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801589e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158a0:	4718      	bx	r3

080158a2 <_ZN8touchgfx3HAL9taskEntryEv>:
 80158a2:	4604      	mov	r4, r0
 80158a4:	b508      	push	{r3, lr}
 80158a6:	6803      	ldr	r3, [r0, #0]
 80158a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80158ac:	4798      	blx	r3
 80158ae:	6823      	ldr	r3, [r4, #0]
 80158b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158b2:	4620      	mov	r0, r4
 80158b4:	4798      	blx	r3
 80158b6:	f7fe f813 	bl	80138e0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80158ba:	6823      	ldr	r3, [r4, #0]
 80158bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158be:	e7f8      	b.n	80158b2 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080158c0 <_ZN8touchgfx3HAL4tickEv>:
 80158c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80158c2:	6803      	ldr	r3, [r0, #0]
 80158c4:	4604      	mov	r4, r0
 80158c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80158ca:	4798      	blx	r3
 80158cc:	4d59      	ldr	r5, [pc, #356]	@ (8015a34 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80158ce:	2800      	cmp	r0, #0
 80158d0:	f000 8095 	beq.w	80159fe <_ZN8touchgfx3HAL4tickEv+0x13e>
 80158d4:	2600      	movs	r6, #0
 80158d6:	2001      	movs	r0, #1
 80158d8:	f7fd fcdc 	bl	8013294 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80158dc:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 80158e0:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80158e4:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80158e8:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 80158ec:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 80158f0:	b133      	cbz	r3, 8015900 <_ZN8touchgfx3HAL4tickEv+0x40>
 80158f2:	6823      	ldr	r3, [r4, #0]
 80158f4:	4620      	mov	r0, r4
 80158f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80158fa:	4798      	blx	r3
 80158fc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8015900:	2601      	movs	r6, #1
 8015902:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8015906:	6862      	ldr	r2, [r4, #4]
 8015908:	f083 0301 	eor.w	r3, r3, #1
 801590c:	7253      	strb	r3, [r2, #9]
 801590e:	702e      	strb	r6, [r5, #0]
 8015910:	f004 ffc6 	bl	801a8a0 <_ZN8touchgfx11Application11getInstanceEv>
 8015914:	6803      	ldr	r3, [r0, #0]
 8015916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015918:	4798      	blx	r3
 801591a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801591e:	b90b      	cbnz	r3, 8015924 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015920:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 8015924:	f004 ffbc 	bl	801a8a0 <_ZN8touchgfx11Application11getInstanceEv>
 8015928:	6803      	ldr	r3, [r0, #0]
 801592a:	695b      	ldr	r3, [r3, #20]
 801592c:	4798      	blx	r3
 801592e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015930:	6803      	ldr	r3, [r0, #0]
 8015932:	691b      	ldr	r3, [r3, #16]
 8015934:	4798      	blx	r3
 8015936:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 801593a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 801593e:	3b01      	subs	r3, #1
 8015940:	b2db      	uxtb	r3, r3
 8015942:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8015946:	b10a      	cbz	r2, 801594c <_ZN8touchgfx3HAL4tickEv+0x8c>
 8015948:	2b00      	cmp	r3, #0
 801594a:	d1eb      	bne.n	8015924 <_ZN8touchgfx3HAL4tickEv+0x64>
 801594c:	4a3a      	ldr	r2, [pc, #232]	@ (8015a38 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801594e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8015952:	7813      	ldrb	r3, [r2, #0]
 8015954:	3301      	adds	r3, #1
 8015956:	b25b      	sxtb	r3, r3
 8015958:	4299      	cmp	r1, r3
 801595a:	7013      	strb	r3, [r2, #0]
 801595c:	dc10      	bgt.n	8015980 <_ZN8touchgfx3HAL4tickEv+0xc0>
 801595e:	2300      	movs	r3, #0
 8015960:	68e0      	ldr	r0, [r4, #12]
 8015962:	7013      	strb	r3, [r2, #0]
 8015964:	6803      	ldr	r3, [r0, #0]
 8015966:	aa03      	add	r2, sp, #12
 8015968:	68db      	ldr	r3, [r3, #12]
 801596a:	a902      	add	r1, sp, #8
 801596c:	4798      	blx	r3
 801596e:	6823      	ldr	r3, [r4, #0]
 8015970:	2800      	cmp	r0, #0
 8015972:	d050      	beq.n	8015a16 <_ZN8touchgfx3HAL4tickEv+0x156>
 8015974:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8015978:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801597c:	4620      	mov	r0, r4
 801597e:	4798      	blx	r3
 8015980:	2300      	movs	r3, #0
 8015982:	6960      	ldr	r0, [r4, #20]
 8015984:	f88d 3007 	strb.w	r3, [sp, #7]
 8015988:	b158      	cbz	r0, 80159a2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 801598a:	6803      	ldr	r3, [r0, #0]
 801598c:	f10d 0107 	add.w	r1, sp, #7
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	4798      	blx	r3
 8015994:	b128      	cbz	r0, 80159a2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015996:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8015998:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801599c:	6803      	ldr	r3, [r0, #0]
 801599e:	68db      	ldr	r3, [r3, #12]
 80159a0:	4798      	blx	r3
 80159a2:	f104 001c 	add.w	r0, r4, #28
 80159a6:	f016 fac3 	bl	802bf30 <_ZN8touchgfx8Gestures4tickEv>
 80159aa:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80159ae:	b30b      	cbz	r3, 80159f4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80159b0:	6920      	ldr	r0, [r4, #16]
 80159b2:	6803      	ldr	r3, [r0, #0]
 80159b4:	691b      	ldr	r3, [r3, #16]
 80159b6:	4798      	blx	r3
 80159b8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80159ba:	4606      	mov	r6, r0
 80159bc:	b903      	cbnz	r3, 80159c0 <_ZN8touchgfx3HAL4tickEv+0x100>
 80159be:	6760      	str	r0, [r4, #116]	@ 0x74
 80159c0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80159c2:	4a1e      	ldr	r2, [pc, #120]	@ (8015a3c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80159c4:	1af3      	subs	r3, r6, r3
 80159c6:	4293      	cmp	r3, r2
 80159c8:	d914      	bls.n	80159f4 <_ZN8touchgfx3HAL4tickEv+0x134>
 80159ca:	6920      	ldr	r0, [r4, #16]
 80159cc:	6803      	ldr	r3, [r0, #0]
 80159ce:	699b      	ldr	r3, [r3, #24]
 80159d0:	4798      	blx	r3
 80159d2:	2264      	movs	r2, #100	@ 0x64
 80159d4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80159d6:	1af3      	subs	r3, r6, r3
 80159d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80159dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80159e0:	2800      	cmp	r0, #0
 80159e2:	dc1d      	bgt.n	8015a20 <_ZN8touchgfx3HAL4tickEv+0x160>
 80159e4:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 80159e8:	6920      	ldr	r0, [r4, #16]
 80159ea:	2100      	movs	r1, #0
 80159ec:	6803      	ldr	r3, [r0, #0]
 80159ee:	69db      	ldr	r3, [r3, #28]
 80159f0:	4798      	blx	r3
 80159f2:	6766      	str	r6, [r4, #116]	@ 0x74
 80159f4:	f004 ff54 	bl	801a8a0 <_ZN8touchgfx11Application11getInstanceEv>
 80159f8:	6803      	ldr	r3, [r0, #0]
 80159fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80159fc:	4798      	blx	r3
 80159fe:	6823      	ldr	r3, [r4, #0]
 8015a00:	4620      	mov	r0, r4
 8015a02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8015a06:	4798      	blx	r3
 8015a08:	2001      	movs	r0, #1
 8015a0a:	f7fd fc5f 	bl	80132cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015a0e:	2300      	movs	r3, #0
 8015a10:	702b      	strb	r3, [r5, #0]
 8015a12:	b004      	add	sp, #16
 8015a14:	bd70      	pop	{r4, r5, r6, pc}
 8015a16:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	4798      	blx	r3
 8015a1e:	e7af      	b.n	8015980 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015a20:	2863      	cmp	r0, #99	@ 0x63
 8015a22:	bfcb      	itete	gt
 8015a24:	2300      	movgt	r3, #0
 8015a26:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8015a2a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8015a2e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 8015a32:	e7d9      	b.n	80159e8 <_ZN8touchgfx3HAL4tickEv+0x128>
 8015a34:	20012108 	.word	0x20012108
 8015a38:	20012109 	.word	0x20012109
 8015a3c:	05f5e100 	.word	0x05f5e100

08015a40 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015a40:	b510      	push	{r4, lr}
 8015a42:	4604      	mov	r4, r0
 8015a44:	f7fd ff18 	bl	8013878 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8015a48:	2200      	movs	r2, #0
 8015a4a:	6863      	ldr	r3, [r4, #4]
 8015a4c:	729a      	strb	r2, [r3, #10]
 8015a4e:	bd10      	pop	{r4, pc}

08015a50 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015a50:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8015a52:	301c      	adds	r0, #28
 8015a54:	f016 ba6a 	b.w	802bf2c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015a58 <_ZN8touchgfx3HAL5touchEll>:
 8015a58:	b530      	push	{r4, r5, lr}
 8015a5a:	4604      	mov	r4, r0
 8015a5c:	b087      	sub	sp, #28
 8015a5e:	a804      	add	r0, sp, #16
 8015a60:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015a64:	f004 fd54 	bl	801a510 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015a68:	9b04      	ldr	r3, [sp, #16]
 8015a6a:	a906      	add	r1, sp, #24
 8015a6c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015a70:	9b05      	ldr	r3, [sp, #20]
 8015a72:	a803      	add	r0, sp, #12
 8015a74:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015a78:	f004 fd9c 	bl	801a5b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015a7c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8015a80:	f104 001c 	add.w	r0, r4, #28
 8015a84:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015a88:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015a8c:	b189      	cbz	r1, 8015ab2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015a8e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8015a92:	9300      	str	r3, [sp, #0]
 8015a94:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8015a98:	4613      	mov	r3, r2
 8015a9a:	462a      	mov	r2, r5
 8015a9c:	f016 fa56 	bl	802bf4c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015aa0:	b128      	cbz	r0, 8015aae <_ZN8touchgfx3HAL5touchEll+0x56>
 8015aa2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015aa6:	6623      	str	r3, [r4, #96]	@ 0x60
 8015aa8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015aac:	6663      	str	r3, [r4, #100]	@ 0x64
 8015aae:	b007      	add	sp, #28
 8015ab0:	bd30      	pop	{r4, r5, pc}
 8015ab2:	f016 fa8b 	bl	802bfcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015ab6:	2301      	movs	r3, #1
 8015ab8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8015abc:	e7f1      	b.n	8015aa2 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015abe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015abe:	b510      	push	{r4, lr}
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d046      	beq.n	8015b52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015ac4:	ea81 0002 	eor.w	r0, r1, r2
 8015ac8:	07c4      	lsls	r4, r0, #31
 8015aca:	d508      	bpl.n	8015ade <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015acc:	440b      	add	r3, r1
 8015ace:	3a01      	subs	r2, #1
 8015ad0:	428b      	cmp	r3, r1
 8015ad2:	d93e      	bls.n	8015b52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015ad4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015ad8:	f801 0b01 	strb.w	r0, [r1], #1
 8015adc:	e7f8      	b.n	8015ad0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015ade:	07d0      	lsls	r0, r2, #31
 8015ae0:	bf42      	ittt	mi
 8015ae2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015ae6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015aea:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	d911      	bls.n	8015b16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015af2:	ea81 0402 	eor.w	r4, r1, r2
 8015af6:	07a4      	lsls	r4, r4, #30
 8015af8:	4610      	mov	r0, r2
 8015afa:	d022      	beq.n	8015b42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015afc:	f023 0401 	bic.w	r4, r3, #1
 8015b00:	440c      	add	r4, r1
 8015b02:	428c      	cmp	r4, r1
 8015b04:	4602      	mov	r2, r0
 8015b06:	d904      	bls.n	8015b12 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015b08:	8812      	ldrh	r2, [r2, #0]
 8015b0a:	3002      	adds	r0, #2
 8015b0c:	f821 2b02 	strh.w	r2, [r1], #2
 8015b10:	e7f7      	b.n	8015b02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8015b12:	f003 0301 	and.w	r3, r3, #1
 8015b16:	f023 0003 	bic.w	r0, r3, #3
 8015b1a:	4408      	add	r0, r1
 8015b1c:	4288      	cmp	r0, r1
 8015b1e:	4614      	mov	r4, r2
 8015b20:	d904      	bls.n	8015b2c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8015b22:	6824      	ldr	r4, [r4, #0]
 8015b24:	3204      	adds	r2, #4
 8015b26:	f841 4b04 	str.w	r4, [r1], #4
 8015b2a:	e7f7      	b.n	8015b1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015b2c:	f003 0303 	and.w	r3, r3, #3
 8015b30:	440b      	add	r3, r1
 8015b32:	3a01      	subs	r2, #1
 8015b34:	428b      	cmp	r3, r1
 8015b36:	d90c      	bls.n	8015b52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015b38:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015b3c:	f801 0b01 	strb.w	r0, [r1], #1
 8015b40:	e7f8      	b.n	8015b34 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8015b42:	0790      	lsls	r0, r2, #30
 8015b44:	d0e7      	beq.n	8015b16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015b46:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015b4a:	3b02      	subs	r3, #2
 8015b4c:	f821 0b02 	strh.w	r0, [r1], #2
 8015b50:	e7e1      	b.n	8015b16 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015b52:	2001      	movs	r0, #1
 8015b54:	bd10      	pop	{r4, pc}

08015b56 <_ZN8touchgfx3HAL7noTouchEv>:
 8015b56:	b510      	push	{r4, lr}
 8015b58:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 8015b5c:	4604      	mov	r4, r0
 8015b5e:	b153      	cbz	r3, 8015b76 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015b60:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8015b64:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8015b68:	2101      	movs	r1, #1
 8015b6a:	301c      	adds	r0, #28
 8015b6c:	f016 fa2e 	bl	802bfcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015b70:	2300      	movs	r3, #0
 8015b72:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8015b76:	bd10      	pop	{r4, pc}

08015b78 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b7c:	4604      	mov	r4, r0
 8015b7e:	2000      	movs	r0, #0
 8015b80:	b085      	sub	sp, #20
 8015b82:	ad04      	add	r5, sp, #16
 8015b84:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015b88:	69a0      	ldr	r0, [r4, #24]
 8015b8a:	4699      	mov	r9, r3
 8015b8c:	6806      	ldr	r6, [r0, #0]
 8015b8e:	9501      	str	r5, [sp, #4]
 8015b90:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8015b94:	460f      	mov	r7, r1
 8015b96:	9500      	str	r5, [sp, #0]
 8015b98:	6835      	ldr	r5, [r6, #0]
 8015b9a:	4690      	mov	r8, r2
 8015b9c:	47a8      	blx	r5
 8015b9e:	4d10      	ldr	r5, [pc, #64]	@ (8015be0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015ba0:	4606      	mov	r6, r0
 8015ba2:	f8a5 9000 	strh.w	r9, [r5]
 8015ba6:	f7f8 fd1d 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8015baa:	6803      	ldr	r3, [r0, #0]
 8015bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bae:	4798      	blx	r3
 8015bb0:	b128      	cbz	r0, 8015bbe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015bb2:	2801      	cmp	r0, #1
 8015bb4:	d00b      	beq.n	8015bce <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015bb6:	4630      	mov	r0, r6
 8015bb8:	b005      	add	sp, #20
 8015bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bbe:	882b      	ldrh	r3, [r5, #0]
 8015bc0:	fb08 7203 	mla	r2, r8, r3, r7
 8015bc4:	9b03      	ldr	r3, [sp, #12]
 8015bc6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015bca:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8015bcc:	e7f3      	b.n	8015bb6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015bce:	882a      	ldrh	r2, [r5, #0]
 8015bd0:	9b03      	ldr	r3, [sp, #12]
 8015bd2:	fb08 7202 	mla	r2, r8, r2, r7
 8015bd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015bda:	1a9a      	subs	r2, r3, r2
 8015bdc:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8015bde:	e7ea      	b.n	8015bb6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015be0:	200120fe 	.word	0x200120fe

08015be4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015be6:	b08b      	sub	sp, #44	@ 0x2c
 8015be8:	4617      	mov	r7, r2
 8015bea:	4604      	mov	r4, r0
 8015bec:	460e      	mov	r6, r1
 8015bee:	461d      	mov	r5, r3
 8015bf0:	f7f8 fcf8 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8015bf4:	6803      	ldr	r3, [r0, #0]
 8015bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bf8:	4798      	blx	r3
 8015bfa:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8015bfe:	9007      	str	r0, [sp, #28]
 8015c00:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015c04:	4b0d      	ldr	r3, [pc, #52]	@ (8015c3c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015c06:	6822      	ldr	r2, [r4, #0]
 8015c08:	881b      	ldrh	r3, [r3, #0]
 8015c0a:	4631      	mov	r1, r6
 8015c0c:	9306      	str	r3, [sp, #24]
 8015c0e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8015c12:	4620      	mov	r0, r4
 8015c14:	9305      	str	r3, [sp, #20]
 8015c16:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8015c1a:	9304      	str	r3, [sp, #16]
 8015c1c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015c20:	9303      	str	r3, [sp, #12]
 8015c22:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015c26:	9302      	str	r3, [sp, #8]
 8015c28:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015c2c:	e9cd 5300 	strd	r5, r3, [sp]
 8015c30:	463b      	mov	r3, r7
 8015c32:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 8015c34:	2200      	movs	r2, #0
 8015c36:	47a8      	blx	r5
 8015c38:	b00b      	add	sp, #44	@ 0x2c
 8015c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c3c:	200120fe 	.word	0x200120fe

08015c40 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8015c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c44:	4698      	mov	r8, r3
 8015c46:	6803      	ldr	r3, [r0, #0]
 8015c48:	b08b      	sub	sp, #44	@ 0x2c
 8015c4a:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8015c4c:	4b14      	ldr	r3, [pc, #80]	@ (8015ca0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8015c4e:	4617      	mov	r7, r2
 8015c50:	f8b3 9000 	ldrh.w	r9, [r3]
 8015c54:	460e      	mov	r6, r1
 8015c56:	4604      	mov	r4, r0
 8015c58:	f7f8 fcc4 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8015c5c:	6803      	ldr	r3, [r0, #0]
 8015c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c60:	4798      	blx	r3
 8015c62:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8015c66:	2200      	movs	r2, #0
 8015c68:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015c6c:	2302      	movs	r3, #2
 8015c6e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015c72:	2301      	movs	r3, #1
 8015c74:	9305      	str	r3, [sp, #20]
 8015c76:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8015c7a:	4631      	mov	r1, r6
 8015c7c:	9304      	str	r3, [sp, #16]
 8015c7e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8015c82:	4620      	mov	r0, r4
 8015c84:	9303      	str	r3, [sp, #12]
 8015c86:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015c8a:	9302      	str	r3, [sp, #8]
 8015c8c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015c90:	e9cd 8300 	strd	r8, r3, [sp]
 8015c94:	463b      	mov	r3, r7
 8015c96:	47a8      	blx	r5
 8015c98:	b00b      	add	sp, #44	@ 0x2c
 8015c9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c9e:	bf00      	nop
 8015ca0:	200120fe 	.word	0x200120fe

08015ca4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8015ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ca8:	4698      	mov	r8, r3
 8015caa:	6803      	ldr	r3, [r0, #0]
 8015cac:	b087      	sub	sp, #28
 8015cae:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8015cb0:	4b10      	ldr	r3, [pc, #64]	@ (8015cf4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8015cb2:	460e      	mov	r6, r1
 8015cb4:	f8b3 9000 	ldrh.w	r9, [r3]
 8015cb8:	4617      	mov	r7, r2
 8015cba:	4604      	mov	r4, r0
 8015cbc:	f7f8 fc92 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8015cc0:	6803      	ldr	r3, [r0, #0]
 8015cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cc4:	4798      	blx	r3
 8015cc6:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8015cca:	f8cd 900c 	str.w	r9, [sp, #12]
 8015cce:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8015cd2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8015cd6:	463a      	mov	r2, r7
 8015cd8:	9302      	str	r3, [sp, #8]
 8015cda:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8015cde:	4631      	mov	r1, r6
 8015ce0:	9301      	str	r3, [sp, #4]
 8015ce2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8015ce6:	4620      	mov	r0, r4
 8015ce8:	9300      	str	r3, [sp, #0]
 8015cea:	4643      	mov	r3, r8
 8015cec:	47a8      	blx	r5
 8015cee:	b007      	add	sp, #28
 8015cf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cf4:	200120fe 	.word	0x200120fe

08015cf8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	b08f      	sub	sp, #60	@ 0x3c
 8015d00:	4610      	mov	r0, r2
 8015d02:	460d      	mov	r5, r1
 8015d04:	4691      	mov	r9, r2
 8015d06:	461e      	mov	r6, r3
 8015d08:	f007 fe80 	bl	801da0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	f000 809d 	beq.w	8015e4c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8015d12:	6823      	ldr	r3, [r4, #0]
 8015d14:	4620      	mov	r0, r4
 8015d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015d18:	4798      	blx	r3
 8015d1a:	6823      	ldr	r3, [r4, #0]
 8015d1c:	f8df b190 	ldr.w	fp, [pc, #400]	@ 8015eb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8015d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d22:	4620      	mov	r0, r4
 8015d24:	4798      	blx	r3
 8015d26:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 8015eb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8015d2a:	f8bb 3000 	ldrh.w	r3, [fp]
 8015d2e:	4f5d      	ldr	r7, [pc, #372]	@ (8015ea4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015d30:	9301      	str	r3, [sp, #4]
 8015d32:	f8ba 3000 	ldrh.w	r3, [sl]
 8015d36:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8015d3a:	9302      	str	r3, [sp, #8]
 8015d3c:	883b      	ldrh	r3, [r7, #0]
 8015d3e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8015d42:	9303      	str	r3, [sp, #12]
 8015d44:	4b58      	ldr	r3, [pc, #352]	@ (8015ea8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015d46:	4640      	mov	r0, r8
 8015d48:	881a      	ldrh	r2, [r3, #0]
 8015d4a:	9305      	str	r3, [sp, #20]
 8015d4c:	9204      	str	r2, [sp, #16]
 8015d4e:	f007 fef1 	bl	801db34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d52:	8038      	strh	r0, [r7, #0]
 8015d54:	4640      	mov	r0, r8
 8015d56:	f007 ff21 	bl	801db9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015d5a:	9b05      	ldr	r3, [sp, #20]
 8015d5c:	b280      	uxth	r0, r0
 8015d5e:	8018      	strh	r0, [r3, #0]
 8015d60:	4b52      	ldr	r3, [pc, #328]	@ (8015eac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8015d62:	781b      	ldrb	r3, [r3, #0]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d174      	bne.n	8015e52 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8015d68:	883b      	ldrh	r3, [r7, #0]
 8015d6a:	f8aa 0000 	strh.w	r0, [sl]
 8015d6e:	f8ab 3000 	strh.w	r3, [fp]
 8015d72:	4648      	mov	r0, r9
 8015d74:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8015d78:	f007 fe48 	bl	801da0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8015d82:	4611      	mov	r1, r2
 8015d84:	4628      	mov	r0, r5
 8015d86:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8015d8a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015d8e:	f7f9 f9d4 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
 8015d92:	2301      	movs	r3, #1
 8015d94:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8015d98:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8015d9c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	dd5c      	ble.n	8015e5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015da4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	dd58      	ble.n	8015e5e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015dac:	462a      	mov	r2, r5
 8015dae:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015db2:	ab0a      	add	r3, sp, #40	@ 0x28
 8015db4:	6851      	ldr	r1, [r2, #4]
 8015db6:	c303      	stmia	r3!, {r0, r1}
 8015db8:	4631      	mov	r1, r6
 8015dba:	a80a      	add	r0, sp, #40	@ 0x28
 8015dbc:	f7ff fbf8 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 8015dc0:	2100      	movs	r1, #0
 8015dc2:	4b38      	ldr	r3, [pc, #224]	@ (8015ea4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015dc4:	910c      	str	r1, [sp, #48]	@ 0x30
 8015dc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015dca:	4b37      	ldr	r3, [pc, #220]	@ (8015ea8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015dcc:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8015dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dd4:	aa0a      	add	r2, sp, #40	@ 0x28
 8015dd6:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8015dda:	ab08      	add	r3, sp, #32
 8015ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015de0:	e883 0003 	stmia.w	r3, {r0, r1}
 8015de4:	4618      	mov	r0, r3
 8015de6:	a90c      	add	r1, sp, #48	@ 0x30
 8015de8:	f7ff fbe2 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 8015dec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d13c      	bne.n	8015e6c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8015df2:	2000      	movs	r0, #0
 8015df4:	2600      	movs	r6, #0
 8015df6:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8015dfa:	696b      	ldr	r3, [r5, #20]
 8015dfc:	682a      	ldr	r2, [r5, #0]
 8015dfe:	616e      	str	r6, [r5, #20]
 8015e00:	9305      	str	r3, [sp, #20]
 8015e02:	6892      	ldr	r2, [r2, #8]
 8015e04:	a908      	add	r1, sp, #32
 8015e06:	4628      	mov	r0, r5
 8015e08:	4790      	blx	r2
 8015e0a:	9b05      	ldr	r3, [sp, #20]
 8015e0c:	4652      	mov	r2, sl
 8015e0e:	616b      	str	r3, [r5, #20]
 8015e10:	4649      	mov	r1, r9
 8015e12:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8015e16:	4628      	mov	r0, r5
 8015e18:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8015e1c:	f7f9 f98d 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
 8015e20:	9a01      	ldr	r2, [sp, #4]
 8015e22:	4b23      	ldr	r3, [pc, #140]	@ (8015eb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015e24:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8015e28:	801a      	strh	r2, [r3, #0]
 8015e2a:	9a02      	ldr	r2, [sp, #8]
 8015e2c:	4b21      	ldr	r3, [pc, #132]	@ (8015eb4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015e2e:	4620      	mov	r0, r4
 8015e30:	801a      	strh	r2, [r3, #0]
 8015e32:	9a03      	ldr	r2, [sp, #12]
 8015e34:	4b1b      	ldr	r3, [pc, #108]	@ (8015ea4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015e36:	801a      	strh	r2, [r3, #0]
 8015e38:	4b1b      	ldr	r3, [pc, #108]	@ (8015ea8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015e3a:	9a04      	ldr	r2, [sp, #16]
 8015e3c:	801a      	strh	r2, [r3, #0]
 8015e3e:	6823      	ldr	r3, [r4, #0]
 8015e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e42:	4798      	blx	r3
 8015e44:	6823      	ldr	r3, [r4, #0]
 8015e46:	4620      	mov	r0, r4
 8015e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e4a:	4798      	blx	r3
 8015e4c:	b00f      	add	sp, #60	@ 0x3c
 8015e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e52:	883b      	ldrh	r3, [r7, #0]
 8015e54:	f8ab 0000 	strh.w	r0, [fp]
 8015e58:	f8aa 3000 	strh.w	r3, [sl]
 8015e5c:	e789      	b.n	8015d72 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8015e5e:	462a      	mov	r2, r5
 8015e60:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015e64:	ab0a      	add	r3, sp, #40	@ 0x28
 8015e66:	6851      	ldr	r1, [r2, #4]
 8015e68:	c303      	stmia	r3!, {r0, r1}
 8015e6a:	e7a9      	b.n	8015dc0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8015e6c:	a807      	add	r0, sp, #28
 8015e6e:	f007 ffd7 	bl	801de20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015e72:	4606      	mov	r6, r0
 8015e74:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8015e76:	6803      	ldr	r3, [r0, #0]
 8015e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e7a:	4798      	blx	r3
 8015e7c:	4286      	cmp	r6, r0
 8015e7e:	d1b8      	bne.n	8015df2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8015e80:	f7f8 fbb0 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8015e84:	6803      	ldr	r3, [r0, #0]
 8015e86:	4606      	mov	r6, r0
 8015e88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e8a:	a807      	add	r0, sp, #28
 8015e8c:	9305      	str	r3, [sp, #20]
 8015e8e:	f007 ffc7 	bl	801de20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015e92:	9b05      	ldr	r3, [sp, #20]
 8015e94:	4601      	mov	r1, r0
 8015e96:	4630      	mov	r0, r6
 8015e98:	4798      	blx	r3
 8015e9a:	f080 0001 	eor.w	r0, r0, #1
 8015e9e:	b2c0      	uxtb	r0, r0
 8015ea0:	e7a8      	b.n	8015df4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8015ea2:	bf00      	nop
 8015ea4:	200120f8 	.word	0x200120f8
 8015ea8:	200120fa 	.word	0x200120fa
 8015eac:	200120fc 	.word	0x200120fc
 8015eb0:	200120fe 	.word	0x200120fe
 8015eb4:	20012100 	.word	0x20012100

08015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015eb8:	b510      	push	{r4, lr}
 8015eba:	4b07      	ldr	r3, [pc, #28]	@ (8015ed8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	781b      	ldrb	r3, [r3, #0]
 8015ec0:	b13b      	cbz	r3, 8015ed2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015ec2:	6803      	ldr	r3, [r0, #0]
 8015ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015ec6:	4798      	blx	r3
 8015ec8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8015eca:	4283      	cmp	r3, r0
 8015ecc:	d101      	bne.n	8015ed2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015ece:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8015ed0:	bd10      	pop	{r4, pc}
 8015ed2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8015ed4:	e7fc      	b.n	8015ed0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015ed6:	bf00      	nop
 8015ed8:	20012102 	.word	0x20012102

08015edc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ee0:	461d      	mov	r5, r3
 8015ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015ee6:	2400      	movs	r4, #0
 8015ee8:	b08a      	sub	sp, #40	@ 0x28
 8015eea:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015eee:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8015ef2:	4690      	mov	r8, r2
 8015ef4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015ef8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015efc:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8015f00:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f04:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015f08:	4607      	mov	r7, r0
 8015f0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015f0e:	9404      	str	r4, [sp, #16]
 8015f10:	f88d 4020 	strb.w	r4, [sp, #32]
 8015f14:	f7ff ffd0 	bl	8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015f18:	fb06 8505 	mla	r5, r6, r5, r8
 8015f1c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	9505      	str	r5, [sp, #20]
 8015f24:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015f28:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015f2c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8015f30:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015f34:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015f38:	6803      	ldr	r3, [r0, #0]
 8015f3a:	a901      	add	r1, sp, #4
 8015f3c:	685b      	ldr	r3, [r3, #4]
 8015f3e:	4798      	blx	r3
 8015f40:	b00a      	add	sp, #40	@ 0x28
 8015f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f46 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015f46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f4a:	2400      	movs	r4, #0
 8015f4c:	461d      	mov	r5, r3
 8015f4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015f52:	4691      	mov	r9, r2
 8015f54:	b08b      	sub	sp, #44	@ 0x2c
 8015f56:	4688      	mov	r8, r1
 8015f58:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8015f5c:	4607      	mov	r7, r0
 8015f5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f62:	9404      	str	r4, [sp, #16]
 8015f64:	f7ff ffa8 	bl	8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015f68:	fb06 9505 	mla	r5, r6, r5, r9
 8015f6c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015f70:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015f74:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f78:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	9505      	str	r5, [sp, #20]
 8015f80:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f84:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015f88:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015f8c:	f8cd 8010 	str.w	r8, [sp, #16]
 8015f90:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015f94:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8015f98:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8015f9c:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8015fa0:	6803      	ldr	r3, [r0, #0]
 8015fa2:	a901      	add	r1, sp, #4
 8015fa4:	685b      	ldr	r3, [r3, #4]
 8015fa6:	4798      	blx	r3
 8015fa8:	b00b      	add	sp, #44	@ 0x2c
 8015faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015fb0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fb4:	4698      	mov	r8, r3
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	b08a      	sub	sp, #40	@ 0x28
 8015fba:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015fbe:	4606      	mov	r6, r0
 8015fc0:	2d0b      	cmp	r5, #11
 8015fc2:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8015fc6:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8015fca:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8015fce:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8015fd2:	9304      	str	r3, [sp, #16]
 8015fd4:	d137      	bne.n	8016046 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015fd6:	2380      	movs	r3, #128	@ 0x80
 8015fd8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015fdc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8015fe0:	f88d 0020 	strb.w	r0, [sp, #32]
 8015fe4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015fe8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8015fec:	4630      	mov	r0, r6
 8015fee:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015ff2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8015ff6:	9203      	str	r2, [sp, #12]
 8015ff8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015ffc:	f7ff ff5c 	bl	8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016000:	2c0b      	cmp	r4, #11
 8016002:	bf8c      	ite	hi
 8016004:	2100      	movhi	r1, #0
 8016006:	4b1b      	ldrls	r3, [pc, #108]	@ (8016074 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8016008:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801600c:	bf98      	it	ls
 801600e:	5d19      	ldrbls	r1, [r3, r4]
 8016010:	fb02 8307 	mla	r3, r2, r7, r8
 8016014:	10c9      	asrs	r1, r1, #3
 8016016:	fb01 0003 	mla	r0, r1, r3, r0
 801601a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 801601e:	9005      	str	r0, [sp, #20]
 8016020:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8016024:	2300      	movs	r3, #0
 8016026:	6870      	ldr	r0, [r6, #4]
 8016028:	f8ad 701e 	strh.w	r7, [sp, #30]
 801602c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8016030:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8016034:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8016038:	6803      	ldr	r3, [r0, #0]
 801603a:	a901      	add	r1, sp, #4
 801603c:	685b      	ldr	r3, [r3, #4]
 801603e:	4798      	blx	r3
 8016040:	b00a      	add	sp, #40	@ 0x28
 8016042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016046:	2d02      	cmp	r5, #2
 8016048:	d109      	bne.n	801605e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801604a:	28ff      	cmp	r0, #255	@ 0xff
 801604c:	d105      	bne.n	801605a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801604e:	f1bc 0f00 	cmp.w	ip, #0
 8016052:	bf14      	ite	ne
 8016054:	2340      	movne	r3, #64	@ 0x40
 8016056:	2320      	moveq	r3, #32
 8016058:	e7be      	b.n	8015fd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801605a:	2340      	movs	r3, #64	@ 0x40
 801605c:	e7bc      	b.n	8015fd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801605e:	28ff      	cmp	r0, #255	@ 0xff
 8016060:	d105      	bne.n	801606e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8016062:	f1bc 0f00 	cmp.w	ip, #0
 8016066:	bf14      	ite	ne
 8016068:	2304      	movne	r3, #4
 801606a:	2301      	moveq	r3, #1
 801606c:	e7b4      	b.n	8015fd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801606e:	2304      	movs	r3, #4
 8016070:	e7b2      	b.n	8015fd8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016072:	bf00      	nop
 8016074:	0802fa88 	.word	0x0802fa88

08016078 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801607c:	b08b      	sub	sp, #44	@ 0x2c
 801607e:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8016082:	461d      	mov	r5, r3
 8016084:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8016088:	bf14      	ite	ne
 801608a:	2308      	movne	r3, #8
 801608c:	2302      	moveq	r3, #2
 801608e:	2400      	movs	r4, #0
 8016090:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8016094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016098:	4688      	mov	r8, r1
 801609a:	4693      	mov	fp, r2
 801609c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80160a0:	9404      	str	r4, [sp, #16]
 80160a2:	4607      	mov	r7, r0
 80160a4:	f7ff ff08 	bl	8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80160a8:	2e0b      	cmp	r6, #11
 80160aa:	bf98      	it	ls
 80160ac:	4b15      	ldrls	r3, [pc, #84]	@ (8016104 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80160ae:	fb05 b50a 	mla	r5, r5, sl, fp
 80160b2:	bf98      	it	ls
 80160b4:	5d9c      	ldrbls	r4, [r3, r6]
 80160b6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80160ba:	10e4      	asrs	r4, r4, #3
 80160bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80160c0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80160c4:	fb04 0405 	mla	r4, r4, r5, r0
 80160c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80160cc:	2300      	movs	r3, #0
 80160ce:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	9405      	str	r4, [sp, #20]
 80160d6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80160da:	f8ad a01e 	strh.w	sl, [sp, #30]
 80160de:	f8cd 8010 	str.w	r8, [sp, #16]
 80160e2:	f88d 9020 	strb.w	r9, [sp, #32]
 80160e6:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 80160ea:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80160ee:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 80160f2:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 80160f6:	6803      	ldr	r3, [r0, #0]
 80160f8:	a901      	add	r1, sp, #4
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	4798      	blx	r3
 80160fe:	b00b      	add	sp, #44	@ 0x2c
 8016100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016104:	0802fa88 	.word	0x0802fa88

08016108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8016108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801610c:	461e      	mov	r6, r3
 801610e:	4b0a      	ldr	r3, [pc, #40]	@ (8016138 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8016110:	460f      	mov	r7, r1
 8016112:	881d      	ldrh	r5, [r3, #0]
 8016114:	4690      	mov	r8, r2
 8016116:	f7f8 fa65 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 801611a:	6803      	ldr	r3, [r0, #0]
 801611c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801611e:	4798      	blx	r3
 8016120:	280b      	cmp	r0, #11
 8016122:	bf8e      	itee	hi
 8016124:	2400      	movhi	r4, #0
 8016126:	4b05      	ldrls	r3, [pc, #20]	@ (801613c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016128:	5c1c      	ldrbls	r4, [r3, r0]
 801612a:	fb08 7005 	mla	r0, r8, r5, r7
 801612e:	10e4      	asrs	r4, r4, #3
 8016130:	fb04 6000 	mla	r0, r4, r0, r6
 8016134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016138:	200120fe 	.word	0x200120fe
 801613c:	0802fa88 	.word	0x0802fa88

08016140 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8016140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016142:	2500      	movs	r5, #0
 8016144:	b08b      	sub	sp, #44	@ 0x2c
 8016146:	461f      	mov	r7, r3
 8016148:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 801614c:	4604      	mov	r4, r0
 801614e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016152:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8016156:	4616      	mov	r6, r2
 8016158:	f8ad 3018 	strh.w	r3, [sp, #24]
 801615c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8016160:	9504      	str	r5, [sp, #16]
 8016162:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016166:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801616a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801616e:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8016172:	f88d 3020 	strb.w	r3, [sp, #32]
 8016176:	f7ff fe9f 	bl	8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801617a:	463a      	mov	r2, r7
 801617c:	4631      	mov	r1, r6
 801617e:	4603      	mov	r3, r0
 8016180:	4620      	mov	r0, r4
 8016182:	f7ff ffc1 	bl	8016108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016186:	4b0e      	ldr	r3, [pc, #56]	@ (80161c0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8016188:	9005      	str	r0, [sp, #20]
 801618a:	881b      	ldrh	r3, [r3, #0]
 801618c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016190:	f7f8 fa28 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8016194:	6803      	ldr	r3, [r0, #0]
 8016196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016198:	4798      	blx	r3
 801619a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801619c:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 80161a0:	9304      	str	r3, [sp, #16]
 80161a2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80161a6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 80161aa:	6860      	ldr	r0, [r4, #4]
 80161ac:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80161b0:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 80161b4:	6803      	ldr	r3, [r0, #0]
 80161b6:	a901      	add	r1, sp, #4
 80161b8:	685b      	ldr	r3, [r3, #4]
 80161ba:	4798      	blx	r3
 80161bc:	b00b      	add	sp, #44	@ 0x2c
 80161be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161c0:	200120fe 	.word	0x200120fe

080161c4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80161c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161c6:	b08d      	sub	sp, #52	@ 0x34
 80161c8:	466b      	mov	r3, sp
 80161ca:	e883 0006 	stmia.w	r3, {r1, r2}
 80161ce:	2300      	movs	r3, #0
 80161d0:	2501      	movs	r5, #1
 80161d2:	9306      	str	r3, [sp, #24]
 80161d4:	6803      	ldr	r3, [r0, #0]
 80161d6:	9503      	str	r5, [sp, #12]
 80161d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80161da:	4604      	mov	r4, r0
 80161dc:	f8bd 6000 	ldrh.w	r6, [sp]
 80161e0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80161e4:	4798      	blx	r3
 80161e6:	463a      	mov	r2, r7
 80161e8:	4631      	mov	r1, r6
 80161ea:	4603      	mov	r3, r0
 80161ec:	4620      	mov	r0, r4
 80161ee:	f7ff ff8b 	bl	8016108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80161f2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80161f4:	9004      	str	r0, [sp, #16]
 80161f6:	9307      	str	r3, [sp, #28]
 80161f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80161fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016200:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016204:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8016208:	4b0e      	ldr	r3, [pc, #56]	@ (8016244 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801620a:	881b      	ldrh	r3, [r3, #0]
 801620c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8016210:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8016214:	f7f8 f9e6 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8016218:	6803      	ldr	r3, [r0, #0]
 801621a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801621c:	4798      	blx	r3
 801621e:	23ff      	movs	r3, #255	@ 0xff
 8016220:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8016224:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8016228:	6860      	ldr	r0, [r4, #4]
 801622a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 801622e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8016232:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8016236:	6803      	ldr	r3, [r0, #0]
 8016238:	a903      	add	r1, sp, #12
 801623a:	685b      	ldr	r3, [r3, #4]
 801623c:	4798      	blx	r3
 801623e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8016240:	b00d      	add	sp, #52	@ 0x34
 8016242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016244:	200120fe 	.word	0x200120fe

08016248 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801624c:	b08c      	sub	sp, #48	@ 0x30
 801624e:	466d      	mov	r5, sp
 8016250:	461e      	mov	r6, r3
 8016252:	2300      	movs	r3, #0
 8016254:	e885 0006 	stmia.w	r5, {r1, r2}
 8016258:	2501      	movs	r5, #1
 801625a:	9306      	str	r3, [sp, #24]
 801625c:	6803      	ldr	r3, [r0, #0]
 801625e:	9503      	str	r5, [sp, #12]
 8016260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016262:	4604      	mov	r4, r0
 8016264:	f8bd 7000 	ldrh.w	r7, [sp]
 8016268:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801626c:	4798      	blx	r3
 801626e:	4642      	mov	r2, r8
 8016270:	4639      	mov	r1, r7
 8016272:	4603      	mov	r3, r0
 8016274:	4620      	mov	r0, r4
 8016276:	f7ff ff47 	bl	8016108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801627a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801627e:	9004      	str	r0, [sp, #16]
 8016280:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016284:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016288:	9607      	str	r6, [sp, #28]
 801628a:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801628e:	4b10      	ldr	r3, [pc, #64]	@ (80162d0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8016290:	881b      	ldrh	r3, [r3, #0]
 8016292:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8016296:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016298:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 801629c:	f7f8 f9a2 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 80162a0:	6803      	ldr	r3, [r0, #0]
 80162a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162a4:	4798      	blx	r3
 80162a6:	23ff      	movs	r3, #255	@ 0xff
 80162a8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 80162ac:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80162b0:	6860      	ldr	r0, [r4, #4]
 80162b2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 80162b6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 80162ba:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 80162be:	6803      	ldr	r3, [r0, #0]
 80162c0:	a903      	add	r1, sp, #12
 80162c2:	685b      	ldr	r3, [r3, #4]
 80162c4:	4798      	blx	r3
 80162c6:	4630      	mov	r0, r6
 80162c8:	b00c      	add	sp, #48	@ 0x30
 80162ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ce:	bf00      	nop
 80162d0:	200120fe 	.word	0x200120fe

080162d4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80162d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162d6:	b085      	sub	sp, #20
 80162d8:	ac02      	add	r4, sp, #8
 80162da:	e884 0006 	stmia.w	r4, {r1, r2}
 80162de:	4605      	mov	r5, r0
 80162e0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80162e4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80162e8:	f7ff fde6 	bl	8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80162ec:	463a      	mov	r2, r7
 80162ee:	4603      	mov	r3, r0
 80162f0:	4631      	mov	r1, r6
 80162f2:	4628      	mov	r0, r5
 80162f4:	f7ff ff08 	bl	8016108 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80162f8:	4a05      	ldr	r2, [pc, #20]	@ (8016310 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80162fa:	682b      	ldr	r3, [r5, #0]
 80162fc:	8812      	ldrh	r2, [r2, #0]
 80162fe:	9200      	str	r2, [sp, #0]
 8016300:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8016302:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016306:	4603      	mov	r3, r0
 8016308:	4628      	mov	r0, r5
 801630a:	47b0      	blx	r6
 801630c:	b005      	add	sp, #20
 801630e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016310:	200120fe 	.word	0x200120fe

08016314 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016314:	b570      	push	{r4, r5, r6, lr}
 8016316:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 801631a:	4604      	mov	r4, r0
 801631c:	b19b      	cbz	r3, 8016346 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801631e:	2002      	movs	r0, #2
 8016320:	f7fc fff0 	bl	8013304 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016324:	2300      	movs	r3, #0
 8016326:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 801632a:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 801632e:	6823      	ldr	r3, [r4, #0]
 8016330:	4620      	mov	r0, r4
 8016332:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8016336:	f7ff fdbf 	bl	8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801633a:	462b      	mov	r3, r5
 801633c:	4601      	mov	r1, r0
 801633e:	4620      	mov	r0, r4
 8016340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016344:	4718      	bx	r3
 8016346:	bd70      	pop	{r4, r5, r6, pc}

08016348 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016348:	b538      	push	{r3, r4, r5, lr}
 801634a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 801634e:	4604      	mov	r4, r0
 8016350:	428b      	cmp	r3, r1
 8016352:	460d      	mov	r5, r1
 8016354:	d006      	beq.n	8016364 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8016356:	6803      	ldr	r3, [r0, #0]
 8016358:	b929      	cbnz	r1, 8016366 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801635a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801635e:	4798      	blx	r3
 8016360:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8016364:	bd38      	pop	{r3, r4, r5, pc}
 8016366:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 801636a:	e7f8      	b.n	801635e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801636c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801636c:	b510      	push	{r4, lr}
 801636e:	4b0d      	ldr	r3, [pc, #52]	@ (80163a4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8016370:	4604      	mov	r4, r0
 8016372:	781b      	ldrb	r3, [r3, #0]
 8016374:	b95b      	cbnz	r3, 801638e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016376:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 801637a:	2b02      	cmp	r3, #2
 801637c:	d007      	beq.n	801638e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801637e:	6840      	ldr	r0, [r0, #4]
 8016380:	f000 f928 	bl	80165d4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016384:	b118      	cbz	r0, 801638e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016386:	6862      	ldr	r2, [r4, #4]
 8016388:	7a53      	ldrb	r3, [r2, #9]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d0fc      	beq.n	8016388 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801638e:	f7fd fa65 	bl	801385c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016392:	4620      	mov	r0, r4
 8016394:	2100      	movs	r1, #0
 8016396:	f7ff ffd7 	bl	8016348 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801639a:	4620      	mov	r0, r4
 801639c:	f7ff fd8c 	bl	8015eb8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80163a0:	bd10      	pop	{r4, pc}
 80163a2:	bf00      	nop
 80163a4:	20012102 	.word	0x20012102

080163a8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80163a8:	b570      	push	{r4, r5, r6, lr}
 80163aa:	4604      	mov	r4, r0
 80163ac:	6803      	ldr	r3, [r0, #0]
 80163ae:	b919      	cbnz	r1, 80163b8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80163b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163b6:	4718      	bx	r3
 80163b8:	2200      	movs	r2, #0
 80163ba:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 80163be:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 80163c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163c4:	4798      	blx	r3
 80163c6:	2101      	movs	r1, #1
 80163c8:	4605      	mov	r5, r0
 80163ca:	6863      	ldr	r3, [r4, #4]
 80163cc:	4620      	mov	r0, r4
 80163ce:	7299      	strb	r1, [r3, #10]
 80163d0:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 80163d4:	f7ff ffb8 	bl	8016348 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80163d8:	4628      	mov	r0, r5
 80163da:	bd70      	pop	{r4, r5, r6, pc}

080163dc <_ZN8touchgfx13DMA_Interface5flushEv>:
 80163dc:	6803      	ldr	r3, [r0, #0]
 80163de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80163e0:	4718      	bx	r3

080163e2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80163e2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80163e6:	1a13      	subs	r3, r2, r0
 80163e8:	4258      	negs	r0, r3
 80163ea:	4158      	adcs	r0, r3
 80163ec:	4770      	bx	lr

080163ee <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80163ee:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80163f2:	1a9b      	subs	r3, r3, r2
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	bfdc      	itt	le
 80163f8:	6882      	ldrle	r2, [r0, #8]
 80163fa:	189b      	addle	r3, r3, r2
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	bfcc      	ite	gt
 8016400:	2000      	movgt	r0, #0
 8016402:	2001      	movle	r0, #1
 8016404:	4770      	bx	lr

08016406 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8016406:	6902      	ldr	r2, [r0, #16]
 8016408:	6843      	ldr	r3, [r0, #4]
 801640a:	2024      	movs	r0, #36	@ 0x24
 801640c:	fb00 3002 	mla	r0, r0, r2, r3
 8016410:	4770      	bx	lr

08016412 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8016412:	6803      	ldr	r3, [r0, #0]
 8016414:	691b      	ldr	r3, [r3, #16]
 8016416:	4718      	bx	r3

08016418 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016418:	2301      	movs	r3, #1
 801641a:	b570      	push	{r4, r5, r6, lr}
 801641c:	7203      	strb	r3, [r0, #8]
 801641e:	4604      	mov	r4, r0
 8016420:	6840      	ldr	r0, [r0, #4]
 8016422:	6803      	ldr	r3, [r0, #0]
 8016424:	699b      	ldr	r3, [r3, #24]
 8016426:	4798      	blx	r3
 8016428:	6803      	ldr	r3, [r0, #0]
 801642a:	4605      	mov	r5, r0
 801642c:	2b40      	cmp	r3, #64	@ 0x40
 801642e:	d00c      	beq.n	801644a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016430:	d810      	bhi.n	8016454 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8016432:	2b04      	cmp	r3, #4
 8016434:	d01d      	beq.n	8016472 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8016436:	d804      	bhi.n	8016442 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8016438:	2b01      	cmp	r3, #1
 801643a:	d006      	beq.n	801644a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801643c:	2b02      	cmp	r3, #2
 801643e:	d02c      	beq.n	801649a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8016440:	bd70      	pop	{r4, r5, r6, pc}
 8016442:	2b08      	cmp	r3, #8
 8016444:	d01d      	beq.n	8016482 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8016446:	2b20      	cmp	r3, #32
 8016448:	d1fa      	bne.n	8016440 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 801644a:	6823      	ldr	r3, [r4, #0]
 801644c:	4620      	mov	r0, r4
 801644e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016450:	4798      	blx	r3
 8016452:	e013      	b.n	801647c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016458:	d0f7      	beq.n	801644a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801645a:	d804      	bhi.n	8016466 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 801645c:	2b80      	cmp	r3, #128	@ 0x80
 801645e:	d0f4      	beq.n	801644a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016464:	e7f0      	b.n	8016448 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8016466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801646a:	d0ee      	beq.n	801644a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801646c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016470:	e7e5      	b.n	801643e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8016472:	6823      	ldr	r3, [r4, #0]
 8016474:	7f01      	ldrb	r1, [r0, #28]
 8016476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016478:	4620      	mov	r0, r4
 801647a:	4798      	blx	r3
 801647c:	6823      	ldr	r3, [r4, #0]
 801647e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016480:	e006      	b.n	8016490 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8016482:	6823      	ldr	r3, [r4, #0]
 8016484:	7f01      	ldrb	r1, [r0, #28]
 8016486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016488:	4620      	mov	r0, r4
 801648a:	4798      	blx	r3
 801648c:	6823      	ldr	r3, [r4, #0]
 801648e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016490:	4629      	mov	r1, r5
 8016492:	4620      	mov	r0, r4
 8016494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016498:	4718      	bx	r3
 801649a:	6823      	ldr	r3, [r4, #0]
 801649c:	4620      	mov	r0, r4
 801649e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80164a0:	4798      	blx	r3
 80164a2:	e7f3      	b.n	801648c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080164a4 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80164a4:	4770      	bx	lr

080164a6 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80164a6:	4770      	bx	lr

080164a8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80164a8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80164ac:	1ad2      	subs	r2, r2, r3
 80164ae:	2a00      	cmp	r2, #0
 80164b0:	b510      	push	{r4, lr}
 80164b2:	bfdc      	itt	le
 80164b4:	6884      	ldrle	r4, [r0, #8]
 80164b6:	1912      	addle	r2, r2, r4
 80164b8:	2a01      	cmp	r2, #1
 80164ba:	dd16      	ble.n	80164ea <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80164bc:	2424      	movs	r4, #36	@ 0x24
 80164be:	6842      	ldr	r2, [r0, #4]
 80164c0:	fb04 2303 	mla	r3, r4, r3, r2
 80164c4:	f101 0220 	add.w	r2, r1, #32
 80164c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80164cc:	4291      	cmp	r1, r2
 80164ce:	f843 4b04 	str.w	r4, [r3], #4
 80164d2:	d1f9      	bne.n	80164c8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80164d4:	780a      	ldrb	r2, [r1, #0]
 80164d6:	701a      	strb	r2, [r3, #0]
 80164d8:	68c3      	ldr	r3, [r0, #12]
 80164da:	6882      	ldr	r2, [r0, #8]
 80164dc:	3301      	adds	r3, #1
 80164de:	429a      	cmp	r2, r3
 80164e0:	bfd8      	it	le
 80164e2:	1a9b      	suble	r3, r3, r2
 80164e4:	f3bf 8f5b 	dmb	ish
 80164e8:	60c3      	str	r3, [r0, #12]
 80164ea:	bd10      	pop	{r4, pc}

080164ec <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80164ec:	6903      	ldr	r3, [r0, #16]
 80164ee:	6882      	ldr	r2, [r0, #8]
 80164f0:	3301      	adds	r3, #1
 80164f2:	429a      	cmp	r2, r3
 80164f4:	bfd8      	it	le
 80164f6:	1a9b      	suble	r3, r3, r2
 80164f8:	f3bf 8f5b 	dmb	ish
 80164fc:	6103      	str	r3, [r0, #16]
 80164fe:	4770      	bx	lr

08016500 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8016500:	b570      	push	{r4, r5, r6, lr}
 8016502:	4604      	mov	r4, r0
 8016504:	460e      	mov	r6, r1
 8016506:	6860      	ldr	r0, [r4, #4]
 8016508:	6803      	ldr	r3, [r0, #0]
 801650a:	685b      	ldr	r3, [r3, #4]
 801650c:	4798      	blx	r3
 801650e:	2800      	cmp	r0, #0
 8016510:	d1f9      	bne.n	8016506 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8016512:	4d0d      	ldr	r5, [pc, #52]	@ (8016548 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016514:	6828      	ldr	r0, [r5, #0]
 8016516:	6803      	ldr	r3, [r0, #0]
 8016518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801651a:	4798      	blx	r3
 801651c:	f7fd f9b8 	bl	8013890 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8016520:	6828      	ldr	r0, [r5, #0]
 8016522:	2101      	movs	r1, #1
 8016524:	f7ff ff10 	bl	8016348 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016528:	6860      	ldr	r0, [r4, #4]
 801652a:	4631      	mov	r1, r6
 801652c:	6803      	ldr	r3, [r0, #0]
 801652e:	689b      	ldr	r3, [r3, #8]
 8016530:	4798      	blx	r3
 8016532:	6823      	ldr	r3, [r4, #0]
 8016534:	4620      	mov	r0, r4
 8016536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016538:	4798      	blx	r3
 801653a:	6828      	ldr	r0, [r5, #0]
 801653c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016540:	6803      	ldr	r3, [r0, #0]
 8016542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016544:	4718      	bx	r3
 8016546:	bf00      	nop
 8016548:	20012104 	.word	0x20012104

0801654c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801654c:	b508      	push	{r3, lr}
 801654e:	f7fd f985 	bl	801385c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016556:	f7fd b98f 	b.w	8013878 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801655a <_ZN8touchgfx13DMA_Interface5startEv>:
 801655a:	b510      	push	{r4, lr}
 801655c:	4604      	mov	r4, r0
 801655e:	6840      	ldr	r0, [r0, #4]
 8016560:	6803      	ldr	r3, [r0, #0]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	4798      	blx	r3
 8016566:	b948      	cbnz	r0, 801657c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016568:	7a63      	ldrb	r3, [r4, #9]
 801656a:	b13b      	cbz	r3, 801657c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801656c:	7a23      	ldrb	r3, [r4, #8]
 801656e:	b92b      	cbnz	r3, 801657c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016570:	6823      	ldr	r3, [r4, #0]
 8016572:	4620      	mov	r0, r4
 8016574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801657a:	4718      	bx	r3
 801657c:	bd10      	pop	{r4, pc}

0801657e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801657e:	b570      	push	{r4, r5, r6, lr}
 8016580:	4604      	mov	r4, r0
 8016582:	6840      	ldr	r0, [r0, #4]
 8016584:	6803      	ldr	r3, [r0, #0]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	4798      	blx	r3
 801658a:	4605      	mov	r5, r0
 801658c:	b930      	cbnz	r0, 801659c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801658e:	7a23      	ldrb	r3, [r4, #8]
 8016590:	b123      	cbz	r3, 801659c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8016592:	6860      	ldr	r0, [r4, #4]
 8016594:	6803      	ldr	r3, [r0, #0]
 8016596:	695b      	ldr	r3, [r3, #20]
 8016598:	4798      	blx	r3
 801659a:	7225      	strb	r5, [r4, #8]
 801659c:	6860      	ldr	r0, [r4, #4]
 801659e:	6803      	ldr	r3, [r0, #0]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	4798      	blx	r3
 80165a4:	b928      	cbnz	r0, 80165b2 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80165a6:	6823      	ldr	r3, [r4, #0]
 80165a8:	4620      	mov	r0, r4
 80165aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165b0:	4718      	bx	r3
 80165b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165b6:	f7fd b977 	b.w	80138a8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080165bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80165bc:	6082      	str	r2, [r0, #8]
 80165be:	2200      	movs	r2, #0
 80165c0:	b510      	push	{r4, lr}
 80165c2:	4c03      	ldr	r4, [pc, #12]	@ (80165d0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80165c4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80165c8:	e9c0 4100 	strd	r4, r1, [r0]
 80165cc:	bd10      	pop	{r4, pc}
 80165ce:	bf00      	nop
 80165d0:	0802fbc4 	.word	0x0802fbc4

080165d4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80165d4:	6840      	ldr	r0, [r0, #4]
 80165d6:	6803      	ldr	r3, [r0, #0]
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	4718      	bx	r3

080165dc <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv>:
 80165dc:	b508      	push	{r3, lr}
 80165de:	4b05      	ldr	r3, [pc, #20]	@ (80165f4 <_ZNK8touchgfx13PainterRGB56518getRenderingMethodEv+0x18>)
 80165e0:	6818      	ldr	r0, [r3, #0]
 80165e2:	6803      	ldr	r3, [r0, #0]
 80165e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80165e8:	4798      	blx	r3
 80165ea:	1e43      	subs	r3, r0, #1
 80165ec:	4258      	negs	r0, r3
 80165ee:	4158      	adcs	r0, r3
 80165f0:	bd08      	pop	{r3, pc}
 80165f2:	bf00      	nop
 80165f4:	20012104 	.word	0x20012104

080165f8 <_ZNK8touchgfx13PainterRGB5655paintEPhssssh>:
 80165f8:	b430      	push	{r4, r5}
 80165fa:	eb01 0442 	add.w	r4, r1, r2, lsl #1
 80165fe:	8a02      	ldrh	r2, [r0, #16]
 8016600:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8016604:	9202      	str	r2, [sp, #8]
 8016606:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801660a:	68c2      	ldr	r2, [r0, #12]
 801660c:	4629      	mov	r1, r5
 801660e:	4620      	mov	r0, r4
 8016610:	bc30      	pop	{r4, r5}
 8016612:	f7fe b819 	b.w	8014648 <_ZN8touchgfx5paint6rgb56513lineFromColorEPtjmhm>

08016616 <_ZNK8touchgfx13PainterRGB5658tearDownEv>:
 8016616:	f7fe b805 	b.w	8014624 <_ZN8touchgfx5paint8tearDownEv>
	...

0801661c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 801661c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801661e:	6803      	ldr	r3, [r0, #0]
 8016620:	460d      	mov	r5, r1
 8016622:	4604      	mov	r4, r0
 8016624:	4601      	mov	r1, r0
 8016626:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016628:	a802      	add	r0, sp, #8
 801662a:	4798      	blx	r3
 801662c:	466b      	mov	r3, sp
 801662e:	6828      	ldr	r0, [r5, #0]
 8016630:	6869      	ldr	r1, [r5, #4]
 8016632:	c303      	stmia	r3!, {r0, r1}
 8016634:	4668      	mov	r0, sp
 8016636:	4619      	mov	r1, r3
 8016638:	f7fe ffba 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801663c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801663e:	b188      	cbz	r0, 8016664 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016640:	6803      	ldr	r3, [r0, #0]
 8016642:	1d21      	adds	r1, r4, #4
 8016644:	68db      	ldr	r3, [r3, #12]
 8016646:	4798      	blx	r3
 8016648:	b160      	cbz	r0, 8016664 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801664a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801664e:	2b00      	cmp	r3, #0
 8016650:	dd08      	ble.n	8016664 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8016652:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8016656:	2d00      	cmp	r5, #0
 8016658:	dd04      	ble.n	8016664 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801665a:	4a2b      	ldr	r2, [pc, #172]	@ (8016708 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801665c:	7812      	ldrb	r2, [r2, #0]
 801665e:	b11a      	cbz	r2, 8016668 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8016660:	2a01      	cmp	r2, #1
 8016662:	d029      	beq.n	80166b8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8016664:	b004      	add	sp, #16
 8016666:	bd70      	pop	{r4, r5, r6, pc}
 8016668:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801666c:	441d      	add	r5, r3
 801666e:	b2ad      	uxth	r5, r5
 8016670:	b22e      	sxth	r6, r5
 8016672:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8016676:	42b3      	cmp	r3, r6
 8016678:	daf4      	bge.n	8016664 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801667a:	6823      	ldr	r3, [r4, #0]
 801667c:	4669      	mov	r1, sp
 801667e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016680:	4620      	mov	r0, r4
 8016682:	4798      	blx	r3
 8016684:	b940      	cbnz	r0, 8016698 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8016686:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801668a:	2b01      	cmp	r3, #1
 801668c:	d004      	beq.n	8016698 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801668e:	3301      	adds	r3, #1
 8016690:	105b      	asrs	r3, r3, #1
 8016692:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016696:	e7f0      	b.n	801667a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016698:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801669c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80166a0:	4413      	add	r3, r2
 80166a2:	b29b      	uxth	r3, r3
 80166a4:	441a      	add	r2, r3
 80166a6:	b212      	sxth	r2, r2
 80166a8:	4296      	cmp	r6, r2
 80166aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 80166ae:	dae0      	bge.n	8016672 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80166b0:	1aeb      	subs	r3, r5, r3
 80166b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80166b6:	e7dc      	b.n	8016672 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 80166b8:	f8bd 5000 	ldrh.w	r5, [sp]
 80166bc:	441d      	add	r5, r3
 80166be:	b2ad      	uxth	r5, r5
 80166c0:	b22e      	sxth	r6, r5
 80166c2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80166c6:	42b3      	cmp	r3, r6
 80166c8:	dacc      	bge.n	8016664 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80166ca:	6823      	ldr	r3, [r4, #0]
 80166cc:	4669      	mov	r1, sp
 80166ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166d0:	4620      	mov	r0, r4
 80166d2:	4798      	blx	r3
 80166d4:	b940      	cbnz	r0, 80166e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80166d6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80166da:	2b01      	cmp	r3, #1
 80166dc:	d004      	beq.n	80166e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80166de:	3301      	adds	r3, #1
 80166e0:	105b      	asrs	r3, r3, #1
 80166e2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80166e6:	e7f0      	b.n	80166ca <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80166e8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80166ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80166f0:	4413      	add	r3, r2
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	441a      	add	r2, r3
 80166f6:	b212      	sxth	r2, r2
 80166f8:	4296      	cmp	r6, r2
 80166fa:	f8ad 3000 	strh.w	r3, [sp]
 80166fe:	dae0      	bge.n	80166c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8016700:	1aeb      	subs	r3, r5, r3
 8016702:	f8ad 3004 	strh.w	r3, [sp, #4]
 8016706:	e7dc      	b.n	80166c2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8016708:	200120fc 	.word	0x200120fc

0801670c <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 801670c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801670e:	6803      	ldr	r3, [r0, #0]
 8016710:	4604      	mov	r4, r0
 8016712:	4601      	mov	r1, r0
 8016714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016716:	4668      	mov	r0, sp
 8016718:	4798      	blx	r3
 801671a:	2100      	movs	r1, #0
 801671c:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8016720:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016724:	9102      	str	r1, [sp, #8]
 8016726:	4668      	mov	r0, sp
 8016728:	a902      	add	r1, sp, #8
 801672a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801672e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016732:	f7fe ff3d 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 8016736:	6823      	ldr	r3, [r4, #0]
 8016738:	4669      	mov	r1, sp
 801673a:	691b      	ldr	r3, [r3, #16]
 801673c:	4620      	mov	r0, r4
 801673e:	4798      	blx	r3
 8016740:	b004      	add	sp, #16
 8016742:	bd10      	pop	{r4, pc}

08016744 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8016744:	2101      	movs	r1, #1
 8016746:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801674a:	490b      	ldr	r1, [pc, #44]	@ (8016778 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801674c:	2200      	movs	r2, #0
 801674e:	6001      	str	r1, [r0, #0]
 8016750:	21ff      	movs	r1, #255	@ 0xff
 8016752:	8082      	strh	r2, [r0, #4]
 8016754:	80c2      	strh	r2, [r0, #6]
 8016756:	8102      	strh	r2, [r0, #8]
 8016758:	8142      	strh	r2, [r0, #10]
 801675a:	8182      	strh	r2, [r0, #12]
 801675c:	81c2      	strh	r2, [r0, #14]
 801675e:	8202      	strh	r2, [r0, #16]
 8016760:	8242      	strh	r2, [r0, #18]
 8016762:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016766:	61c2      	str	r2, [r0, #28]
 8016768:	8402      	strh	r2, [r0, #32]
 801676a:	8442      	strh	r2, [r0, #34]	@ 0x22
 801676c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016770:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8016774:	6282      	str	r2, [r0, #40]	@ 0x28
 8016776:	4770      	bx	lr
 8016778:	0802fc20 	.word	0x0802fc20

0801677c <_ZN8touchgfx17AbstractDataGraph9setScaleXEib>:
 801677c:	6301      	str	r1, [r0, #48]	@ 0x30
 801677e:	4770      	bx	lr

08016780 <_ZN8touchgfx17AbstractDataGraph9setScaleYEib>:
 8016780:	6341      	str	r1, [r0, #52]	@ 0x34
 8016782:	4770      	bx	lr

08016784 <_ZN8touchgfx16DynamicDataGraph14beforeAddValueEv>:
 8016784:	4770      	bx	lr

08016786 <_ZNK8touchgfx16DynamicDataGraph18indexToGlobalIndexEs>:
 8016786:	4608      	mov	r0, r1
 8016788:	4770      	bx	lr

0801678a <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE>:
 801678a:	b530      	push	{r4, r5, lr}
 801678c:	460d      	mov	r5, r1
 801678e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8016790:	8949      	ldrh	r1, [r1, #10]
 8016792:	b085      	sub	sp, #20
 8016794:	1ac9      	subs	r1, r1, r3
 8016796:	6803      	ldr	r3, [r0, #0]
 8016798:	f10d 0206 	add.w	r2, sp, #6
 801679c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80167a0:	b209      	sxth	r1, r1
 80167a2:	4604      	mov	r4, r0
 80167a4:	4798      	blx	r3
 80167a6:	b1a0      	cbz	r0, 80167d2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80167a8:	792b      	ldrb	r3, [r5, #4]
 80167aa:	b993      	cbnz	r3, 80167d2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80167ac:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80167b0:	b178      	cbz	r0, 80167d2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80167b2:	6803      	ldr	r3, [r0, #0]
 80167b4:	68db      	ldr	r3, [r3, #12]
 80167b6:	4798      	blx	r3
 80167b8:	b158      	cbz	r0, 80167d2 <_ZN8touchgfx17AbstractDataGraph15handleDragEventERKNS_9DragEventE+0x48>
 80167ba:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80167be:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
 80167c2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80167c6:	9503      	str	r5, [sp, #12]
 80167c8:	6803      	ldr	r3, [r0, #0]
 80167ca:	aa02      	add	r2, sp, #8
 80167cc:	689b      	ldr	r3, [r3, #8]
 80167ce:	4621      	mov	r1, r4
 80167d0:	4798      	blx	r3
 80167d2:	b005      	add	sp, #20
 80167d4:	bd30      	pop	{r4, r5, pc}

080167d6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii>:
 80167d6:	428a      	cmp	r2, r1
 80167d8:	bfbc      	itt	lt
 80167da:	460b      	movlt	r3, r1
 80167dc:	4611      	movlt	r1, r2
 80167de:	b510      	push	{r4, lr}
 80167e0:	bfb8      	it	lt
 80167e2:	461a      	movlt	r2, r3
 80167e4:	f8d0 312c 	ldr.w	r3, [r0, #300]	@ 0x12c
 80167e8:	4604      	mov	r4, r0
 80167ea:	428b      	cmp	r3, r1
 80167ec:	d103      	bne.n	80167f6 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x20>
 80167ee:	f8d0 3130 	ldr.w	r3, [r0, #304]	@ 0x130
 80167f2:	4293      	cmp	r3, r2
 80167f4:	d011      	beq.n	801681a <_ZN8touchgfx17AbstractDataGraph20setGraphRangeXScaledEii+0x44>
 80167f6:	f8c4 112c 	str.w	r1, [r4, #300]	@ 0x12c
 80167fa:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
 80167fe:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8016802:	f005 f8c3 	bl	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>
 8016806:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 801680a:	f005 f8bf 	bl	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>
 801680e:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016816:	f005 b8b9 	b.w	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>
 801681a:	bd10      	pop	{r4, pc}

0801681c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii>:
 801681c:	428a      	cmp	r2, r1
 801681e:	bfbc      	itt	lt
 8016820:	460b      	movlt	r3, r1
 8016822:	4611      	movlt	r1, r2
 8016824:	b510      	push	{r4, lr}
 8016826:	bfb8      	it	lt
 8016828:	461a      	movlt	r2, r3
 801682a:	f8d0 3134 	ldr.w	r3, [r0, #308]	@ 0x134
 801682e:	4604      	mov	r4, r0
 8016830:	428b      	cmp	r3, r1
 8016832:	d103      	bne.n	801683c <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x20>
 8016834:	f8d0 3138 	ldr.w	r3, [r0, #312]	@ 0x138
 8016838:	4293      	cmp	r3, r2
 801683a:	d011      	beq.n	8016860 <_ZN8touchgfx17AbstractDataGraph20setGraphRangeYScaledEii+0x44>
 801683c:	f8c4 1134 	str.w	r1, [r4, #308]	@ 0x134
 8016840:	f8c4 2138 	str.w	r2, [r4, #312]	@ 0x138
 8016844:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8016848:	f005 f8a0 	bl	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>
 801684c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016850:	f005 f89c 	bl	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>
 8016854:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8016858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801685c:	f005 b896 	b.w	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>
 8016860:	bd10      	pop	{r4, pc}

08016862 <_ZN8touchgfx17AbstractDataGraph5clearEv>:
 8016862:	2300      	movs	r3, #0
 8016864:	3038      	adds	r0, #56	@ 0x38
 8016866:	f8a0 30e6 	strh.w	r3, [r0, #230]	@ 0xe6
 801686a:	f005 b88f 	b.w	801b98c <_ZNK8touchgfx8Drawable10invalidateEv>

0801686e <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi>:
 801686e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016872:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016876:	4605      	mov	r5, r0
 8016878:	460f      	mov	r7, r1
 801687a:	4616      	mov	r6, r2
 801687c:	2b00      	cmp	r3, #0
 801687e:	d03d      	beq.n	80168fc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 8016880:	6803      	ldr	r3, [r0, #0]
 8016882:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8016886:	4798      	blx	r3
 8016888:	682b      	ldr	r3, [r5, #0]
 801688a:	b204      	sxth	r4, r0
 801688c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8016890:	4628      	mov	r0, r5
 8016892:	4798      	blx	r3
 8016894:	b203      	sxth	r3, r0
 8016896:	429c      	cmp	r4, r3
 8016898:	bfc4      	itt	gt
 801689a:	4622      	movgt	r2, r4
 801689c:	461c      	movgt	r4, r3
 801689e:	f9b5 011e 	ldrsh.w	r0, [r5, #286]	@ 0x11e
 80168a2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80168a6:	bfc8      	it	gt
 80168a8:	4613      	movgt	r3, r2
 80168aa:	4284      	cmp	r4, r0
 80168ac:	da26      	bge.n	80168fc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80168ae:	4298      	cmp	r0, r3
 80168b0:	bfa8      	it	ge
 80168b2:	4618      	movge	r0, r3
 80168b4:	2800      	cmp	r0, #0
 80168b6:	db21      	blt.n	80168fc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80168b8:	b9ef      	cbnz	r7, 80168f6 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x88>
 80168ba:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
 80168be:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80168c2:	4619      	mov	r1, r3
 80168c4:	42a0      	cmp	r0, r4
 80168c6:	dd0b      	ble.n	80168e0 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x72>
 80168c8:	f8d5 2144 	ldr.w	r2, [r5, #324]	@ 0x144
 80168cc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80168d0:	3401      	adds	r4, #1
 80168d2:	4291      	cmp	r1, r2
 80168d4:	bfa8      	it	ge
 80168d6:	4611      	movge	r1, r2
 80168d8:	4293      	cmp	r3, r2
 80168da:	bfb8      	it	lt
 80168dc:	4613      	movlt	r3, r2
 80168de:	e7f1      	b.n	80168c4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80168e0:	1b89      	subs	r1, r1, r6
 80168e2:	18f2      	adds	r2, r6, r3
 80168e4:	4291      	cmp	r1, r2
 80168e6:	d009      	beq.n	80168fc <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x8e>
 80168e8:	682b      	ldr	r3, [r5, #0]
 80168ea:	4628      	mov	r0, r5
 80168ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80168f4:	4718      	bx	r3
 80168f6:	4273      	negs	r3, r6
 80168f8:	4631      	mov	r1, r6
 80168fa:	e7e3      	b.n	80168c4 <_ZN8touchgfx16DynamicDataGraph24setGraphRangeYAutoScaledEbi+0x56>
 80168fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016900 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE>:
 8016900:	b530      	push	{r4, r5, lr}
 8016902:	790b      	ldrb	r3, [r1, #4]
 8016904:	b085      	sub	sp, #20
 8016906:	2b02      	cmp	r3, #2
 8016908:	4604      	mov	r4, r0
 801690a:	460d      	mov	r5, r1
 801690c:	d020      	beq.n	8016950 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801690e:	8f83      	ldrh	r3, [r0, #60]	@ 0x3c
 8016910:	88c9      	ldrh	r1, [r1, #6]
 8016912:	f10d 0206 	add.w	r2, sp, #6
 8016916:	1ac9      	subs	r1, r1, r3
 8016918:	6803      	ldr	r3, [r0, #0]
 801691a:	b209      	sxth	r1, r1
 801691c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8016920:	4798      	blx	r3
 8016922:	b1a8      	cbz	r0, 8016950 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016924:	792b      	ldrb	r3, [r5, #4]
 8016926:	2b01      	cmp	r3, #1
 8016928:	d812      	bhi.n	8016950 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 801692a:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 801692e:	b178      	cbz	r0, 8016950 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016930:	6803      	ldr	r3, [r0, #0]
 8016932:	68db      	ldr	r3, [r3, #12]
 8016934:	4798      	blx	r3
 8016936:	b158      	cbz	r0, 8016950 <_ZN8touchgfx17AbstractDataGraph16handleClickEventERKNS_10ClickEventE+0x50>
 8016938:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801693c:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
 8016940:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016944:	9503      	str	r5, [sp, #12]
 8016946:	6803      	ldr	r3, [r0, #0]
 8016948:	aa02      	add	r2, sp, #8
 801694a:	689b      	ldr	r3, [r3, #8]
 801694c:	4621      	mov	r1, r4
 801694e:	4798      	blx	r3
 8016950:	b005      	add	sp, #20
 8016952:	bd30      	pop	{r4, r5, pc}

08016954 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_>:
 8016954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016958:	4604      	mov	r4, r0
 801695a:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 801695e:	4690      	mov	r8, r2
 8016960:	461f      	mov	r7, r3
 8016962:	9e06      	ldr	r6, [sp, #24]
 8016964:	b928      	cbnz	r0, 8016972 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1e>
 8016966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801696a:	8033      	strh	r3, [r6, #0]
 801696c:	803b      	strh	r3, [r7, #0]
 801696e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016972:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8016976:	f9b4 0116 	ldrsh.w	r0, [r4, #278]	@ 0x116
 801697a:	1883      	adds	r3, r0, r2
 801697c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8016980:	1ad2      	subs	r2, r2, r3
 8016982:	b212      	sxth	r2, r2
 8016984:	2a01      	cmp	r2, #1
 8016986:	dc07      	bgt.n	8016998 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x44>
 8016988:	2300      	movs	r3, #0
 801698a:	803b      	strh	r3, [r7, #0]
 801698c:	f8b4 311e 	ldrh.w	r3, [r4, #286]	@ 0x11e
 8016990:	3b01      	subs	r3, #1
 8016992:	8033      	strh	r3, [r6, #0]
 8016994:	2001      	movs	r0, #1
 8016996:	e7ea      	b.n	801696e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016998:	1a08      	subs	r0, r1, r0
 801699a:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
 801699e:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80169a2:	0140      	lsls	r0, r0, #5
 80169a4:	1a5b      	subs	r3, r3, r1
 80169a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80169a8:	d45a      	bmi.n	8016a60 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x10c>
 80169aa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80169ae:	fb93 f1f5 	sdiv	r1, r3, r5
 80169b2:	2302      	movs	r3, #2
 80169b4:	fb91 f1f3 	sdiv	r1, r1, r3
 80169b8:	3a01      	subs	r2, #1
 80169ba:	f005 f9b2 	bl	801bd22 <_ZN8touchgfx6muldivElll>
 80169be:	f8d4 112c 	ldr.w	r1, [r4, #300]	@ 0x12c
 80169c2:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
 80169c6:	2900      	cmp	r1, #0
 80169c8:	db56      	blt.n	8016a78 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x124>
 80169ca:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
 80169ce:	fb93 f3fc 	sdiv	r3, r3, ip
 80169d2:	2502      	movs	r5, #2
 80169d4:	fb93 f3f5 	sdiv	r3, r3, r5
 80169d8:	eb00 1543 	add.w	r5, r0, r3, lsl #5
 80169dc:	f8d4 2130 	ldr.w	r2, [r4, #304]	@ 0x130
 80169e0:	f9b4 3116 	ldrsh.w	r3, [r4, #278]	@ 0x116
 80169e4:	1a52      	subs	r2, r2, r1
 80169e6:	eba8 0003 	sub.w	r0, r8, r3
 80169ea:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80169ee:	d44f      	bmi.n	8016a90 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x13c>
 80169f0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80169f4:	fb92 f1fc 	sdiv	r1, r2, ip
 80169f8:	2202      	movs	r2, #2
 80169fa:	fb91 f1f2 	sdiv	r1, r1, r2
 80169fe:	f8b4 2118 	ldrh.w	r2, [r4, #280]	@ 0x118
 8016a02:	4413      	add	r3, r2
 8016a04:	f8b4 2040 	ldrh.w	r2, [r4, #64]	@ 0x40
 8016a08:	1ad2      	subs	r2, r2, r3
 8016a0a:	b212      	sxth	r2, r2
 8016a0c:	3a01      	subs	r2, #1
 8016a0e:	f005 f988 	bl	801bd22 <_ZN8touchgfx6muldivElll>
 8016a12:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 8016a16:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	db45      	blt.n	8016aa8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x154>
 8016a1c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8016a20:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a24:	2202      	movs	r2, #2
 8016a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8016a2a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8016a2e:	429d      	cmp	r5, r3
 8016a30:	bfde      	ittt	le
 8016a32:	461a      	movle	r2, r3
 8016a34:	462b      	movle	r3, r5
 8016a36:	4615      	movle	r5, r2
 8016a38:	2020      	movs	r0, #32
 8016a3a:	2d00      	cmp	r5, #0
 8016a3c:	bfb8      	it	lt
 8016a3e:	fb95 f5f0 	sdivlt	r5, r5, r0
 8016a42:	b21b      	sxth	r3, r3
 8016a44:	fb93 f3f0 	sdiv	r3, r3, r0
 8016a48:	bfa4      	itt	ge
 8016a4a:	351f      	addge	r5, #31
 8016a4c:	116d      	asrge	r5, r5, #5
 8016a4e:	b22d      	sxth	r5, r5
 8016a50:	2d00      	cmp	r5, #0
 8016a52:	803b      	strh	r3, [r7, #0]
 8016a54:	8035      	strh	r5, [r6, #0]
 8016a56:	da33      	bge.n	8016ac0 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x16c>
 8016a58:	2000      	movs	r0, #0
 8016a5a:	8030      	strh	r0, [r6, #0]
 8016a5c:	8038      	strh	r0, [r7, #0]
 8016a5e:	e786      	b.n	801696e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016a60:	f06f 0101 	mvn.w	r1, #1
 8016a64:	fb01 5303 	mla	r3, r1, r3, r5
 8016a68:	1e59      	subs	r1, r3, #1
 8016a6a:	fb91 f1f5 	sdiv	r1, r1, r5
 8016a6e:	2302      	movs	r3, #2
 8016a70:	fb91 f1f3 	sdiv	r1, r1, r3
 8016a74:	4249      	negs	r1, r1
 8016a76:	e79f      	b.n	80169b8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x64>
 8016a78:	f06f 0301 	mvn.w	r3, #1
 8016a7c:	fb03 c301 	mla	r3, r3, r1, ip
 8016a80:	3b01      	subs	r3, #1
 8016a82:	fb93 f3fc 	sdiv	r3, r3, ip
 8016a86:	2502      	movs	r5, #2
 8016a88:	fb93 f3f5 	sdiv	r3, r3, r5
 8016a8c:	425b      	negs	r3, r3
 8016a8e:	e7a3      	b.n	80169d8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x84>
 8016a90:	f06f 0101 	mvn.w	r1, #1
 8016a94:	fb01 c202 	mla	r2, r1, r2, ip
 8016a98:	1e51      	subs	r1, r2, #1
 8016a9a:	fb91 f1fc 	sdiv	r1, r1, ip
 8016a9e:	2202      	movs	r2, #2
 8016aa0:	fb91 f1f2 	sdiv	r1, r1, r2
 8016aa4:	4249      	negs	r1, r1
 8016aa6:	e7aa      	b.n	80169fe <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xaa>
 8016aa8:	f06f 0101 	mvn.w	r1, #1
 8016aac:	fb01 2303 	mla	r3, r1, r3, r2
 8016ab0:	3b01      	subs	r3, #1
 8016ab2:	fb93 f3f2 	sdiv	r3, r3, r2
 8016ab6:	2202      	movs	r2, #2
 8016ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8016abc:	425b      	negs	r3, r3
 8016abe:	e7b4      	b.n	8016a2a <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0xd6>
 8016ac0:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016ac4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8016ac8:	4293      	cmp	r3, r2
 8016aca:	dc05      	bgt.n	8016ad8 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x184>
 8016acc:	3b01      	subs	r3, #1
 8016ace:	b21b      	sxth	r3, r3
 8016ad0:	8033      	strh	r3, [r6, #0]
 8016ad2:	2000      	movs	r0, #0
 8016ad4:	803b      	strh	r3, [r7, #0]
 8016ad6:	e74a      	b.n	801696e <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x1a>
 8016ad8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8016adc:	803a      	strh	r2, [r7, #0]
 8016ade:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016ae2:	f9b6 2000 	ldrsh.w	r2, [r6]
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	bfdc      	itt	le
 8016aea:	f103 33ff 	addle.w	r3, r3, #4294967295
 8016aee:	b21a      	sxthle	r2, r3
 8016af0:	8032      	strh	r2, [r6, #0]
 8016af2:	e74f      	b.n	8016994 <_ZNK8touchgfx16DynamicDataGraph24xScreenRangeToIndexRangeEssRsS1_+0x40>

08016af4 <_ZN8touchgfx9ContainerC1Ev>:
 8016af4:	2101      	movs	r1, #1
 8016af6:	2200      	movs	r2, #0
 8016af8:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8016afc:	4909      	ldr	r1, [pc, #36]	@ (8016b24 <_ZN8touchgfx9ContainerC1Ev+0x30>)
 8016afe:	8082      	strh	r2, [r0, #4]
 8016b00:	80c2      	strh	r2, [r0, #6]
 8016b02:	8102      	strh	r2, [r0, #8]
 8016b04:	8142      	strh	r2, [r0, #10]
 8016b06:	8182      	strh	r2, [r0, #12]
 8016b08:	81c2      	strh	r2, [r0, #14]
 8016b0a:	8202      	strh	r2, [r0, #16]
 8016b0c:	8242      	strh	r2, [r0, #18]
 8016b0e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8016b12:	61c2      	str	r2, [r0, #28]
 8016b14:	8402      	strh	r2, [r0, #32]
 8016b16:	8442      	strh	r2, [r0, #34]	@ 0x22
 8016b18:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8016b1c:	6001      	str	r1, [r0, #0]
 8016b1e:	6282      	str	r2, [r0, #40]	@ 0x28
 8016b20:	4770      	bx	lr
 8016b22:	bf00      	nop
 8016b24:	0802fa00 	.word	0x0802fa00

08016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>:
 8016b28:	6800      	ldr	r0, [r0, #0]
 8016b2a:	2800      	cmp	r0, #0
 8016b2c:	bfbd      	ittte	lt
 8016b2e:	2320      	movlt	r3, #32
 8016b30:	380f      	sublt	r0, #15
 8016b32:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016b36:	3010      	addge	r0, #16
 8016b38:	bfa8      	it	ge
 8016b3a:	1140      	asrge	r0, r0, #5
 8016b3c:	4770      	bx	lr

08016b3e <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs>:
 8016b3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b42:	4605      	mov	r5, r0
 8016b44:	f9b0 011e 	ldrsh.w	r0, [r0, #286]	@ 0x11e
 8016b48:	4688      	mov	r8, r1
 8016b4a:	4691      	mov	r9, r2
 8016b4c:	469a      	mov	sl, r3
 8016b4e:	b360      	cbz	r0, 8016baa <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6c>
 8016b50:	2700      	movs	r7, #0
 8016b52:	f04f 3bff 	mov.w	fp, #4294967295
 8016b56:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8016b5a:	b23e      	sxth	r6, r7
 8016b5c:	42b3      	cmp	r3, r6
 8016b5e:	dd23      	ble.n	8016ba8 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x6a>
 8016b60:	682b      	ldr	r3, [r5, #0]
 8016b62:	4631      	mov	r1, r6
 8016b64:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016b68:	4628      	mov	r0, r5
 8016b6a:	4798      	blx	r3
 8016b6c:	9001      	str	r0, [sp, #4]
 8016b6e:	a801      	add	r0, sp, #4
 8016b70:	f7ff ffda 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016b74:	682b      	ldr	r3, [r5, #0]
 8016b76:	eba0 0008 	sub.w	r0, r0, r8
 8016b7a:	b204      	sxth	r4, r0
 8016b7c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016b80:	4631      	mov	r1, r6
 8016b82:	4628      	mov	r0, r5
 8016b84:	4798      	blx	r3
 8016b86:	9001      	str	r0, [sp, #4]
 8016b88:	a801      	add	r0, sp, #4
 8016b8a:	f7ff ffcd 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016b8e:	eba0 0009 	sub.w	r0, r0, r9
 8016b92:	fb10 f000 	smulbb	r0, r0, r0
 8016b96:	fb04 0404 	mla	r4, r4, r4, r0
 8016b9a:	455c      	cmp	r4, fp
 8016b9c:	bf3c      	itt	cc
 8016b9e:	f8aa 6000 	strhcc.w	r6, [sl]
 8016ba2:	46a3      	movcc	fp, r4
 8016ba4:	3701      	adds	r7, #1
 8016ba6:	e7d6      	b.n	8016b56 <_ZN8touchgfx17AbstractDataGraph26getNearestIndexForScreenXYEssRs+0x18>
 8016ba8:	2001      	movs	r0, #1
 8016baa:	b003      	add	sp, #12
 8016bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bb0 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs>:
 8016bb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016bb4:	460e      	mov	r6, r1
 8016bb6:	2100      	movs	r1, #0
 8016bb8:	8011      	strh	r1, [r2, #0]
 8016bba:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016bbe:	4605      	mov	r5, r0
 8016bc0:	4617      	mov	r7, r2
 8016bc2:	b36b      	cbz	r3, 8016c20 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x70>
 8016bc4:	6803      	ldr	r3, [r0, #0]
 8016bc6:	f10d 0808 	add.w	r8, sp, #8
 8016bca:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016bce:	4798      	blx	r3
 8016bd0:	f848 0d04 	str.w	r0, [r8, #-4]!
 8016bd4:	4640      	mov	r0, r8
 8016bd6:	f7ff ffa7 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016bda:	2401      	movs	r4, #1
 8016bdc:	b200      	sxth	r0, r0
 8016bde:	1b80      	subs	r0, r0, r6
 8016be0:	ea80 79e0 	eor.w	r9, r0, r0, asr #31
 8016be4:	eba9 79e0 	sub.w	r9, r9, r0, asr #31
 8016be8:	f9b5 311e 	ldrsh.w	r3, [r5, #286]	@ 0x11e
 8016bec:	42a3      	cmp	r3, r4
 8016bee:	dd1b      	ble.n	8016c28 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x78>
 8016bf0:	682b      	ldr	r3, [r5, #0]
 8016bf2:	4621      	mov	r1, r4
 8016bf4:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016bf8:	4628      	mov	r0, r5
 8016bfa:	4798      	blx	r3
 8016bfc:	9001      	str	r0, [sp, #4]
 8016bfe:	4640      	mov	r0, r8
 8016c00:	f7ff ff92 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8016c04:	b200      	sxth	r0, r0
 8016c06:	1b80      	subs	r0, r0, r6
 8016c08:	2800      	cmp	r0, #0
 8016c0a:	bfb8      	it	lt
 8016c0c:	4240      	neglt	r0, r0
 8016c0e:	4548      	cmp	r0, r9
 8016c10:	bf38      	it	cc
 8016c12:	803c      	strhcc	r4, [r7, #0]
 8016c14:	f104 0401 	add.w	r4, r4, #1
 8016c18:	bf38      	it	cc
 8016c1a:	4681      	movcc	r9, r0
 8016c1c:	b224      	sxth	r4, r4
 8016c1e:	e7e3      	b.n	8016be8 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x38>
 8016c20:	4618      	mov	r0, r3
 8016c22:	b003      	add	sp, #12
 8016c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c28:	2001      	movs	r0, #1
 8016c2a:	e7fa      	b.n	8016c22 <_ZNK8touchgfx17AbstractDataGraph25getNearestIndexForScreenXEsRs+0x72>

08016c2c <_ZN8touchgfx17AbstractDataGraph19setGraphAreaPaddingEssss>:
 8016c2c:	f8a0 3118 	strh.w	r3, [r0, #280]	@ 0x118
 8016c30:	f9bd 3000 	ldrsh.w	r3, [sp]
 8016c34:	f8a0 1114 	strh.w	r1, [r0, #276]	@ 0x114
 8016c38:	f8a0 2116 	strh.w	r2, [r0, #278]	@ 0x116
 8016c3c:	f8a0 311a 	strh.w	r3, [r0, #282]	@ 0x11a
 8016c40:	4770      	bx	lr

08016c42 <_ZN8touchgfx17AbstractDataGraph15addGraphElementERNS_20AbstractGraphElementE>:
 8016c42:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c44:	4604      	mov	r4, r0
 8016c46:	3038      	adds	r0, #56	@ 0x38
 8016c48:	460d      	mov	r5, r1
 8016c4a:	f7fe fb37 	bl	80152bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016c4e:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8016c52:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016c56:	9200      	str	r2, [sp, #0]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	4628      	mov	r0, r5
 8016c5c:	4611      	mov	r1, r2
 8016c5e:	f7f8 fa13 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016c62:	b003      	add	sp, #12
 8016c64:	bd30      	pop	{r4, r5, pc}

08016c66 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>:
 8016c66:	b538      	push	{r3, r4, r5, lr}
 8016c68:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8016c6c:	460d      	mov	r5, r1
 8016c6e:	428b      	cmp	r3, r1
 8016c70:	dd08      	ble.n	8016c84 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8016c72:	6e04      	ldr	r4, [r0, #96]	@ 0x60
 8016c74:	b134      	cbz	r4, 8016c84 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0x1e>
 8016c76:	6823      	ldr	r3, [r4, #0]
 8016c78:	4620      	mov	r0, r4
 8016c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c7c:	4629      	mov	r1, r5
 8016c7e:	4798      	blx	r3
 8016c80:	69a4      	ldr	r4, [r4, #24]
 8016c82:	e7f7      	b.n	8016c74 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs+0xe>
 8016c84:	bd38      	pop	{r3, r4, r5, pc}

08016c86 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>:
 8016c86:	b570      	push	{r4, r5, r6, lr}
 8016c88:	4606      	mov	r6, r0
 8016c8a:	460d      	mov	r5, r1
 8016c8c:	f8d0 40e4 	ldr.w	r4, [r0, #228]	@ 0xe4
 8016c90:	b134      	cbz	r4, 8016ca0 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1a>
 8016c92:	6823      	ldr	r3, [r4, #0]
 8016c94:	4620      	mov	r0, r4
 8016c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c98:	4629      	mov	r1, r5
 8016c9a:	4798      	blx	r3
 8016c9c:	69a4      	ldr	r4, [r4, #24]
 8016c9e:	e7f7      	b.n	8016c90 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0xa>
 8016ca0:	f8d6 4110 	ldr.w	r4, [r6, #272]	@ 0x110
 8016ca4:	b134      	cbz	r4, 8016cb4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x2e>
 8016ca6:	6823      	ldr	r3, [r4, #0]
 8016ca8:	4620      	mov	r0, r4
 8016caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016cac:	4629      	mov	r1, r5
 8016cae:	4798      	blx	r3
 8016cb0:	69a4      	ldr	r4, [r4, #24]
 8016cb2:	e7f7      	b.n	8016ca4 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs+0x1e>
 8016cb4:	bd70      	pop	{r4, r5, r6, pc}

08016cb6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>:
 8016cb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cb8:	4604      	mov	r4, r0
 8016cba:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8016cbc:	b15d      	cbz	r5, 8016cd6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x20>
 8016cbe:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	@ 0x42
 8016cc2:	4628      	mov	r0, r5
 8016cc4:	9200      	str	r2, [sp, #0]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8016ccc:	4611      	mov	r1, r2
 8016cce:	f7f8 f9db 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016cd2:	69ad      	ldr	r5, [r5, #24]
 8016cd4:	e7f2      	b.n	8016cbc <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x6>
 8016cd6:	f8d4 50e4 	ldr.w	r5, [r4, #228]	@ 0xe4
 8016cda:	b15d      	cbz	r5, 8016cf4 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x3e>
 8016cdc:	f9b4 20c6 	ldrsh.w	r2, [r4, #198]	@ 0xc6
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	9200      	str	r2, [sp, #0]
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	f9b4 30c4 	ldrsh.w	r3, [r4, #196]	@ 0xc4
 8016cea:	4611      	mov	r1, r2
 8016cec:	f7f8 f9cc 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016cf0:	69ad      	ldr	r5, [r5, #24]
 8016cf2:	e7f2      	b.n	8016cda <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x24>
 8016cf4:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c
 8016cf8:	b15d      	cbz	r5, 8016d12 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x5c>
 8016cfa:	f9b4 206e 	ldrsh.w	r2, [r4, #110]	@ 0x6e
 8016cfe:	4628      	mov	r0, r5
 8016d00:	9200      	str	r2, [sp, #0]
 8016d02:	2200      	movs	r2, #0
 8016d04:	f9b4 306c 	ldrsh.w	r3, [r4, #108]	@ 0x6c
 8016d08:	4611      	mov	r1, r2
 8016d0a:	f7f8 f9bd 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016d0e:	69ad      	ldr	r5, [r5, #24]
 8016d10:	e7f2      	b.n	8016cf8 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x42>
 8016d12:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8016d16:	b15d      	cbz	r5, 8016d30 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7a>
 8016d18:	f9b4 209a 	ldrsh.w	r2, [r4, #154]	@ 0x9a
 8016d1c:	4628      	mov	r0, r5
 8016d1e:	9200      	str	r2, [sp, #0]
 8016d20:	2200      	movs	r2, #0
 8016d22:	f9b4 3098 	ldrsh.w	r3, [r4, #152]	@ 0x98
 8016d26:	4611      	mov	r1, r2
 8016d28:	f7f8 f9ae 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016d2c:	69ad      	ldr	r5, [r5, #24]
 8016d2e:	e7f2      	b.n	8016d16 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x60>
 8016d30:	f8d4 5110 	ldr.w	r5, [r4, #272]	@ 0x110
 8016d34:	b15d      	cbz	r5, 8016d4e <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x98>
 8016d36:	f9b4 20f2 	ldrsh.w	r2, [r4, #242]	@ 0xf2
 8016d3a:	4628      	mov	r0, r5
 8016d3c:	9200      	str	r2, [sp, #0]
 8016d3e:	2200      	movs	r2, #0
 8016d40:	f9b4 30f0 	ldrsh.w	r3, [r4, #240]	@ 0xf0
 8016d44:	4611      	mov	r1, r2
 8016d46:	f7f8 f99f 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016d4a:	69ad      	ldr	r5, [r5, #24]
 8016d4c:	e7f2      	b.n	8016d34 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv+0x7e>
 8016d4e:	4620      	mov	r0, r4
 8016d50:	6823      	ldr	r3, [r4, #0]
 8016d52:	695b      	ldr	r3, [r3, #20]
 8016d54:	b003      	add	sp, #12
 8016d56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d5a:	4718      	bx	r3

08016d5c <_ZN8touchgfx17AbstractDataGraph8setWidthEs>:
 8016d5c:	b430      	push	{r4, r5}
 8016d5e:	f8b0 4098 	ldrh.w	r4, [r0, #152]	@ 0x98
 8016d62:	b28a      	uxth	r2, r1
 8016d64:	1b15      	subs	r5, r2, r4
 8016d66:	f8a0 5094 	strh.w	r5, [r0, #148]	@ 0x94
 8016d6a:	f8b0 506c 	ldrh.w	r5, [r0, #108]	@ 0x6c
 8016d6e:	f8a0 10c4 	strh.w	r1, [r0, #196]	@ 0xc4
 8016d72:	442c      	add	r4, r5
 8016d74:	1b12      	subs	r2, r2, r4
 8016d76:	f8a0 10f0 	strh.w	r1, [r0, #240]	@ 0xf0
 8016d7a:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016d7e:	8101      	strh	r1, [r0, #8]
 8016d80:	bc30      	pop	{r4, r5}
 8016d82:	f7ff bf98 	b.w	8016cb6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08016d86 <_ZN8touchgfx17AbstractDataGraph9setHeightEs>:
 8016d86:	b430      	push	{r4, r5}
 8016d88:	f8b0 40f2 	ldrh.w	r4, [r0, #242]	@ 0xf2
 8016d8c:	b28a      	uxth	r2, r1
 8016d8e:	1b15      	subs	r5, r2, r4
 8016d90:	f8a0 50ee 	strh.w	r5, [r0, #238]	@ 0xee
 8016d94:	f8b0 50c6 	ldrh.w	r5, [r0, #198]	@ 0xc6
 8016d98:	f8a0 106e 	strh.w	r1, [r0, #110]	@ 0x6e
 8016d9c:	442c      	add	r4, r5
 8016d9e:	1b12      	subs	r2, r2, r4
 8016da0:	f8a0 109a 	strh.w	r1, [r0, #154]	@ 0x9a
 8016da4:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 8016da8:	8141      	strh	r1, [r0, #10]
 8016daa:	bc30      	pop	{r4, r5}
 8016dac:	f7ff bf83 	b.w	8016cb6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08016db0 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>:
 8016db0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016db4:	4604      	mov	r4, r0
 8016db6:	4615      	mov	r5, r2
 8016db8:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	@ 0x28
 8016dbc:	fa1f fa83 	uxth.w	sl, r3
 8016dc0:	4699      	mov	r9, r3
 8016dc2:	8903      	ldrh	r3, [r0, #8]
 8016dc4:	fa1f f887 	uxth.w	r8, r7
 8016dc8:	4452      	add	r2, sl
 8016dca:	8940      	ldrh	r0, [r0, #10]
 8016dcc:	1a9b      	subs	r3, r3, r2
 8016dce:	eb08 0201 	add.w	r2, r8, r1
 8016dd2:	1a80      	subs	r0, r0, r2
 8016dd4:	b200      	sxth	r0, r0
 8016dd6:	460e      	mov	r6, r1
 8016dd8:	9000      	str	r0, [sp, #0]
 8016dda:	460a      	mov	r2, r1
 8016ddc:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8016de0:	4629      	mov	r1, r5
 8016de2:	b21b      	sxth	r3, r3
 8016de4:	f7f8 f950 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016de8:	2200      	movs	r2, #0
 8016dea:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016dee:	4611      	mov	r1, r2
 8016df0:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 8016df4:	9600      	str	r6, [sp, #0]
 8016df6:	f7f8 f947 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016e00:	4611      	mov	r1, r2
 8016e02:	9300      	str	r3, [sp, #0]
 8016e04:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8016e08:	462b      	mov	r3, r5
 8016e0a:	f7f8 f93d 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016e0e:	8921      	ldrh	r1, [r4, #8]
 8016e10:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8016e14:	eba1 010a 	sub.w	r1, r1, sl
 8016e18:	9300      	str	r3, [sp, #0]
 8016e1a:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8016e1e:	464b      	mov	r3, r9
 8016e20:	2200      	movs	r2, #0
 8016e22:	b209      	sxth	r1, r1
 8016e24:	f7f8 f930 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016e28:	8962      	ldrh	r2, [r4, #10]
 8016e2a:	f104 00e8 	add.w	r0, r4, #232	@ 0xe8
 8016e2e:	eba2 0208 	sub.w	r2, r2, r8
 8016e32:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8016e36:	9700      	str	r7, [sp, #0]
 8016e38:	b212      	sxth	r2, r2
 8016e3a:	2100      	movs	r1, #0
 8016e3c:	f7f8 f924 	bl	800f088 <_ZN8touchgfx8Drawable11setPositionEssss>
 8016e40:	4620      	mov	r0, r4
 8016e42:	b002      	add	sp, #8
 8016e44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e48:	f7ff bf35 	b.w	8016cb6 <_ZN8touchgfx17AbstractDataGraph19updateAreasPositionEv>

08016e4c <_ZN8touchgfx17AbstractDataGraphC1Es>:
 8016e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e50:	4604      	mov	r4, r0
 8016e52:	b085      	sub	sp, #20
 8016e54:	9103      	str	r1, [sp, #12]
 8016e56:	f7ff fe4d 	bl	8016af4 <_ZN8touchgfx9ContainerC1Ev>
 8016e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8016f10 <_ZN8touchgfx17AbstractDataGraphC1Es+0xc4>)
 8016e5c:	2601      	movs	r6, #1
 8016e5e:	6023      	str	r3, [r4, #0]
 8016e60:	23ff      	movs	r3, #255	@ 0xff
 8016e62:	2500      	movs	r5, #0
 8016e64:	f104 0b38 	add.w	fp, r4, #56	@ 0x38
 8016e68:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8016e6c:	f104 0964 	add.w	r9, r4, #100	@ 0x64
 8016e70:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8016e74:	4658      	mov	r0, fp
 8016e76:	f7ff fe3d 	bl	8016af4 <_ZN8touchgfx9ContainerC1Ev>
 8016e7a:	f104 0890 	add.w	r8, r4, #144	@ 0x90
 8016e7e:	4648      	mov	r0, r9
 8016e80:	f7ff fe38 	bl	8016af4 <_ZN8touchgfx9ContainerC1Ev>
 8016e84:	f104 0abc 	add.w	sl, r4, #188	@ 0xbc
 8016e88:	4640      	mov	r0, r8
 8016e8a:	f7ff fe33 	bl	8016af4 <_ZN8touchgfx9ContainerC1Ev>
 8016e8e:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8016e92:	4650      	mov	r0, sl
 8016e94:	f7ff fe2e 	bl	8016af4 <_ZN8touchgfx9ContainerC1Ev>
 8016e98:	4638      	mov	r0, r7
 8016e9a:	f7ff fe2b 	bl	8016af4 <_ZN8touchgfx9ContainerC1Ev>
 8016e9e:	9903      	ldr	r1, [sp, #12]
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	f8a4 111c 	strh.w	r1, [r4, #284]	@ 0x11c
 8016ea6:	f8c4 5114 	str.w	r5, [r4, #276]	@ 0x114
 8016eaa:	4659      	mov	r1, fp
 8016eac:	f8c4 5118 	str.w	r5, [r4, #280]	@ 0x118
 8016eb0:	f8a4 511e 	strh.w	r5, [r4, #286]	@ 0x11e
 8016eb4:	f8a4 5120 	strh.w	r5, [r4, #288]	@ 0x120
 8016eb8:	f8c4 5124 	str.w	r5, [r4, #292]	@ 0x124
 8016ebc:	f8c4 5128 	str.w	r5, [r4, #296]	@ 0x128
 8016ec0:	f8c4 512c 	str.w	r5, [r4, #300]	@ 0x12c
 8016ec4:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8016ec8:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8016ecc:	f8c4 5138 	str.w	r5, [r4, #312]	@ 0x138
 8016ed0:	f7fe f9f4 	bl	80152bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016ed4:	4651      	mov	r1, sl
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	f7fe f9f0 	bl	80152bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016edc:	4649      	mov	r1, r9
 8016ede:	4620      	mov	r0, r4
 8016ee0:	f7fe f9ec 	bl	80152bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016ee4:	4641      	mov	r1, r8
 8016ee6:	4620      	mov	r0, r4
 8016ee8:	f7fe f9e8 	bl	80152bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016eec:	4639      	mov	r1, r7
 8016eee:	4620      	mov	r0, r4
 8016ef0:	f7fe f9e4 	bl	80152bc <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	9500      	str	r5, [sp, #0]
 8016ef8:	462b      	mov	r3, r5
 8016efa:	462a      	mov	r2, r5
 8016efc:	4629      	mov	r1, r5
 8016efe:	f7ff ff57 	bl	8016db0 <_ZN8touchgfx17AbstractDataGraph18setGraphAreaMarginEssss>
 8016f02:	4620      	mov	r0, r4
 8016f04:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
 8016f08:	b005      	add	sp, #20
 8016f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f0e:	bf00      	nop
 8016f10:	0802fe30 	.word	0x0802fe30

08016f14 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>:
 8016f14:	4291      	cmp	r1, r2
 8016f16:	4613      	mov	r3, r2
 8016f18:	d003      	beq.n	8016f22 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii+0xe>
 8016f1a:	460a      	mov	r2, r1
 8016f1c:	4619      	mov	r1, r3
 8016f1e:	f004 bf00 	b.w	801bd22 <_ZN8touchgfx6muldivElll>
 8016f22:	4770      	bx	lr

08016f24 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib>:
 8016f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f28:	6803      	ldr	r3, [r0, #0]
 8016f2a:	460d      	mov	r5, r1
 8016f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016f30:	4604      	mov	r4, r0
 8016f32:	4798      	blx	r3
 8016f34:	42a8      	cmp	r0, r5
 8016f36:	4606      	mov	r6, r0
 8016f38:	d024      	beq.n	8016f84 <_ZN8touchgfx16DynamicDataGraph9setScaleXEib+0x60>
 8016f3a:	6823      	ldr	r3, [r4, #0]
 8016f3c:	4601      	mov	r1, r0
 8016f3e:	462a      	mov	r2, r5
 8016f40:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
 8016f44:	f8d3 70a4 	ldr.w	r7, [r3, #164]	@ 0xa4
 8016f48:	f7ff ffe4 	bl	8016f14 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016f4c:	462a      	mov	r2, r5
 8016f4e:	4680      	mov	r8, r0
 8016f50:	4631      	mov	r1, r6
 8016f52:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
 8016f56:	f7ff ffdd 	bl	8016f14 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016f5a:	4641      	mov	r1, r8
 8016f5c:	4602      	mov	r2, r0
 8016f5e:	4620      	mov	r0, r4
 8016f60:	47b8      	blx	r7
 8016f62:	462a      	mov	r2, r5
 8016f64:	4631      	mov	r1, r6
 8016f66:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8016f6a:	f7ff ffd3 	bl	8016f14 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016f6e:	462a      	mov	r2, r5
 8016f70:	f8c4 013c 	str.w	r0, [r4, #316]	@ 0x13c
 8016f74:	4631      	mov	r1, r6
 8016f76:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8016f7a:	f7ff ffcb 	bl	8016f14 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016f7e:	6325      	str	r5, [r4, #48]	@ 0x30
 8016f80:	f8c4 0140 	str.w	r0, [r4, #320]	@ 0x140
 8016f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f88 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib>:
 8016f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f8c:	4604      	mov	r4, r0
 8016f8e:	460f      	mov	r7, r1
 8016f90:	b1ba      	cbz	r2, 8016fc2 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x3a>
 8016f92:	6803      	ldr	r3, [r0, #0]
 8016f94:	2600      	movs	r6, #0
 8016f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016f9a:	4798      	blx	r3
 8016f9c:	4681      	mov	r9, r0
 8016f9e:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8016fa2:	b235      	sxth	r5, r6
 8016fa4:	42ab      	cmp	r3, r5
 8016fa6:	f106 0601 	add.w	r6, r6, #1
 8016faa:	dd0a      	ble.n	8016fc2 <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x3a>
 8016fac:	f8d4 8144 	ldr.w	r8, [r4, #324]	@ 0x144
 8016fb0:	463a      	mov	r2, r7
 8016fb2:	4649      	mov	r1, r9
 8016fb4:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
 8016fb8:	f7ff ffac 	bl	8016f14 <_ZN8touchgfx17AbstractDataGraph17convertToNewScaleEiii>
 8016fbc:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
 8016fc0:	e7ed      	b.n	8016f9e <_ZN8touchgfx16DynamicDataGraph9setScaleYEib+0x16>
 8016fc2:	6367      	str	r7, [r4, #52]	@ 0x34
 8016fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016fc8 <_ZN8touchgfx16DynamicDataGraph18addDataPointScaledEi>:
 8016fc8:	b570      	push	{r4, r5, r6, lr}
 8016fca:	4604      	mov	r4, r0
 8016fcc:	460d      	mov	r5, r1
 8016fce:	6803      	ldr	r3, [r0, #0]
 8016fd0:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8016fd4:	4798      	blx	r3
 8016fd6:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8016fda:	4629      	mov	r1, r5
 8016fdc:	3301      	adds	r3, #1
 8016fde:	f8c4 3148 	str.w	r3, [r4, #328]	@ 0x148
 8016fe2:	6823      	ldr	r3, [r4, #0]
 8016fe4:	4620      	mov	r0, r4
 8016fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fea:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8016fee:	4718      	bx	r3

08016ff0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	4608      	mov	r0, r1
 8016ff6:	460d      	mov	r5, r1
 8016ff8:	f7fe fb1d 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8016ffc:	b978      	cbnz	r0, 801701e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016ffe:	4620      	mov	r0, r4
 8017000:	f7fe fb19 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017004:	f9b5 6000 	ldrsh.w	r6, [r5]
 8017008:	b150      	cbz	r0, 8017020 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801700a:	8026      	strh	r6, [r4, #0]
 801700c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017010:	8063      	strh	r3, [r4, #2]
 8017012:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8017016:	80a3      	strh	r3, [r4, #4]
 8017018:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801701c:	80e3      	strh	r3, [r4, #6]
 801701e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017020:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017024:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017028:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801702c:	42b1      	cmp	r1, r6
 801702e:	460f      	mov	r7, r1
 8017030:	bfa8      	it	ge
 8017032:	4637      	movge	r7, r6
 8017034:	4293      	cmp	r3, r2
 8017036:	4618      	mov	r0, r3
 8017038:	bfa8      	it	ge
 801703a:	4610      	movge	r0, r2
 801703c:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8017040:	88ed      	ldrh	r5, [r5, #6]
 8017042:	4466      	add	r6, ip
 8017044:	442a      	add	r2, r5
 8017046:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801704a:	88e5      	ldrh	r5, [r4, #6]
 801704c:	4461      	add	r1, ip
 801704e:	442b      	add	r3, r5
 8017050:	b236      	sxth	r6, r6
 8017052:	b209      	sxth	r1, r1
 8017054:	b212      	sxth	r2, r2
 8017056:	b21b      	sxth	r3, r3
 8017058:	428e      	cmp	r6, r1
 801705a:	bfac      	ite	ge
 801705c:	ebc7 0106 	rsbge	r1, r7, r6
 8017060:	ebc7 0101 	rsblt	r1, r7, r1
 8017064:	429a      	cmp	r2, r3
 8017066:	bfac      	ite	ge
 8017068:	ebc0 0202 	rsbge	r2, r0, r2
 801706c:	ebc0 0203 	rsblt	r2, r0, r3
 8017070:	8027      	strh	r7, [r4, #0]
 8017072:	8060      	strh	r0, [r4, #2]
 8017074:	80a1      	strh	r1, [r4, #4]
 8017076:	80e2      	strh	r2, [r4, #6]
 8017078:	e7d1      	b.n	801701e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>

0801707a <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 801707a:	6800      	ldr	r0, [r0, #0]
 801707c:	2800      	cmp	r0, #0
 801707e:	bfb9      	ittee	lt
 8017080:	2320      	movlt	r3, #32
 8017082:	fb90 f0f3 	sdivlt	r0, r0, r3
 8017086:	301f      	addge	r0, #31
 8017088:	1140      	asrge	r0, r0, #5
 801708a:	4770      	bx	lr

0801708c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE>:
 801708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017090:	6803      	ldr	r3, [r0, #0]
 8017092:	6945      	ldr	r5, [r0, #20]
 8017094:	b093      	sub	sp, #76	@ 0x4c
 8017096:	4604      	mov	r4, r0
 8017098:	460f      	mov	r7, r1
 801709a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801709c:	2d00      	cmp	r5, #0
 801709e:	f000 81ad 	beq.w	80173fc <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x370>
 80170a2:	696d      	ldr	r5, [r5, #20]
 80170a4:	4798      	blx	r3
 80170a6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d077      	beq.n	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80170ae:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80170b2:	fb13 f000 	smulbb	r0, r3, r0
 80170b6:	b283      	uxth	r3, r0
 80170b8:	1c58      	adds	r0, r3, #1
 80170ba:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80170be:	1200      	asrs	r0, r0, #8
 80170c0:	d06d      	beq.n	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80170c2:	b2c3      	uxtb	r3, r0
 80170c4:	9308      	str	r3, [sp, #32]
 80170c6:	6823      	ldr	r3, [r4, #0]
 80170c8:	f10d 0840 	add.w	r8, sp, #64	@ 0x40
 80170cc:	462a      	mov	r2, r5
 80170ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80170d2:	4621      	mov	r1, r4
 80170d4:	4640      	mov	r0, r8
 80170d6:	ae0e      	add	r6, sp, #56	@ 0x38
 80170d8:	4798      	blx	r3
 80170da:	e898 0003 	ldmia.w	r8, {r0, r1}
 80170de:	e886 0003 	stmia.w	r6, {r0, r1}
 80170e2:	4639      	mov	r1, r7
 80170e4:	4630      	mov	r0, r6
 80170e6:	f7fe fa63 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 80170ea:	6823      	ldr	r3, [r4, #0]
 80170ec:	4629      	mov	r1, r5
 80170ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80170f2:	4620      	mov	r0, r4
 80170f4:	4798      	blx	r3
 80170f6:	6823      	ldr	r3, [r4, #0]
 80170f8:	4607      	mov	r7, r0
 80170fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80170fe:	4629      	mov	r1, r5
 8017100:	4620      	mov	r0, r4
 8017102:	4798      	blx	r3
 8017104:	4681      	mov	r9, r0
 8017106:	f894 0038 	ldrb.w	r0, [r4, #56]	@ 0x38
 801710a:	4629      	mov	r1, r5
 801710c:	0103      	lsls	r3, r0, #4
 801710e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017110:	6823      	ldr	r3, [r4, #0]
 8017112:	4620      	mov	r0, r4
 8017114:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017118:	4798      	blx	r3
 801711a:	b203      	sxth	r3, r0
 801711c:	9306      	str	r3, [sp, #24]
 801711e:	6823      	ldr	r3, [r4, #0]
 8017120:	4629      	mov	r1, r5
 8017122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8017126:	4620      	mov	r0, r4
 8017128:	4798      	blx	r3
 801712a:	2f00      	cmp	r7, #0
 801712c:	b203      	sxth	r3, r0
 801712e:	9307      	str	r3, [sp, #28]
 8017130:	d138      	bne.n	80171a4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x118>
 8017132:	f1b9 0f00 	cmp.w	r9, #0
 8017136:	d132      	bne.n	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8017138:	6823      	ldr	r3, [r4, #0]
 801713a:	464a      	mov	r2, r9
 801713c:	4629      	mov	r1, r5
 801713e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017142:	4620      	mov	r0, r4
 8017144:	4798      	blx	r3
 8017146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017148:	1ac0      	subs	r0, r0, r3
 801714a:	9010      	str	r0, [sp, #64]	@ 0x40
 801714c:	4640      	mov	r0, r8
 801714e:	f7ff fceb 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017152:	6823      	ldr	r3, [r4, #0]
 8017154:	4607      	mov	r7, r0
 8017156:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801715a:	4629      	mov	r1, r5
 801715c:	4620      	mov	r0, r4
 801715e:	4798      	blx	r3
 8017160:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017164:	1a38      	subs	r0, r7, r0
 8017166:	fa0f f880 	sxth.w	r8, r0
 801716a:	eb13 0f08 	cmn.w	r3, r8
 801716e:	d416      	bmi.n	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8017170:	6823      	ldr	r3, [r4, #0]
 8017172:	4629      	mov	r1, r5
 8017174:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017178:	4620      	mov	r0, r4
 801717a:	4798      	blx	r3
 801717c:	4580      	cmp	r8, r0
 801717e:	da0e      	bge.n	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8017180:	9a08      	ldr	r2, [sp, #32]
 8017182:	6823      	ldr	r3, [r4, #0]
 8017184:	9202      	str	r2, [sp, #8]
 8017186:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801718a:	b23f      	sxth	r7, r7
 801718c:	9201      	str	r2, [sp, #4]
 801718e:	9700      	str	r7, [sp, #0]
 8017190:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8017194:	4631      	mov	r1, r6
 8017196:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801719a:	4620      	mov	r0, r4
 801719c:	47a8      	blx	r5
 801719e:	b013      	add	sp, #76	@ 0x4c
 80171a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171a4:	ddfb      	ble.n	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80171a6:	6823      	ldr	r3, [r4, #0]
 80171a8:	4629      	mov	r1, r5
 80171aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80171ae:	4620      	mov	r0, r4
 80171b0:	4798      	blx	r3
 80171b2:	6823      	ldr	r3, [r4, #0]
 80171b4:	4683      	mov	fp, r0
 80171b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80171ba:	4629      	mov	r1, r5
 80171bc:	4620      	mov	r0, r4
 80171be:	4798      	blx	r3
 80171c0:	eba0 030b 	sub.w	r3, r0, fp
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	bfb8      	it	lt
 80171c8:	425b      	neglt	r3, r3
 80171ca:	fb93 f3f7 	sdiv	r3, r3, r7
 80171ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80171d2:	4680      	mov	r8, r0
 80171d4:	dce3      	bgt.n	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80171d6:	6823      	ldr	r3, [r4, #0]
 80171d8:	465a      	mov	r2, fp
 80171da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80171de:	4629      	mov	r1, r5
 80171e0:	4620      	mov	r0, r4
 80171e2:	4798      	blx	r3
 80171e4:	6823      	ldr	r3, [r4, #0]
 80171e6:	4606      	mov	r6, r0
 80171e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80171ec:	4642      	mov	r2, r8
 80171ee:	4629      	mov	r1, r5
 80171f0:	4620      	mov	r0, r4
 80171f2:	4798      	blx	r3
 80171f4:	42b0      	cmp	r0, r6
 80171f6:	bfa2      	ittt	ge
 80171f8:	4643      	movge	r3, r8
 80171fa:	46d8      	movge	r8, fp
 80171fc:	469b      	movge	fp, r3
 80171fe:	fb98 f6f7 	sdiv	r6, r8, r7
 8017202:	45d8      	cmp	r8, fp
 8017204:	bfac      	ite	ge
 8017206:	f04f 33ff 	movge.w	r3, #4294967295
 801720a:	2301      	movlt	r3, #1
 801720c:	fb9b f2f7 	sdiv	r2, fp, r7
 8017210:	1af6      	subs	r6, r6, r3
 8017212:	441a      	add	r2, r3
 8017214:	4296      	cmp	r6, r2
 8017216:	bfac      	ite	ge
 8017218:	f04f 3aff 	movge.w	sl, #4294967295
 801721c:	f04f 0a01 	movlt.w	sl, #1
 8017220:	f1b9 0f00 	cmp.w	r9, #0
 8017224:	d13e      	bne.n	80172a4 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x218>
 8017226:	fb07 fb0a 	mul.w	fp, r7, sl
 801722a:	4377      	muls	r7, r6
 801722c:	eb0a 0802 	add.w	r8, sl, r2
 8017230:	45b0      	cmp	r8, r6
 8017232:	d0b4      	beq.n	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 8017234:	6823      	ldr	r3, [r4, #0]
 8017236:	463a      	mov	r2, r7
 8017238:	4629      	mov	r1, r5
 801723a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801723e:	4620      	mov	r0, r4
 8017240:	4798      	blx	r3
 8017242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017244:	1ac0      	subs	r0, r0, r3
 8017246:	9010      	str	r0, [sp, #64]	@ 0x40
 8017248:	a810      	add	r0, sp, #64	@ 0x40
 801724a:	f7ff fc6d 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 801724e:	6823      	ldr	r3, [r4, #0]
 8017250:	4681      	mov	r9, r0
 8017252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017256:	4629      	mov	r1, r5
 8017258:	4620      	mov	r0, r4
 801725a:	4798      	blx	r3
 801725c:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8017260:	eba9 0000 	sub.w	r0, r9, r0
 8017264:	b203      	sxth	r3, r0
 8017266:	42da      	cmn	r2, r3
 8017268:	9304      	str	r3, [sp, #16]
 801726a:	d418      	bmi.n	801729e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 801726c:	6822      	ldr	r2, [r4, #0]
 801726e:	4629      	mov	r1, r5
 8017270:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 8017274:	4620      	mov	r0, r4
 8017276:	4790      	blx	r2
 8017278:	9b04      	ldr	r3, [sp, #16]
 801727a:	4283      	cmp	r3, r0
 801727c:	da0f      	bge.n	801729e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x212>
 801727e:	9b08      	ldr	r3, [sp, #32]
 8017280:	6822      	ldr	r2, [r4, #0]
 8017282:	9302      	str	r3, [sp, #8]
 8017284:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017288:	a90e      	add	r1, sp, #56	@ 0x38
 801728a:	9301      	str	r3, [sp, #4]
 801728c:	fa0f f389 	sxth.w	r3, r9
 8017290:	9300      	str	r3, [sp, #0]
 8017292:	f8d2 9088 	ldr.w	r9, [r2, #136]	@ 0x88
 8017296:	4620      	mov	r0, r4
 8017298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801729c:	47c8      	blx	r9
 801729e:	4456      	add	r6, sl
 80172a0:	445f      	add	r7, fp
 80172a2:	e7c5      	b.n	8017230 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x1a4>
 80172a4:	fb98 f8f9 	sdiv	r8, r8, r9
 80172a8:	eba8 0203 	sub.w	r2, r8, r3
 80172ac:	fb9b f8f9 	sdiv	r8, fp, r9
 80172b0:	4498      	add	r8, r3
 80172b2:	4542      	cmp	r2, r8
 80172b4:	bfac      	ite	ge
 80172b6:	f04f 33ff 	movge.w	r3, #4294967295
 80172ba:	2301      	movlt	r3, #1
 80172bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80172be:	6823      	ldr	r3, [r4, #0]
 80172c0:	4629      	mov	r1, r5
 80172c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80172c6:	9204      	str	r2, [sp, #16]
 80172c8:	4620      	mov	r0, r4
 80172ca:	fb02 f209 	mul.w	r2, r2, r9
 80172ce:	4798      	blx	r3
 80172d0:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80172d4:	f84b 0d08 	str.w	r0, [fp, #-8]!
 80172d8:	4658      	mov	r0, fp
 80172da:	f7ff fc25 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80172de:	b203      	sxth	r3, r0
 80172e0:	9305      	str	r3, [sp, #20]
 80172e2:	6823      	ldr	r3, [r4, #0]
 80172e4:	fb06 f207 	mul.w	r2, r6, r7
 80172e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80172ec:	4629      	mov	r1, r5
 80172ee:	4620      	mov	r0, r4
 80172f0:	4798      	blx	r3
 80172f2:	9010      	str	r0, [sp, #64]	@ 0x40
 80172f4:	4658      	mov	r0, fp
 80172f6:	f7ff fc17 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80172fa:	fb07 f20a 	mul.w	r2, r7, sl
 80172fe:	920b      	str	r2, [sp, #44]	@ 0x2c
 8017300:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017302:	b203      	sxth	r3, r0
 8017304:	4442      	add	r2, r8
 8017306:	920c      	str	r2, [sp, #48]	@ 0x30
 8017308:	9a05      	ldr	r2, [sp, #20]
 801730a:	429a      	cmp	r2, r3
 801730c:	dc16      	bgt.n	801733c <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x2b0>
 801730e:	eb06 080a 	add.w	r8, r6, sl
 8017312:	fb07 f808 	mul.w	r8, r7, r8
 8017316:	9a05      	ldr	r2, [sp, #20]
 8017318:	429a      	cmp	r2, r3
 801731a:	db54      	blt.n	80173c6 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x33a>
 801731c:	6823      	ldr	r3, [r4, #0]
 801731e:	4642      	mov	r2, r8
 8017320:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017324:	4629      	mov	r1, r5
 8017326:	4620      	mov	r0, r4
 8017328:	4798      	blx	r3
 801732a:	9010      	str	r0, [sp, #64]	@ 0x40
 801732c:	4658      	mov	r0, fp
 801732e:	f7ff fbfb 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017332:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017334:	4456      	add	r6, sl
 8017336:	b203      	sxth	r3, r0
 8017338:	4490      	add	r8, r2
 801733a:	e7ec      	b.n	8017316 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x28a>
 801733c:	6823      	ldr	r3, [r4, #0]
 801733e:	fb07 f206 	mul.w	r2, r7, r6
 8017342:	4629      	mov	r1, r5
 8017344:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8017348:	4620      	mov	r0, r4
 801734a:	4798      	blx	r3
 801734c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801734e:	1ac0      	subs	r0, r0, r3
 8017350:	9010      	str	r0, [sp, #64]	@ 0x40
 8017352:	4658      	mov	r0, fp
 8017354:	f7ff fbe8 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017358:	6823      	ldr	r3, [r4, #0]
 801735a:	4680      	mov	r8, r0
 801735c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8017360:	4629      	mov	r1, r5
 8017362:	4620      	mov	r0, r4
 8017364:	4798      	blx	r3
 8017366:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 801736a:	eba8 0000 	sub.w	r0, r8, r0
 801736e:	b203      	sxth	r3, r0
 8017370:	42da      	cmn	r2, r3
 8017372:	930d      	str	r3, [sp, #52]	@ 0x34
 8017374:	d418      	bmi.n	80173a8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8017376:	6822      	ldr	r2, [r4, #0]
 8017378:	4629      	mov	r1, r5
 801737a:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 801737e:	4620      	mov	r0, r4
 8017380:	4790      	blx	r2
 8017382:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017384:	4283      	cmp	r3, r0
 8017386:	da0f      	bge.n	80173a8 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x31c>
 8017388:	9b08      	ldr	r3, [sp, #32]
 801738a:	6822      	ldr	r2, [r4, #0]
 801738c:	9302      	str	r3, [sp, #8]
 801738e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017392:	a90e      	add	r1, sp, #56	@ 0x38
 8017394:	9301      	str	r3, [sp, #4]
 8017396:	fa0f f388 	sxth.w	r3, r8
 801739a:	9300      	str	r3, [sp, #0]
 801739c:	f8d2 8088 	ldr.w	r8, [r2, #136]	@ 0x88
 80173a0:	4620      	mov	r0, r4
 80173a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80173a6:	47c0      	blx	r8
 80173a8:	6823      	ldr	r3, [r4, #0]
 80173aa:	4456      	add	r6, sl
 80173ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80173b0:	fb06 f207 	mul.w	r2, r6, r7
 80173b4:	4629      	mov	r1, r5
 80173b6:	4620      	mov	r0, r4
 80173b8:	4798      	blx	r3
 80173ba:	9010      	str	r0, [sp, #64]	@ 0x40
 80173bc:	4658      	mov	r0, fp
 80173be:	f7ff fbb3 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80173c2:	b203      	sxth	r3, r0
 80173c4:	e7a0      	b.n	8017308 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 80173c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80173c8:	930d      	str	r3, [sp, #52]	@ 0x34
 80173ca:	9b04      	ldr	r3, [sp, #16]
 80173cc:	4413      	add	r3, r2
 80173ce:	9304      	str	r3, [sp, #16]
 80173d0:	9a04      	ldr	r2, [sp, #16]
 80173d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173d4:	4293      	cmp	r3, r2
 80173d6:	f43f aee2 	beq.w	801719e <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x112>
 80173da:	9b04      	ldr	r3, [sp, #16]
 80173dc:	6822      	ldr	r2, [r4, #0]
 80173de:	4629      	mov	r1, r5
 80173e0:	f8d2 80ac 	ldr.w	r8, [r2, #172]	@ 0xac
 80173e4:	4620      	mov	r0, r4
 80173e6:	fb03 f209 	mul.w	r2, r3, r9
 80173ea:	47c0      	blx	r8
 80173ec:	9010      	str	r0, [sp, #64]	@ 0x40
 80173ee:	4658      	mov	r0, fp
 80173f0:	f7ff fb9a 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80173f4:	b203      	sxth	r3, r0
 80173f6:	9305      	str	r3, [sp, #20]
 80173f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80173fa:	e785      	b.n	8017308 <_ZNK8touchgfx20GraphElementGridBase4drawERKNS_4RectE+0x27c>
 80173fc:	4798      	blx	r3
 80173fe:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8017402:	deff      	udf	#255	@ 0xff

08017404 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8017404:	b510      	push	{r4, lr}
 8017406:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801740a:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 801740e:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8017412:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8017416:	13a4      	asrs	r4, r4, #14
 8017418:	139b      	asrs	r3, r3, #14
 801741a:	429c      	cmp	r4, r3
 801741c:	bfb8      	it	lt
 801741e:	461c      	movlt	r4, r3
 8017420:	2c01      	cmp	r4, #1
 8017422:	dd07      	ble.n	8017434 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8017424:	fb91 f1f4 	sdiv	r1, r1, r4
 8017428:	fb90 f0f4 	sdiv	r0, r0, r4
 801742c:	f7ff ffea 	bl	8017404 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8017430:	4360      	muls	r0, r4
 8017432:	bd10      	pop	{r4, pc}
 8017434:	4340      	muls	r0, r0
 8017436:	fb01 0101 	mla	r1, r1, r1, r0
 801743a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 801743e:	bfb4      	ite	lt
 8017440:	f44f 4380 	movlt.w	r3, #16384	@ 0x4000
 8017444:	f04f 4380 	movge.w	r3, #1073741824	@ 0x40000000
 8017448:	2000      	movs	r0, #0
 801744a:	18c2      	adds	r2, r0, r3
 801744c:	428a      	cmp	r2, r1
 801744e:	bf9c      	itt	ls
 8017450:	1898      	addls	r0, r3, r2
 8017452:	1a89      	subls	r1, r1, r2
 8017454:	089b      	lsrs	r3, r3, #2
 8017456:	ea4f 0050 	mov.w	r0, r0, lsr #1
 801745a:	d1f6      	bne.n	801744a <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x46>
 801745c:	e7e9      	b.n	8017432 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

0801745e <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>:
 801745e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017460:	9906      	ldr	r1, [sp, #24]
 8017462:	4606      	mov	r6, r0
 8017464:	4291      	cmp	r1, r2
 8017466:	bfbc      	itt	lt
 8017468:	9206      	strlt	r2, [sp, #24]
 801746a:	460a      	movlt	r2, r1
 801746c:	9907      	ldr	r1, [sp, #28]
 801746e:	461c      	mov	r4, r3
 8017470:	428b      	cmp	r3, r1
 8017472:	bfc8      	it	gt
 8017474:	460c      	movgt	r4, r1
 8017476:	f04f 0020 	mov.w	r0, #32
 801747a:	fb92 f5f0 	sdiv	r5, r2, r0
 801747e:	fb94 f4f0 	sdiv	r4, r4, r0
 8017482:	a806      	add	r0, sp, #24
 8017484:	bfc8      	it	gt
 8017486:	9307      	strgt	r3, [sp, #28]
 8017488:	f7ff fdf7 	bl	801707a <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801748c:	4607      	mov	r7, r0
 801748e:	a807      	add	r0, sp, #28
 8017490:	f7ff fdf3 	bl	801707a <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017494:	1b7a      	subs	r2, r7, r5
 8017496:	1b00      	subs	r0, r0, r4
 8017498:	80f0      	strh	r0, [r6, #6]
 801749a:	8035      	strh	r5, [r6, #0]
 801749c:	8074      	strh	r4, [r6, #2]
 801749e:	80b2      	strh	r2, [r6, #4]
 80174a0:	4630      	mov	r0, r6
 80174a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080174a4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>:
 80174a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174a6:	2602      	movs	r6, #2
 80174a8:	9c08      	ldr	r4, [sp, #32]
 80174aa:	4605      	mov	r5, r0
 80174ac:	3401      	adds	r4, #1
 80174ae:	fb94 f4f6 	sdiv	r4, r4, r6
 80174b2:	18a6      	adds	r6, r4, r2
 80174b4:	191f      	adds	r7, r3, r4
 80174b6:	e9cd 6700 	strd	r6, r7, [sp]
 80174ba:	1b1b      	subs	r3, r3, r4
 80174bc:	1b12      	subs	r2, r2, r4
 80174be:	f7ff ffce 	bl	801745e <_ZNK8touchgfx20AbstractGraphElement21rectFromQ5CoordinatesENS_7CWRUtil2Q5ES2_S2_S2_>
 80174c2:	4628      	mov	r0, r5
 80174c4:	b003      	add	sp, #12
 80174c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080174c8 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs>:
 80174c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174cc:	6943      	ldr	r3, [r0, #20]
 80174ce:	b087      	sub	sp, #28
 80174d0:	4606      	mov	r6, r0
 80174d2:	460d      	mov	r5, r1
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d072      	beq.n	80175be <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xf6>
 80174d8:	695c      	ldr	r4, [r3, #20]
 80174da:	f890 702c 	ldrb.w	r7, [r0, #44]	@ 0x2c
 80174de:	6823      	ldr	r3, [r4, #0]
 80174e0:	4620      	mov	r0, r4
 80174e2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80174e6:	4798      	blx	r3
 80174e8:	6823      	ldr	r3, [r4, #0]
 80174ea:	4680      	mov	r8, r0
 80174ec:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80174f0:	4629      	mov	r1, r5
 80174f2:	4620      	mov	r0, r4
 80174f4:	4798      	blx	r3
 80174f6:	017f      	lsls	r7, r7, #5
 80174f8:	4603      	mov	r3, r0
 80174fa:	9700      	str	r7, [sp, #0]
 80174fc:	4642      	mov	r2, r8
 80174fe:	4631      	mov	r1, r6
 8017500:	a802      	add	r0, sp, #8
 8017502:	f7ff ffcf 	bl	80174a4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8017506:	2d00      	cmp	r5, #0
 8017508:	dd1b      	ble.n	8017542 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0x7a>
 801750a:	6823      	ldr	r3, [r4, #0]
 801750c:	f105 38ff 	add.w	r8, r5, #4294967295
 8017510:	fa0f f888 	sxth.w	r8, r8
 8017514:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017518:	4641      	mov	r1, r8
 801751a:	4620      	mov	r0, r4
 801751c:	4798      	blx	r3
 801751e:	6823      	ldr	r3, [r4, #0]
 8017520:	4681      	mov	r9, r0
 8017522:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017526:	4641      	mov	r1, r8
 8017528:	4620      	mov	r0, r4
 801752a:	4798      	blx	r3
 801752c:	4631      	mov	r1, r6
 801752e:	4603      	mov	r3, r0
 8017530:	9700      	str	r7, [sp, #0]
 8017532:	a804      	add	r0, sp, #16
 8017534:	464a      	mov	r2, r9
 8017536:	f7ff ffb5 	bl	80174a4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 801753a:	a904      	add	r1, sp, #16
 801753c:	a802      	add	r0, sp, #8
 801753e:	f7ff fd57 	bl	8016ff0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017542:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 8017546:	3b01      	subs	r3, #1
 8017548:	429d      	cmp	r5, r3
 801754a:	da19      	bge.n	8017580 <_ZN8touchgfx16GraphElementLine22invalidateGraphPointAtEs+0xb8>
 801754c:	6823      	ldr	r3, [r4, #0]
 801754e:	3501      	adds	r5, #1
 8017550:	b22d      	sxth	r5, r5
 8017552:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017556:	4629      	mov	r1, r5
 8017558:	4620      	mov	r0, r4
 801755a:	4798      	blx	r3
 801755c:	6823      	ldr	r3, [r4, #0]
 801755e:	4680      	mov	r8, r0
 8017560:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017564:	4629      	mov	r1, r5
 8017566:	4620      	mov	r0, r4
 8017568:	4798      	blx	r3
 801756a:	4631      	mov	r1, r6
 801756c:	4603      	mov	r3, r0
 801756e:	9700      	str	r7, [sp, #0]
 8017570:	a804      	add	r0, sp, #16
 8017572:	4642      	mov	r2, r8
 8017574:	f7ff ff96 	bl	80174a4 <_ZNK8touchgfx20AbstractGraphElement10rectAroundENS_7CWRUtil2Q5ES2_S2_>
 8017578:	a904      	add	r1, sp, #16
 801757a:	a802      	add	r0, sp, #8
 801757c:	f7ff fd38 	bl	8016ff0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017580:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 8017584:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 8017588:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 801758c:	18ca      	adds	r2, r1, r3
 801758e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 8017592:	f8ad 1012 	strh.w	r1, [sp, #18]
 8017596:	1a9b      	subs	r3, r3, r2
 8017598:	2200      	movs	r2, #0
 801759a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801759e:	a904      	add	r1, sp, #16
 80175a0:	a802      	add	r0, sp, #8
 80175a2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80175a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80175aa:	f7fe f801 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 80175ae:	6833      	ldr	r3, [r6, #0]
 80175b0:	a902      	add	r1, sp, #8
 80175b2:	691b      	ldr	r3, [r3, #16]
 80175b4:	4630      	mov	r0, r6
 80175b6:	4798      	blx	r3
 80175b8:	b007      	add	sp, #28
 80175ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	deff      	udf	#255	@ 0xff

080175c2 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>:
 80175c2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	da05      	bge.n	80175d6 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x14>
 80175ca:	880a      	ldrh	r2, [r1, #0]
 80175cc:	b29b      	uxth	r3, r3
 80175ce:	441a      	add	r2, r3
 80175d0:	425b      	negs	r3, r3
 80175d2:	800a      	strh	r2, [r1, #0]
 80175d4:	808b      	strh	r3, [r1, #4]
 80175d6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	da05      	bge.n	80175ea <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE+0x28>
 80175de:	884a      	ldrh	r2, [r1, #2]
 80175e0:	b29b      	uxth	r3, r3
 80175e2:	441a      	add	r2, r3
 80175e4:	425b      	negs	r3, r3
 80175e6:	804a      	strh	r2, [r1, #2]
 80175e8:	80cb      	strh	r3, [r1, #6]
 80175ea:	4770      	bx	lr

080175ec <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh>:
 80175ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80175ee:	4604      	mov	r4, r0
 80175f0:	460d      	mov	r5, r1
 80175f2:	6801      	ldr	r1, [r0, #0]
 80175f4:	f9bd 0024 	ldrsh.w	r0, [sp, #36]	@ 0x24
 80175f8:	9001      	str	r0, [sp, #4]
 80175fa:	f9bd 0020 	ldrsh.w	r0, [sp, #32]
 80175fe:	9000      	str	r0, [sp, #0]
 8017600:	f8d1 6090 	ldr.w	r6, [r1, #144]	@ 0x90
 8017604:	a802      	add	r0, sp, #8
 8017606:	4621      	mov	r1, r4
 8017608:	47b0      	blx	r6
 801760a:	a902      	add	r1, sp, #8
 801760c:	4620      	mov	r0, r4
 801760e:	f7ff ffd8 	bl	80175c2 <_ZNK8touchgfx25AbstractGraphElementNoCWR13normalizeRectERNS_4RectE>
 8017612:	a802      	add	r0, sp, #8
 8017614:	4629      	mov	r1, r5
 8017616:	f7fd ffcb 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801761a:	a802      	add	r0, sp, #8
 801761c:	f7fe f80b 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8017620:	b968      	cbnz	r0, 801763e <_ZNK8touchgfx20GraphElementGridBase8drawLineERKNS_4RectEssssh+0x52>
 8017622:	6823      	ldr	r3, [r4, #0]
 8017624:	a902      	add	r1, sp, #8
 8017626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017628:	4620      	mov	r0, r4
 801762a:	4798      	blx	r3
 801762c:	f7f6 ffda 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 8017630:	6803      	ldr	r3, [r0, #0]
 8017632:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017634:	6a1d      	ldr	r5, [r3, #32]
 8017636:	a902      	add	r1, sp, #8
 8017638:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 801763c:	47a8      	blx	r5
 801763e:	b004      	add	sp, #16
 8017640:	bd70      	pop	{r4, r5, r6, pc}

08017642 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>:
 8017642:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017646:	461e      	mov	r6, r3
 8017648:	b08b      	sub	sp, #44	@ 0x2c
 801764a:	f9bd 3050 	ldrsh.w	r3, [sp, #80]	@ 0x50
 801764e:	460f      	mov	r7, r1
 8017650:	429e      	cmp	r6, r3
 8017652:	4615      	mov	r5, r2
 8017654:	9304      	str	r3, [sp, #16]
 8017656:	d074      	beq.n	8017742 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x100>
 8017658:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 801765c:	4631      	mov	r1, r6
 801765e:	015b      	lsls	r3, r3, #5
 8017660:	9303      	str	r3, [sp, #12]
 8017662:	6813      	ldr	r3, [r2, #0]
 8017664:	4610      	mov	r0, r2
 8017666:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801766a:	4798      	blx	r3
 801766c:	ab0a      	add	r3, sp, #40	@ 0x28
 801766e:	f843 0d10 	str.w	r0, [r3, #-16]!
 8017672:	4618      	mov	r0, r3
 8017674:	f7ff fa58 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017678:	682b      	ldr	r3, [r5, #0]
 801767a:	4631      	mov	r1, r6
 801767c:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017680:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017684:	4628      	mov	r0, r5
 8017686:	4798      	blx	r3
 8017688:	ab0a      	add	r3, sp, #40	@ 0x28
 801768a:	f843 0d0c 	str.w	r0, [r3, #-12]!
 801768e:	4618      	mov	r0, r3
 8017690:	f7ff fa4a 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 8017694:	ea4f 1940 	mov.w	r9, r0, lsl #5
 8017698:	464a      	mov	r2, r9
 801769a:	4641      	mov	r1, r8
 801769c:	4638      	mov	r0, r7
 801769e:	f014 ff2f 	bl	802c500 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 80176a2:	4634      	mov	r4, r6
 80176a4:	2301      	movs	r3, #1
 80176a6:	9300      	str	r3, [sp, #0]
 80176a8:	9b00      	ldr	r3, [sp, #0]
 80176aa:	4628      	mov	r0, r5
 80176ac:	441c      	add	r4, r3
 80176ae:	682b      	ldr	r3, [r5, #0]
 80176b0:	b224      	sxth	r4, r4
 80176b2:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80176b6:	4621      	mov	r1, r4
 80176b8:	4798      	blx	r3
 80176ba:	9008      	str	r0, [sp, #32]
 80176bc:	a808      	add	r0, sp, #32
 80176be:	f7ff fa33 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80176c2:	0143      	lsls	r3, r0, #5
 80176c4:	9301      	str	r3, [sp, #4]
 80176c6:	682b      	ldr	r3, [r5, #0]
 80176c8:	4621      	mov	r1, r4
 80176ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80176ce:	4628      	mov	r0, r5
 80176d0:	4798      	blx	r3
 80176d2:	9009      	str	r0, [sp, #36]	@ 0x24
 80176d4:	a809      	add	r0, sp, #36	@ 0x24
 80176d6:	f7ff fa27 	bl	8016b28 <_ZNK8touchgfx7CWRUtil2Q55roundEv>
 80176da:	0143      	lsls	r3, r0, #5
 80176dc:	9302      	str	r3, [sp, #8]
 80176de:	9b01      	ldr	r3, [sp, #4]
 80176e0:	eba3 0b08 	sub.w	fp, r3, r8
 80176e4:	9b02      	ldr	r3, [sp, #8]
 80176e6:	4658      	mov	r0, fp
 80176e8:	eba3 0a09 	sub.w	sl, r3, r9
 80176ec:	4651      	mov	r1, sl
 80176ee:	f7ff fe89 	bl	8017404 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 80176f2:	b320      	cbz	r0, 801773e <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0xfc>
 80176f4:	4602      	mov	r2, r0
 80176f6:	4651      	mov	r1, sl
 80176f8:	9005      	str	r0, [sp, #20]
 80176fa:	9803      	ldr	r0, [sp, #12]
 80176fc:	f004 fb11 	bl	801bd22 <_ZN8touchgfx6muldivElll>
 8017700:	2302      	movs	r3, #2
 8017702:	fb90 faf3 	sdiv	sl, r0, r3
 8017706:	9b05      	ldr	r3, [sp, #20]
 8017708:	4659      	mov	r1, fp
 801770a:	461a      	mov	r2, r3
 801770c:	9803      	ldr	r0, [sp, #12]
 801770e:	f004 fb08 	bl	801bd22 <_ZN8touchgfx6muldivElll>
 8017712:	2302      	movs	r3, #2
 8017714:	fb90 fbf3 	sdiv	fp, r0, r3
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	eb0b 0209 	add.w	r2, fp, r9
 801771e:	eba8 010a 	sub.w	r1, r8, sl
 8017722:	689b      	ldr	r3, [r3, #8]
 8017724:	4638      	mov	r0, r7
 8017726:	4798      	blx	r3
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	9a02      	ldr	r2, [sp, #8]
 801772c:	9901      	ldr	r1, [sp, #4]
 801772e:	689b      	ldr	r3, [r3, #8]
 8017730:	445a      	add	r2, fp
 8017732:	eba1 010a 	sub.w	r1, r1, sl
 8017736:	4638      	mov	r0, r7
 8017738:	4798      	blx	r3
 801773a:	e9dd 8901 	ldrd	r8, r9, [sp, #4]
 801773e:	42a6      	cmp	r6, r4
 8017740:	db02      	blt.n	8017748 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x106>
 8017742:	b00b      	add	sp, #44	@ 0x2c
 8017744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017748:	9b00      	ldr	r3, [sp, #0]
 801774a:	9a04      	ldr	r2, [sp, #16]
 801774c:	42a2      	cmp	r2, r4
 801774e:	bf08      	it	eq
 8017750:	f04f 33ff 	moveq.w	r3, #4294967295
 8017754:	e7a7      	b.n	80176a6 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss+0x64>
	...

08017758 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE>:
 8017758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801775c:	6943      	ldr	r3, [r0, #20]
 801775e:	b0a4      	sub	sp, #144	@ 0x90
 8017760:	4605      	mov	r5, r0
 8017762:	460f      	mov	r7, r1
 8017764:	2b00      	cmp	r3, #0
 8017766:	d077      	beq.n	8017858 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x100>
 8017768:	695c      	ldr	r4, [r3, #20]
 801776a:	f9b4 311e 	ldrsh.w	r3, [r4, #286]	@ 0x11e
 801776e:	2b01      	cmp	r3, #1
 8017770:	dc04      	bgt.n	801777c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x24>
 8017772:	2401      	movs	r4, #1
 8017774:	4620      	mov	r0, r4
 8017776:	b024      	add	sp, #144	@ 0x90
 8017778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801777c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8017780:	ae24      	add	r6, sp, #144	@ 0x90
 8017782:	011b      	lsls	r3, r3, #4
 8017784:	f846 3d74 	str.w	r3, [r6, #-116]!
 8017788:	4630      	mov	r0, r6
 801778a:	f7ff fc76 	bl	801707a <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 801778e:	8839      	ldrh	r1, [r7, #0]
 8017790:	88ba      	ldrh	r2, [r7, #4]
 8017792:	b280      	uxth	r0, r0
 8017794:	440a      	add	r2, r1
 8017796:	6823      	ldr	r3, [r4, #0]
 8017798:	4402      	add	r2, r0
 801779a:	1a09      	subs	r1, r1, r0
 801779c:	f10d 000a 	add.w	r0, sp, #10
 80177a0:	9000      	str	r0, [sp, #0]
 80177a2:	f8d3 8124 	ldr.w	r8, [r3, #292]	@ 0x124
 80177a6:	b212      	sxth	r2, r2
 80177a8:	ab02      	add	r3, sp, #8
 80177aa:	b209      	sxth	r1, r1
 80177ac:	4620      	mov	r0, r4
 80177ae:	47c0      	blx	r8
 80177b0:	2800      	cmp	r0, #0
 80177b2:	d0de      	beq.n	8017772 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1a>
 80177b4:	f9b4 1114 	ldrsh.w	r1, [r4, #276]	@ 0x114
 80177b8:	f8b4 311a 	ldrh.w	r3, [r4, #282]	@ 0x11a
 80177bc:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	@ 0x40
 80177c0:	18ca      	adds	r2, r1, r3
 80177c2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	@ 0x42
 80177c6:	f8ad 100e 	strh.w	r1, [sp, #14]
 80177ca:	1a9b      	subs	r3, r3, r2
 80177cc:	2200      	movs	r2, #0
 80177ce:	4639      	mov	r1, r7
 80177d0:	f8ad 0010 	strh.w	r0, [sp, #16]
 80177d4:	a803      	add	r0, sp, #12
 80177d6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80177da:	f8ad 3012 	strh.w	r3, [sp, #18]
 80177de:	f7fd fee7 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 80177e2:	4629      	mov	r1, r5
 80177e4:	a805      	add	r0, sp, #20
 80177e6:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 80177e8:	f004 f96c 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80177ec:	682b      	ldr	r3, [r5, #0]
 80177ee:	4628      	mov	r0, r5
 80177f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80177f2:	4798      	blx	r3
 80177f4:	ab03      	add	r3, sp, #12
 80177f6:	9000      	str	r0, [sp, #0]
 80177f8:	aa05      	add	r2, sp, #20
 80177fa:	4639      	mov	r1, r7
 80177fc:	4630      	mov	r0, r6
 80177fe:	f014 fd33 	bl	802c268 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8017802:	f9b4 7120 	ldrsh.w	r7, [r4, #288]	@ 0x120
 8017806:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801780a:	2f00      	cmp	r7, #0
 801780c:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8017810:	dd03      	ble.n	801781a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8017812:	42bb      	cmp	r3, r7
 8017814:	da01      	bge.n	801781a <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc2>
 8017816:	42ba      	cmp	r2, r7
 8017818:	da11      	bge.n	801783e <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xe6>
 801781a:	9200      	str	r2, [sp, #0]
 801781c:	4622      	mov	r2, r4
 801781e:	4631      	mov	r1, r6
 8017820:	4628      	mov	r0, r5
 8017822:	f7ff ff0e 	bl	8017642 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 8017826:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801782a:	4630      	mov	r0, r6
 801782c:	f014 fdb0 	bl	802c390 <_ZN8touchgfx6Canvas6renderEh>
 8017830:	4b0b      	ldr	r3, [pc, #44]	@ (8017860 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x108>)
 8017832:	4604      	mov	r4, r0
 8017834:	a80c      	add	r0, sp, #48	@ 0x30
 8017836:	9307      	str	r3, [sp, #28]
 8017838:	f000 fcf4 	bl	8018224 <_ZN8touchgfx7OutlineD1Ev>
 801783c:	e79a      	b.n	8017774 <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0x1c>
 801783e:	1e7a      	subs	r2, r7, #1
 8017840:	b212      	sxth	r2, r2
 8017842:	9200      	str	r2, [sp, #0]
 8017844:	4631      	mov	r1, r6
 8017846:	4622      	mov	r2, r4
 8017848:	4628      	mov	r0, r5
 801784a:	f7ff fefa 	bl	8017642 <_ZNK8touchgfx16GraphElementLine14drawIndexRangeERNS_6CanvasEPKNS_17AbstractDataGraphEss>
 801784e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8017852:	9300      	str	r3, [sp, #0]
 8017854:	463b      	mov	r3, r7
 8017856:	e7e1      	b.n	801781c <_ZNK8touchgfx16GraphElementLine16drawCanvasWidgetERKNS_4RectE+0xc4>
 8017858:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 801785c:	deff      	udf	#255	@ 0xff
 801785e:	bf00      	nop
 8017860:	080308a4 	.word	0x080308a4

08017864 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs>:
 8017864:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8017868:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 801786c:	4293      	cmp	r3, r2
 801786e:	da01      	bge.n	8017874 <_ZNK8touchgfx25GraphWrapAndOverwriteData18indexToGlobalIndexEs+0x10>
 8017870:	4608      	mov	r0, r1
 8017872:	4770      	bx	lr
 8017874:	f9b0 3120 	ldrsh.w	r3, [r0, #288]	@ 0x120
 8017878:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 801787c:	428b      	cmp	r3, r1
 801787e:	bfc7      	ittee	gt
 8017880:	1809      	addgt	r1, r1, r0
 8017882:	1ac8      	subgt	r0, r1, r3
 8017884:	1ac0      	suble	r0, r0, r3
 8017886:	1a80      	suble	r0, r0, r2
 8017888:	bfd8      	it	le
 801788a:	1840      	addle	r0, r0, r1
 801788c:	4770      	bx	lr

0801788e <_ZN8touchgfx25GraphWrapAndOverwriteData5clearEv>:
 801788e:	b510      	push	{r4, lr}
 8017890:	4604      	mov	r4, r0
 8017892:	f7fe ffe6 	bl	8016862 <_ZN8touchgfx17AbstractDataGraph5clearEv>
 8017896:	2300      	movs	r3, #0
 8017898:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
 801789c:	bd10      	pop	{r4, pc}

0801789e <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv>:
 801789e:	b570      	push	{r4, r5, r6, lr}
 80178a0:	f9b0 314c 	ldrsh.w	r3, [r0, #332]	@ 0x14c
 80178a4:	4604      	mov	r4, r0
 80178a6:	bb13      	cbnz	r3, 80178ee <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 80178a8:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 80178ac:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 80178b0:	429a      	cmp	r2, r3
 80178b2:	dc1c      	bgt.n	80178ee <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 80178b4:	6803      	ldr	r3, [r0, #0]
 80178b6:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80178ba:	4798      	blx	r3
 80178bc:	6823      	ldr	r3, [r4, #0]
 80178be:	4605      	mov	r5, r0
 80178c0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80178c4:	4620      	mov	r0, r4
 80178c6:	4798      	blx	r3
 80178c8:	4606      	mov	r6, r0
 80178ca:	2d00      	cmp	r5, #0
 80178cc:	da05      	bge.n	80178da <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x3c>
 80178ce:	b229      	sxth	r1, r5
 80178d0:	4620      	mov	r0, r4
 80178d2:	f7ff f9d8 	bl	8016c86 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80178d6:	3501      	adds	r5, #1
 80178d8:	e7f7      	b.n	80178ca <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x2c>
 80178da:	f9b4 511c 	ldrsh.w	r5, [r4, #284]	@ 0x11c
 80178de:	42b5      	cmp	r5, r6
 80178e0:	dc05      	bgt.n	80178ee <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x50>
 80178e2:	b229      	sxth	r1, r5
 80178e4:	4620      	mov	r0, r4
 80178e6:	f7ff f9ce 	bl	8016c86 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80178ea:	3501      	adds	r5, #1
 80178ec:	e7f7      	b.n	80178de <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x40>
 80178ee:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 80178f2:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 80178f6:	429a      	cmp	r2, r3
 80178f8:	db0b      	blt.n	8017912 <_ZN8touchgfx25GraphWrapAndOverwriteData14beforeAddValueEv+0x74>
 80178fa:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	@ 0x14c
 80178fe:	4620      	mov	r0, r4
 8017900:	f7ff f9b1 	bl	8016c66 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 8017904:	f9b4 114c 	ldrsh.w	r1, [r4, #332]	@ 0x14c
 8017908:	4620      	mov	r0, r4
 801790a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801790e:	f7ff b9ba 	b.w	8016c86 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8017912:	bd70      	pop	{r4, r5, r6, pc}

08017914 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi>:
 8017914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017918:	f9b0 514c 	ldrsh.w	r5, [r0, #332]	@ 0x14c
 801791c:	f9b0 211c 	ldrsh.w	r2, [r0, #284]	@ 0x11c
 8017920:	1c6e      	adds	r6, r5, #1
 8017922:	b236      	sxth	r6, r6
 8017924:	fb96 f3f2 	sdiv	r3, r6, r2
 8017928:	fb02 6313 	mls	r3, r2, r3, r6
 801792c:	f8a0 314c 	strh.w	r3, [r0, #332]	@ 0x14c
 8017930:	f9b0 311e 	ldrsh.w	r3, [r0, #286]	@ 0x11e
 8017934:	4688      	mov	r8, r1
 8017936:	42ab      	cmp	r3, r5
 8017938:	6803      	ldr	r3, [r0, #0]
 801793a:	bf08      	it	eq
 801793c:	f8a0 611e 	strheq.w	r6, [r0, #286]	@ 0x11e
 8017940:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8017944:	4629      	mov	r1, r5
 8017946:	4604      	mov	r4, r0
 8017948:	f8d0 7144 	ldr.w	r7, [r0, #324]	@ 0x144
 801794c:	4798      	blx	r3
 801794e:	4629      	mov	r1, r5
 8017950:	f847 8020 	str.w	r8, [r7, r0, lsl #2]
 8017954:	f8a4 6120 	strh.w	r6, [r4, #288]	@ 0x120
 8017958:	4620      	mov	r0, r4
 801795a:	f7ff f984 	bl	8016c66 <_ZN8touchgfx17AbstractDataGraph22invalidateGraphPointAtEs>
 801795e:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 8017962:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 8017966:	429a      	cmp	r2, r3
 8017968:	db28      	blt.n	80179bc <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 801796a:	4629      	mov	r1, r5
 801796c:	4620      	mov	r0, r4
 801796e:	f7ff f98a 	bl	8016c86 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 8017972:	bb1d      	cbnz	r5, 80179bc <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 8017974:	f9b4 211e 	ldrsh.w	r2, [r4, #286]	@ 0x11e
 8017978:	f9b4 311c 	ldrsh.w	r3, [r4, #284]	@ 0x11c
 801797c:	429a      	cmp	r2, r3
 801797e:	db1d      	blt.n	80179bc <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 8017980:	6823      	ldr	r3, [r4, #0]
 8017982:	4620      	mov	r0, r4
 8017984:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8017988:	4798      	blx	r3
 801798a:	6823      	ldr	r3, [r4, #0]
 801798c:	4606      	mov	r6, r0
 801798e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8017992:	4620      	mov	r0, r4
 8017994:	4798      	blx	r3
 8017996:	4607      	mov	r7, r0
 8017998:	2e00      	cmp	r6, #0
 801799a:	da05      	bge.n	80179a8 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x94>
 801799c:	b231      	sxth	r1, r6
 801799e:	4620      	mov	r0, r4
 80179a0:	f7ff f971 	bl	8016c86 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80179a4:	3601      	adds	r6, #1
 80179a6:	e7f7      	b.n	8017998 <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x84>
 80179a8:	f9b4 611c 	ldrsh.w	r6, [r4, #284]	@ 0x11c
 80179ac:	42be      	cmp	r6, r7
 80179ae:	dc05      	bgt.n	80179bc <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0xa8>
 80179b0:	b231      	sxth	r1, r6
 80179b2:	4620      	mov	r0, r4
 80179b4:	f7ff f967 	bl	8016c86 <_ZN8touchgfx17AbstractDataGraph22invalidateXAxisPointAtEs>
 80179b8:	3601      	adds	r6, #1
 80179ba:	e7f7      	b.n	80179ac <_ZN8touchgfx25GraphWrapAndOverwriteData8addValueEi+0x98>
 80179bc:	4628      	mov	r0, r5
 80179be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080179c2 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 80179c2:	2000      	movs	r0, #0
 80179c4:	4770      	bx	lr
	...

080179c8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 80179c8:	4b07      	ldr	r3, [pc, #28]	@ (80179e8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 80179ca:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80179cc:	881b      	ldrh	r3, [r3, #0]
 80179ce:	4293      	cmp	r3, r2
 80179d0:	bf81      	itttt	hi
 80179d2:	4b06      	ldrhi	r3, [pc, #24]	@ (80179ec <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 80179d4:	681b      	ldrhi	r3, [r3, #0]
 80179d6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 80179da:	7858      	ldrbhi	r0, [r3, #1]
 80179dc:	bf8c      	ite	hi
 80179de:	f000 0003 	andhi.w	r0, r0, #3
 80179e2:	2000      	movls	r0, #0
 80179e4:	4770      	bx	lr
 80179e6:	bf00      	nop
 80179e8:	20012160 	.word	0x20012160
 80179ec:	2001215c 	.word	0x2001215c

080179f0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 80179f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179f4:	4b10      	ldr	r3, [pc, #64]	@ (8017a38 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 80179f6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80179f8:	881b      	ldrh	r3, [r3, #0]
 80179fa:	4604      	mov	r4, r0
 80179fc:	428b      	cmp	r3, r1
 80179fe:	d918      	bls.n	8017a32 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017a00:	6803      	ldr	r3, [r0, #0]
 8017a02:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8017a04:	4b0d      	ldr	r3, [pc, #52]	@ (8017a3c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017a06:	6818      	ldr	r0, [r3, #0]
 8017a08:	f7fb f8ec 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8017a0c:	6823      	ldr	r3, [r4, #0]
 8017a0e:	4606      	mov	r6, r0
 8017a10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017a12:	4620      	mov	r0, r4
 8017a14:	4798      	blx	r3
 8017a16:	6823      	ldr	r3, [r4, #0]
 8017a18:	4607      	mov	r7, r0
 8017a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017a1e:	4620      	mov	r0, r4
 8017a20:	4798      	blx	r3
 8017a22:	463a      	mov	r2, r7
 8017a24:	4603      	mov	r3, r0
 8017a26:	4631      	mov	r1, r6
 8017a28:	4620      	mov	r0, r4
 8017a2a:	46ac      	mov	ip, r5
 8017a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a30:	4760      	bx	ip
 8017a32:	2000      	movs	r0, #0
 8017a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a38:	20012160 	.word	0x20012160
 8017a3c:	20012168 	.word	0x20012168

08017a40 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017a40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017a44:	4b17      	ldr	r3, [pc, #92]	@ (8017aa4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017a46:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017a48:	881b      	ldrh	r3, [r3, #0]
 8017a4a:	4604      	mov	r4, r0
 8017a4c:	428b      	cmp	r3, r1
 8017a4e:	d926      	bls.n	8017a9e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017a50:	4b15      	ldr	r3, [pc, #84]	@ (8017aa8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017a58:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017a5c:	4b13      	ldr	r3, [pc, #76]	@ (8017aac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017a5e:	7855      	ldrb	r5, [r2, #1]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8017a66:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017a6a:	6833      	ldr	r3, [r6, #0]
 8017a6c:	69df      	ldr	r7, [r3, #28]
 8017a6e:	4b10      	ldr	r3, [pc, #64]	@ (8017ab0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017a70:	6818      	ldr	r0, [r3, #0]
 8017a72:	f7fb f8b7 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8017a76:	6823      	ldr	r3, [r4, #0]
 8017a78:	4680      	mov	r8, r0
 8017a7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017a7c:	4620      	mov	r0, r4
 8017a7e:	4798      	blx	r3
 8017a80:	6823      	ldr	r3, [r4, #0]
 8017a82:	4681      	mov	r9, r0
 8017a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017a88:	4620      	mov	r0, r4
 8017a8a:	4798      	blx	r3
 8017a8c:	464b      	mov	r3, r9
 8017a8e:	9000      	str	r0, [sp, #0]
 8017a90:	4642      	mov	r2, r8
 8017a92:	4629      	mov	r1, r5
 8017a94:	4630      	mov	r0, r6
 8017a96:	47b8      	blx	r7
 8017a98:	b003      	add	sp, #12
 8017a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	e7fa      	b.n	8017a98 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017aa2:	bf00      	nop
 8017aa4:	20012160 	.word	0x20012160
 8017aa8:	2001215c 	.word	0x2001215c
 8017aac:	20012164 	.word	0x20012164
 8017ab0:	20012168 	.word	0x20012168

08017ab4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017ab4:	b40e      	push	{r1, r2, r3}
 8017ab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017aba:	4b2f      	ldr	r3, [pc, #188]	@ (8017b78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017abc:	b09d      	sub	sp, #116	@ 0x74
 8017abe:	881a      	ldrh	r2, [r3, #0]
 8017ac0:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	429a      	cmp	r2, r3
 8017ac6:	d954      	bls.n	8017b72 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017ac8:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8017b7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017acc:	aa26      	add	r2, sp, #152	@ 0x98
 8017ace:	9202      	str	r2, [sp, #8]
 8017ad0:	f8df 80ac 	ldr.w	r8, [pc, #172]	@ 8017b80 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017ad4:	f8d9 2000 	ldr.w	r2, [r9]
 8017ad8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017adc:	f8d8 3000 	ldr.w	r3, [r8]
 8017ae0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017ae4:	682b      	ldr	r3, [r5, #0]
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017aea:	4798      	blx	r3
 8017aec:	b207      	sxth	r7, r0
 8017aee:	4606      	mov	r6, r0
 8017af0:	a803      	add	r0, sp, #12
 8017af2:	f004 fc6b 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 8017af6:	682b      	ldr	r3, [r5, #0]
 8017af8:	4628      	mov	r0, r5
 8017afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017afc:	4798      	blx	r3
 8017afe:	682b      	ldr	r3, [r5, #0]
 8017b00:	4682      	mov	sl, r0
 8017b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b04:	4628      	mov	r0, r5
 8017b06:	4798      	blx	r3
 8017b08:	4653      	mov	r3, sl
 8017b0a:	9000      	str	r0, [sp, #0]
 8017b0c:	9a02      	ldr	r2, [sp, #8]
 8017b0e:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8017b10:	a803      	add	r0, sp, #12
 8017b12:	f004 fcb6 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017b16:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017b18:	f8d9 3000 	ldr.w	r3, [r9]
 8017b1c:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8017b20:	8925      	ldrh	r5, [r4, #8]
 8017b22:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8017b26:	eba5 050c 	sub.w	r5, r5, ip
 8017b2a:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8017b2e:	b22d      	sxth	r5, r5
 8017b30:	784a      	ldrb	r2, [r1, #1]
 8017b32:	f8d8 3000 	ldr.w	r3, [r8]
 8017b36:	9500      	str	r5, [sp, #0]
 8017b38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017b3c:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8017b40:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8017b44:	a803      	add	r0, sp, #12
 8017b46:	f002 fa69 	bl	801a01c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8017b4a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8017b4e:	b203      	sxth	r3, r0
 8017b50:	18b9      	adds	r1, r7, r2
 8017b52:	2900      	cmp	r1, #0
 8017b54:	dd0b      	ble.n	8017b6e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8017b56:	3b01      	subs	r3, #1
 8017b58:	fb13 f302 	smulbb	r3, r3, r2
 8017b5c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8017b60:	b21f      	sxth	r7, r3
 8017b62:	4638      	mov	r0, r7
 8017b64:	b01d      	add	sp, #116	@ 0x74
 8017b66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b6a:	b003      	add	sp, #12
 8017b6c:	4770      	bx	lr
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	dcf7      	bgt.n	8017b62 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017b72:	2700      	movs	r7, #0
 8017b74:	e7f5      	b.n	8017b62 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017b76:	bf00      	nop
 8017b78:	20012160 	.word	0x20012160
 8017b7c:	2001215c 	.word	0x2001215c
 8017b80:	20012164 	.word	0x20012164

08017b84 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b88:	4bbc      	ldr	r3, [pc, #752]	@ (8017e7c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8017b8a:	460c      	mov	r4, r1
 8017b8c:	881b      	ldrh	r3, [r3, #0]
 8017b8e:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8017b90:	b0a9      	sub	sp, #164	@ 0xa4
 8017b92:	428b      	cmp	r3, r1
 8017b94:	4680      	mov	r8, r0
 8017b96:	d809      	bhi.n	8017bac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8017b98:	2300      	movs	r3, #0
 8017b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8017b9e:	e9c0 3200 	strd	r3, r2, [r0]
 8017ba2:	6083      	str	r3, [r0, #8]
 8017ba4:	4640      	mov	r0, r8
 8017ba6:	b029      	add	sp, #164	@ 0xa4
 8017ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bac:	4eb4      	ldr	r6, [pc, #720]	@ (8017e80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8017bae:	6833      	ldr	r3, [r6, #0]
 8017bb0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017bb4:	4bb3      	ldr	r3, [pc, #716]	@ (8017e84 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017bbc:	4bb2      	ldr	r3, [pc, #712]	@ (8017e88 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8017bbe:	6818      	ldr	r0, [r3, #0]
 8017bc0:	f7fb f810 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8017bc4:	682b      	ldr	r3, [r5, #0]
 8017bc6:	4681      	mov	r9, r0
 8017bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017bca:	4628      	mov	r0, r5
 8017bcc:	4798      	blx	r3
 8017bce:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8017bd0:	b203      	sxth	r3, r0
 8017bd2:	4407      	add	r7, r0
 8017bd4:	9304      	str	r3, [sp, #16]
 8017bd6:	b2bb      	uxth	r3, r7
 8017bd8:	9303      	str	r3, [sp, #12]
 8017bda:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8017bde:	4682      	mov	sl, r0
 8017be0:	a80f      	add	r0, sp, #60	@ 0x3c
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	f040 80a5 	bne.w	8017d32 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8017be8:	f004 fbf0 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 8017bec:	682b      	ldr	r3, [r5, #0]
 8017bee:	4628      	mov	r0, r5
 8017bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017bf2:	4798      	blx	r3
 8017bf4:	682b      	ldr	r3, [r5, #0]
 8017bf6:	4606      	mov	r6, r0
 8017bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017bfa:	4628      	mov	r0, r5
 8017bfc:	4798      	blx	r3
 8017bfe:	6823      	ldr	r3, [r4, #0]
 8017c00:	4607      	mov	r7, r0
 8017c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017c04:	4620      	mov	r0, r4
 8017c06:	4798      	blx	r3
 8017c08:	6823      	ldr	r3, [r4, #0]
 8017c0a:	4683      	mov	fp, r0
 8017c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017c10:	4620      	mov	r0, r4
 8017c12:	4798      	blx	r3
 8017c14:	4632      	mov	r2, r6
 8017c16:	2600      	movs	r6, #0
 8017c18:	463b      	mov	r3, r7
 8017c1a:	4637      	mov	r7, r6
 8017c1c:	e9cd b000 	strd	fp, r0, [sp]
 8017c20:	4649      	mov	r1, r9
 8017c22:	a80f      	add	r0, sp, #60	@ 0x3c
 8017c24:	f004 fc42 	bl	801c4ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017c28:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017c2c:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8017e80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8017c30:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017c34:	bf0c      	ite	eq
 8017c36:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8017c3a:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8017c3e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017c40:	f8db 3000 	ldr.w	r3, [fp]
 8017c44:	4629      	mov	r1, r5
 8017c46:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017c4a:	785b      	ldrb	r3, [r3, #1]
 8017c4c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8017c50:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017c54:	a80f      	add	r0, sp, #60	@ 0x3c
 8017c56:	f001 feea 	bl	8019a2e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8017c5a:	4286      	cmp	r6, r0
 8017c5c:	bfb8      	it	lt
 8017c5e:	4606      	movlt	r6, r0
 8017c60:	9b03      	ldr	r3, [sp, #12]
 8017c62:	3701      	adds	r7, #1
 8017c64:	eba9 0903 	sub.w	r9, r9, r3
 8017c68:	a80f      	add	r0, sp, #60	@ 0x3c
 8017c6a:	b236      	sxth	r6, r6
 8017c6c:	b2bf      	uxth	r7, r7
 8017c6e:	fa0f f989 	sxth.w	r9, r9
 8017c72:	f004 fbd2 	bl	801c41a <_ZN8touchgfx12TextProvider11endOfStringEv>
 8017c76:	b918      	cbnz	r0, 8017c80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017c78:	7a2b      	ldrb	r3, [r5, #8]
 8017c7a:	444b      	add	r3, r9
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	dcde      	bgt.n	8017c3e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8017c80:	9b03      	ldr	r3, [sp, #12]
 8017c82:	9a04      	ldr	r2, [sp, #16]
 8017c84:	fb13 f707 	smulbb	r7, r3, r7
 8017c88:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	1aff      	subs	r7, r7, r3
 8017c8e:	b2bf      	uxth	r7, r7
 8017c90:	b23b      	sxth	r3, r7
 8017c92:	429a      	cmp	r2, r3
 8017c94:	bfa8      	it	ge
 8017c96:	4657      	movge	r7, sl
 8017c98:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017c9c:	f895 9009 	ldrb.w	r9, [r5, #9]
 8017ca0:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017ca4:	6823      	ldr	r3, [r4, #0]
 8017ca6:	bf08      	it	eq
 8017ca8:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8017cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017cae:	bf18      	it	ne
 8017cb0:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8017cb4:	4798      	blx	r3
 8017cb6:	444f      	add	r7, r9
 8017cb8:	fa1f f987 	uxth.w	r9, r7
 8017cbc:	2801      	cmp	r0, #1
 8017cbe:	fa0f f789 	sxth.w	r7, r9
 8017cc2:	b2b3      	uxth	r3, r6
 8017cc4:	f000 80e2 	beq.w	8017e8c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8017cc8:	2802      	cmp	r0, #2
 8017cca:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8017cce:	f000 80e3 	beq.w	8017e98 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8017cd2:	7aea      	ldrb	r2, [r5, #11]
 8017cd4:	7b2d      	ldrb	r5, [r5, #12]
 8017cd6:	b236      	sxth	r6, r6
 8017cd8:	1ab6      	subs	r6, r6, r2
 8017cda:	442a      	add	r2, r5
 8017cdc:	4413      	add	r3, r2
 8017cde:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8017ce2:	fa1f fa86 	uxth.w	sl, r6
 8017ce6:	b29b      	uxth	r3, r3
 8017ce8:	2a02      	cmp	r2, #2
 8017cea:	fa0f fb8a 	sxth.w	fp, sl
 8017cee:	b21e      	sxth	r6, r3
 8017cf0:	f000 80d6 	beq.w	8017ea0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8017cf4:	2a03      	cmp	r2, #3
 8017cf6:	f000 80de 	beq.w	8017eb6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8017cfa:	2a01      	cmp	r2, #1
 8017cfc:	f040 80e6 	bne.w	8017ecc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8017d00:	4633      	mov	r3, r6
 8017d02:	463e      	mov	r6, r7
 8017d04:	461f      	mov	r7, r3
 8017d06:	8925      	ldrh	r5, [r4, #8]
 8017d08:	eba5 0909 	sub.w	r9, r5, r9
 8017d0c:	465d      	mov	r5, fp
 8017d0e:	fa0f fb89 	sxth.w	fp, r9
 8017d12:	4b5d      	ldr	r3, [pc, #372]	@ (8017e88 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8017d14:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8017d16:	6818      	ldr	r0, [r3, #0]
 8017d18:	f7fa ff64 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8017d1c:	f8a8 b000 	strh.w	fp, [r8]
 8017d20:	f8a8 5002 	strh.w	r5, [r8, #2]
 8017d24:	f8a8 6004 	strh.w	r6, [r8, #4]
 8017d28:	f8a8 7006 	strh.w	r7, [r8, #6]
 8017d2c:	f8c8 0008 	str.w	r0, [r8, #8]
 8017d30:	e738      	b.n	8017ba4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8017d32:	f004 fb4b 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 8017d36:	682b      	ldr	r3, [r5, #0]
 8017d38:	4628      	mov	r0, r5
 8017d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017d3c:	4798      	blx	r3
 8017d3e:	682b      	ldr	r3, [r5, #0]
 8017d40:	4607      	mov	r7, r0
 8017d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017d44:	4628      	mov	r0, r5
 8017d46:	4798      	blx	r3
 8017d48:	6823      	ldr	r3, [r4, #0]
 8017d4a:	4683      	mov	fp, r0
 8017d4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017d4e:	4620      	mov	r0, r4
 8017d50:	4798      	blx	r3
 8017d52:	6822      	ldr	r2, [r4, #0]
 8017d54:	9005      	str	r0, [sp, #20]
 8017d56:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8017d5a:	4620      	mov	r0, r4
 8017d5c:	4790      	blx	r2
 8017d5e:	9b05      	ldr	r3, [sp, #20]
 8017d60:	463a      	mov	r2, r7
 8017d62:	4649      	mov	r1, r9
 8017d64:	9001      	str	r0, [sp, #4]
 8017d66:	9300      	str	r3, [sp, #0]
 8017d68:	a80f      	add	r0, sp, #60	@ 0x3c
 8017d6a:	465b      	mov	r3, fp
 8017d6c:	f004 fb9e 	bl	801c4ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017d70:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8017d74:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8017d78:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8017d7c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8017d80:	bf0a      	itet	eq
 8017d82:	464a      	moveq	r2, r9
 8017d84:	461a      	movne	r2, r3
 8017d86:	4699      	moveq	r9, r3
 8017d88:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8017d8c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8017d8e:	1ad2      	subs	r2, r2, r3
 8017d90:	6833      	ldr	r3, [r6, #0]
 8017d92:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8017d96:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8017d9a:	7859      	ldrb	r1, [r3, #1]
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8017da2:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8017da6:	af0f      	add	r7, sp, #60	@ 0x3c
 8017da8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8017dac:	9707      	str	r7, [sp, #28]
 8017dae:	f88d 1020 	strb.w	r1, [sp, #32]
 8017db2:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8017db6:	9509      	str	r5, [sp, #36]	@ 0x24
 8017db8:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8017dbc:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8017dc0:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8017dc4:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017dc8:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8017dcc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8017dd0:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8017dd4:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8017dd8:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8017ddc:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8017de0:	b350      	cbz	r0, 8017e38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017de2:	682b      	ldr	r3, [r5, #0]
 8017de4:	4628      	mov	r0, r5
 8017de6:	695b      	ldr	r3, [r3, #20]
 8017de8:	4798      	blx	r3
 8017dea:	4607      	mov	r7, r0
 8017dec:	b320      	cbz	r0, 8017e38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017df0:	4639      	mov	r1, r7
 8017df2:	6803      	ldr	r3, [r0, #0]
 8017df4:	68db      	ldr	r3, [r3, #12]
 8017df6:	4798      	blx	r3
 8017df8:	4606      	mov	r6, r0
 8017dfa:	b1e8      	cbz	r0, 8017e38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017dfc:	7b43      	ldrb	r3, [r0, #13]
 8017dfe:	7a82      	ldrb	r2, [r0, #10]
 8017e00:	005b      	lsls	r3, r3, #1
 8017e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017e06:	4313      	orrs	r3, r2
 8017e08:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8017e0c:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8017e10:	2b06      	cmp	r3, #6
 8017e12:	d111      	bne.n	8017e38 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8017e14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017e16:	4632      	mov	r2, r6
 8017e18:	6803      	ldr	r3, [r0, #0]
 8017e1a:	4639      	mov	r1, r7
 8017e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e1e:	4798      	blx	r3
 8017e20:	7b73      	ldrb	r3, [r6, #13]
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8017e28:	7ab3      	ldrb	r3, [r6, #10]
 8017e2a:	4313      	orrs	r3, r2
 8017e2c:	4418      	add	r0, r3
 8017e2e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8017e32:	4418      	add	r0, r3
 8017e34:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8017e38:	2600      	movs	r6, #0
 8017e3a:	4637      	mov	r7, r6
 8017e3c:	a806      	add	r0, sp, #24
 8017e3e:	f001 ffeb 	bl	8019e18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8017e42:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8017e46:	9b03      	ldr	r3, [sp, #12]
 8017e48:	4286      	cmp	r6, r0
 8017e4a:	bfb8      	it	lt
 8017e4c:	4606      	movlt	r6, r0
 8017e4e:	eba9 0903 	sub.w	r9, r9, r3
 8017e52:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8017e56:	3701      	adds	r7, #1
 8017e58:	b236      	sxth	r6, r6
 8017e5a:	b2bf      	uxth	r7, r7
 8017e5c:	fa0f f989 	sxth.w	r9, r9
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	f43f af0d 	beq.w	8017c80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017e66:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	f47f af08 	bne.w	8017c80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017e70:	7a2b      	ldrb	r3, [r5, #8]
 8017e72:	444b      	add	r3, r9
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	dce1      	bgt.n	8017e3c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8017e78:	e702      	b.n	8017c80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8017e7a:	bf00      	nop
 8017e7c:	20012160 	.word	0x20012160
 8017e80:	2001215c 	.word	0x2001215c
 8017e84:	20012164 	.word	0x20012164
 8017e88:	20012168 	.word	0x20012168
 8017e8c:	2002      	movs	r0, #2
 8017e8e:	ebaa 0606 	sub.w	r6, sl, r6
 8017e92:	fb96 f6f0 	sdiv	r6, r6, r0
 8017e96:	e71c      	b.n	8017cd2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017e98:	441e      	add	r6, r3
 8017e9a:	ebaa 0606 	sub.w	r6, sl, r6
 8017e9e:	e718      	b.n	8017cd2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8017ea0:	8925      	ldrh	r5, [r4, #8]
 8017ea2:	1aed      	subs	r5, r5, r3
 8017ea4:	eba5 050a 	sub.w	r5, r5, sl
 8017ea8:	fa0f fb85 	sxth.w	fp, r5
 8017eac:	8965      	ldrh	r5, [r4, #10]
 8017eae:	eba5 0509 	sub.w	r5, r5, r9
 8017eb2:	b22d      	sxth	r5, r5
 8017eb4:	e72d      	b.n	8017d12 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017eb6:	8965      	ldrh	r5, [r4, #10]
 8017eb8:	f04f 0b00 	mov.w	fp, #0
 8017ebc:	1aed      	subs	r5, r5, r3
 8017ebe:	4633      	mov	r3, r6
 8017ec0:	eba5 050a 	sub.w	r5, r5, sl
 8017ec4:	463e      	mov	r6, r7
 8017ec6:	b22d      	sxth	r5, r5
 8017ec8:	461f      	mov	r7, r3
 8017eca:	e722      	b.n	8017d12 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017ecc:	2500      	movs	r5, #0
 8017ece:	e720      	b.n	8017d12 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08017ed0 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8017ed0:	b513      	push	{r0, r1, r4, lr}
 8017ed2:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8017ed6:	4604      	mov	r4, r0
 8017ed8:	b1fb      	cbz	r3, 8017f1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017eda:	4b16      	ldr	r3, [pc, #88]	@ (8017f34 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8017edc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8017ede:	881b      	ldrh	r3, [r3, #0]
 8017ee0:	428b      	cmp	r3, r1
 8017ee2:	d91a      	bls.n	8017f1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017ee4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	dd16      	ble.n	8017f1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017eec:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	dd12      	ble.n	8017f1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017ef4:	4b10      	ldr	r3, [pc, #64]	@ (8017f38 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8017ef6:	6818      	ldr	r0, [r3, #0]
 8017ef8:	f7fa fe74 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8017efc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8017f00:	6822      	ldr	r2, [r4, #0]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	db06      	blt.n	8017f14 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8017f06:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	db02      	blt.n	8017f14 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8017f0e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017f10:	4298      	cmp	r0, r3
 8017f12:	d004      	beq.n	8017f1e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8017f14:	6953      	ldr	r3, [r2, #20]
 8017f16:	4620      	mov	r0, r4
 8017f18:	4798      	blx	r3
 8017f1a:	b002      	add	sp, #8
 8017f1c:	bd10      	pop	{r4, pc}
 8017f1e:	466b      	mov	r3, sp
 8017f20:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8017f24:	c903      	ldmia	r1, {r0, r1}
 8017f26:	6912      	ldr	r2, [r2, #16]
 8017f28:	e883 0003 	stmia.w	r3, {r0, r1}
 8017f2c:	4619      	mov	r1, r3
 8017f2e:	4620      	mov	r0, r4
 8017f30:	4790      	blx	r2
 8017f32:	e7f2      	b.n	8017f1a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017f34:	20012160 	.word	0x20012160
 8017f38:	20012168 	.word	0x20012168

08017f3c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8017f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f40:	4b44      	ldr	r3, [pc, #272]	@ (8018054 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8017f42:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8017f44:	881b      	ldrh	r3, [r3, #0]
 8017f46:	b08e      	sub	sp, #56	@ 0x38
 8017f48:	4293      	cmp	r3, r2
 8017f4a:	4604      	mov	r4, r0
 8017f4c:	d97e      	bls.n	801804c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017f4e:	6808      	ldr	r0, [r1, #0]
 8017f50:	4d41      	ldr	r5, [pc, #260]	@ (8018058 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8017f52:	6849      	ldr	r1, [r1, #4]
 8017f54:	ab05      	add	r3, sp, #20
 8017f56:	c303      	stmia	r3!, {r0, r1}
 8017f58:	4611      	mov	r1, r2
 8017f5a:	6828      	ldr	r0, [r5, #0]
 8017f5c:	f7fa fe42 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8017f60:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	db11      	blt.n	8017f8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017f68:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	db0d      	blt.n	8017f8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017f70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8017f72:	4298      	cmp	r0, r3
 8017f74:	d10a      	bne.n	8017f8c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8017f76:	ab09      	add	r3, sp, #36	@ 0x24
 8017f78:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 8017f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f80:	e883 0003 	stmia.w	r3, {r0, r1}
 8017f84:	4619      	mov	r1, r3
 8017f86:	a805      	add	r0, sp, #20
 8017f88:	f7fd fb12 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 8017f8c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	dd5b      	ble.n	801804c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017f94:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	dd57      	ble.n	801804c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017f9c:	4f2f      	ldr	r7, [pc, #188]	@ (801805c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8017f9e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017fa0:	683b      	ldr	r3, [r7, #0]
 8017fa2:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8018060 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017fae:	2e00      	cmp	r6, #0
 8017fb0:	d04c      	beq.n	801804c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017fb2:	6823      	ldr	r3, [r4, #0]
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fb8:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 8017fbc:	4798      	blx	r3
 8017fbe:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 8017fc6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8017fca:	785b      	ldrb	r3, [r3, #1]
 8017fcc:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 8017fd0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017fd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017fd8:	4b22      	ldr	r3, [pc, #136]	@ (8018064 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8017fda:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 8017fde:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 8017fe2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	9609      	str	r6, [sp, #36]	@ 0x24
 8017fe8:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8017fec:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 8017ff0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017ff2:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 8017ff6:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 8017ffa:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 8017ffe:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 8018002:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8018006:	b10a      	cbz	r2, 801800c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8018008:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 801800a:	b906      	cbnz	r6, 801800e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801800c:	689e      	ldr	r6, [r3, #8]
 801800e:	af07      	add	r7, sp, #28
 8018010:	4621      	mov	r1, r4
 8018012:	4638      	mov	r0, r7
 8018014:	f003 fd56 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018018:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801801a:	6828      	ldr	r0, [r5, #0]
 801801c:	f7fa fde2 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 8018020:	6823      	ldr	r3, [r4, #0]
 8018022:	4605      	mov	r5, r0
 8018024:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018026:	4620      	mov	r0, r4
 8018028:	4798      	blx	r3
 801802a:	6823      	ldr	r3, [r4, #0]
 801802c:	4680      	mov	r8, r0
 801802e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8018032:	4620      	mov	r0, r4
 8018034:	4798      	blx	r3
 8018036:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801803a:	ab09      	add	r3, sp, #36	@ 0x24
 801803c:	9300      	str	r3, [sp, #0]
 801803e:	9501      	str	r5, [sp, #4]
 8018040:	ab05      	add	r3, sp, #20
 8018042:	e897 0006 	ldmia.w	r7, {r1, r2}
 8018046:	4630      	mov	r0, r6
 8018048:	f7fa fd5d 	bl	8012b06 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801804c:	b00e      	add	sp, #56	@ 0x38
 801804e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018052:	bf00      	nop
 8018054:	20012160 	.word	0x20012160
 8018058:	20012168 	.word	0x20012168
 801805c:	2001215c 	.word	0x2001215c
 8018060:	20012164 	.word	0x20012164
 8018064:	20012104 	.word	0x20012104

08018068 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018068:	b538      	push	{r3, r4, r5, lr}
 801806a:	4b0e      	ldr	r3, [pc, #56]	@ (80180a4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801806c:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 801806e:	881b      	ldrh	r3, [r3, #0]
 8018070:	4604      	mov	r4, r0
 8018072:	429a      	cmp	r2, r3
 8018074:	d214      	bcs.n	80180a0 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018076:	6803      	ldr	r3, [r0, #0]
 8018078:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801807a:	4798      	blx	r3
 801807c:	6823      	ldr	r3, [r4, #0]
 801807e:	4605      	mov	r5, r0
 8018080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018082:	4620      	mov	r0, r4
 8018084:	4798      	blx	r3
 8018086:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801808a:	b22d      	sxth	r5, r5
 801808c:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8018090:	4601      	mov	r1, r0
 8018092:	bf06      	itte	eq
 8018094:	4602      	moveq	r2, r0
 8018096:	4629      	moveq	r1, r5
 8018098:	462a      	movne	r2, r5
 801809a:	4620      	mov	r0, r4
 801809c:	f7f7 f8a9 	bl	800f1f2 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80180a0:	bd38      	pop	{r3, r4, r5, pc}
 80180a2:	bf00      	nop
 80180a4:	20012160 	.word	0x20012160

080180a8 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80180a8:	b530      	push	{r4, r5, lr}
 80180aa:	888b      	ldrh	r3, [r1, #4]
 80180ac:	b085      	sub	sp, #20
 80180ae:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80180b0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80180b4:	4604      	mov	r4, r0
 80180b6:	b923      	cbnz	r3, 80180c2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80180b8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80180bc:	b90b      	cbnz	r3, 80180c2 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80180be:	f7ff ffd3 	bl	8018068 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80180c2:	466d      	mov	r5, sp
 80180c4:	6823      	ldr	r3, [r4, #0]
 80180c6:	4621      	mov	r1, r4
 80180c8:	4628      	mov	r0, r5
 80180ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80180ce:	4798      	blx	r3
 80180d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80180d4:	343c      	adds	r4, #60	@ 0x3c
 80180d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80180da:	b005      	add	sp, #20
 80180dc:	bd30      	pop	{r4, r5, pc}

080180de <_ZNK8touchgfx3Box12getSolidRectEv>:
 80180de:	2300      	movs	r3, #0
 80180e0:	8083      	strh	r3, [r0, #4]
 80180e2:	80c3      	strh	r3, [r0, #6]
 80180e4:	8003      	strh	r3, [r0, #0]
 80180e6:	8043      	strh	r3, [r0, #2]
 80180e8:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80180ec:	2bff      	cmp	r3, #255	@ 0xff
 80180ee:	bf01      	itttt	eq
 80180f0:	890b      	ldrheq	r3, [r1, #8]
 80180f2:	8083      	strheq	r3, [r0, #4]
 80180f4:	894b      	ldrheq	r3, [r1, #10]
 80180f6:	80c3      	strheq	r3, [r0, #6]
 80180f8:	4770      	bx	lr
	...

080180fc <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80180fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80180fe:	4604      	mov	r4, r0
 8018100:	466b      	mov	r3, sp
 8018102:	6808      	ldr	r0, [r1, #0]
 8018104:	6849      	ldr	r1, [r1, #4]
 8018106:	c303      	stmia	r3!, {r0, r1}
 8018108:	6823      	ldr	r3, [r4, #0]
 801810a:	4669      	mov	r1, sp
 801810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801810e:	4620      	mov	r0, r4
 8018110:	4798      	blx	r3
 8018112:	4b08      	ldr	r3, [pc, #32]	@ (8018134 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801811a:	b10a      	cbz	r2, 8018120 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801811c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801811e:	b900      	cbnz	r0, 8018122 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8018120:	6898      	ldr	r0, [r3, #8]
 8018122:	6803      	ldr	r3, [r0, #0]
 8018124:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8018126:	6a1d      	ldr	r5, [r3, #32]
 8018128:	4669      	mov	r1, sp
 801812a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801812e:	47a8      	blx	r5
 8018130:	b003      	add	sp, #12
 8018132:	bd30      	pop	{r4, r5, pc}
 8018134:	20012104 	.word	0x20012104

08018138 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8018138:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801813c:	b12a      	cbz	r2, 801814a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801813e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8018142:	b112      	cbz	r2, 801814a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8018144:	6803      	ldr	r3, [r0, #0]
 8018146:	695b      	ldr	r3, [r3, #20]
 8018148:	4718      	bx	r3
 801814a:	4770      	bx	lr

0801814c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 801814c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018150:	4b2f      	ldr	r3, [pc, #188]	@ (8018210 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 8018152:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8018154:	881b      	ldrh	r3, [r3, #0]
 8018156:	b08d      	sub	sp, #52	@ 0x34
 8018158:	4293      	cmp	r3, r2
 801815a:	4604      	mov	r4, r0
 801815c:	460f      	mov	r7, r1
 801815e:	d954      	bls.n	801820a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018160:	4b2c      	ldr	r3, [pc, #176]	@ (8018214 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8018162:	6819      	ldr	r1, [r3, #0]
 8018164:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8018168:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801816c:	4a2a      	ldr	r2, [pc, #168]	@ (8018218 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801816e:	6812      	ldr	r2, [r2, #0]
 8018170:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8018174:	2900      	cmp	r1, #0
 8018176:	d048      	beq.n	801820a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018178:	785a      	ldrb	r2, [r3, #1]
 801817a:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 801817e:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8018182:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8018186:	4b25      	ldr	r3, [pc, #148]	@ (801821c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8018188:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801818c:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8018190:	681a      	ldr	r2, [r3, #0]
 8018192:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 8018196:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 801819a:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 801819e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80181a0:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 80181a4:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 80181a8:	9107      	str	r1, [sp, #28]
 80181aa:	f88d 8020 	strb.w	r8, [sp, #32]
 80181ae:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 80181b2:	9609      	str	r6, [sp, #36]	@ 0x24
 80181b4:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 80181b8:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 80181bc:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 80181c0:	b10b      	cbz	r3, 80181c6 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 80181c2:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 80181c4:	b905      	cbnz	r5, 80181c8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 80181c6:	6895      	ldr	r5, [r2, #8]
 80181c8:	ae05      	add	r6, sp, #20
 80181ca:	4621      	mov	r1, r4
 80181cc:	4630      	mov	r0, r6
 80181ce:	f003 fc79 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80181d2:	4b13      	ldr	r3, [pc, #76]	@ (8018220 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 80181d4:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80181d6:	6818      	ldr	r0, [r3, #0]
 80181d8:	f7fa fd04 	bl	8012be4 <_ZNK8touchgfx5Texts7getTextEt>
 80181dc:	6823      	ldr	r3, [r4, #0]
 80181de:	4680      	mov	r8, r0
 80181e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80181e2:	4620      	mov	r0, r4
 80181e4:	4798      	blx	r3
 80181e6:	6823      	ldr	r3, [r4, #0]
 80181e8:	4681      	mov	r9, r0
 80181ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80181ee:	4620      	mov	r0, r4
 80181f0:	4798      	blx	r3
 80181f2:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80181f6:	ab07      	add	r3, sp, #28
 80181f8:	9300      	str	r3, [sp, #0]
 80181fa:	f8cd 8004 	str.w	r8, [sp, #4]
 80181fe:	463b      	mov	r3, r7
 8018200:	e896 0006 	ldmia.w	r6, {r1, r2}
 8018204:	4628      	mov	r0, r5
 8018206:	f7fa fc7e 	bl	8012b06 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801820a:	b00d      	add	sp, #52	@ 0x34
 801820c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018210:	20012160 	.word	0x20012160
 8018214:	2001215c 	.word	0x2001215c
 8018218:	20012164 	.word	0x20012164
 801821c:	20012104 	.word	0x20012104
 8018220:	20012168 	.word	0x20012168

08018224 <_ZN8touchgfx7OutlineD1Ev>:
 8018224:	4770      	bx	lr

08018226 <_ZN8touchgfx7OutlineD0Ev>:
 8018226:	b510      	push	{r4, lr}
 8018228:	4604      	mov	r4, r0
 801822a:	2130      	movs	r1, #48	@ 0x30
 801822c:	f014 fa29 	bl	802c682 <_ZdlPvj>
 8018230:	4620      	mov	r0, r4
 8018232:	bd10      	pop	{r4, pc}

08018234 <_ZN8touchgfx7Outline5resetEv>:
 8018234:	b510      	push	{r4, lr}
 8018236:	4604      	mov	r4, r0
 8018238:	f000 fe94 	bl	8018f64 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801823c:	60e0      	str	r0, [r4, #12]
 801823e:	f000 fe97 	bl	8018f70 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8018242:	2200      	movs	r2, #0
 8018244:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8018248:	68e3      	ldr	r3, [r4, #12]
 801824a:	08c0      	lsrs	r0, r0, #3
 801824c:	3801      	subs	r0, #1
 801824e:	6123      	str	r3, [r4, #16]
 8018250:	6060      	str	r0, [r4, #4]
 8018252:	60a2      	str	r2, [r4, #8]
 8018254:	8019      	strh	r1, [r3, #0]
 8018256:	8059      	strh	r1, [r3, #2]
 8018258:	809a      	strh	r2, [r3, #4]
 801825a:	80da      	strh	r2, [r3, #6]
 801825c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801825e:	f023 0301 	bic.w	r3, r3, #1
 8018262:	f043 0302 	orr.w	r3, r3, #2
 8018266:	6263      	str	r3, [r4, #36]	@ 0x24
 8018268:	bd10      	pop	{r4, pc}
	...

0801826c <_ZN8touchgfx7OutlineC1Ev>:
 801826c:	4b0a      	ldr	r3, [pc, #40]	@ (8018298 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801826e:	b510      	push	{r4, lr}
 8018270:	6003      	str	r3, [r0, #0]
 8018272:	2300      	movs	r3, #0
 8018274:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8018278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801827c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8018280:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8018284:	6243      	str	r3, [r0, #36]	@ 0x24
 8018286:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801828a:	4604      	mov	r4, r0
 801828c:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8018290:	f7ff ffd0 	bl	8018234 <_ZN8touchgfx7Outline5resetEv>
 8018294:	4620      	mov	r0, r4
 8018296:	bd10      	pop	{r4, pc}
 8018298:	080303b4 	.word	0x080303b4

0801829c <_ZN8touchgfx7Outline10renderLineEiiii>:
 801829c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182a0:	b093      	sub	sp, #76	@ 0x4c
 80182a2:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80182a4:	9305      	str	r3, [sp, #20]
 80182a6:	f004 051f 	and.w	r5, r4, #31
 80182aa:	1153      	asrs	r3, r2, #5
 80182ac:	9504      	str	r5, [sp, #16]
 80182ae:	1156      	asrs	r6, r2, #5
 80182b0:	1165      	asrs	r5, r4, #5
 80182b2:	9303      	str	r3, [sp, #12]
 80182b4:	42ae      	cmp	r6, r5
 80182b6:	ea4f 1364 	mov.w	r3, r4, asr #5
 80182ba:	9306      	str	r3, [sp, #24]
 80182bc:	f002 031f 	and.w	r3, r2, #31
 80182c0:	f040 80f8 	bne.w	80184b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x218>
 80182c4:	9c04      	ldr	r4, [sp, #16]
 80182c6:	9a05      	ldr	r2, [sp, #20]
 80182c8:	42a3      	cmp	r3, r4
 80182ca:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80182ce:	6902      	ldr	r2, [r0, #16]
 80182d0:	d125      	bne.n	801831e <_ZN8touchgfx7Outline10renderLineEiiii+0x82>
 80182d2:	f9b2 3000 	ldrsh.w	r3, [r2]
 80182d6:	459e      	cmp	lr, r3
 80182d8:	d103      	bne.n	80182e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46>
 80182da:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80182de:	429e      	cmp	r6, r3
 80182e0:	d035      	beq.n	801834e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80182e2:	88d1      	ldrh	r1, [r2, #6]
 80182e4:	8893      	ldrh	r3, [r2, #4]
 80182e6:	430b      	orrs	r3, r1
 80182e8:	d010      	beq.n	801830c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80182ea:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	db0c      	blt.n	801830c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80182f2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80182f4:	428b      	cmp	r3, r1
 80182f6:	da09      	bge.n	801830c <_ZN8touchgfx7Outline10renderLineEiiii+0x70>
 80182f8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80182fc:	428b      	cmp	r3, r1
 80182fe:	bf38      	it	cc
 8018300:	3208      	addcc	r2, #8
 8018302:	f103 0301 	add.w	r3, r3, #1
 8018306:	bf38      	it	cc
 8018308:	6102      	strcc	r2, [r0, #16]
 801830a:	6083      	str	r3, [r0, #8]
 801830c:	6903      	ldr	r3, [r0, #16]
 801830e:	9a03      	ldr	r2, [sp, #12]
 8018310:	f8a3 e000 	strh.w	lr, [r3]
 8018314:	805a      	strh	r2, [r3, #2]
 8018316:	2200      	movs	r2, #0
 8018318:	809a      	strh	r2, [r3, #4]
 801831a:	80da      	strh	r2, [r3, #6]
 801831c:	e017      	b.n	801834e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801831e:	9c05      	ldr	r4, [sp, #20]
 8018320:	114e      	asrs	r6, r1, #5
 8018322:	f004 041f 	and.w	r4, r4, #31
 8018326:	9402      	str	r4, [sp, #8]
 8018328:	9c04      	ldr	r4, [sp, #16]
 801832a:	4576      	cmp	r6, lr
 801832c:	f001 0c1f 	and.w	ip, r1, #31
 8018330:	eba4 0403 	sub.w	r4, r4, r3
 8018334:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8018338:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801833c:	d10a      	bne.n	8018354 <_ZN8touchgfx7Outline10renderLineEiiii+0xb8>
 801833e:	9b02      	ldr	r3, [sp, #8]
 8018340:	44a0      	add	r8, r4
 8018342:	449c      	add	ip, r3
 8018344:	fb04 a40c 	mla	r4, r4, ip, sl
 8018348:	f8a2 8004 	strh.w	r8, [r2, #4]
 801834c:	80d4      	strh	r4, [r2, #6]
 801834e:	b013      	add	sp, #76	@ 0x4c
 8018350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018354:	9d05      	ldr	r5, [sp, #20]
 8018356:	1a69      	subs	r1, r5, r1
 8018358:	bf5b      	ittet	pl
 801835a:	f1cc 0520 	rsbpl	r5, ip, #32
 801835e:	436c      	mulpl	r4, r5
 8018360:	2500      	movmi	r5, #0
 8018362:	2520      	movpl	r5, #32
 8018364:	bf44      	itt	mi
 8018366:	fb04 f40c 	mulmi.w	r4, r4, ip
 801836a:	4249      	negmi	r1, r1
 801836c:	9501      	str	r5, [sp, #4]
 801836e:	fb94 f5f1 	sdiv	r5, r4, r1
 8018372:	bf54      	ite	pl
 8018374:	f04f 0901 	movpl.w	r9, #1
 8018378:	f04f 39ff 	movmi.w	r9, #4294967295
 801837c:	fb01 4415 	mls	r4, r1, r5, r4
 8018380:	9f01      	ldr	r7, [sp, #4]
 8018382:	2c00      	cmp	r4, #0
 8018384:	bfb8      	it	lt
 8018386:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801838a:	44bc      	add	ip, r7
 801838c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018390:	44a8      	add	r8, r5
 8018392:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018396:	f8a2 c006 	strh.w	ip, [r2, #6]
 801839a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801839e:	bfb8      	it	lt
 80183a0:	1864      	addlt	r4, r4, r1
 80183a2:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80183a6:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80183aa:	444e      	add	r6, r9
 80183ac:	ea58 0202 	orrs.w	r2, r8, r2
 80183b0:	d011      	beq.n	80183d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80183b2:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80183b6:	f1b8 0f00 	cmp.w	r8, #0
 80183ba:	db0c      	blt.n	80183d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80183bc:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80183be:	4590      	cmp	r8, r2
 80183c0:	da09      	bge.n	80183d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x13a>
 80183c2:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80183c6:	4590      	cmp	r8, r2
 80183c8:	bf3c      	itt	cc
 80183ca:	f10c 0208 	addcc.w	r2, ip, #8
 80183ce:	6102      	strcc	r2, [r0, #16]
 80183d0:	f108 0201 	add.w	r2, r8, #1
 80183d4:	6082      	str	r2, [r0, #8]
 80183d6:	2700      	movs	r7, #0
 80183d8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80183dc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80183e0:	45b6      	cmp	lr, r6
 80183e2:	f8ac 6000 	strh.w	r6, [ip]
 80183e6:	f8ac 2002 	strh.w	r2, [ip, #2]
 80183ea:	f8ac 7004 	strh.w	r7, [ip, #4]
 80183ee:	f8ac 7006 	strh.w	r7, [ip, #6]
 80183f2:	442b      	add	r3, r5
 80183f4:	d04d      	beq.n	8018492 <_ZN8touchgfx7Outline10renderLineEiiii+0x1f6>
 80183f6:	9f04      	ldr	r7, [sp, #16]
 80183f8:	f04f 0a00 	mov.w	sl, #0
 80183fc:	1aff      	subs	r7, r7, r3
 80183fe:	443d      	add	r5, r7
 8018400:	016d      	lsls	r5, r5, #5
 8018402:	fb95 f8f1 	sdiv	r8, r5, r1
 8018406:	fb01 5518 	mls	r5, r1, r8, r5
 801840a:	2d00      	cmp	r5, #0
 801840c:	bfb8      	it	lt
 801840e:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018412:	f108 0701 	add.w	r7, r8, #1
 8018416:	bfb8      	it	lt
 8018418:	186d      	addlt	r5, r5, r1
 801841a:	1a64      	subs	r4, r4, r1
 801841c:	9703      	str	r7, [sp, #12]
 801841e:	1964      	adds	r4, r4, r5
 8018420:	bf48      	it	mi
 8018422:	4647      	movmi	r7, r8
 8018424:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018428:	bf58      	it	pl
 801842a:	9f03      	ldrpl	r7, [sp, #12]
 801842c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018430:	443b      	add	r3, r7
 8018432:	44bb      	add	fp, r7
 8018434:	f8ac b004 	strh.w	fp, [ip, #4]
 8018438:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801843c:	bf58      	it	pl
 801843e:	1a64      	subpl	r4, r4, r1
 8018440:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018444:	f8ac b006 	strh.w	fp, [ip, #6]
 8018448:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801844c:	444e      	add	r6, r9
 801844e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018452:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018456:	ea5b 0707 	orrs.w	r7, fp, r7
 801845a:	d011      	beq.n	8018480 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801845c:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018460:	f1bb 0f00 	cmp.w	fp, #0
 8018464:	db0c      	blt.n	8018480 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 8018466:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018468:	45bb      	cmp	fp, r7
 801846a:	da09      	bge.n	8018480 <_ZN8touchgfx7Outline10renderLineEiiii+0x1e4>
 801846c:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018470:	45bb      	cmp	fp, r7
 8018472:	bf3c      	itt	cc
 8018474:	f10c 0708 	addcc.w	r7, ip, #8
 8018478:	6107      	strcc	r7, [r0, #16]
 801847a:	f10b 0701 	add.w	r7, fp, #1
 801847e:	6087      	str	r7, [r0, #8]
 8018480:	6907      	ldr	r7, [r0, #16]
 8018482:	45b6      	cmp	lr, r6
 8018484:	803e      	strh	r6, [r7, #0]
 8018486:	807a      	strh	r2, [r7, #2]
 8018488:	f8a7 a004 	strh.w	sl, [r7, #4]
 801848c:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018490:	d1c5      	bne.n	801841e <_ZN8touchgfx7Outline10renderLineEiiii+0x182>
 8018492:	9a04      	ldr	r2, [sp, #16]
 8018494:	1ad3      	subs	r3, r2, r3
 8018496:	6902      	ldr	r2, [r0, #16]
 8018498:	8891      	ldrh	r1, [r2, #4]
 801849a:	88d6      	ldrh	r6, [r2, #6]
 801849c:	4419      	add	r1, r3
 801849e:	8091      	strh	r1, [r2, #4]
 80184a0:	9902      	ldr	r1, [sp, #8]
 80184a2:	f101 0c20 	add.w	ip, r1, #32
 80184a6:	9901      	ldr	r1, [sp, #4]
 80184a8:	ebac 0c01 	sub.w	ip, ip, r1
 80184ac:	fb03 630c 	mla	r3, r3, ip, r6
 80184b0:	80d3      	strh	r3, [r2, #6]
 80184b2:	e74c      	b.n	801834e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80184b4:	9d05      	ldr	r5, [sp, #20]
 80184b6:	1aa2      	subs	r2, r4, r2
 80184b8:	eba5 0501 	sub.w	r5, r5, r1
 80184bc:	9508      	str	r5, [sp, #32]
 80184be:	9202      	str	r2, [sp, #8]
 80184c0:	f140 8128 	bpl.w	8018714 <_ZN8touchgfx7Outline10renderLineEiiii+0x478>
 80184c4:	9a03      	ldr	r2, [sp, #12]
 80184c6:	2a00      	cmp	r2, #0
 80184c8:	f6ff af41 	blt.w	801834e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80184cc:	f04f 34ff 	mov.w	r4, #4294967295
 80184d0:	9a02      	ldr	r2, [sp, #8]
 80184d2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80184d4:	4252      	negs	r2, r2
 80184d6:	9202      	str	r2, [sp, #8]
 80184d8:	9a06      	ldr	r2, [sp, #24]
 80184da:	2400      	movs	r4, #0
 80184dc:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80184e0:	9206      	str	r2, [sp, #24]
 80184e2:	462a      	mov	r2, r5
 80184e4:	435a      	muls	r2, r3
 80184e6:	9401      	str	r4, [sp, #4]
 80184e8:	9c02      	ldr	r4, [sp, #8]
 80184ea:	9d02      	ldr	r5, [sp, #8]
 80184ec:	fb92 f4f4 	sdiv	r4, r2, r4
 80184f0:	fb05 2214 	mls	r2, r5, r4, r2
 80184f4:	2a00      	cmp	r2, #0
 80184f6:	9207      	str	r2, [sp, #28]
 80184f8:	bfbc      	itt	lt
 80184fa:	1952      	addlt	r2, r2, r5
 80184fc:	9207      	strlt	r2, [sp, #28]
 80184fe:	9a01      	ldr	r2, [sp, #4]
 8018500:	bfb8      	it	lt
 8018502:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018506:	eb04 0901 	add.w	r9, r4, r1
 801850a:	429a      	cmp	r2, r3
 801850c:	ea4f 1669 	mov.w	r6, r9, asr #5
 8018510:	6905      	ldr	r5, [r0, #16]
 8018512:	f040 8112 	bne.w	801873a <_ZN8touchgfx7Outline10renderLineEiiii+0x49e>
 8018516:	f9b5 3000 	ldrsh.w	r3, [r5]
 801851a:	429e      	cmp	r6, r3
 801851c:	d104      	bne.n	8018528 <_ZN8touchgfx7Outline10renderLineEiiii+0x28c>
 801851e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018522:	9a03      	ldr	r2, [sp, #12]
 8018524:	429a      	cmp	r2, r3
 8018526:	d01b      	beq.n	8018560 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 8018528:	88ea      	ldrh	r2, [r5, #6]
 801852a:	88ab      	ldrh	r3, [r5, #4]
 801852c:	4313      	orrs	r3, r2
 801852e:	d010      	beq.n	8018552 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8018530:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018534:	2a00      	cmp	r2, #0
 8018536:	db0c      	blt.n	8018552 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 8018538:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801853a:	429a      	cmp	r2, r3
 801853c:	da09      	bge.n	8018552 <_ZN8touchgfx7Outline10renderLineEiiii+0x2b6>
 801853e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018542:	429a      	cmp	r2, r3
 8018544:	bf38      	it	cc
 8018546:	3508      	addcc	r5, #8
 8018548:	f102 0201 	add.w	r2, r2, #1
 801854c:	bf38      	it	cc
 801854e:	6105      	strcc	r5, [r0, #16]
 8018550:	6082      	str	r2, [r0, #8]
 8018552:	6903      	ldr	r3, [r0, #16]
 8018554:	9a03      	ldr	r2, [sp, #12]
 8018556:	801e      	strh	r6, [r3, #0]
 8018558:	805a      	strh	r2, [r3, #2]
 801855a:	2200      	movs	r2, #0
 801855c:	809a      	strh	r2, [r3, #4]
 801855e:	80da      	strh	r2, [r3, #6]
 8018560:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018562:	9a03      	ldr	r2, [sp, #12]
 8018564:	6901      	ldr	r1, [r0, #16]
 8018566:	441a      	add	r2, r3
 8018568:	f9b1 3000 	ldrsh.w	r3, [r1]
 801856c:	42b3      	cmp	r3, r6
 801856e:	d103      	bne.n	8018578 <_ZN8touchgfx7Outline10renderLineEiiii+0x2dc>
 8018570:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018574:	429a      	cmp	r2, r3
 8018576:	d01a      	beq.n	80185ae <_ZN8touchgfx7Outline10renderLineEiiii+0x312>
 8018578:	88cc      	ldrh	r4, [r1, #6]
 801857a:	888b      	ldrh	r3, [r1, #4]
 801857c:	4323      	orrs	r3, r4
 801857e:	d010      	beq.n	80185a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8018580:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018584:	2c00      	cmp	r4, #0
 8018586:	db0c      	blt.n	80185a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 8018588:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801858a:	429c      	cmp	r4, r3
 801858c:	da09      	bge.n	80185a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x306>
 801858e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018592:	429c      	cmp	r4, r3
 8018594:	bf38      	it	cc
 8018596:	3108      	addcc	r1, #8
 8018598:	f104 0401 	add.w	r4, r4, #1
 801859c:	bf38      	it	cc
 801859e:	6101      	strcc	r1, [r0, #16]
 80185a0:	6084      	str	r4, [r0, #8]
 80185a2:	2100      	movs	r1, #0
 80185a4:	6903      	ldr	r3, [r0, #16]
 80185a6:	801e      	strh	r6, [r3, #0]
 80185a8:	805a      	strh	r2, [r3, #2]
 80185aa:	8099      	strh	r1, [r3, #4]
 80185ac:	80d9      	strh	r1, [r3, #6]
 80185ae:	9b06      	ldr	r3, [sp, #24]
 80185b0:	4293      	cmp	r3, r2
 80185b2:	f000 8082 	beq.w	80186ba <_ZN8touchgfx7Outline10renderLineEiiii+0x41e>
 80185b6:	9b08      	ldr	r3, [sp, #32]
 80185b8:	9902      	ldr	r1, [sp, #8]
 80185ba:	015b      	lsls	r3, r3, #5
 80185bc:	fb93 f1f1 	sdiv	r1, r3, r1
 80185c0:	9c02      	ldr	r4, [sp, #8]
 80185c2:	9103      	str	r1, [sp, #12]
 80185c4:	fb04 3311 	mls	r3, r4, r1, r3
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	9308      	str	r3, [sp, #32]
 80185cc:	da04      	bge.n	80185d8 <_ZN8touchgfx7Outline10renderLineEiiii+0x33c>
 80185ce:	1e4b      	subs	r3, r1, #1
 80185d0:	9303      	str	r3, [sp, #12]
 80185d2:	9b08      	ldr	r3, [sp, #32]
 80185d4:	4423      	add	r3, r4
 80185d6:	9308      	str	r3, [sp, #32]
 80185d8:	464f      	mov	r7, r9
 80185da:	2600      	movs	r6, #0
 80185dc:	9b07      	ldr	r3, [sp, #28]
 80185de:	9902      	ldr	r1, [sp, #8]
 80185e0:	1a5b      	subs	r3, r3, r1
 80185e2:	9307      	str	r3, [sp, #28]
 80185e4:	9b01      	ldr	r3, [sp, #4]
 80185e6:	f1c3 0320 	rsb	r3, r3, #32
 80185ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80185ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80185ee:	9b01      	ldr	r3, [sp, #4]
 80185f0:	1a5b      	subs	r3, r3, r1
 80185f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80185f4:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80185f8:	185b      	adds	r3, r3, r1
 80185fa:	bf58      	it	pl
 80185fc:	9902      	ldrpl	r1, [sp, #8]
 80185fe:	9307      	str	r3, [sp, #28]
 8018600:	bf5d      	ittte	pl
 8018602:	1a5b      	subpl	r3, r3, r1
 8018604:	9307      	strpl	r3, [sp, #28]
 8018606:	9b03      	ldrpl	r3, [sp, #12]
 8018608:	9903      	ldrmi	r1, [sp, #12]
 801860a:	bf58      	it	pl
 801860c:	1c59      	addpl	r1, r3, #1
 801860e:	4489      	add	r9, r1
 8018610:	2a00      	cmp	r2, #0
 8018612:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018616:	db2e      	blt.n	8018676 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8018618:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801861a:	4293      	cmp	r3, r2
 801861c:	dd2b      	ble.n	8018676 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 801861e:	9c01      	ldr	r4, [sp, #4]
 8018620:	6905      	ldr	r5, [r0, #16]
 8018622:	46a0      	mov	r8, r4
 8018624:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8018626:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801862a:	45a0      	cmp	r8, r4
 801862c:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8018630:	f040 8150 	bne.w	80188d4 <_ZN8touchgfx7Outline10renderLineEiiii+0x638>
 8018634:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018638:	4551      	cmp	r1, sl
 801863a:	d103      	bne.n	8018644 <_ZN8touchgfx7Outline10renderLineEiiii+0x3a8>
 801863c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018640:	4291      	cmp	r1, r2
 8018642:	d018      	beq.n	8018676 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8018644:	ea5c 010e 	orrs.w	r1, ip, lr
 8018648:	d00f      	beq.n	801866a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 801864a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 801864e:	2900      	cmp	r1, #0
 8018650:	db0b      	blt.n	801866a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8018652:	428b      	cmp	r3, r1
 8018654:	dd09      	ble.n	801866a <_ZN8touchgfx7Outline10renderLineEiiii+0x3ce>
 8018656:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801865a:	4299      	cmp	r1, r3
 801865c:	bf38      	it	cc
 801865e:	3508      	addcc	r5, #8
 8018660:	f101 0101 	add.w	r1, r1, #1
 8018664:	bf38      	it	cc
 8018666:	6105      	strcc	r5, [r0, #16]
 8018668:	6081      	str	r1, [r0, #8]
 801866a:	6903      	ldr	r3, [r0, #16]
 801866c:	f8a3 a000 	strh.w	sl, [r3]
 8018670:	805a      	strh	r2, [r3, #2]
 8018672:	809e      	strh	r6, [r3, #4]
 8018674:	80de      	strh	r6, [r3, #6]
 8018676:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018678:	6901      	ldr	r1, [r0, #16]
 801867a:	441a      	add	r2, r3
 801867c:	88cc      	ldrh	r4, [r1, #6]
 801867e:	888b      	ldrh	r3, [r1, #4]
 8018680:	4323      	orrs	r3, r4
 8018682:	d010      	beq.n	80186a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8018684:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018688:	2c00      	cmp	r4, #0
 801868a:	db0c      	blt.n	80186a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 801868c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801868e:	429c      	cmp	r4, r3
 8018690:	da09      	bge.n	80186a6 <_ZN8touchgfx7Outline10renderLineEiiii+0x40a>
 8018692:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018696:	429c      	cmp	r4, r3
 8018698:	bf38      	it	cc
 801869a:	3108      	addcc	r1, #8
 801869c:	f104 0401 	add.w	r4, r4, #1
 80186a0:	bf38      	it	cc
 80186a2:	6101      	strcc	r1, [r0, #16]
 80186a4:	6084      	str	r4, [r0, #8]
 80186a6:	6903      	ldr	r3, [r0, #16]
 80186a8:	464f      	mov	r7, r9
 80186aa:	f8a3 a000 	strh.w	sl, [r3]
 80186ae:	805a      	strh	r2, [r3, #2]
 80186b0:	809e      	strh	r6, [r3, #4]
 80186b2:	80de      	strh	r6, [r3, #6]
 80186b4:	9b06      	ldr	r3, [sp, #24]
 80186b6:	4293      	cmp	r3, r2
 80186b8:	d19c      	bne.n	80185f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x358>
 80186ba:	9b01      	ldr	r3, [sp, #4]
 80186bc:	6907      	ldr	r7, [r0, #16]
 80186be:	f1c3 0620 	rsb	r6, r3, #32
 80186c2:	9b05      	ldr	r3, [sp, #20]
 80186c4:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80186c8:	9b04      	ldr	r3, [sp, #16]
 80186ca:	429e      	cmp	r6, r3
 80186cc:	f040 81cc 	bne.w	8018a68 <_ZN8touchgfx7Outline10renderLineEiiii+0x7cc>
 80186d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80186d4:	459e      	cmp	lr, r3
 80186d6:	d104      	bne.n	80186e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x446>
 80186d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80186dc:	429a      	cmp	r2, r3
 80186de:	f43f ae36 	beq.w	801834e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 80186e2:	88f9      	ldrh	r1, [r7, #6]
 80186e4:	88bb      	ldrh	r3, [r7, #4]
 80186e6:	430b      	orrs	r3, r1
 80186e8:	d010      	beq.n	801870c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 80186ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	db0c      	blt.n	801870c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 80186f2:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80186f4:	428b      	cmp	r3, r1
 80186f6:	da09      	bge.n	801870c <_ZN8touchgfx7Outline10renderLineEiiii+0x470>
 80186f8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80186fc:	428b      	cmp	r3, r1
 80186fe:	bf38      	it	cc
 8018700:	3708      	addcc	r7, #8
 8018702:	f103 0301 	add.w	r3, r3, #1
 8018706:	bf38      	it	cc
 8018708:	6107      	strcc	r7, [r0, #16]
 801870a:	6083      	str	r3, [r0, #8]
 801870c:	6903      	ldr	r3, [r0, #16]
 801870e:	f8a3 e000 	strh.w	lr, [r3]
 8018712:	e5ff      	b.n	8018314 <_ZN8touchgfx7Outline10renderLineEiiii+0x78>
 8018714:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8018716:	9c03      	ldr	r4, [sp, #12]
 8018718:	42a2      	cmp	r2, r4
 801871a:	f6ff ae18 	blt.w	801834e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 801871e:	9c06      	ldr	r4, [sp, #24]
 8018720:	42a2      	cmp	r2, r4
 8018722:	bfb8      	it	lt
 8018724:	3201      	addlt	r2, #1
 8018726:	9c08      	ldr	r4, [sp, #32]
 8018728:	bfb8      	it	lt
 801872a:	9206      	strlt	r2, [sp, #24]
 801872c:	f1c3 0220 	rsb	r2, r3, #32
 8018730:	4362      	muls	r2, r4
 8018732:	2401      	movs	r4, #1
 8018734:	940b      	str	r4, [sp, #44]	@ 0x2c
 8018736:	2420      	movs	r4, #32
 8018738:	e6d5      	b.n	80184e6 <_ZN8touchgfx7Outline10renderLineEiiii+0x24a>
 801873a:	f009 021f 	and.w	r2, r9, #31
 801873e:	ea4f 1861 	mov.w	r8, r1, asr #5
 8018742:	920c      	str	r2, [sp, #48]	@ 0x30
 8018744:	9a01      	ldr	r2, [sp, #4]
 8018746:	45b0      	cmp	r8, r6
 8018748:	f001 011f 	and.w	r1, r1, #31
 801874c:	eba2 0203 	sub.w	r2, r2, r3
 8018750:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8018754:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8018758:	d108      	bne.n	801876c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d0>
 801875a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801875c:	4496      	add	lr, r2
 801875e:	4419      	add	r1, r3
 8018760:	fb02 a101 	mla	r1, r2, r1, sl
 8018764:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018768:	80e9      	strh	r1, [r5, #6]
 801876a:	e6f9      	b.n	8018560 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 801876c:	2c00      	cmp	r4, #0
 801876e:	f2c0 80aa 	blt.w	80188c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x62a>
 8018772:	2701      	movs	r7, #1
 8018774:	970a      	str	r7, [sp, #40]	@ 0x28
 8018776:	2720      	movs	r7, #32
 8018778:	f1c1 0c20 	rsb	ip, r1, #32
 801877c:	fb02 f20c 	mul.w	r2, r2, ip
 8018780:	fb92 fcf4 	sdiv	ip, r2, r4
 8018784:	fb04 221c 	mls	r2, r4, ip, r2
 8018788:	9709      	str	r7, [sp, #36]	@ 0x24
 801878a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801878c:	2a00      	cmp	r2, #0
 801878e:	bfb8      	it	lt
 8018790:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8018794:	4439      	add	r1, r7
 8018796:	fb0c a101 	mla	r1, ip, r1, sl
 801879a:	44e6      	add	lr, ip
 801879c:	80e9      	strh	r1, [r5, #6]
 801879e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80187a0:	f8a5 e004 	strh.w	lr, [r5, #4]
 80187a4:	eb08 0501 	add.w	r5, r8, r1
 80187a8:	6901      	ldr	r1, [r0, #16]
 80187aa:	bfb8      	it	lt
 80187ac:	1912      	addlt	r2, r2, r4
 80187ae:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 80187b2:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 80187b6:	ea58 070e 	orrs.w	r7, r8, lr
 80187ba:	d010      	beq.n	80187de <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80187bc:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 80187c0:	f1be 0f00 	cmp.w	lr, #0
 80187c4:	db0b      	blt.n	80187de <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80187c6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80187c8:	45be      	cmp	lr, r7
 80187ca:	da08      	bge.n	80187de <_ZN8touchgfx7Outline10renderLineEiiii+0x542>
 80187cc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80187d0:	45be      	cmp	lr, r7
 80187d2:	bf3c      	itt	cc
 80187d4:	3108      	addcc	r1, #8
 80187d6:	6101      	strcc	r1, [r0, #16]
 80187d8:	f10e 0101 	add.w	r1, lr, #1
 80187dc:	6081      	str	r1, [r0, #8]
 80187de:	f04f 0e00 	mov.w	lr, #0
 80187e2:	6901      	ldr	r1, [r0, #16]
 80187e4:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 80187e8:	42ae      	cmp	r6, r5
 80187ea:	800d      	strh	r5, [r1, #0]
 80187ec:	f8a1 8002 	strh.w	r8, [r1, #2]
 80187f0:	f8a1 e004 	strh.w	lr, [r1, #4]
 80187f4:	f8a1 e006 	strh.w	lr, [r1, #6]
 80187f8:	4463      	add	r3, ip
 80187fa:	d055      	beq.n	80188a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x60c>
 80187fc:	9901      	ldr	r1, [sp, #4]
 80187fe:	1b12      	subs	r2, r2, r4
 8018800:	1ac9      	subs	r1, r1, r3
 8018802:	4461      	add	r1, ip
 8018804:	0149      	lsls	r1, r1, #5
 8018806:	fb91 fef4 	sdiv	lr, r1, r4
 801880a:	fb04 111e 	mls	r1, r4, lr, r1
 801880e:	2900      	cmp	r1, #0
 8018810:	bfb8      	it	lt
 8018812:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8018816:	f10e 0701 	add.w	r7, lr, #1
 801881a:	bfb8      	it	lt
 801881c:	1909      	addlt	r1, r1, r4
 801881e:	970d      	str	r7, [sp, #52]	@ 0x34
 8018820:	1852      	adds	r2, r2, r1
 8018822:	bf48      	it	mi
 8018824:	46f4      	movmi	ip, lr
 8018826:	f8d0 a010 	ldr.w	sl, [r0, #16]
 801882a:	bf58      	it	pl
 801882c:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8018830:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8018834:	4463      	add	r3, ip
 8018836:	44e3      	add	fp, ip
 8018838:	f8aa b004 	strh.w	fp, [sl, #4]
 801883c:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8018840:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018842:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8018846:	f8aa b006 	strh.w	fp, [sl, #6]
 801884a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801884e:	bf58      	it	pl
 8018850:	1b12      	subpl	r2, r2, r4
 8018852:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018856:	f8bc a004 	ldrh.w	sl, [ip, #4]
 801885a:	443d      	add	r5, r7
 801885c:	ea5b 070a 	orrs.w	r7, fp, sl
 8018860:	d014      	beq.n	801888c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8018862:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8018866:	f1ba 0f00 	cmp.w	sl, #0
 801886a:	db0f      	blt.n	801888c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 801886c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801886e:	45ba      	cmp	sl, r7
 8018870:	da0c      	bge.n	801888c <_ZN8touchgfx7Outline10renderLineEiiii+0x5f0>
 8018872:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8018876:	45ba      	cmp	sl, r7
 8018878:	bf38      	it	cc
 801887a:	f10c 0c08 	addcc.w	ip, ip, #8
 801887e:	f10a 0a01 	add.w	sl, sl, #1
 8018882:	bf38      	it	cc
 8018884:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8018888:	f8c0 a008 	str.w	sl, [r0, #8]
 801888c:	f04f 0700 	mov.w	r7, #0
 8018890:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018894:	42ae      	cmp	r6, r5
 8018896:	f8ac 5000 	strh.w	r5, [ip]
 801889a:	f8ac 8002 	strh.w	r8, [ip, #2]
 801889e:	f8ac 7004 	strh.w	r7, [ip, #4]
 80188a2:	f8ac 7006 	strh.w	r7, [ip, #6]
 80188a6:	d1bb      	bne.n	8018820 <_ZN8touchgfx7Outline10renderLineEiiii+0x584>
 80188a8:	6904      	ldr	r4, [r0, #16]
 80188aa:	9a01      	ldr	r2, [sp, #4]
 80188ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80188ae:	1ad3      	subs	r3, r2, r3
 80188b0:	88a2      	ldrh	r2, [r4, #4]
 80188b2:	3120      	adds	r1, #32
 80188b4:	441a      	add	r2, r3
 80188b6:	80a2      	strh	r2, [r4, #4]
 80188b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80188ba:	1a89      	subs	r1, r1, r2
 80188bc:	88e2      	ldrh	r2, [r4, #6]
 80188be:	fb03 2301 	mla	r3, r3, r1, r2
 80188c2:	80e3      	strh	r3, [r4, #6]
 80188c4:	e64c      	b.n	8018560 <_ZN8touchgfx7Outline10renderLineEiiii+0x2c4>
 80188c6:	f04f 37ff 	mov.w	r7, #4294967295
 80188ca:	434a      	muls	r2, r1
 80188cc:	970a      	str	r7, [sp, #40]	@ 0x28
 80188ce:	4264      	negs	r4, r4
 80188d0:	2700      	movs	r7, #0
 80188d2:	e755      	b.n	8018780 <_ZN8touchgfx7Outline10renderLineEiiii+0x4e4>
 80188d4:	ea4f 1867 	mov.w	r8, r7, asr #5
 80188d8:	f009 031f 	and.w	r3, r9, #31
 80188dc:	45d0      	cmp	r8, sl
 80188de:	f007 071f 	and.w	r7, r7, #31
 80188e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80188e4:	fa1f fc8c 	uxth.w	ip, ip
 80188e8:	fa1f fe8e 	uxth.w	lr, lr
 80188ec:	d10a      	bne.n	8018904 <_ZN8touchgfx7Outline10renderLineEiiii+0x668>
 80188ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188f0:	449c      	add	ip, r3
 80188f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80188f4:	f8a5 c004 	strh.w	ip, [r5, #4]
 80188f8:	441f      	add	r7, r3
 80188fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80188fc:	fb03 e707 	mla	r7, r3, r7, lr
 8018900:	80ef      	strh	r7, [r5, #6]
 8018902:	e6b8      	b.n	8018676 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8018904:	2900      	cmp	r1, #0
 8018906:	f2c0 80a7 	blt.w	8018a58 <_ZN8touchgfx7Outline10renderLineEiiii+0x7bc>
 801890a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801890c:	f1c7 0320 	rsb	r3, r7, #32
 8018910:	4363      	muls	r3, r4
 8018912:	2401      	movs	r4, #1
 8018914:	940d      	str	r4, [sp, #52]	@ 0x34
 8018916:	2420      	movs	r4, #32
 8018918:	940c      	str	r4, [sp, #48]	@ 0x30
 801891a:	fb93 f4f1 	sdiv	r4, r3, r1
 801891e:	fb01 3b14 	mls	fp, r1, r4, r3
 8018922:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018924:	f1bb 0f00 	cmp.w	fp, #0
 8018928:	bfb8      	it	lt
 801892a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 801892e:	441f      	add	r7, r3
 8018930:	fb04 e707 	mla	r7, r4, r7, lr
 8018934:	44a4      	add	ip, r4
 8018936:	f8a5 c004 	strh.w	ip, [r5, #4]
 801893a:	80ef      	strh	r7, [r5, #6]
 801893c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018940:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018942:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8018946:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 801894a:	bfb8      	it	lt
 801894c:	448b      	addlt	fp, r1
 801894e:	eb08 0503 	add.w	r5, r8, r3
 8018952:	ea5e 0307 	orrs.w	r3, lr, r7
 8018956:	d011      	beq.n	801897c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8018958:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 801895c:	f1be 0f00 	cmp.w	lr, #0
 8018960:	db0c      	blt.n	801897c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8018962:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018964:	45be      	cmp	lr, r7
 8018966:	da09      	bge.n	801897c <_ZN8touchgfx7Outline10renderLineEiiii+0x6e0>
 8018968:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 801896c:	45be      	cmp	lr, r7
 801896e:	bf3c      	itt	cc
 8018970:	f10c 0708 	addcc.w	r7, ip, #8
 8018974:	6107      	strcc	r7, [r0, #16]
 8018976:	f10e 0701 	add.w	r7, lr, #1
 801897a:	6087      	str	r7, [r0, #8]
 801897c:	6907      	ldr	r7, [r0, #16]
 801897e:	b213      	sxth	r3, r2
 8018980:	9310      	str	r3, [sp, #64]	@ 0x40
 8018982:	807b      	strh	r3, [r7, #2]
 8018984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018986:	4555      	cmp	r5, sl
 8018988:	803d      	strh	r5, [r7, #0]
 801898a:	80be      	strh	r6, [r7, #4]
 801898c:	80fe      	strh	r6, [r7, #6]
 801898e:	eb04 0c03 	add.w	ip, r4, r3
 8018992:	d050      	beq.n	8018a36 <_ZN8touchgfx7Outline10renderLineEiiii+0x79a>
 8018994:	9b01      	ldr	r3, [sp, #4]
 8018996:	eba3 070c 	sub.w	r7, r3, ip
 801899a:	443c      	add	r4, r7
 801899c:	0164      	lsls	r4, r4, #5
 801899e:	fb94 f8f1 	sdiv	r8, r4, r1
 80189a2:	fb01 4418 	mls	r4, r1, r8, r4
 80189a6:	2c00      	cmp	r4, #0
 80189a8:	bfb8      	it	lt
 80189aa:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80189ae:	ebab 0301 	sub.w	r3, fp, r1
 80189b2:	f108 0701 	add.w	r7, r8, #1
 80189b6:	bfb8      	it	lt
 80189b8:	1864      	addlt	r4, r4, r1
 80189ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80189bc:	9711      	str	r7, [sp, #68]	@ 0x44
 80189be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80189c0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80189c4:	191b      	adds	r3, r3, r4
 80189c6:	bf4c      	ite	mi
 80189c8:	4647      	movmi	r7, r8
 80189ca:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 80189cc:	f8be b004 	ldrh.w	fp, [lr, #4]
 80189d0:	44bc      	add	ip, r7
 80189d2:	44bb      	add	fp, r7
 80189d4:	f8ae b004 	strh.w	fp, [lr, #4]
 80189d8:	f8be b006 	ldrh.w	fp, [lr, #6]
 80189dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80189de:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80189e2:	f8ae b006 	strh.w	fp, [lr, #6]
 80189e6:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 80189e8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 80189ec:	443d      	add	r5, r7
 80189ee:	f8be b006 	ldrh.w	fp, [lr, #6]
 80189f2:	f8be 7004 	ldrh.w	r7, [lr, #4]
 80189f6:	bf5c      	itt	pl
 80189f8:	1a5b      	subpl	r3, r3, r1
 80189fa:	9309      	strpl	r3, [sp, #36]	@ 0x24
 80189fc:	ea5b 0307 	orrs.w	r3, fp, r7
 8018a00:	d011      	beq.n	8018a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8018a02:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8018a06:	f1bb 0f00 	cmp.w	fp, #0
 8018a0a:	db0c      	blt.n	8018a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8018a0c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018a0e:	45bb      	cmp	fp, r7
 8018a10:	da09      	bge.n	8018a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x78a>
 8018a12:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018a16:	45bb      	cmp	fp, r7
 8018a18:	bf3c      	itt	cc
 8018a1a:	f10e 0708 	addcc.w	r7, lr, #8
 8018a1e:	6107      	strcc	r7, [r0, #16]
 8018a20:	f10b 0701 	add.w	r7, fp, #1
 8018a24:	6087      	str	r7, [r0, #8]
 8018a26:	6907      	ldr	r7, [r0, #16]
 8018a28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8018a2a:	4555      	cmp	r5, sl
 8018a2c:	803d      	strh	r5, [r7, #0]
 8018a2e:	807b      	strh	r3, [r7, #2]
 8018a30:	80be      	strh	r6, [r7, #4]
 8018a32:	80fe      	strh	r6, [r7, #6]
 8018a34:	d1c3      	bne.n	80189be <_ZN8touchgfx7Outline10renderLineEiiii+0x722>
 8018a36:	9b01      	ldr	r3, [sp, #4]
 8018a38:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8018a3a:	eba3 0c0c 	sub.w	ip, r3, ip
 8018a3e:	6903      	ldr	r3, [r0, #16]
 8018a40:	3720      	adds	r7, #32
 8018a42:	8899      	ldrh	r1, [r3, #4]
 8018a44:	4461      	add	r1, ip
 8018a46:	8099      	strh	r1, [r3, #4]
 8018a48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018a4a:	1a7f      	subs	r7, r7, r1
 8018a4c:	88d9      	ldrh	r1, [r3, #6]
 8018a4e:	fb0c 1c07 	mla	ip, ip, r7, r1
 8018a52:	f8a3 c006 	strh.w	ip, [r3, #6]
 8018a56:	e60e      	b.n	8018676 <_ZN8touchgfx7Outline10renderLineEiiii+0x3da>
 8018a58:	f04f 34ff 	mov.w	r4, #4294967295
 8018a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a5e:	940d      	str	r4, [sp, #52]	@ 0x34
 8018a60:	437b      	muls	r3, r7
 8018a62:	4249      	negs	r1, r1
 8018a64:	2400      	movs	r4, #0
 8018a66:	e757      	b.n	8018918 <_ZN8touchgfx7Outline10renderLineEiiii+0x67c>
 8018a68:	9905      	ldr	r1, [sp, #20]
 8018a6a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8018a6e:	f001 011f 	and.w	r1, r1, #31
 8018a72:	9102      	str	r1, [sp, #8]
 8018a74:	9904      	ldr	r1, [sp, #16]
 8018a76:	45f3      	cmp	fp, lr
 8018a78:	f009 0c1f 	and.w	ip, r9, #31
 8018a7c:	eba1 0406 	sub.w	r4, r1, r6
 8018a80:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8018a84:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8018a88:	d108      	bne.n	8018a9c <_ZN8touchgfx7Outline10renderLineEiiii+0x800>
 8018a8a:	9b02      	ldr	r3, [sp, #8]
 8018a8c:	44a0      	add	r8, r4
 8018a8e:	449c      	add	ip, r3
 8018a90:	fb04 a40c 	mla	r4, r4, ip, sl
 8018a94:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018a98:	80fc      	strh	r4, [r7, #6]
 8018a9a:	e458      	b.n	801834e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>
 8018a9c:	9905      	ldr	r1, [sp, #20]
 8018a9e:	ebb1 0109 	subs.w	r1, r1, r9
 8018aa2:	bf5b      	ittet	pl
 8018aa4:	f1cc 0520 	rsbpl	r5, ip, #32
 8018aa8:	436c      	mulpl	r4, r5
 8018aaa:	2500      	movmi	r5, #0
 8018aac:	2520      	movpl	r5, #32
 8018aae:	bf44      	itt	mi
 8018ab0:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018ab4:	4249      	negmi	r1, r1
 8018ab6:	9501      	str	r5, [sp, #4]
 8018ab8:	fb94 f5f1 	sdiv	r5, r4, r1
 8018abc:	bf54      	ite	pl
 8018abe:	f04f 0901 	movpl.w	r9, #1
 8018ac2:	f04f 39ff 	movmi.w	r9, #4294967295
 8018ac6:	fb01 4415 	mls	r4, r1, r5, r4
 8018aca:	9b01      	ldr	r3, [sp, #4]
 8018acc:	2c00      	cmp	r4, #0
 8018ace:	bfb8      	it	lt
 8018ad0:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018ad4:	449c      	add	ip, r3
 8018ad6:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018ada:	44a8      	add	r8, r5
 8018adc:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018ae0:	f8a7 c006 	strh.w	ip, [r7, #6]
 8018ae4:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018ae8:	bfb8      	it	lt
 8018aea:	1864      	addlt	r4, r4, r1
 8018aec:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018af0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018af4:	eb0b 0309 	add.w	r3, fp, r9
 8018af8:	ea58 0707 	orrs.w	r7, r8, r7
 8018afc:	d011      	beq.n	8018b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8018afe:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018b02:	f1b8 0f00 	cmp.w	r8, #0
 8018b06:	db0c      	blt.n	8018b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8018b08:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018b0a:	45b8      	cmp	r8, r7
 8018b0c:	da09      	bge.n	8018b22 <_ZN8touchgfx7Outline10renderLineEiiii+0x886>
 8018b0e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8018b12:	45b8      	cmp	r8, r7
 8018b14:	bf3c      	itt	cc
 8018b16:	f10c 0708 	addcc.w	r7, ip, #8
 8018b1a:	6107      	strcc	r7, [r0, #16]
 8018b1c:	f108 0701 	add.w	r7, r8, #1
 8018b20:	6087      	str	r7, [r0, #8]
 8018b22:	f04f 0c00 	mov.w	ip, #0
 8018b26:	6907      	ldr	r7, [r0, #16]
 8018b28:	b212      	sxth	r2, r2
 8018b2a:	459e      	cmp	lr, r3
 8018b2c:	803b      	strh	r3, [r7, #0]
 8018b2e:	807a      	strh	r2, [r7, #2]
 8018b30:	f8a7 c004 	strh.w	ip, [r7, #4]
 8018b34:	f8a7 c006 	strh.w	ip, [r7, #6]
 8018b38:	442e      	add	r6, r5
 8018b3a:	d04d      	beq.n	8018bd8 <_ZN8touchgfx7Outline10renderLineEiiii+0x93c>
 8018b3c:	9f04      	ldr	r7, [sp, #16]
 8018b3e:	f04f 0a00 	mov.w	sl, #0
 8018b42:	1bbf      	subs	r7, r7, r6
 8018b44:	443d      	add	r5, r7
 8018b46:	016d      	lsls	r5, r5, #5
 8018b48:	fb95 f8f1 	sdiv	r8, r5, r1
 8018b4c:	fb01 5518 	mls	r5, r1, r8, r5
 8018b50:	4565      	cmp	r5, ip
 8018b52:	bfb8      	it	lt
 8018b54:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018b58:	f108 0701 	add.w	r7, r8, #1
 8018b5c:	bfb8      	it	lt
 8018b5e:	186d      	addlt	r5, r5, r1
 8018b60:	1a64      	subs	r4, r4, r1
 8018b62:	9703      	str	r7, [sp, #12]
 8018b64:	1964      	adds	r4, r4, r5
 8018b66:	bf48      	it	mi
 8018b68:	4647      	movmi	r7, r8
 8018b6a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018b6e:	bf58      	it	pl
 8018b70:	9f03      	ldrpl	r7, [sp, #12]
 8018b72:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018b76:	443e      	add	r6, r7
 8018b78:	44bb      	add	fp, r7
 8018b7a:	f8ac b004 	strh.w	fp, [ip, #4]
 8018b7e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018b82:	bf58      	it	pl
 8018b84:	1a64      	subpl	r4, r4, r1
 8018b86:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018b8a:	f8ac b006 	strh.w	fp, [ip, #6]
 8018b8e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018b92:	444b      	add	r3, r9
 8018b94:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018b98:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018b9c:	ea5b 0707 	orrs.w	r7, fp, r7
 8018ba0:	d011      	beq.n	8018bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8018ba2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018ba6:	f1bb 0f00 	cmp.w	fp, #0
 8018baa:	db0c      	blt.n	8018bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8018bac:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8018bae:	45bb      	cmp	fp, r7
 8018bb0:	da09      	bge.n	8018bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x92a>
 8018bb2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018bb6:	45bb      	cmp	fp, r7
 8018bb8:	bf3c      	itt	cc
 8018bba:	f10c 0708 	addcc.w	r7, ip, #8
 8018bbe:	6107      	strcc	r7, [r0, #16]
 8018bc0:	f10b 0701 	add.w	r7, fp, #1
 8018bc4:	6087      	str	r7, [r0, #8]
 8018bc6:	6907      	ldr	r7, [r0, #16]
 8018bc8:	459e      	cmp	lr, r3
 8018bca:	803b      	strh	r3, [r7, #0]
 8018bcc:	807a      	strh	r2, [r7, #2]
 8018bce:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018bd2:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018bd6:	d1c5      	bne.n	8018b64 <_ZN8touchgfx7Outline10renderLineEiiii+0x8c8>
 8018bd8:	9b04      	ldr	r3, [sp, #16]
 8018bda:	1b9e      	subs	r6, r3, r6
 8018bdc:	6903      	ldr	r3, [r0, #16]
 8018bde:	889a      	ldrh	r2, [r3, #4]
 8018be0:	4432      	add	r2, r6
 8018be2:	809a      	strh	r2, [r3, #4]
 8018be4:	9a02      	ldr	r2, [sp, #8]
 8018be6:	f102 0c20 	add.w	ip, r2, #32
 8018bea:	9a01      	ldr	r2, [sp, #4]
 8018bec:	ebac 0c02 	sub.w	ip, ip, r2
 8018bf0:	88da      	ldrh	r2, [r3, #6]
 8018bf2:	fb06 260c 	mla	r6, r6, ip, r2
 8018bf6:	80de      	strh	r6, [r3, #6]
 8018bf8:	f7ff bba9 	b.w	801834e <_ZN8touchgfx7Outline10renderLineEiiii+0xb2>

08018bfc <_ZN8touchgfx7Outline6lineToEii>:
 8018bfc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018bfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018c00:	079b      	lsls	r3, r3, #30
 8018c02:	460e      	mov	r6, r1
 8018c04:	4615      	mov	r5, r2
 8018c06:	d511      	bpl.n	8018c2c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018c08:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8018c0c:	ea86 0701 	eor.w	r7, r6, r1
 8018c10:	ea85 0302 	eor.w	r3, r5, r2
 8018c14:	433b      	orrs	r3, r7
 8018c16:	d009      	beq.n	8018c2c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018c18:	4633      	mov	r3, r6
 8018c1a:	9500      	str	r5, [sp, #0]
 8018c1c:	f7ff fb3e 	bl	801829c <_ZN8touchgfx7Outline10renderLineEiiii>
 8018c20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018c22:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8018c26:	f043 0301 	orr.w	r3, r3, #1
 8018c2a:	6243      	str	r3, [r0, #36]	@ 0x24
 8018c2c:	b003      	add	sp, #12
 8018c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018c30 <_ZN8touchgfx7Outline6moveToEii>:
 8018c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c32:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018c34:	4615      	mov	r5, r2
 8018c36:	079a      	lsls	r2, r3, #30
 8018c38:	4604      	mov	r4, r0
 8018c3a:	460e      	mov	r6, r1
 8018c3c:	d401      	bmi.n	8018c42 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8018c3e:	f7ff faf9 	bl	8018234 <_ZN8touchgfx7Outline5resetEv>
 8018c42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018c44:	07db      	lsls	r3, r3, #31
 8018c46:	d504      	bpl.n	8018c52 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8018c48:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8018c4c:	4620      	mov	r0, r4
 8018c4e:	f7ff ffd5 	bl	8018bfc <_ZN8touchgfx7Outline6lineToEii>
 8018c52:	6923      	ldr	r3, [r4, #16]
 8018c54:	1170      	asrs	r0, r6, #5
 8018c56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018c5a:	1169      	asrs	r1, r5, #5
 8018c5c:	4290      	cmp	r0, r2
 8018c5e:	d103      	bne.n	8018c68 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8018c60:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018c64:	4291      	cmp	r1, r2
 8018c66:	d01a      	beq.n	8018c9e <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8018c68:	88df      	ldrh	r7, [r3, #6]
 8018c6a:	889a      	ldrh	r2, [r3, #4]
 8018c6c:	433a      	orrs	r2, r7
 8018c6e:	d010      	beq.n	8018c92 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018c70:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018c74:	2a00      	cmp	r2, #0
 8018c76:	db0c      	blt.n	8018c92 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018c78:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8018c7a:	42ba      	cmp	r2, r7
 8018c7c:	da09      	bge.n	8018c92 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8018c7e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8018c82:	42ba      	cmp	r2, r7
 8018c84:	bf38      	it	cc
 8018c86:	3308      	addcc	r3, #8
 8018c88:	f102 0201 	add.w	r2, r2, #1
 8018c8c:	bf38      	it	cc
 8018c8e:	6123      	strcc	r3, [r4, #16]
 8018c90:	60a2      	str	r2, [r4, #8]
 8018c92:	2200      	movs	r2, #0
 8018c94:	6923      	ldr	r3, [r4, #16]
 8018c96:	8018      	strh	r0, [r3, #0]
 8018c98:	8059      	strh	r1, [r3, #2]
 8018c9a:	809a      	strh	r2, [r3, #4]
 8018c9c:	80da      	strh	r2, [r3, #6]
 8018c9e:	6166      	str	r6, [r4, #20]
 8018ca0:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018ca4:	6225      	str	r5, [r4, #32]
 8018ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018ca8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8018ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018cac:	b0d0      	sub	sp, #320	@ 0x140
 8018cae:	466c      	mov	r4, sp
 8018cb0:	4627      	mov	r7, r4
 8018cb2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018cb6:	1a0d      	subs	r5, r1, r0
 8018cb8:	2d48      	cmp	r5, #72	@ 0x48
 8018cba:	f100 0308 	add.w	r3, r0, #8
 8018cbe:	f340 80d5 	ble.w	8018e6c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018cc2:	112d      	asrs	r5, r5, #4
 8018cc4:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8018cc8:	6816      	ldr	r6, [r2, #0]
 8018cca:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018cce:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8018cd2:	6006      	str	r6, [r0, #0]
 8018cd4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018cd8:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018cdc:	6856      	ldr	r6, [r2, #4]
 8018cde:	6046      	str	r6, [r0, #4]
 8018ce0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018ce4:	f8a2 8002 	strh.w	r8, [r2, #2]
 8018ce8:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018cec:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018cf0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018cf4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8018cf8:	f1a1 0208 	sub.w	r2, r1, #8
 8018cfc:	4565      	cmp	r5, ip
 8018cfe:	db06      	blt.n	8018d0e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8018d00:	d119      	bne.n	8018d36 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8018d02:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8018d06:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8018d0a:	42ae      	cmp	r6, r5
 8018d0c:	dd13      	ble.n	8018d36 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8018d0e:	460e      	mov	r6, r1
 8018d10:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018d14:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8018d18:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8018d1c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8018d20:	601d      	str	r5, [r3, #0]
 8018d22:	6875      	ldr	r5, [r6, #4]
 8018d24:	605d      	str	r5, [r3, #4]
 8018d26:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018d2a:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018d2e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018d32:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018d36:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018d3a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8018d3e:	42ae      	cmp	r6, r5
 8018d40:	db06      	blt.n	8018d50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8018d42:	d116      	bne.n	8018d72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018d44:	f9b0 c000 	ldrsh.w	ip, [r0]
 8018d48:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8018d4c:	45ac      	cmp	ip, r5
 8018d4e:	da10      	bge.n	8018d72 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018d50:	681d      	ldr	r5, [r3, #0]
 8018d52:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018d56:	6005      	str	r5, [r0, #0]
 8018d58:	685d      	ldr	r5, [r3, #4]
 8018d5a:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018d5e:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018d62:	f8a0 8008 	strh.w	r8, [r0, #8]
 8018d66:	6045      	str	r5, [r0, #4]
 8018d68:	8146      	strh	r6, [r0, #10]
 8018d6a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8018d6e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018d72:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018d76:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018d7a:	4565      	cmp	r5, ip
 8018d7c:	db06      	blt.n	8018d8c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8018d7e:	d119      	bne.n	8018db4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018d80:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8018d84:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018d88:	42ae      	cmp	r6, r5
 8018d8a:	da13      	bge.n	8018db4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018d8c:	460e      	mov	r6, r1
 8018d8e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018d92:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018d96:	6005      	str	r5, [r0, #0]
 8018d98:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8018d9c:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8018da0:	6875      	ldr	r5, [r6, #4]
 8018da2:	6045      	str	r5, [r0, #4]
 8018da4:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018da8:	f821 cc06 	strh.w	ip, [r1, #-6]
 8018dac:	f821 8c04 	strh.w	r8, [r1, #-4]
 8018db0:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018db4:	3308      	adds	r3, #8
 8018db6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8018dba:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8018dbe:	45e6      	cmp	lr, ip
 8018dc0:	dbf8      	blt.n	8018db4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018dc2:	d105      	bne.n	8018dd0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018dc4:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018dc8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018dcc:	42ae      	cmp	r6, r5
 8018dce:	dbf1      	blt.n	8018db4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018dd0:	4615      	mov	r5, r2
 8018dd2:	3a08      	subs	r2, #8
 8018dd4:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8018dd8:	45b4      	cmp	ip, r6
 8018dda:	dbf9      	blt.n	8018dd0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018ddc:	d105      	bne.n	8018dea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8018dde:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018de2:	f9b2 6000 	ldrsh.w	r6, [r2]
 8018de6:	45b0      	cmp	r8, r6
 8018de8:	dbf2      	blt.n	8018dd0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018dea:	4293      	cmp	r3, r2
 8018dec:	f1a5 0608 	sub.w	r6, r5, #8
 8018df0:	d816      	bhi.n	8018e20 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 8018df2:	f8d6 c000 	ldr.w	ip, [r6]
 8018df6:	f9b3 a000 	ldrsh.w	sl, [r3]
 8018dfa:	f8c3 c000 	str.w	ip, [r3]
 8018dfe:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 8018e02:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8018e06:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8018e0a:	f8c3 c004 	str.w	ip, [r3, #4]
 8018e0e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8018e12:	f825 ec06 	strh.w	lr, [r5, #-6]
 8018e16:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018e1a:	f825 8c02 	strh.w	r8, [r5, #-2]
 8018e1e:	e7c9      	b.n	8018db4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8018e20:	f8d6 e000 	ldr.w	lr, [r6]
 8018e24:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018e28:	f8c0 e000 	str.w	lr, [r0]
 8018e2c:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8018e30:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8018e34:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8018e38:	1a16      	subs	r6, r2, r0
 8018e3a:	f8c0 e004 	str.w	lr, [r0, #4]
 8018e3e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8018e42:	f825 cc06 	strh.w	ip, [r5, #-6]
 8018e46:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018e4a:	f825 8c02 	strh.w	r8, [r5, #-2]
 8018e4e:	1acd      	subs	r5, r1, r3
 8018e50:	10ed      	asrs	r5, r5, #3
 8018e52:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8018e56:	bfb5      	itete	lt
 8018e58:	e9c4 0200 	strdlt	r0, r2, [r4]
 8018e5c:	e9c4 3100 	strdge	r3, r1, [r4]
 8018e60:	460a      	movlt	r2, r1
 8018e62:	4603      	movge	r3, r0
 8018e64:	3408      	adds	r4, #8
 8018e66:	4618      	mov	r0, r3
 8018e68:	4611      	mov	r1, r2
 8018e6a:	e724      	b.n	8018cb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018e6c:	4299      	cmp	r1, r3
 8018e6e:	d928      	bls.n	8018ec2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x21a>
 8018e70:	f1a3 0210 	sub.w	r2, r3, #16
 8018e74:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8018e78:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8018e7c:	45ac      	cmp	ip, r5
 8018e7e:	db06      	blt.n	8018e8e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8018e80:	d11d      	bne.n	8018ebe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8018e82:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8018e86:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8018e8a:	42ae      	cmp	r6, r5
 8018e8c:	da17      	bge.n	8018ebe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x216>
 8018e8e:	4615      	mov	r5, r2
 8018e90:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8018e94:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8018e98:	6116      	str	r6, [r2, #16]
 8018e9a:	686e      	ldr	r6, [r5, #4]
 8018e9c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8018ea0:	f9b2 e016 	ldrsh.w	lr, [r2, #22]
 8018ea4:	42a8      	cmp	r0, r5
 8018ea6:	6156      	str	r6, [r2, #20]
 8018ea8:	f8a2 9008 	strh.w	r9, [r2, #8]
 8018eac:	f8a2 c00a 	strh.w	ip, [r2, #10]
 8018eb0:	f8a2 800c 	strh.w	r8, [r2, #12]
 8018eb4:	f8a2 e00e 	strh.w	lr, [r2, #14]
 8018eb8:	f1a2 0208 	sub.w	r2, r2, #8
 8018ebc:	d1da      	bne.n	8018e74 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8018ebe:	3308      	adds	r3, #8
 8018ec0:	e7d4      	b.n	8018e6c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8018ec2:	42bc      	cmp	r4, r7
 8018ec4:	d903      	bls.n	8018ece <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x226>
 8018ec6:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8018eca:	3c08      	subs	r4, #8
 8018ecc:	e6f3      	b.n	8018cb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018ece:	b050      	add	sp, #320	@ 0x140
 8018ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018ed4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 8018ed4:	b510      	push	{r4, lr}
 8018ed6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018ed8:	4604      	mov	r4, r0
 8018eda:	07da      	lsls	r2, r3, #31
 8018edc:	d507      	bpl.n	8018eee <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8018ede:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8018ee2:	f7ff fe8b 	bl	8018bfc <_ZN8touchgfx7Outline6lineToEii>
 8018ee6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018ee8:	f023 0301 	bic.w	r3, r3, #1
 8018eec:	6243      	str	r3, [r0, #36]	@ 0x24
 8018eee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018ef0:	079b      	lsls	r3, r3, #30
 8018ef2:	d521      	bpl.n	8018f38 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 8018ef4:	6923      	ldr	r3, [r4, #16]
 8018ef6:	88d9      	ldrh	r1, [r3, #6]
 8018ef8:	889a      	ldrh	r2, [r3, #4]
 8018efa:	430a      	orrs	r2, r1
 8018efc:	d010      	beq.n	8018f20 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018efe:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8018f02:	2a00      	cmp	r2, #0
 8018f04:	db0c      	blt.n	8018f20 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018f06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018f08:	428a      	cmp	r2, r1
 8018f0a:	da09      	bge.n	8018f20 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018f0c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8018f10:	4291      	cmp	r1, r2
 8018f12:	bf88      	it	hi
 8018f14:	3308      	addhi	r3, #8
 8018f16:	f102 0201 	add.w	r2, r2, #1
 8018f1a:	bf88      	it	hi
 8018f1c:	6123      	strhi	r3, [r4, #16]
 8018f1e:	60a2      	str	r2, [r4, #8]
 8018f20:	68a1      	ldr	r1, [r4, #8]
 8018f22:	b129      	cbz	r1, 8018f30 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018f24:	6863      	ldr	r3, [r4, #4]
 8018f26:	4299      	cmp	r1, r3
 8018f28:	d802      	bhi.n	8018f30 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018f2a:	68e0      	ldr	r0, [r4, #12]
 8018f2c:	f7ff febc 	bl	8018ca8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 8018f30:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8018f32:	f023 0302 	bic.w	r3, r3, #2
 8018f36:	6263      	str	r3, [r4, #36]	@ 0x24
 8018f38:	68e0      	ldr	r0, [r4, #12]
 8018f3a:	bd10      	pop	{r4, pc}

08018f3c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8018f3c:	4b02      	ldr	r3, [pc, #8]	@ (8018f48 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 8018f3e:	6018      	str	r0, [r3, #0]
 8018f40:	4b02      	ldr	r3, [pc, #8]	@ (8018f4c <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 8018f42:	6019      	str	r1, [r3, #0]
 8018f44:	4770      	bx	lr
 8018f46:	bf00      	nop
 8018f48:	2001210c 	.word	0x2001210c
 8018f4c:	20012110 	.word	0x20012110

08018f50 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv>:
 8018f50:	2300      	movs	r3, #0
 8018f52:	4a02      	ldr	r2, [pc, #8]	@ (8018f5c <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0xc>)
 8018f54:	6013      	str	r3, [r2, #0]
 8018f56:	4a02      	ldr	r2, [pc, #8]	@ (8018f60 <_ZN8touchgfx20CanvasWidgetRenderer11resetBufferEv+0x10>)
 8018f58:	6013      	str	r3, [r2, #0]
 8018f5a:	4770      	bx	lr
 8018f5c:	2001210c 	.word	0x2001210c
 8018f60:	20012110 	.word	0x20012110

08018f64 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8018f64:	4b01      	ldr	r3, [pc, #4]	@ (8018f6c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 8018f66:	6818      	ldr	r0, [r3, #0]
 8018f68:	4770      	bx	lr
 8018f6a:	bf00      	nop
 8018f6c:	2001210c 	.word	0x2001210c

08018f70 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8018f70:	4b01      	ldr	r3, [pc, #4]	@ (8018f78 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8018f72:	6818      	ldr	r0, [r3, #0]
 8018f74:	4770      	bx	lr
 8018f76:	bf00      	nop
 8018f78:	20012110 	.word	0x20012110

08018f7c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8018f7c:	b510      	push	{r4, lr}
 8018f7e:	6803      	ldr	r3, [r0, #0]
 8018f80:	460c      	mov	r4, r1
 8018f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f84:	4798      	blx	r3
 8018f86:	1b03      	subs	r3, r0, r4
 8018f88:	4258      	negs	r0, r3
 8018f8a:	4158      	adcs	r0, r3
 8018f8c:	bd10      	pop	{r4, pc}
	...

08018f90 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8018f90:	4b01      	ldr	r3, [pc, #4]	@ (8018f98 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8018f92:	6019      	str	r1, [r3, #0]
 8018f94:	4770      	bx	lr
 8018f96:	bf00      	nop
 8018f98:	20012114 	.word	0x20012114

08018f9c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fa0:	4696      	mov	lr, r2
 8018fa2:	4614      	mov	r4, r2
 8018fa4:	4605      	mov	r5, r0
 8018fa6:	460e      	mov	r6, r1
 8018fa8:	461f      	mov	r7, r3
 8018faa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018fae:	b097      	sub	sp, #92	@ 0x5c
 8018fb0:	f10d 0c1c 	add.w	ip, sp, #28
 8018fb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018fb8:	f8de 3000 	ldr.w	r3, [lr]
 8018fbc:	f104 0e14 	add.w	lr, r4, #20
 8018fc0:	f8cc 3000 	str.w	r3, [ip]
 8018fc4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8018fc8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018fcc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018fd0:	f8de 3000 	ldr.w	r3, [lr]
 8018fd4:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8018fd8:	f8cc 3000 	str.w	r3, [ip]
 8018fdc:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8018fe0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018fe4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018fe8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8018fec:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8018ff0:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8018ff4:	f8de 3000 	ldr.w	r3, [lr]
 8018ff8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8018ffa:	f8cc 3000 	str.w	r3, [ip]
 8018ffe:	9201      	str	r2, [sp, #4]
 8019000:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019004:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019006:	682b      	ldr	r3, [r5, #0]
 8019008:	9200      	str	r2, [sp, #0]
 801900a:	f8cd 8008 	str.w	r8, [sp, #8]
 801900e:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8019012:	aa07      	add	r2, sp, #28
 8019014:	463b      	mov	r3, r7
 8019016:	4631      	mov	r1, r6
 8019018:	4628      	mov	r0, r5
 801901a:	47d8      	blx	fp
 801901c:	46a6      	mov	lr, r4
 801901e:	f10d 0c1c 	add.w	ip, sp, #28
 8019022:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019026:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801902a:	f8de 3000 	ldr.w	r3, [lr]
 801902e:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8019032:	f8cc 3000 	str.w	r3, [ip]
 8019036:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801903a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801903e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019042:	f8de 3000 	ldr.w	r3, [lr]
 8019046:	343c      	adds	r4, #60	@ 0x3c
 8019048:	f8cc 3000 	str.w	r3, [ip]
 801904c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8019050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019052:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019056:	6823      	ldr	r3, [r4, #0]
 8019058:	4631      	mov	r1, r6
 801905a:	f8cc 3000 	str.w	r3, [ip]
 801905e:	682b      	ldr	r3, [r5, #0]
 8019060:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8019064:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019066:	f8cd 8008 	str.w	r8, [sp, #8]
 801906a:	9201      	str	r2, [sp, #4]
 801906c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801906e:	4628      	mov	r0, r5
 8019070:	9200      	str	r2, [sp, #0]
 8019072:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8019074:	aa07      	add	r2, sp, #28
 8019076:	463b      	mov	r3, r7
 8019078:	47a0      	blx	r4
 801907a:	b017      	add	sp, #92	@ 0x5c
 801907c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019080 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8019080:	2000      	movs	r0, #0
 8019082:	4770      	bx	lr

08019084 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8019084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019088:	b08d      	sub	sp, #52	@ 0x34
 801908a:	4688      	mov	r8, r1
 801908c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801908e:	f8d3 c000 	ldr.w	ip, [r3]
 8019092:	680f      	ldr	r7, [r1, #0]
 8019094:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8019098:	eba7 070c 	sub.w	r7, r7, ip
 801909c:	42bc      	cmp	r4, r7
 801909e:	bfa8      	it	ge
 80190a0:	463c      	movge	r4, r7
 80190a2:	ee07 4a90 	vmov	s15, r4
 80190a6:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80190aa:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80190ae:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80190b2:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80190b6:	edd3 6a07 	vldr	s13, [r3, #28]
 80190ba:	ee25 4a04 	vmul.f32	s8, s10, s8
 80190be:	ee65 4a24 	vmul.f32	s9, s10, s9
 80190c2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80190c6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80190ca:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80190ce:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80190d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80190d6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80190d8:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80190dc:	f9b1 9000 	ldrsh.w	r9, [r1]
 80190e0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80190e4:	eb09 0e0c 	add.w	lr, r9, ip
 80190e8:	4571      	cmp	r1, lr
 80190ea:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80190ee:	ee32 1a05 	vadd.f32	s2, s4, s10
 80190f2:	ee36 0a84 	vadd.f32	s0, s13, s8
 80190f6:	ee61 1a87 	vmul.f32	s3, s3, s14
 80190fa:	ee22 2a07 	vmul.f32	s4, s4, s14
 80190fe:	f340 808c 	ble.w	801921a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8019102:	eba1 060e 	sub.w	r6, r1, lr
 8019106:	fb96 f5f4 	sdiv	r5, r6, r4
 801910a:	ee07 5a10 	vmov	s14, r5
 801910e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019112:	2d00      	cmp	r5, #0
 8019114:	fb04 6615 	mls	r6, r4, r5, r6
 8019118:	eea7 0a04 	vfma.f32	s0, s14, s8
 801911c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019120:	eea7 1a05 	vfma.f32	s2, s14, s10
 8019124:	dd12      	ble.n	801914c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8019126:	ee70 6a44 	vsub.f32	s13, s0, s8
 801912a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801912e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019132:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8019136:	bf14      	ite	ne
 8019138:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801913c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8019140:	ee31 2a45 	vsub.f32	s4, s2, s10
 8019144:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019148:	ee22 2a07 	vmul.f32	s4, s4, s14
 801914c:	fb05 f204 	mul.w	r2, r5, r4
 8019150:	1abf      	subs	r7, r7, r2
 8019152:	4494      	add	ip, r2
 8019154:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8019158:	4411      	add	r1, r2
 801915a:	eb09 020c 	add.w	r2, r9, ip
 801915e:	443a      	add	r2, r7
 8019160:	b209      	sxth	r1, r1
 8019162:	428a      	cmp	r2, r1
 8019164:	bfc4      	itt	gt
 8019166:	eba1 0209 	subgt.w	r2, r1, r9
 801916a:	eba2 070c 	subgt.w	r7, r2, ip
 801916e:	2f00      	cmp	r7, #0
 8019170:	dd50      	ble.n	8019214 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8019172:	fb97 f1f4 	sdiv	r1, r7, r4
 8019176:	fb04 7211 	mls	r2, r4, r1, r7
 801917a:	b90a      	cbnz	r2, 8019180 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801917c:	4622      	mov	r2, r4
 801917e:	3901      	subs	r1, #1
 8019180:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8019184:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019188:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801918c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8019190:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019194:	ee17 7a90 	vmov	r7, s15
 8019198:	ee73 7a42 	vsub.f32	s15, s6, s4
 801919c:	eef0 6a42 	vmov.f32	s13, s4
 80191a0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80191a4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191a8:	ee17 ca90 	vmov	ip, s15
 80191ac:	eeb0 7a61 	vmov.f32	s14, s3
 80191b0:	6840      	ldr	r0, [r0, #4]
 80191b2:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 80191b6:	f8d0 a000 	ldr.w	sl, [r0]
 80191ba:	900b      	str	r0, [sp, #44]	@ 0x2c
 80191bc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80191be:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80191c2:	9008      	str	r0, [sp, #32]
 80191c4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80191c6:	695b      	ldr	r3, [r3, #20]
 80191c8:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80191cc:	fb9c fcf4 	sdiv	ip, ip, r4
 80191d0:	445b      	add	r3, fp
 80191d2:	9307      	str	r3, [sp, #28]
 80191d4:	ee16 3a90 	vmov	r3, s13
 80191d8:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80191dc:	fb0c 3306 	mla	r3, ip, r6, r3
 80191e0:	fb97 f7f4 	sdiv	r7, r7, r4
 80191e4:	9302      	str	r3, [sp, #8]
 80191e6:	ee17 3a10 	vmov	r3, s14
 80191ea:	2900      	cmp	r1, #0
 80191ec:	bfcc      	ite	gt
 80191ee:	46a1      	movgt	r9, r4
 80191f0:	4691      	movle	r9, r2
 80191f2:	44b6      	add	lr, r6
 80191f4:	fb04 e505 	mla	r5, r4, r5, lr
 80191f8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80191fc:	fb07 3706 	mla	r7, r7, r6, r3
 8019200:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019204:	e9cd 4700 	strd	r4, r7, [sp]
 8019208:	eba9 0306 	sub.w	r3, r9, r6
 801920c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8019210:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019212:	47a0      	blx	r4
 8019214:	b00d      	add	sp, #52	@ 0x34
 8019216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801921a:	2500      	movs	r5, #0
 801921c:	462e      	mov	r6, r5
 801921e:	e799      	b.n	8019154 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019220 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019224:	461d      	mov	r5, r3
 8019226:	b0db      	sub	sp, #364	@ 0x16c
 8019228:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801922c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801922e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019230:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8019234:	9009      	str	r0, [sp, #36]	@ 0x24
 8019236:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019238:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 801923c:	4614      	mov	r4, r2
 801923e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019240:	6803      	ldr	r3, [r0, #0]
 8019242:	4629      	mov	r1, r5
 8019244:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 8019246:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801924a:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 801924e:	47b8      	blx	r7
 8019250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019252:	6058      	str	r0, [r3, #4]
 8019254:	2800      	cmp	r0, #0
 8019256:	f000 83a1 	beq.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801925a:	ed94 7a02 	vldr	s14, [r4, #8]
 801925e:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8019262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019266:	682b      	ldr	r3, [r5, #0]
 8019268:	9314      	str	r3, [sp, #80]	@ 0x50
 801926a:	686b      	ldr	r3, [r5, #4]
 801926c:	9315      	str	r3, [sp, #84]	@ 0x54
 801926e:	4bc1      	ldr	r3, [pc, #772]	@ (8019574 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8019270:	7819      	ldrb	r1, [r3, #0]
 8019272:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8019276:	2900      	cmp	r1, #0
 8019278:	bf16      	itet	ne
 801927a:	4619      	movne	r1, r3
 801927c:	4611      	moveq	r1, r2
 801927e:	4613      	movne	r3, r2
 8019280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019284:	9116      	str	r1, [sp, #88]	@ 0x58
 8019286:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801928a:	f240 8387 	bls.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801928e:	ed94 7a07 	vldr	s14, [r4, #28]
 8019292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8019296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801929a:	f240 837f 	bls.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801929e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80192a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80192a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192aa:	f240 8377 	bls.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192ae:	6822      	ldr	r2, [r4, #0]
 80192b0:	4bb1      	ldr	r3, [pc, #708]	@ (8019578 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80192b2:	429a      	cmp	r2, r3
 80192b4:	f2c0 8372 	blt.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192b8:	49b0      	ldr	r1, [pc, #704]	@ (801957c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80192ba:	6963      	ldr	r3, [r4, #20]
 80192bc:	428a      	cmp	r2, r1
 80192be:	f300 836d 	bgt.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192c2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80192c6:	48ae      	ldr	r0, [pc, #696]	@ (8019580 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80192c8:	33ff      	adds	r3, #255	@ 0xff
 80192ca:	4283      	cmp	r3, r0
 80192cc:	f200 8366 	bhi.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192d0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80192d2:	4dac      	ldr	r5, [pc, #688]	@ (8019584 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80192d4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80192d8:	33ff      	adds	r3, #255	@ 0xff
 80192da:	42ab      	cmp	r3, r5
 80192dc:	f200 835e 	bhi.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192e0:	6862      	ldr	r2, [r4, #4]
 80192e2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80192e6:	33ff      	adds	r3, #255	@ 0xff
 80192e8:	4283      	cmp	r3, r0
 80192ea:	f200 8357 	bhi.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192ee:	69a1      	ldr	r1, [r4, #24]
 80192f0:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80192f4:	33ff      	adds	r3, #255	@ 0xff
 80192f6:	4283      	cmp	r3, r0
 80192f8:	f200 8350 	bhi.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80192fc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80192fe:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8019302:	30ff      	adds	r0, #255	@ 0xff
 8019304:	42a8      	cmp	r0, r5
 8019306:	f200 8349 	bhi.w	801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801930a:	428a      	cmp	r2, r1
 801930c:	f280 8110 	bge.w	8019530 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019310:	429a      	cmp	r2, r3
 8019312:	f300 8119 	bgt.w	8019548 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8019316:	4299      	cmp	r1, r3
 8019318:	f280 811d 	bge.w	8019556 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801931c:	2502      	movs	r5, #2
 801931e:	2701      	movs	r7, #1
 8019320:	46a9      	mov	r9, r5
 8019322:	46b8      	mov	r8, r7
 8019324:	f04f 0a00 	mov.w	sl, #0
 8019328:	4621      	mov	r1, r4
 801932a:	a849      	add	r0, sp, #292	@ 0x124
 801932c:	f003 fdc0 	bl	801ceb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8019330:	4622      	mov	r2, r4
 8019332:	4653      	mov	r3, sl
 8019334:	a949      	add	r1, sp, #292	@ 0x124
 8019336:	f8cd 9000 	str.w	r9, [sp]
 801933a:	a819      	add	r0, sp, #100	@ 0x64
 801933c:	f003 feea 	bl	801d114 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019340:	4622      	mov	r2, r4
 8019342:	4653      	mov	r3, sl
 8019344:	a949      	add	r1, sp, #292	@ 0x124
 8019346:	f8cd 8000 	str.w	r8, [sp]
 801934a:	a829      	add	r0, sp, #164	@ 0xa4
 801934c:	f003 fee2 	bl	801d114 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019350:	4643      	mov	r3, r8
 8019352:	4622      	mov	r2, r4
 8019354:	a949      	add	r1, sp, #292	@ 0x124
 8019356:	f8cd 9000 	str.w	r9, [sp]
 801935a:	a839      	add	r0, sp, #228	@ 0xe4
 801935c:	f003 feda 	bl	801d114 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8019360:	42af      	cmp	r7, r5
 8019362:	bfb5      	itete	lt
 8019364:	2300      	movlt	r3, #0
 8019366:	2301      	movge	r3, #1
 8019368:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801936a:	930e      	strge	r3, [sp, #56]	@ 0x38
 801936c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801936e:	af12      	add	r7, sp, #72	@ 0x48
 8019370:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019374:	bfb9      	ittee	lt
 8019376:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8019378:	ac19      	addlt	r4, sp, #100	@ 0x64
 801937a:	ad19      	addge	r5, sp, #100	@ 0x64
 801937c:	ac29      	addge	r4, sp, #164	@ 0xa4
 801937e:	e887 0003 	stmia.w	r7, {r0, r1}
 8019382:	b928      	cbnz	r0, 8019390 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8019384:	4b80      	ldr	r3, [pc, #512]	@ (8019588 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8019386:	6818      	ldr	r0, [r3, #0]
 8019388:	6803      	ldr	r3, [r0, #0]
 801938a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801938c:	4798      	blx	r3
 801938e:	6038      	str	r0, [r7, #0]
 8019390:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019392:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801939a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801939c:	930c      	str	r3, [sp, #48]	@ 0x30
 801939e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80193a0:	6963      	ldr	r3, [r4, #20]
 80193a2:	440b      	add	r3, r1
 80193a4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80193a8:	4408      	add	r0, r1
 80193aa:	b200      	sxth	r0, r0
 80193ac:	4283      	cmp	r3, r0
 80193ae:	900d      	str	r0, [sp, #52]	@ 0x34
 80193b0:	f280 80dd 	bge.w	801956e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80193b4:	428b      	cmp	r3, r1
 80193b6:	da08      	bge.n	80193ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80193b8:	2a00      	cmp	r2, #0
 80193ba:	dd06      	ble.n	80193ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80193bc:	1acb      	subs	r3, r1, r3
 80193be:	429a      	cmp	r2, r3
 80193c0:	f2c0 80e4 	blt.w	801958c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	f300 80e2 	bgt.w	801958e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80193ca:	6967      	ldr	r7, [r4, #20]
 80193cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80193ce:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80193d2:	443b      	add	r3, r7
 80193d4:	461f      	mov	r7, r3
 80193d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80193d8:	1bdf      	subs	r7, r3, r7
 80193da:	4297      	cmp	r7, r2
 80193dc:	bfa8      	it	ge
 80193de:	4617      	movge	r7, r2
 80193e0:	2f00      	cmp	r7, #0
 80193e2:	f340 8166 	ble.w	80196b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80193e6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80193e8:	6829      	ldr	r1, [r5, #0]
 80193ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80193ee:	f9bb 3000 	ldrsh.w	r3, [fp]
 80193f2:	4411      	add	r1, r2
 80193f4:	4299      	cmp	r1, r3
 80193f6:	6820      	ldr	r0, [r4, #0]
 80193f8:	dd1a      	ble.n	8019430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80193fa:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80193fe:	4402      	add	r2, r0
 8019400:	440b      	add	r3, r1
 8019402:	b21b      	sxth	r3, r3
 8019404:	429a      	cmp	r2, r3
 8019406:	dc13      	bgt.n	8019430 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019408:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801940a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801940c:	a912      	add	r1, sp, #72	@ 0x48
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	9206      	str	r2, [sp, #24]
 8019412:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019414:	9500      	str	r5, [sp, #0]
 8019416:	9205      	str	r2, [sp, #20]
 8019418:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801941a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801941c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019420:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019422:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019426:	aa49      	add	r2, sp, #292	@ 0x124
 8019428:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801942c:	4623      	mov	r3, r4
 801942e:	47c8      	blx	r9
 8019430:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019434:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019438:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801943c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8019440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019444:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019448:	ed94 6a08 	vldr	s12, [r4, #32]
 801944c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019450:	edd4 6a07 	vldr	s13, [r4, #28]
 8019454:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019458:	441a      	add	r2, r3
 801945a:	6963      	ldr	r3, [r4, #20]
 801945c:	68a1      	ldr	r1, [r4, #8]
 801945e:	3301      	adds	r3, #1
 8019460:	6163      	str	r3, [r4, #20]
 8019462:	69a3      	ldr	r3, [r4, #24]
 8019464:	6022      	str	r2, [r4, #0]
 8019466:	3b01      	subs	r3, #1
 8019468:	61a3      	str	r3, [r4, #24]
 801946a:	6923      	ldr	r3, [r4, #16]
 801946c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8019470:	440b      	add	r3, r1
 8019472:	68e1      	ldr	r1, [r4, #12]
 8019474:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8019478:	428b      	cmp	r3, r1
 801947a:	edc4 6a07 	vstr	s13, [r4, #28]
 801947e:	6123      	str	r3, [r4, #16]
 8019480:	db15      	blt.n	80194ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019482:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8019486:	ee76 6a26 	vadd.f32	s13, s12, s13
 801948a:	edc4 6a07 	vstr	s13, [r4, #28]
 801948e:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8019492:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019496:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801949a:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801949e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80194a2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80194a6:	3201      	adds	r2, #1
 80194a8:	1a5b      	subs	r3, r3, r1
 80194aa:	6022      	str	r2, [r4, #0]
 80194ac:	6123      	str	r3, [r4, #16]
 80194ae:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80194b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80194b6:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80194ba:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80194be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80194c2:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80194c6:	ed95 6a08 	vldr	s12, [r5, #32]
 80194ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80194ce:	edd5 6a07 	vldr	s13, [r5, #28]
 80194d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80194d6:	441a      	add	r2, r3
 80194d8:	696b      	ldr	r3, [r5, #20]
 80194da:	68a9      	ldr	r1, [r5, #8]
 80194dc:	3301      	adds	r3, #1
 80194de:	616b      	str	r3, [r5, #20]
 80194e0:	69ab      	ldr	r3, [r5, #24]
 80194e2:	602a      	str	r2, [r5, #0]
 80194e4:	3b01      	subs	r3, #1
 80194e6:	61ab      	str	r3, [r5, #24]
 80194e8:	692b      	ldr	r3, [r5, #16]
 80194ea:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80194ee:	440b      	add	r3, r1
 80194f0:	68e9      	ldr	r1, [r5, #12]
 80194f2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80194f6:	428b      	cmp	r3, r1
 80194f8:	edc5 6a07 	vstr	s13, [r5, #28]
 80194fc:	612b      	str	r3, [r5, #16]
 80194fe:	db15      	blt.n	801952c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019500:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019504:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019508:	edc5 6a07 	vstr	s13, [r5, #28]
 801950c:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8019510:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019514:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019518:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801951c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019520:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019524:	3201      	adds	r2, #1
 8019526:	1a5b      	subs	r3, r3, r1
 8019528:	602a      	str	r2, [r5, #0]
 801952a:	612b      	str	r3, [r5, #16]
 801952c:	3f01      	subs	r7, #1
 801952e:	e757      	b.n	80193e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019530:	4299      	cmp	r1, r3
 8019532:	dc13      	bgt.n	801955c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019534:	429a      	cmp	r2, r3
 8019536:	da14      	bge.n	8019562 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019538:	2502      	movs	r5, #2
 801953a:	2703      	movs	r7, #3
 801953c:	46a9      	mov	r9, r5
 801953e:	f04f 0800 	mov.w	r8, #0
 8019542:	f04f 0a01 	mov.w	sl, #1
 8019546:	e6ef      	b.n	8019328 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019548:	2501      	movs	r5, #1
 801954a:	2700      	movs	r7, #0
 801954c:	46a9      	mov	r9, r5
 801954e:	46b8      	mov	r8, r7
 8019550:	f04f 0a02 	mov.w	sl, #2
 8019554:	e6e8      	b.n	8019328 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019556:	2501      	movs	r5, #1
 8019558:	2702      	movs	r7, #2
 801955a:	e6e1      	b.n	8019320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801955c:	2500      	movs	r5, #0
 801955e:	2701      	movs	r7, #1
 8019560:	e7f4      	b.n	801954c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019562:	2702      	movs	r7, #2
 8019564:	2503      	movs	r5, #3
 8019566:	f04f 0900 	mov.w	r9, #0
 801956a:	46b8      	mov	r8, r7
 801956c:	e7e9      	b.n	8019542 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801956e:	4613      	mov	r3, r2
 8019570:	e728      	b.n	80193c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019572:	bf00      	nop
 8019574:	200120fc 	.word	0x200120fc
 8019578:	fffd8f01 	.word	0xfffd8f01
 801957c:	00027100 	.word	0x00027100
 8019580:	0004e1ff 	.word	0x0004e1ff
 8019584:	0004e1fe 	.word	0x0004e1fe
 8019588:	20012104 	.word	0x20012104
 801958c:	4613      	mov	r3, r2
 801958e:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8019592:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8019596:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 801959a:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801959e:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 80195a2:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 80195a6:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80195aa:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 80195ae:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 80195b2:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 80195b6:	469e      	mov	lr, r3
 80195b8:	469c      	mov	ip, r3
 80195ba:	f04f 0900 	mov.w	r9, #0
 80195be:	992b      	ldr	r1, [sp, #172]	@ 0xac
 80195c0:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 80195c2:	9111      	str	r1, [sp, #68]	@ 0x44
 80195c4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 80195c8:	f1bc 0f00 	cmp.w	ip, #0
 80195cc:	d147      	bne.n	801965e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80195ce:	eb03 0c07 	add.w	ip, r3, r7
 80195d2:	1ad7      	subs	r7, r2, r3
 80195d4:	f1b9 0f00 	cmp.w	r9, #0
 80195d8:	d009      	beq.n	80195ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80195da:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80195de:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80195e2:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80195e6:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80195ea:	9029      	str	r0, [sp, #164]	@ 0xa4
 80195ec:	912d      	str	r1, [sp, #180]	@ 0xb4
 80195ee:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80195f2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80195f6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80195fa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80195fe:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8019602:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8019606:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 801960a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801960e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8019612:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8019616:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 801961a:	f04f 0800 	mov.w	r8, #0
 801961e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8019620:	9111      	str	r1, [sp, #68]	@ 0x44
 8019622:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019626:	f1be 0f00 	cmp.w	lr, #0
 801962a:	d031      	beq.n	8019690 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801962c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801962e:	4450      	add	r0, sl
 8019630:	4431      	add	r1, r6
 8019632:	4549      	cmp	r1, r9
 8019634:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019638:	ee37 7a04 	vadd.f32	s14, s14, s8
 801963c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019640:	db08      	blt.n	8019654 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019642:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019646:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801964a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801964e:	3001      	adds	r0, #1
 8019650:	eba1 0109 	sub.w	r1, r1, r9
 8019654:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019658:	f04f 0801 	mov.w	r8, #1
 801965c:	e7e3      	b.n	8019626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801965e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8019660:	4450      	add	r0, sl
 8019662:	4431      	add	r1, r6
 8019664:	4541      	cmp	r1, r8
 8019666:	ee37 7a24 	vadd.f32	s14, s14, s9
 801966a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801966e:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019672:	db08      	blt.n	8019686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019674:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019678:	ee37 7a25 	vadd.f32	s14, s14, s11
 801967c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019680:	3001      	adds	r0, #1
 8019682:	eba1 0108 	sub.w	r1, r1, r8
 8019686:	f10c 3cff 	add.w	ip, ip, #4294967295
 801968a:	f04f 0901 	mov.w	r9, #1
 801968e:	e79b      	b.n	80195c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019690:	449c      	add	ip, r3
 8019692:	1aff      	subs	r7, r7, r3
 8019694:	f1b8 0f00 	cmp.w	r8, #0
 8019698:	d009      	beq.n	80196ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801969a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801969e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 80196a2:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 80196a6:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 80196aa:	9019      	str	r0, [sp, #100]	@ 0x64
 80196ac:	911d      	str	r1, [sp, #116]	@ 0x74
 80196ae:	1ad2      	subs	r2, r2, r3
 80196b0:	e68b      	b.n	80193ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80196b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80196b4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	f000 80d1 	beq.w	801985e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80196bc:	ad19      	add	r5, sp, #100	@ 0x64
 80196be:	ac39      	add	r4, sp, #228	@ 0xe4
 80196c0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80196c2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80196c6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80196ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80196cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80196ce:	6963      	ldr	r3, [r4, #20]
 80196d0:	440b      	add	r3, r1
 80196d2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80196d6:	4408      	add	r0, r1
 80196d8:	b200      	sxth	r0, r0
 80196da:	4283      	cmp	r3, r0
 80196dc:	900d      	str	r0, [sp, #52]	@ 0x34
 80196de:	f280 80c1 	bge.w	8019864 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80196e2:	428b      	cmp	r3, r1
 80196e4:	da08      	bge.n	80196f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80196e6:	2a00      	cmp	r2, #0
 80196e8:	dd06      	ble.n	80196f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80196ea:	1acb      	subs	r3, r1, r3
 80196ec:	429a      	cmp	r2, r3
 80196ee:	f2c0 80bb 	blt.w	8019868 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	f300 80b9 	bgt.w	801986a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80196f8:	6967      	ldr	r7, [r4, #20]
 80196fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80196fc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8019700:	443b      	add	r3, r7
 8019702:	461f      	mov	r7, r3
 8019704:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019706:	1bdf      	subs	r7, r3, r7
 8019708:	4297      	cmp	r7, r2
 801970a:	bfa8      	it	ge
 801970c:	4617      	movge	r7, r2
 801970e:	2f00      	cmp	r7, #0
 8019710:	f340 813c 	ble.w	801998c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019714:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8019716:	6829      	ldr	r1, [r5, #0]
 8019718:	f9b3 2000 	ldrsh.w	r2, [r3]
 801971c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019720:	4411      	add	r1, r2
 8019722:	4299      	cmp	r1, r3
 8019724:	6820      	ldr	r0, [r4, #0]
 8019726:	dd1a      	ble.n	801975e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019728:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801972c:	4402      	add	r2, r0
 801972e:	440b      	add	r3, r1
 8019730:	b21b      	sxth	r3, r3
 8019732:	429a      	cmp	r2, r3
 8019734:	dc13      	bgt.n	801975e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019736:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801973a:	a912      	add	r1, sp, #72	@ 0x48
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	9206      	str	r2, [sp, #24]
 8019740:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019742:	9500      	str	r5, [sp, #0]
 8019744:	9205      	str	r2, [sp, #20]
 8019746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019748:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801974a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801974e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8019750:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019754:	aa49      	add	r2, sp, #292	@ 0x124
 8019756:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801975a:	4623      	mov	r3, r4
 801975c:	47c8      	blx	r9
 801975e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019762:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8019766:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801976a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801976e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019772:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8019776:	ed94 6a08 	vldr	s12, [r4, #32]
 801977a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801977e:	edd4 6a07 	vldr	s13, [r4, #28]
 8019782:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019786:	441a      	add	r2, r3
 8019788:	6963      	ldr	r3, [r4, #20]
 801978a:	68a1      	ldr	r1, [r4, #8]
 801978c:	3301      	adds	r3, #1
 801978e:	6163      	str	r3, [r4, #20]
 8019790:	69a3      	ldr	r3, [r4, #24]
 8019792:	6022      	str	r2, [r4, #0]
 8019794:	3b01      	subs	r3, #1
 8019796:	61a3      	str	r3, [r4, #24]
 8019798:	6923      	ldr	r3, [r4, #16]
 801979a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801979e:	440b      	add	r3, r1
 80197a0:	68e1      	ldr	r1, [r4, #12]
 80197a2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80197a6:	428b      	cmp	r3, r1
 80197a8:	edc4 6a07 	vstr	s13, [r4, #28]
 80197ac:	6123      	str	r3, [r4, #16]
 80197ae:	db15      	blt.n	80197dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80197b0:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 80197b4:	ee76 6a26 	vadd.f32	s13, s12, s13
 80197b8:	edc4 6a07 	vstr	s13, [r4, #28]
 80197bc:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80197c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80197c4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80197c8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80197cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80197d0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80197d4:	3201      	adds	r2, #1
 80197d6:	1a5b      	subs	r3, r3, r1
 80197d8:	6022      	str	r2, [r4, #0]
 80197da:	6123      	str	r3, [r4, #16]
 80197dc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80197e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80197e4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80197e8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80197ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80197f0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80197f4:	ed95 6a08 	vldr	s12, [r5, #32]
 80197f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80197fc:	edd5 6a07 	vldr	s13, [r5, #28]
 8019800:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019804:	441a      	add	r2, r3
 8019806:	696b      	ldr	r3, [r5, #20]
 8019808:	68a9      	ldr	r1, [r5, #8]
 801980a:	3301      	adds	r3, #1
 801980c:	616b      	str	r3, [r5, #20]
 801980e:	69ab      	ldr	r3, [r5, #24]
 8019810:	602a      	str	r2, [r5, #0]
 8019812:	3b01      	subs	r3, #1
 8019814:	61ab      	str	r3, [r5, #24]
 8019816:	692b      	ldr	r3, [r5, #16]
 8019818:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801981c:	440b      	add	r3, r1
 801981e:	68e9      	ldr	r1, [r5, #12]
 8019820:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019824:	428b      	cmp	r3, r1
 8019826:	edc5 6a07 	vstr	s13, [r5, #28]
 801982a:	612b      	str	r3, [r5, #16]
 801982c:	db15      	blt.n	801985a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801982e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8019832:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019836:	edc5 6a07 	vstr	s13, [r5, #28]
 801983a:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 801983e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019842:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8019846:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 801984a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801984e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8019852:	3201      	adds	r2, #1
 8019854:	1a5b      	subs	r3, r3, r1
 8019856:	602a      	str	r2, [r5, #0]
 8019858:	612b      	str	r3, [r5, #16]
 801985a:	3f01      	subs	r7, #1
 801985c:	e757      	b.n	801970e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801985e:	ad39      	add	r5, sp, #228	@ 0xe4
 8019860:	ac19      	add	r4, sp, #100	@ 0x64
 8019862:	e72d      	b.n	80196c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019864:	4613      	mov	r3, r2
 8019866:	e744      	b.n	80196f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019868:	4613      	mov	r3, r2
 801986a:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 801986e:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8019872:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8019876:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 801987a:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 801987e:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8019882:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8019886:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 801988a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 801988e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8019892:	469e      	mov	lr, r3
 8019894:	461f      	mov	r7, r3
 8019896:	f04f 0900 	mov.w	r9, #0
 801989a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 801989c:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 80198a0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80198a2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 80198a6:	960e      	str	r6, [sp, #56]	@ 0x38
 80198a8:	2f00      	cmp	r7, #0
 80198aa:	d146      	bne.n	801993a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80198ac:	449c      	add	ip, r3
 80198ae:	1ad7      	subs	r7, r2, r3
 80198b0:	f1b9 0f00 	cmp.w	r9, #0
 80198b4:	d009      	beq.n	80198ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80198b6:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 80198ba:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 80198be:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 80198c2:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 80198c6:	9039      	str	r0, [sp, #228]	@ 0xe4
 80198c8:	913d      	str	r1, [sp, #244]	@ 0xf4
 80198ca:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80198ce:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80198d2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80198d6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80198da:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80198de:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80198e2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80198e6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80198ea:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80198ee:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80198f2:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80198f6:	f04f 0800 	mov.w	r8, #0
 80198fa:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80198fc:	910e      	str	r1, [sp, #56]	@ 0x38
 80198fe:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8019902:	f1be 0f00 	cmp.w	lr, #0
 8019906:	d030      	beq.n	801996a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019908:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801990a:	4450      	add	r0, sl
 801990c:	4431      	add	r1, r6
 801990e:	4549      	cmp	r1, r9
 8019910:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019914:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019918:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801991c:	db08      	blt.n	8019930 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801991e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019922:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019926:	ee37 7a06 	vadd.f32	s14, s14, s12
 801992a:	3001      	adds	r0, #1
 801992c:	eba1 0109 	sub.w	r1, r1, r9
 8019930:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019934:	f04f 0801 	mov.w	r8, #1
 8019938:	e7e3      	b.n	8019902 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801993a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801993c:	4450      	add	r0, sl
 801993e:	4431      	add	r1, r6
 8019940:	4541      	cmp	r1, r8
 8019942:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019946:	ee77 7a84 	vadd.f32	s15, s15, s8
 801994a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801994e:	db08      	blt.n	8019962 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019950:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019954:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019958:	ee77 7a86 	vadd.f32	s15, s15, s12
 801995c:	3001      	adds	r0, #1
 801995e:	eba1 0108 	sub.w	r1, r1, r8
 8019962:	3f01      	subs	r7, #1
 8019964:	f04f 0901 	mov.w	r9, #1
 8019968:	e79e      	b.n	80198a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801996a:	449c      	add	ip, r3
 801996c:	1aff      	subs	r7, r7, r3
 801996e:	f1b8 0f00 	cmp.w	r8, #0
 8019972:	d009      	beq.n	8019988 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019974:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8019978:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 801997c:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8019980:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8019984:	9019      	str	r0, [sp, #100]	@ 0x64
 8019986:	911d      	str	r1, [sp, #116]	@ 0x74
 8019988:	1ad2      	subs	r2, r2, r3
 801998a:	e6b5      	b.n	80196f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801998c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	b923      	cbnz	r3, 801999c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019992:	4b04      	ldr	r3, [pc, #16]	@ (80199a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8019994:	6818      	ldr	r0, [r3, #0]
 8019996:	6803      	ldr	r3, [r0, #0]
 8019998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801999a:	4798      	blx	r3
 801999c:	b05b      	add	sp, #364	@ 0x16c
 801999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199a2:	bf00      	nop
 80199a4:	20012104 	.word	0x20012104

080199a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80199a8:	b570      	push	{r4, r5, r6, lr}
 80199aa:	4604      	mov	r4, r0
 80199ac:	2500      	movs	r5, #0
 80199ae:	9805      	ldr	r0, [sp, #20]
 80199b0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80199b4:	6061      	str	r1, [r4, #4]
 80199b6:	8263      	strh	r3, [r4, #18]
 80199b8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80199bc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80199c0:	8025      	strh	r5, [r4, #0]
 80199c2:	7221      	strb	r1, [r4, #8]
 80199c4:	7266      	strb	r6, [r4, #9]
 80199c6:	60e0      	str	r0, [r4, #12]
 80199c8:	8222      	strh	r2, [r4, #16]
 80199ca:	82a3      	strh	r3, [r4, #20]
 80199cc:	82e5      	strh	r5, [r4, #22]
 80199ce:	8325      	strh	r5, [r4, #24]
 80199d0:	8365      	strh	r5, [r4, #26]
 80199d2:	83a5      	strh	r5, [r4, #28]
 80199d4:	83e5      	strh	r5, [r4, #30]
 80199d6:	8425      	strh	r5, [r4, #32]
 80199d8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 80199dc:	b32e      	cbz	r6, 8019a2a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80199de:	6803      	ldr	r3, [r0, #0]
 80199e0:	695b      	ldr	r3, [r3, #20]
 80199e2:	4798      	blx	r3
 80199e4:	4606      	mov	r6, r0
 80199e6:	b300      	cbz	r0, 8019a2a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80199e8:	68e0      	ldr	r0, [r4, #12]
 80199ea:	4631      	mov	r1, r6
 80199ec:	6803      	ldr	r3, [r0, #0]
 80199ee:	68db      	ldr	r3, [r3, #12]
 80199f0:	4798      	blx	r3
 80199f2:	4605      	mov	r5, r0
 80199f4:	b1c8      	cbz	r0, 8019a2a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80199f6:	7b43      	ldrb	r3, [r0, #13]
 80199f8:	7a82      	ldrb	r2, [r0, #10]
 80199fa:	005b      	lsls	r3, r3, #1
 80199fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019a00:	4313      	orrs	r3, r2
 8019a02:	8423      	strh	r3, [r4, #32]
 8019a04:	7a63      	ldrb	r3, [r4, #9]
 8019a06:	2b06      	cmp	r3, #6
 8019a08:	d10f      	bne.n	8019a2a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8019a0a:	68e0      	ldr	r0, [r4, #12]
 8019a0c:	462a      	mov	r2, r5
 8019a0e:	6803      	ldr	r3, [r0, #0]
 8019a10:	4631      	mov	r1, r6
 8019a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019a14:	4798      	blx	r3
 8019a16:	7b6b      	ldrb	r3, [r5, #13]
 8019a18:	005b      	lsls	r3, r3, #1
 8019a1a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019a1e:	7aab      	ldrb	r3, [r5, #10]
 8019a20:	4313      	orrs	r3, r2
 8019a22:	4418      	add	r0, r3
 8019a24:	8c23      	ldrh	r3, [r4, #32]
 8019a26:	4418      	add	r0, r3
 8019a28:	8420      	strh	r0, [r4, #32]
 8019a2a:	4620      	mov	r0, r4
 8019a2c:	bd70      	pop	{r4, r5, r6, pc}

08019a2e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a32:	2400      	movs	r4, #0
 8019a34:	4681      	mov	r9, r0
 8019a36:	4688      	mov	r8, r1
 8019a38:	4692      	mov	sl, r2
 8019a3a:	469b      	mov	fp, r3
 8019a3c:	4627      	mov	r7, r4
 8019a3e:	4625      	mov	r5, r4
 8019a40:	4626      	mov	r6, r4
 8019a42:	b085      	sub	sp, #20
 8019a44:	4554      	cmp	r4, sl
 8019a46:	da2a      	bge.n	8019a9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019a48:	2300      	movs	r3, #0
 8019a4a:	9303      	str	r3, [sp, #12]
 8019a4c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019a50:	429d      	cmp	r5, r3
 8019a52:	d004      	beq.n	8019a5e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8019a54:	f242 030b 	movw	r3, #8203	@ 0x200b
 8019a58:	429d      	cmp	r5, r3
 8019a5a:	bf18      	it	ne
 8019a5c:	462f      	movne	r7, r5
 8019a5e:	ab03      	add	r3, sp, #12
 8019a60:	4642      	mov	r2, r8
 8019a62:	4659      	mov	r1, fp
 8019a64:	4648      	mov	r0, r9
 8019a66:	f003 f839 	bl	801cadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019a6a:	4605      	mov	r5, r0
 8019a6c:	b1b8      	cbz	r0, 8019a9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019a6e:	280a      	cmp	r0, #10
 8019a70:	d015      	beq.n	8019a9e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019a72:	9a03      	ldr	r2, [sp, #12]
 8019a74:	b18a      	cbz	r2, 8019a9a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019a76:	7b50      	ldrb	r0, [r2, #13]
 8019a78:	7a93      	ldrb	r3, [r2, #10]
 8019a7a:	0040      	lsls	r0, r0, #1
 8019a7c:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8019a80:	4303      	orrs	r3, r0
 8019a82:	9301      	str	r3, [sp, #4]
 8019a84:	f8d8 3000 	ldr.w	r3, [r8]
 8019a88:	4639      	mov	r1, r7
 8019a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019a8c:	4640      	mov	r0, r8
 8019a8e:	8895      	ldrh	r5, [r2, #4]
 8019a90:	4798      	blx	r3
 8019a92:	9b01      	ldr	r3, [sp, #4]
 8019a94:	4418      	add	r0, r3
 8019a96:	4406      	add	r6, r0
 8019a98:	b2b6      	uxth	r6, r6
 8019a9a:	3401      	adds	r4, #1
 8019a9c:	e7d2      	b.n	8019a44 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8019a9e:	4630      	mov	r0, r6
 8019aa0:	b005      	add	sp, #20
 8019aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019aa6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8019aa6:	2a02      	cmp	r2, #2
 8019aa8:	b530      	push	{r4, r5, lr}
 8019aaa:	d011      	beq.n	8019ad0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8019aac:	2a03      	cmp	r2, #3
 8019aae:	d01c      	beq.n	8019aea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8019ab0:	2a01      	cmp	r2, #1
 8019ab2:	d10c      	bne.n	8019ace <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019ab4:	888b      	ldrh	r3, [r1, #4]
 8019ab6:	8801      	ldrh	r1, [r0, #0]
 8019ab8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8019abc:	1a5b      	subs	r3, r3, r1
 8019abe:	8844      	ldrh	r4, [r0, #2]
 8019ac0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019ac4:	1a9b      	subs	r3, r3, r2
 8019ac6:	8004      	strh	r4, [r0, #0]
 8019ac8:	8043      	strh	r3, [r0, #2]
 8019aca:	8081      	strh	r1, [r0, #4]
 8019acc:	80c2      	strh	r2, [r0, #6]
 8019ace:	bd30      	pop	{r4, r5, pc}
 8019ad0:	88cb      	ldrh	r3, [r1, #6]
 8019ad2:	8842      	ldrh	r2, [r0, #2]
 8019ad4:	1a9b      	subs	r3, r3, r2
 8019ad6:	88c2      	ldrh	r2, [r0, #6]
 8019ad8:	1a9b      	subs	r3, r3, r2
 8019ada:	888a      	ldrh	r2, [r1, #4]
 8019adc:	8801      	ldrh	r1, [r0, #0]
 8019ade:	8043      	strh	r3, [r0, #2]
 8019ae0:	1a52      	subs	r2, r2, r1
 8019ae2:	8881      	ldrh	r1, [r0, #4]
 8019ae4:	1a52      	subs	r2, r2, r1
 8019ae6:	8002      	strh	r2, [r0, #0]
 8019ae8:	e7f1      	b.n	8019ace <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019aea:	88cb      	ldrh	r3, [r1, #6]
 8019aec:	8841      	ldrh	r1, [r0, #2]
 8019aee:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8019af2:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019af6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019afa:	1a5b      	subs	r3, r3, r1
 8019afc:	1a9b      	subs	r3, r3, r2
 8019afe:	8003      	strh	r3, [r0, #0]
 8019b00:	8045      	strh	r5, [r0, #2]
 8019b02:	8082      	strh	r2, [r0, #4]
 8019b04:	80c4      	strh	r4, [r0, #6]
 8019b06:	e7e2      	b.n	8019ace <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019b08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b0c:	b09f      	sub	sp, #124	@ 0x7c
 8019b0e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019b10:	9312      	str	r3, [sp, #72]	@ 0x48
 8019b12:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8019b14:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019b16:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8019b18:	8812      	ldrh	r2, [r2, #0]
 8019b1a:	889b      	ldrh	r3, [r3, #4]
 8019b1c:	900e      	str	r0, [sp, #56]	@ 0x38
 8019b1e:	4413      	add	r3, r2
 8019b20:	6828      	ldr	r0, [r5, #0]
 8019b22:	b21b      	sxth	r3, r3
 8019b24:	9311      	str	r3, [sp, #68]	@ 0x44
 8019b26:	6803      	ldr	r3, [r0, #0]
 8019b28:	9117      	str	r1, [sp, #92]	@ 0x5c
 8019b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8019b2c:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8019b30:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8019b34:	4798      	blx	r3
 8019b36:	682b      	ldr	r3, [r5, #0]
 8019b38:	9013      	str	r0, [sp, #76]	@ 0x4c
 8019b3a:	7b1a      	ldrb	r2, [r3, #12]
 8019b3c:	7adb      	ldrb	r3, [r3, #11]
 8019b3e:	9215      	str	r2, [sp, #84]	@ 0x54
 8019b40:	9316      	str	r3, [sp, #88]	@ 0x58
 8019b42:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8019b46:	2c00      	cmp	r4, #0
 8019b48:	d067      	beq.n	8019c1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8019b4a:	7c2b      	ldrb	r3, [r5, #16]
 8019b4c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8019b4e:	2b06      	cmp	r3, #6
 8019b50:	bf14      	ite	ne
 8019b52:	2301      	movne	r3, #1
 8019b54:	2302      	moveq	r3, #2
 8019b56:	4413      	add	r3, r2
 8019b58:	f04f 0900 	mov.w	r9, #0
 8019b5c:	464c      	mov	r4, r9
 8019b5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019b60:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8019b64:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8019b68:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b6a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019b6c:	4293      	cmp	r3, r2
 8019b6e:	f280 808b 	bge.w	8019c88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019b72:	2300      	movs	r3, #0
 8019b74:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8019b78:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8019b7c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019b80:	429c      	cmp	r4, r3
 8019b82:	d006      	beq.n	8019b92 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8019b84:	f242 020b 	movw	r2, #8203	@ 0x200b
 8019b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019b8a:	4294      	cmp	r4, r2
 8019b8c:	bf18      	it	ne
 8019b8e:	4623      	movne	r3, r4
 8019b90:	930c      	str	r3, [sp, #48]	@ 0x30
 8019b92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019b94:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8019b96:	682a      	ldr	r2, [r5, #0]
 8019b98:	428b      	cmp	r3, r1
 8019b9a:	db40      	blt.n	8019c1e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8019b9c:	6813      	ldr	r3, [r2, #0]
 8019b9e:	4610      	mov	r0, r2
 8019ba0:	695b      	ldr	r3, [r3, #20]
 8019ba2:	4798      	blx	r3
 8019ba4:	4604      	mov	r4, r0
 8019ba6:	6828      	ldr	r0, [r5, #0]
 8019ba8:	aa1d      	add	r2, sp, #116	@ 0x74
 8019baa:	6803      	ldr	r3, [r0, #0]
 8019bac:	4621      	mov	r1, r4
 8019bae:	689f      	ldr	r7, [r3, #8]
 8019bb0:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8019bb4:	47b8      	blx	r7
 8019bb6:	901c      	str	r0, [sp, #112]	@ 0x70
 8019bb8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019bbc:	429c      	cmp	r4, r3
 8019bbe:	f000 80ea 	beq.w	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019bc2:	f242 030b 	movw	r3, #8203	@ 0x200b
 8019bc6:	429c      	cmp	r4, r3
 8019bc8:	f000 80e5 	beq.w	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019bcc:	2c00      	cmp	r4, #0
 8019bce:	f000 810c 	beq.w	8019dea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 8019bd2:	2c0a      	cmp	r4, #10
 8019bd4:	d05e      	beq.n	8019c94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019bd6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019bd8:	b36a      	cbz	r2, 8019c36 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8019bda:	8894      	ldrh	r4, [r2, #4]
 8019bdc:	f1bb 0f00 	cmp.w	fp, #0
 8019be0:	d03a      	beq.n	8019c58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8019be2:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019be6:	f1bb 0f01 	cmp.w	fp, #1
 8019bea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019bee:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8019bf2:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019bf6:	ea49 0903 	orr.w	r9, r9, r3
 8019bfa:	d133      	bne.n	8019c64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8019bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019bfe:	eba6 0609 	sub.w	r6, r6, r9
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d14d      	bne.n	8019ca2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019c06:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8019c08:	eb09 0306 	add.w	r3, r9, r6
 8019c0c:	4413      	add	r3, r2
 8019c0e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8019c10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8019c14:	4293      	cmp	r3, r2
 8019c16:	da4e      	bge.n	8019cb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8019c18:	e036      	b.n	8019c88 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8019c1a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8019c1c:	e79c      	b.n	8019b58 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8019c1e:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8019c22:	9301      	str	r3, [sp, #4]
 8019c24:	ab1d      	add	r3, sp, #116	@ 0x74
 8019c26:	9300      	str	r3, [sp, #0]
 8019c28:	4659      	mov	r1, fp
 8019c2a:	ab1c      	add	r3, sp, #112	@ 0x70
 8019c2c:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8019c2e:	f002 ff9e 	bl	801cb6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8019c32:	4604      	mov	r4, r0
 8019c34:	e7c0      	b.n	8019bb8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019c36:	6828      	ldr	r0, [r5, #0]
 8019c38:	6803      	ldr	r3, [r0, #0]
 8019c3a:	691b      	ldr	r3, [r3, #16]
 8019c3c:	4798      	blx	r3
 8019c3e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019c42:	4298      	cmp	r0, r3
 8019c44:	f000 80a7 	beq.w	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019c48:	f242 030b 	movw	r3, #8203	@ 0x200b
 8019c4c:	4298      	cmp	r0, r3
 8019c4e:	f000 80a2 	beq.w	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019c52:	f1bb 0f00 	cmp.w	fp, #0
 8019c56:	d100      	bne.n	8019c5a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8019c58:	444e      	add	r6, r9
 8019c5a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019c5c:	2a00      	cmp	r2, #0
 8019c5e:	d1c0      	bne.n	8019be2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8019c60:	4691      	mov	r9, r2
 8019c62:	e098      	b.n	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019c64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	f000 80c1 	beq.w	8019dee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 8019c6c:	f1bb 0f00 	cmp.w	fp, #0
 8019c70:	d117      	bne.n	8019ca2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8019c72:	6828      	ldr	r0, [r5, #0]
 8019c74:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019c76:	6803      	ldr	r3, [r0, #0]
 8019c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019c7a:	4798      	blx	r3
 8019c7c:	4406      	add	r6, r0
 8019c7e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8019c80:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019c82:	1af3      	subs	r3, r6, r3
 8019c84:	4293      	cmp	r3, r2
 8019c86:	dd16      	ble.n	8019cb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8019c88:	2c00      	cmp	r4, #0
 8019c8a:	f000 80ae 	beq.w	8019dea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 8019c8e:	2c0a      	cmp	r4, #10
 8019c90:	f040 809c 	bne.w	8019dcc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 8019c94:	240a      	movs	r4, #10
 8019c96:	fab4 f084 	clz	r0, r4
 8019c9a:	0940      	lsrs	r0, r0, #5
 8019c9c:	b01f      	add	sp, #124	@ 0x7c
 8019c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ca2:	6828      	ldr	r0, [r5, #0]
 8019ca4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019ca6:	6803      	ldr	r3, [r0, #0]
 8019ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019caa:	4798      	blx	r3
 8019cac:	f1bb 0f01 	cmp.w	fp, #1
 8019cb0:	eba6 0600 	sub.w	r6, r6, r0
 8019cb4:	d0a7      	beq.n	8019c06 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8019cb6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8019cb8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019cba:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8019cbe:	f9b3 8000 	ldrsh.w	r8, [r3]
 8019cc2:	7b43      	ldrb	r3, [r0, #13]
 8019cc4:	4431      	add	r1, r6
 8019cc6:	015b      	lsls	r3, r3, #5
 8019cc8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019ccc:	7983      	ldrb	r3, [r0, #6]
 8019cce:	4313      	orrs	r3, r2
 8019cd0:	440b      	add	r3, r1
 8019cd2:	4543      	cmp	r3, r8
 8019cd4:	db5f      	blt.n	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019cd6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019cd8:	4299      	cmp	r1, r3
 8019cda:	da5c      	bge.n	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019cdc:	6828      	ldr	r0, [r5, #0]
 8019cde:	45b0      	cmp	r8, r6
 8019ce0:	6803      	ldr	r3, [r0, #0]
 8019ce2:	bfc8      	it	gt
 8019ce4:	eba8 0806 	subgt.w	r8, r8, r6
 8019ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019cea:	bfcc      	ite	gt
 8019cec:	fa1f f888 	uxthgt.w	r8, r8
 8019cf0:	f04f 0800 	movle.w	r8, #0
 8019cf4:	4798      	blx	r3
 8019cf6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019cf8:	7b53      	ldrb	r3, [r2, #13]
 8019cfa:	00d9      	lsls	r1, r3, #3
 8019cfc:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8019d00:	7a11      	ldrb	r1, [r2, #8]
 8019d02:	4339      	orrs	r1, r7
 8019d04:	065f      	lsls	r7, r3, #25
 8019d06:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8019d08:	bf44      	itt	mi
 8019d0a:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8019d0e:	b209      	sxthmi	r1, r1
 8019d10:	19c7      	adds	r7, r0, r7
 8019d12:	1a7f      	subs	r7, r7, r1
 8019d14:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8019d16:	b2bf      	uxth	r7, r7
 8019d18:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8019d1c:	fa0f fa87 	sxth.w	sl, r7
 8019d20:	4551      	cmp	r1, sl
 8019d22:	dd3c      	ble.n	8019d9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019d24:	011b      	lsls	r3, r3, #4
 8019d26:	79d0      	ldrb	r0, [r2, #7]
 8019d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019d2c:	4303      	orrs	r3, r0
 8019d2e:	449a      	add	sl, r3
 8019d30:	4551      	cmp	r1, sl
 8019d32:	dc30      	bgt.n	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019d34:	468a      	mov	sl, r1
 8019d36:	1bcf      	subs	r7, r1, r7
 8019d38:	b23f      	sxth	r7, r7
 8019d3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8019d3c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019d3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019d40:	6828      	ldr	r0, [r5, #0]
 8019d42:	2a00      	cmp	r2, #0
 8019d44:	d12d      	bne.n	8019da2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8019d46:	9318      	str	r3, [sp, #96]	@ 0x60
 8019d48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019d4a:	b2bf      	uxth	r7, r7
 8019d4c:	6819      	ldr	r1, [r3, #0]
 8019d4e:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8019d50:	6801      	ldr	r1, [r0, #0]
 8019d52:	9314      	str	r3, [sp, #80]	@ 0x50
 8019d54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8019d56:	4788      	blx	r1
 8019d58:	79a9      	ldrb	r1, [r5, #6]
 8019d5a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8019d5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019d5e:	7ba9      	ldrb	r1, [r5, #14]
 8019d60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d62:	910a      	str	r1, [sp, #40]	@ 0x28
 8019d64:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 8019d68:	9109      	str	r1, [sp, #36]	@ 0x24
 8019d6a:	68a9      	ldr	r1, [r5, #8]
 8019d6c:	9306      	str	r3, [sp, #24]
 8019d6e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8019d70:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8019d74:	44b0      	add	r8, r6
 8019d76:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8019d7a:	9304      	str	r3, [sp, #16]
 8019d7c:	fa0f f388 	sxth.w	r3, r8
 8019d80:	9300      	str	r3, [sp, #0]
 8019d82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019d84:	9205      	str	r2, [sp, #20]
 8019d86:	f8cd a004 	str.w	sl, [sp, #4]
 8019d8a:	681a      	ldr	r2, [r3, #0]
 8019d8c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8019d8e:	685b      	ldr	r3, [r3, #4]
 8019d90:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019d92:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8019d94:	47b8      	blx	r7
 8019d96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019d98:	3301      	adds	r3, #1
 8019d9a:	930d      	str	r3, [sp, #52]	@ 0x34
 8019d9c:	e6e4      	b.n	8019b68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8019d9e:	2700      	movs	r7, #0
 8019da0:	e7cb      	b.n	8019d3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 8019da2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019da4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8019da8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8019daa:	f8dc 1000 	ldr.w	r1, [ip]
 8019dae:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8019db2:	79aa      	ldrb	r2, [r5, #6]
 8019db4:	9203      	str	r2, [sp, #12]
 8019db6:	7baa      	ldrb	r2, [r5, #14]
 8019db8:	9202      	str	r2, [sp, #8]
 8019dba:	68aa      	ldr	r2, [r5, #8]
 8019dbc:	e9cd 0200 	strd	r0, r2, [sp]
 8019dc0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8019dc2:	688f      	ldr	r7, [r1, #8]
 8019dc4:	4660      	mov	r0, ip
 8019dc6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019dc8:	47b8      	blx	r7
 8019dca:	e7e4      	b.n	8019d96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019dcc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8019dce:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8019dd0:	3501      	adds	r5, #1
 8019dd2:	429d      	cmp	r5, r3
 8019dd4:	f6bf af5f 	bge.w	8019c96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019dd8:	4659      	mov	r1, fp
 8019dda:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8019ddc:	f7f8 fde2 	bl	80129a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8019de0:	4604      	mov	r4, r0
 8019de2:	b110      	cbz	r0, 8019dea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 8019de4:	280a      	cmp	r0, #10
 8019de6:	d1f2      	bne.n	8019dce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8019de8:	e754      	b.n	8019c94 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8019dea:	2400      	movs	r4, #0
 8019dec:	e753      	b.n	8019c96 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 8019dee:	f1bb 0f00 	cmp.w	fp, #0
 8019df2:	f43f af44 	beq.w	8019c7e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 8019df6:	e75e      	b.n	8019cb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

08019df8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8019df8:	b530      	push	{r4, r5, lr}
 8019dfa:	8ac4      	ldrh	r4, [r0, #22]
 8019dfc:	8b45      	ldrh	r5, [r0, #26]
 8019dfe:	8343      	strh	r3, [r0, #26]
 8019e00:	442c      	add	r4, r5
 8019e02:	1ae4      	subs	r4, r4, r3
 8019e04:	82c4      	strh	r4, [r0, #22]
 8019e06:	8b83      	ldrh	r3, [r0, #28]
 8019e08:	8b04      	ldrh	r4, [r0, #24]
 8019e0a:	4422      	add	r2, r4
 8019e0c:	440c      	add	r4, r1
 8019e0e:	1a59      	subs	r1, r3, r1
 8019e10:	83c2      	strh	r2, [r0, #30]
 8019e12:	8304      	strh	r4, [r0, #24]
 8019e14:	8381      	strh	r1, [r0, #28]
 8019e16:	bd30      	pop	{r4, r5, pc}

08019e18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8019e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e1c:	4604      	mov	r4, r0
 8019e1e:	8a47      	ldrh	r7, [r0, #18]
 8019e20:	68c0      	ldr	r0, [r0, #12]
 8019e22:	b085      	sub	sp, #20
 8019e24:	6803      	ldr	r3, [r0, #0]
 8019e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e28:	4798      	blx	r3
 8019e2a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8019e2e:	7a63      	ldrb	r3, [r4, #9]
 8019e30:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8019e34:	42b7      	cmp	r7, r6
 8019e36:	f103 33ff 	add.w	r3, r3, #4294967295
 8019e3a:	bfac      	ite	ge
 8019e3c:	f04f 0900 	movge.w	r9, #0
 8019e40:	f04f 0901 	movlt.w	r9, #1
 8019e44:	2b05      	cmp	r3, #5
 8019e46:	d804      	bhi.n	8019e52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 8019e48:	e8df f003 	tbb	[pc, r3]
 8019e4c:	460e0852 	.word	0x460e0852
 8019e50:	4b4b      	.short	0x4b4b
 8019e52:	2500      	movs	r5, #0
 8019e54:	46a9      	mov	r9, r5
 8019e56:	462e      	mov	r6, r5
 8019e58:	462f      	mov	r7, r5
 8019e5a:	e00d      	b.n	8019e78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019e5c:	42b7      	cmp	r7, r6
 8019e5e:	bfb4      	ite	lt
 8019e60:	2600      	movlt	r6, #0
 8019e62:	2601      	movge	r6, #1
 8019e64:	2500      	movs	r5, #0
 8019e66:	e7f7      	b.n	8019e58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8019e68:	464d      	mov	r5, r9
 8019e6a:	f04f 0900 	mov.w	r9, #0
 8019e6e:	42b7      	cmp	r7, r6
 8019e70:	bfb4      	ite	lt
 8019e72:	2600      	movlt	r6, #0
 8019e74:	2601      	movge	r6, #1
 8019e76:	464f      	mov	r7, r9
 8019e78:	f04f 0800 	mov.w	r8, #0
 8019e7c:	f8a4 8016 	strh.w	r8, [r4, #22]
 8019e80:	f8a4 8018 	strh.w	r8, [r4, #24]
 8019e84:	f8cd 8004 	str.w	r8, [sp, #4]
 8019e88:	2300      	movs	r3, #0
 8019e8a:	9303      	str	r3, [sp, #12]
 8019e8c:	8823      	ldrh	r3, [r4, #0]
 8019e8e:	2b20      	cmp	r3, #32
 8019e90:	d032      	beq.n	8019ef8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe0>
 8019e92:	f242 010b 	movw	r1, #8203	@ 0x200b
 8019e96:	1a5a      	subs	r2, r3, r1
 8019e98:	f1d2 0a00 	rsbs	sl, r2, #0
 8019e9c:	eb4a 0a02 	adc.w	sl, sl, r2
 8019ea0:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8019ea4:	4293      	cmp	r3, r2
 8019ea6:	d008      	beq.n	8019eba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8019ea8:	428b      	cmp	r3, r1
 8019eaa:	9a01      	ldr	r2, [sp, #4]
 8019eac:	bf16      	itet	ne
 8019eae:	461a      	movne	r2, r3
 8019eb0:	f04f 0a01 	moveq.w	sl, #1
 8019eb4:	f04f 0a00 	movne.w	sl, #0
 8019eb8:	9201      	str	r2, [sp, #4]
 8019eba:	ab03      	add	r3, sp, #12
 8019ebc:	68e2      	ldr	r2, [r4, #12]
 8019ebe:	7a21      	ldrb	r1, [r4, #8]
 8019ec0:	6860      	ldr	r0, [r4, #4]
 8019ec2:	f002 fe0b 	bl	801cadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019ec6:	8020      	strh	r0, [r4, #0]
 8019ec8:	b9d0      	cbnz	r0, 8019f00 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe8>
 8019eca:	2300      	movs	r3, #0
 8019ecc:	8ba2      	ldrh	r2, [r4, #28]
 8019ece:	4611      	mov	r1, r2
 8019ed0:	4620      	mov	r0, r4
 8019ed2:	f7ff ff91 	bl	8019df8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019ed6:	e06d      	b.n	8019fb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 8019ed8:	2500      	movs	r5, #0
 8019eda:	2701      	movs	r7, #1
 8019edc:	46a9      	mov	r9, r5
 8019ede:	462e      	mov	r6, r5
 8019ee0:	e7ca      	b.n	8019e78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019ee2:	2500      	movs	r5, #0
 8019ee4:	42b7      	cmp	r7, r6
 8019ee6:	bfb4      	ite	lt
 8019ee8:	2700      	movlt	r7, #0
 8019eea:	2701      	movge	r7, #1
 8019eec:	462e      	mov	r6, r5
 8019eee:	e7c3      	b.n	8019e78 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8019ef0:	2500      	movs	r5, #0
 8019ef2:	2601      	movs	r6, #1
 8019ef4:	46a9      	mov	r9, r5
 8019ef6:	e7af      	b.n	8019e58 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 8019ef8:	9301      	str	r3, [sp, #4]
 8019efa:	f04f 0a01 	mov.w	sl, #1
 8019efe:	e7dc      	b.n	8019eba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8019f00:	8b63      	ldrh	r3, [r4, #26]
 8019f02:	280a      	cmp	r0, #10
 8019f04:	f103 0301 	add.w	r3, r3, #1
 8019f08:	8363      	strh	r3, [r4, #26]
 8019f0a:	d0de      	beq.n	8019eca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8019f0c:	9a03      	ldr	r2, [sp, #12]
 8019f0e:	bb62      	cbnz	r2, 8019f6a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x152>
 8019f10:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8019f14:	4298      	cmp	r0, r3
 8019f16:	d003      	beq.n	8019f20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 8019f18:	f242 030b 	movw	r3, #8203	@ 0x200b
 8019f1c:	4298      	cmp	r0, r3
 8019f1e:	d1b3      	bne.n	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f20:	8823      	ldrh	r3, [r4, #0]
 8019f22:	8ba1      	ldrh	r1, [r4, #28]
 8019f24:	2b20      	cmp	r3, #32
 8019f26:	d003      	beq.n	8019f30 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x118>
 8019f28:	f242 000b 	movw	r0, #8203	@ 0x200b
 8019f2c:	4283      	cmp	r3, r0
 8019f2e:	d131      	bne.n	8019f94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17c>
 8019f30:	f1ba 0f00 	cmp.w	sl, #0
 8019f34:	bf0a      	itet	eq
 8019f36:	4688      	moveq	r8, r1
 8019f38:	4650      	movne	r0, sl
 8019f3a:	2001      	moveq	r0, #1
 8019f3c:	440a      	add	r2, r1
 8019f3e:	8b23      	ldrh	r3, [r4, #24]
 8019f40:	b292      	uxth	r2, r2
 8019f42:	83a2      	strh	r2, [r4, #28]
 8019f44:	4413      	add	r3, r2
 8019f46:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8019f4a:	f1b9 0f00 	cmp.w	r9, #0
 8019f4e:	d102      	bne.n	8019f56 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x13e>
 8019f50:	2d00      	cmp	r5, #0
 8019f52:	d042      	beq.n	8019fda <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c2>
 8019f54:	b300      	cbz	r0, 8019f98 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 8019f56:	8c21      	ldrh	r1, [r4, #32]
 8019f58:	4419      	add	r1, r3
 8019f5a:	458c      	cmp	ip, r1
 8019f5c:	da37      	bge.n	8019fce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 8019f5e:	8ae1      	ldrh	r1, [r4, #22]
 8019f60:	2900      	cmp	r1, #0
 8019f62:	d034      	beq.n	8019fce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b6>
 8019f64:	4563      	cmp	r3, ip
 8019f66:	dd8f      	ble.n	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f68:	e01d      	b.n	8019fa6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x18e>
 8019f6a:	8893      	ldrh	r3, [r2, #4]
 8019f6c:	9901      	ldr	r1, [sp, #4]
 8019f6e:	8023      	strh	r3, [r4, #0]
 8019f70:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8019f74:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8019f78:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8019f7c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8019f80:	ea4b 0b00 	orr.w	fp, fp, r0
 8019f84:	68e0      	ldr	r0, [r4, #12]
 8019f86:	6803      	ldr	r3, [r0, #0]
 8019f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019f8a:	4798      	blx	r3
 8019f8c:	eb0b 0200 	add.w	r2, fp, r0
 8019f90:	b292      	uxth	r2, r2
 8019f92:	e7c5      	b.n	8019f20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x108>
 8019f94:	2000      	movs	r0, #0
 8019f96:	e7d1      	b.n	8019f3c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x124>
 8019f98:	4563      	cmp	r3, ip
 8019f9a:	f77f af75 	ble.w	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019f9e:	8ae3      	ldrh	r3, [r4, #22]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	f43f af71 	beq.w	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019fa6:	2301      	movs	r3, #1
 8019fa8:	8c22      	ldrh	r2, [r4, #32]
 8019faa:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8019fae:	8be3      	ldrh	r3, [r4, #30]
 8019fb0:	4413      	add	r3, r2
 8019fb2:	83e3      	strh	r3, [r4, #30]
 8019fb4:	68e0      	ldr	r0, [r4, #12]
 8019fb6:	6803      	ldr	r3, [r0, #0]
 8019fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019fba:	4798      	blx	r3
 8019fbc:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8019fc0:	4418      	add	r0, r3
 8019fc2:	8a63      	ldrh	r3, [r4, #18]
 8019fc4:	1a18      	subs	r0, r3, r0
 8019fc6:	8260      	strh	r0, [r4, #18]
 8019fc8:	b005      	add	sp, #20
 8019fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fce:	2300      	movs	r3, #0
 8019fd0:	4611      	mov	r1, r2
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	f7ff ff10 	bl	8019df8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019fd8:	e756      	b.n	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019fda:	4563      	cmp	r3, ip
 8019fdc:	dd14      	ble.n	801a008 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f0>
 8019fde:	b117      	cbz	r7, 8019fe6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ce>
 8019fe0:	2301      	movs	r3, #1
 8019fe2:	460a      	mov	r2, r1
 8019fe4:	e773      	b.n	8019ece <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8019fe6:	2e00      	cmp	r6, #0
 8019fe8:	f43f af4e 	beq.w	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019fec:	2800      	cmp	r0, #0
 8019fee:	f47f af4b 	bne.w	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8019ff2:	f1ba 0f00 	cmp.w	sl, #0
 8019ff6:	d002      	beq.n	8019ffe <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e6>
 8019ff8:	2301      	movs	r3, #1
 8019ffa:	4642      	mov	r2, r8
 8019ffc:	e768      	b.n	8019ed0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8019ffe:	8ae3      	ldrh	r3, [r4, #22]
 801a000:	2b00      	cmp	r3, #0
 801a002:	f43f af41 	beq.w	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a006:	e7d5      	b.n	8019fb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19c>
 801a008:	2800      	cmp	r0, #0
 801a00a:	f47f af3d 	bne.w	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a00e:	f1ba 0f00 	cmp.w	sl, #0
 801a012:	f43f af39 	beq.w	8019e88 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801a016:	2301      	movs	r3, #1
 801a018:	4642      	mov	r2, r8
 801a01a:	e7da      	b.n	8019fd2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>

0801a01c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a01e:	4605      	mov	r5, r0
 801a020:	b08f      	sub	sp, #60	@ 0x3c
 801a022:	4617      	mov	r7, r2
 801a024:	461c      	mov	r4, r3
 801a026:	460e      	mov	r6, r1
 801a028:	b1d1      	cbz	r1, 801a060 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	4620      	mov	r0, r4
 801a02e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a030:	4798      	blx	r3
 801a032:	4240      	negs	r0, r0
 801a034:	b200      	sxth	r0, r0
 801a036:	e9cd 4001 	strd	r4, r0, [sp, #4]
 801a03a:	9603      	str	r6, [sp, #12]
 801a03c:	9700      	str	r7, [sp, #0]
 801a03e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a042:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801a046:	4629      	mov	r1, r5
 801a048:	a805      	add	r0, sp, #20
 801a04a:	f7ff fcad 	bl	80199a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a04e:	2401      	movs	r4, #1
 801a050:	a805      	add	r0, sp, #20
 801a052:	f7ff fee1 	bl	8019e18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a056:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801a05a:	b163      	cbz	r3, 801a076 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 801a05c:	3401      	adds	r4, #1
 801a05e:	e7f7      	b.n	801a050 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a060:	f002 fe0a 	bl	801cc78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a064:	2401      	movs	r4, #1
 801a066:	280a      	cmp	r0, #10
 801a068:	4628      	mov	r0, r5
 801a06a:	bf08      	it	eq
 801a06c:	3401      	addeq	r4, #1
 801a06e:	f002 fe03 	bl	801cc78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a072:	2800      	cmp	r0, #0
 801a074:	d1f7      	bne.n	801a066 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801a076:	b2a0      	uxth	r0, r4
 801a078:	b00f      	add	sp, #60	@ 0x3c
 801a07a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a07c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a080:	b0e3      	sub	sp, #396	@ 0x18c
 801a082:	461c      	mov	r4, r3
 801a084:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 801a086:	4683      	mov	fp, r0
 801a088:	4688      	mov	r8, r1
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	f000 8112 	beq.w	801a2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a090:	6823      	ldr	r3, [r4, #0]
 801a092:	2b00      	cmp	r3, #0
 801a094:	f000 810e 	beq.w	801a2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a098:	7ba3      	ldrb	r3, [r4, #14]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	f000 810a 	beq.w	801a2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a0a0:	ad0a      	add	r5, sp, #40	@ 0x28
 801a0a2:	462b      	mov	r3, r5
 801a0a4:	6810      	ldr	r0, [r2, #0]
 801a0a6:	6851      	ldr	r1, [r2, #4]
 801a0a8:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 801a0ac:	c303      	stmia	r3!, {r0, r1}
 801a0ae:	2100      	movs	r1, #0
 801a0b0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801a0b4:	910c      	str	r1, [sp, #48]	@ 0x30
 801a0b6:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 801a0ba:	a90c      	add	r1, sp, #48	@ 0x30
 801a0bc:	79a2      	ldrb	r2, [r4, #6]
 801a0be:	4628      	mov	r0, r5
 801a0c0:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a0c4:	f7ff fcef 	bl	8019aa6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a0c8:	a90c      	add	r1, sp, #48	@ 0x30
 801a0ca:	4608      	mov	r0, r1
 801a0cc:	79a2      	ldrb	r2, [r4, #6]
 801a0ce:	f7ff fcea 	bl	8019aa6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a0d2:	a817      	add	r0, sp, #92	@ 0x5c
 801a0d4:	f002 f97a 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801a0d8:	6820      	ldr	r0, [r4, #0]
 801a0da:	6803      	ldr	r3, [r0, #0]
 801a0dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a0de:	4798      	blx	r3
 801a0e0:	4606      	mov	r6, r0
 801a0e2:	6820      	ldr	r0, [r4, #0]
 801a0e4:	6803      	ldr	r3, [r0, #0]
 801a0e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a0e8:	4798      	blx	r3
 801a0ea:	4633      	mov	r3, r6
 801a0ec:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a0ee:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a0f0:	9000      	str	r0, [sp, #0]
 801a0f2:	a817      	add	r0, sp, #92	@ 0x5c
 801a0f4:	f002 f9c5 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a0f8:	6820      	ldr	r0, [r4, #0]
 801a0fa:	f894 a004 	ldrb.w	sl, [r4, #4]
 801a0fe:	6803      	ldr	r3, [r0, #0]
 801a100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a102:	4798      	blx	r3
 801a104:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 801a108:	6823      	ldr	r3, [r4, #0]
 801a10a:	4607      	mov	r7, r0
 801a10c:	4406      	add	r6, r0
 801a10e:	a830      	add	r0, sp, #192	@ 0xc0
 801a110:	f893 9009 	ldrb.w	r9, [r3, #9]
 801a114:	f002 f95a 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801a118:	7c23      	ldrb	r3, [r4, #16]
 801a11a:	b17b      	cbz	r3, 801a13c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 801a11c:	6820      	ldr	r0, [r4, #0]
 801a11e:	6803      	ldr	r3, [r0, #0]
 801a120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a122:	4798      	blx	r3
 801a124:	9009      	str	r0, [sp, #36]	@ 0x24
 801a126:	6820      	ldr	r0, [r4, #0]
 801a128:	6802      	ldr	r2, [r0, #0]
 801a12a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 801a12c:	4790      	blx	r2
 801a12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a130:	9000      	str	r0, [sp, #0]
 801a132:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801a134:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 801a136:	a830      	add	r0, sp, #192	@ 0xc0
 801a138:	f002 f9a3 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a13c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a140:	7be2      	ldrb	r2, [r4, #15]
 801a142:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a146:	1a8a      	subs	r2, r1, r2
 801a148:	7c21      	ldrb	r1, [r4, #16]
 801a14a:	b292      	uxth	r2, r2
 801a14c:	9103      	str	r1, [sp, #12]
 801a14e:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801a152:	a80e      	add	r0, sp, #56	@ 0x38
 801a154:	9102      	str	r1, [sp, #8]
 801a156:	6821      	ldr	r1, [r4, #0]
 801a158:	9101      	str	r1, [sp, #4]
 801a15a:	7961      	ldrb	r1, [r4, #5]
 801a15c:	9100      	str	r1, [sp, #0]
 801a15e:	a930      	add	r1, sp, #192	@ 0xc0
 801a160:	f7ff fc22 	bl	80199a8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801a164:	2e00      	cmp	r6, #0
 801a166:	dc5b      	bgt.n	801a220 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 801a168:	f04f 0900 	mov.w	r9, #0
 801a16c:	af17      	add	r7, sp, #92	@ 0x5c
 801a16e:	7c23      	ldrb	r3, [r4, #16]
 801a170:	2b00      	cmp	r3, #0
 801a172:	f000 80b1 	beq.w	801a2d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801a176:	a80e      	add	r0, sp, #56	@ 0x38
 801a178:	f7ff fe4e 	bl	8019e18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a17c:	f1ba 0f00 	cmp.w	sl, #0
 801a180:	f000 80a5 	beq.w	801a2ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a184:	7c23      	ldrb	r3, [r4, #16]
 801a186:	2264      	movs	r2, #100	@ 0x64
 801a188:	4639      	mov	r1, r7
 801a18a:	a849      	add	r0, sp, #292	@ 0x124
 801a18c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a18e:	f012 fdd2 	bl	802cd36 <memcpy>
 801a192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a194:	2b00      	cmp	r3, #0
 801a196:	f000 80a7 	beq.w	801a2e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 801a19a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801a19e:	7922      	ldrb	r2, [r4, #4]
 801a1a0:	2a01      	cmp	r2, #1
 801a1a2:	f040 808a 	bne.w	801a2ba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801a1a6:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 801a1aa:	1ac0      	subs	r0, r0, r3
 801a1ac:	2302      	movs	r3, #2
 801a1ae:	fb90 f0f3 	sdiv	r0, r0, r3
 801a1b2:	b200      	sxth	r0, r0
 801a1b4:	7c23      	ldrb	r3, [r4, #16]
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	f000 808b 	beq.w	801a2d2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a1bc:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 801a1c0:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801a1c4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a1c8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a1cc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a1d0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 801a1d4:	4410      	add	r0, r2
 801a1d6:	b200      	sxth	r0, r0
 801a1d8:	9000      	str	r0, [sp, #0]
 801a1da:	e9cd 5401 	strd	r5, r4, [sp, #4]
 801a1de:	4642      	mov	r2, r8
 801a1e0:	2100      	movs	r1, #0
 801a1e2:	4658      	mov	r0, fp
 801a1e4:	f7ff fc90 	bl	8019b08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a1e8:	2800      	cmp	r0, #0
 801a1ea:	d163      	bne.n	801a2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a1ec:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a1f0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801a1f4:	b2b2      	uxth	r2, r6
 801a1f6:	4413      	add	r3, r2
 801a1f8:	1a8a      	subs	r2, r1, r2
 801a1fa:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801a1fe:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 801a202:	b21b      	sxth	r3, r3
 801a204:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a208:	2a00      	cmp	r2, #0
 801a20a:	d153      	bne.n	801a2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a20c:	6822      	ldr	r2, [r4, #0]
 801a20e:	8869      	ldrh	r1, [r5, #2]
 801a210:	7a12      	ldrb	r2, [r2, #8]
 801a212:	1a9b      	subs	r3, r3, r2
 801a214:	88ea      	ldrh	r2, [r5, #6]
 801a216:	440a      	add	r2, r1
 801a218:	b212      	sxth	r2, r2
 801a21a:	4293      	cmp	r3, r2
 801a21c:	dda7      	ble.n	801a16e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801a21e:	e049      	b.n	801a2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a220:	7c23      	ldrb	r3, [r4, #16]
 801a222:	444f      	add	r7, r9
 801a224:	b1c3      	cbz	r3, 801a258 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 801a226:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 801a22a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a22e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a232:	443b      	add	r3, r7
 801a234:	4293      	cmp	r3, r2
 801a236:	da97      	bge.n	801a168 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a238:	a80e      	add	r0, sp, #56	@ 0x38
 801a23a:	f7ff fded 	bl	8019e18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801a23e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801a242:	3b01      	subs	r3, #1
 801a244:	b29b      	uxth	r3, r3
 801a246:	454b      	cmp	r3, r9
 801a248:	9309      	str	r3, [sp, #36]	@ 0x24
 801a24a:	d021      	beq.n	801a290 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 801a24c:	7961      	ldrb	r1, [r4, #5]
 801a24e:	a817      	add	r0, sp, #92	@ 0x5c
 801a250:	f7f8 fba8 	bl	80129a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a256:	e7f4      	b.n	801a242 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 801a258:	fa1f f986 	uxth.w	r9, r6
 801a25c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a260:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a264:	443b      	add	r3, r7
 801a266:	4293      	cmp	r3, r2
 801a268:	f6bf af7e 	bge.w	801a168 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 801a26c:	a817      	add	r0, sp, #92	@ 0x5c
 801a26e:	f002 fd03 	bl	801cc78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a272:	b1f8      	cbz	r0, 801a2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a274:	280a      	cmp	r0, #10
 801a276:	d1f1      	bne.n	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a278:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a27c:	444b      	add	r3, r9
 801a27e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a282:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801a286:	eba3 0309 	sub.w	r3, r3, r9
 801a28a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a28e:	e7e5      	b.n	801a25c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801a290:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a294:	b2b3      	uxth	r3, r6
 801a296:	441a      	add	r2, r3
 801a298:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801a29c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 801a2a0:	1ad3      	subs	r3, r2, r3
 801a2a2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801a2a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a2aa:	b11b      	cbz	r3, 801a2b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801a2ac:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d0ba      	beq.n	801a22a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801a2b4:	b063      	add	sp, #396	@ 0x18c
 801a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ba:	2a02      	cmp	r2, #2
 801a2bc:	d105      	bne.n	801a2ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 801a2be:	7be2      	ldrb	r2, [r4, #15]
 801a2c0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801a2c4:	1a80      	subs	r0, r0, r2
 801a2c6:	1ac0      	subs	r0, r0, r3
 801a2c8:	e773      	b.n	801a1b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 801a2ca:	2000      	movs	r0, #0
 801a2cc:	e772      	b.n	801a1b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a2ce:	7be0      	ldrb	r0, [r4, #15]
 801a2d0:	e770      	b.n	801a1b4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 801a2d2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a2d6:	e773      	b.n	801a1c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 801a2d8:	f1ba 0f00 	cmp.w	sl, #0
 801a2dc:	d0f7      	beq.n	801a2ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a2de:	2264      	movs	r2, #100	@ 0x64
 801a2e0:	4639      	mov	r1, r7
 801a2e2:	a849      	add	r0, sp, #292	@ 0x124
 801a2e4:	f012 fd27 	bl	802cd36 <memcpy>
 801a2e8:	2300      	movs	r3, #0
 801a2ea:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801a2ee:	6821      	ldr	r1, [r4, #0]
 801a2f0:	a849      	add	r0, sp, #292	@ 0x124
 801a2f2:	f7ff fb9c 	bl	8019a2e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a2f6:	b203      	sxth	r3, r0
 801a2f8:	e751      	b.n	801a19e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

0801a2fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a2fa:	2b03      	cmp	r3, #3
 801a2fc:	d818      	bhi.n	801a330 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a2fe:	e8df f003 	tbb	[pc, r3]
 801a302:	0602      	.short	0x0602
 801a304:	130d      	.short	0x130d
 801a306:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a30a:	1850      	adds	r0, r2, r1
 801a30c:	4770      	bx	lr
 801a30e:	8803      	ldrh	r3, [r0, #0]
 801a310:	8880      	ldrh	r0, [r0, #4]
 801a312:	4418      	add	r0, r3
 801a314:	b200      	sxth	r0, r0
 801a316:	1a80      	subs	r0, r0, r2
 801a318:	3801      	subs	r0, #1
 801a31a:	4770      	bx	lr
 801a31c:	8803      	ldrh	r3, [r0, #0]
 801a31e:	8880      	ldrh	r0, [r0, #4]
 801a320:	4418      	add	r0, r3
 801a322:	b200      	sxth	r0, r0
 801a324:	1a40      	subs	r0, r0, r1
 801a326:	e7f7      	b.n	801a318 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a328:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a32c:	4410      	add	r0, r2
 801a32e:	4770      	bx	lr
 801a330:	2000      	movs	r0, #0
 801a332:	4770      	bx	lr

0801a334 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a334:	2b03      	cmp	r3, #3
 801a336:	d817      	bhi.n	801a368 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801a338:	e8df f003 	tbb	[pc, r3]
 801a33c:	10090602 	.word	0x10090602
 801a340:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a344:	1850      	adds	r0, r2, r1
 801a346:	4770      	bx	lr
 801a348:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a34c:	e7fa      	b.n	801a344 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801a34e:	8843      	ldrh	r3, [r0, #2]
 801a350:	88c0      	ldrh	r0, [r0, #6]
 801a352:	4418      	add	r0, r3
 801a354:	b200      	sxth	r0, r0
 801a356:	1a80      	subs	r0, r0, r2
 801a358:	3801      	subs	r0, #1
 801a35a:	4770      	bx	lr
 801a35c:	8843      	ldrh	r3, [r0, #2]
 801a35e:	88c0      	ldrh	r0, [r0, #6]
 801a360:	4418      	add	r0, r3
 801a362:	b200      	sxth	r0, r0
 801a364:	1a40      	subs	r0, r0, r1
 801a366:	e7f7      	b.n	801a358 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a368:	2000      	movs	r0, #0
 801a36a:	4770      	bx	lr

0801a36c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a36c:	2200      	movs	r2, #0
 801a36e:	4b01      	ldr	r3, [pc, #4]	@ (801a374 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a370:	601a      	str	r2, [r3, #0]
 801a372:	4770      	bx	lr
 801a374:	20012114 	.word	0x20012114

0801a378 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a378:	4603      	mov	r3, r0
 801a37a:	b1c8      	cbz	r0, 801a3b0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a37c:	0c02      	lsrs	r2, r0, #16
 801a37e:	0412      	lsls	r2, r2, #16
 801a380:	b9a2      	cbnz	r2, 801a3ac <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a382:	0403      	lsls	r3, r0, #16
 801a384:	2010      	movs	r0, #16
 801a386:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801a38a:	bf04      	itt	eq
 801a38c:	021b      	lsleq	r3, r3, #8
 801a38e:	3008      	addeq	r0, #8
 801a390:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801a394:	bf04      	itt	eq
 801a396:	011b      	lsleq	r3, r3, #4
 801a398:	3004      	addeq	r0, #4
 801a39a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801a39e:	bf04      	itt	eq
 801a3a0:	009b      	lsleq	r3, r3, #2
 801a3a2:	3002      	addeq	r0, #2
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	db04      	blt.n	801a3b2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a3a8:	3001      	adds	r0, #1
 801a3aa:	4770      	bx	lr
 801a3ac:	2000      	movs	r0, #0
 801a3ae:	e7ea      	b.n	801a386 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a3b0:	2020      	movs	r0, #32
 801a3b2:	4770      	bx	lr

0801a3b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a3b8:	b087      	sub	sp, #28
 801a3ba:	460d      	mov	r5, r1
 801a3bc:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801a3c0:	4616      	mov	r6, r2
 801a3c2:	4698      	mov	r8, r3
 801a3c4:	4601      	mov	r1, r0
 801a3c6:	b120      	cbz	r0, 801a3d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a3c8:	b11a      	cbz	r2, 801a3d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a3ca:	2d1f      	cmp	r5, #31
 801a3cc:	d801      	bhi.n	801a3d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 801a3ce:	2b1f      	cmp	r3, #31
 801a3d0:	d904      	bls.n	801a3dc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 801a3d2:	2000      	movs	r0, #0
 801a3d4:	6038      	str	r0, [r7, #0]
 801a3d6:	b007      	add	sp, #28
 801a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3dc:	b97d      	cbnz	r5, 801a3fe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 801a3de:	b143      	cbz	r3, 801a3f2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 801a3e0:	4602      	mov	r2, r0
 801a3e2:	e9cd 4700 	strd	r4, r7, [sp]
 801a3e6:	462b      	mov	r3, r5
 801a3e8:	4641      	mov	r1, r8
 801a3ea:	4630      	mov	r0, r6
 801a3ec:	f7ff ffe2 	bl	801a3b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a3f0:	e7f1      	b.n	801a3d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a3f2:	f04f 33ff 	mov.w	r3, #4294967295
 801a3f6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801a3fa:	603b      	str	r3, [r7, #0]
 801a3fc:	e7eb      	b.n	801a3d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a3fe:	fa32 fa05 	lsrs.w	sl, r2, r5
 801a402:	d106      	bne.n	801a412 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 801a404:	4346      	muls	r6, r0
 801a406:	fbb6 f0f4 	udiv	r0, r6, r4
 801a40a:	fb04 6610 	mls	r6, r4, r0, r6
 801a40e:	603e      	str	r6, [r7, #0]
 801a410:	e7e1      	b.n	801a3d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801a412:	fa00 fb05 	lsl.w	fp, r0, r5
 801a416:	fbbb f9f4 	udiv	r9, fp, r4
 801a41a:	2201      	movs	r2, #1
 801a41c:	fb0a f309 	mul.w	r3, sl, r9
 801a420:	40aa      	lsls	r2, r5
 801a422:	3a01      	subs	r2, #1
 801a424:	4016      	ands	r6, r2
 801a426:	4630      	mov	r0, r6
 801a428:	9303      	str	r3, [sp, #12]
 801a42a:	f7ff ffa5 	bl	801a378 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a42e:	462b      	mov	r3, r5
 801a430:	460a      	mov	r2, r1
 801a432:	e9cd 4700 	strd	r4, r7, [sp]
 801a436:	4601      	mov	r1, r0
 801a438:	4630      	mov	r0, r6
 801a43a:	f7ff ffbb 	bl	801a3b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a43e:	fb04 b919 	mls	r9, r4, r9, fp
 801a442:	4606      	mov	r6, r0
 801a444:	4648      	mov	r0, r9
 801a446:	eb05 0108 	add.w	r1, r5, r8
 801a44a:	f7ff ff95 	bl	801a378 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a44e:	ab05      	add	r3, sp, #20
 801a450:	e9cd 4300 	strd	r4, r3, [sp]
 801a454:	464a      	mov	r2, r9
 801a456:	4603      	mov	r3, r0
 801a458:	4650      	mov	r0, sl
 801a45a:	f7ff ffab 	bl	801a3b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a45e:	6839      	ldr	r1, [r7, #0]
 801a460:	9a05      	ldr	r2, [sp, #20]
 801a462:	9b03      	ldr	r3, [sp, #12]
 801a464:	4411      	add	r1, r2
 801a466:	fbb1 f2f4 	udiv	r2, r1, r4
 801a46a:	fb04 1412 	mls	r4, r4, r2, r1
 801a46e:	18d3      	adds	r3, r2, r3
 801a470:	441e      	add	r6, r3
 801a472:	4430      	add	r0, r6
 801a474:	603c      	str	r4, [r7, #0]
 801a476:	e7ae      	b.n	801a3d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0801a478 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801a478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a47c:	b085      	sub	sp, #20
 801a47e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801a480:	f1b0 0900 	subs.w	r9, r0, #0
 801a484:	461d      	mov	r5, r3
 801a486:	bfbf      	itttt	lt
 801a488:	6823      	ldrlt	r3, [r4, #0]
 801a48a:	f1c9 0900 	rsblt	r9, r9, #0
 801a48e:	425b      	neglt	r3, r3
 801a490:	6023      	strlt	r3, [r4, #0]
 801a492:	bfb4      	ite	lt
 801a494:	f04f 36ff 	movlt.w	r6, #4294967295
 801a498:	2601      	movge	r6, #1
 801a49a:	2a00      	cmp	r2, #0
 801a49c:	4617      	mov	r7, r2
 801a49e:	da04      	bge.n	801a4aa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801a4a0:	6823      	ldr	r3, [r4, #0]
 801a4a2:	4257      	negs	r7, r2
 801a4a4:	425b      	negs	r3, r3
 801a4a6:	4276      	negs	r6, r6
 801a4a8:	6023      	str	r3, [r4, #0]
 801a4aa:	2d00      	cmp	r5, #0
 801a4ac:	4638      	mov	r0, r7
 801a4ae:	bfba      	itte	lt
 801a4b0:	426d      	neglt	r5, r5
 801a4b2:	f04f 38ff 	movlt.w	r8, #4294967295
 801a4b6:	f04f 0801 	movge.w	r8, #1
 801a4ba:	f7ff ff5d 	bl	801a378 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a4be:	ab03      	add	r3, sp, #12
 801a4c0:	e9cd 5300 	strd	r5, r3, [sp]
 801a4c4:	463a      	mov	r2, r7
 801a4c6:	4603      	mov	r3, r0
 801a4c8:	4648      	mov	r0, r9
 801a4ca:	f7ff ff73 	bl	801a3b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a4ce:	6823      	ldr	r3, [r4, #0]
 801a4d0:	9a03      	ldr	r2, [sp, #12]
 801a4d2:	4546      	cmp	r6, r8
 801a4d4:	441a      	add	r2, r3
 801a4d6:	fb92 f3f5 	sdiv	r3, r2, r5
 801a4da:	4418      	add	r0, r3
 801a4dc:	fb05 2313 	mls	r3, r5, r3, r2
 801a4e0:	bf18      	it	ne
 801a4e2:	4240      	negne	r0, r0
 801a4e4:	1c72      	adds	r2, r6, #1
 801a4e6:	6023      	str	r3, [r4, #0]
 801a4e8:	d105      	bne.n	801a4f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	f1c3 0200 	rsb	r2, r3, #0
 801a4f0:	db0b      	blt.n	801a50a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801a4f2:	6022      	str	r2, [r4, #0]
 801a4f4:	e006      	b.n	801a504 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a4f6:	2e01      	cmp	r6, #1
 801a4f8:	d104      	bne.n	801a504 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	da02      	bge.n	801a504 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801a4fe:	442b      	add	r3, r5
 801a500:	3801      	subs	r0, #1
 801a502:	6023      	str	r3, [r4, #0]
 801a504:	b005      	add	sp, #20
 801a506:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a50a:	3801      	subs	r0, #1
 801a50c:	1b52      	subs	r2, r2, r5
 801a50e:	e7f0      	b.n	801a4f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801a510 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801a510:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801a514:	4c1c      	ldr	r4, [pc, #112]	@ (801a588 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801a516:	4605      	mov	r5, r0
 801a518:	69a3      	ldr	r3, [r4, #24]
 801a51a:	6807      	ldr	r7, [r0, #0]
 801a51c:	b92b      	cbnz	r3, 801a52a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801a51e:	6840      	ldr	r0, [r0, #4]
 801a520:	e9c5 7000 	strd	r7, r0, [r5]
 801a524:	b004      	add	sp, #16
 801a526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a52a:	f04f 0802 	mov.w	r8, #2
 801a52e:	fb93 f1f8 	sdiv	r1, r3, r8
 801a532:	68a2      	ldr	r2, [r4, #8]
 801a534:	ae04      	add	r6, sp, #16
 801a536:	440a      	add	r2, r1
 801a538:	f846 2d04 	str.w	r2, [r6, #-4]!
 801a53c:	69e1      	ldr	r1, [r4, #28]
 801a53e:	463a      	mov	r2, r7
 801a540:	9600      	str	r6, [sp, #0]
 801a542:	6820      	ldr	r0, [r4, #0]
 801a544:	f7ff ff98 	bl	801a478 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a548:	69a3      	ldr	r3, [r4, #24]
 801a54a:	4607      	mov	r7, r0
 801a54c:	686a      	ldr	r2, [r5, #4]
 801a54e:	6a21      	ldr	r1, [r4, #32]
 801a550:	9600      	str	r6, [sp, #0]
 801a552:	6860      	ldr	r0, [r4, #4]
 801a554:	f7ff ff90 	bl	801a478 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a558:	69a3      	ldr	r3, [r4, #24]
 801a55a:	6962      	ldr	r2, [r4, #20]
 801a55c:	fb93 f8f8 	sdiv	r8, r3, r8
 801a560:	4442      	add	r2, r8
 801a562:	9203      	str	r2, [sp, #12]
 801a564:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801a566:	682a      	ldr	r2, [r5, #0]
 801a568:	4407      	add	r7, r0
 801a56a:	9600      	str	r6, [sp, #0]
 801a56c:	68e0      	ldr	r0, [r4, #12]
 801a56e:	f7ff ff83 	bl	801a478 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a572:	9600      	str	r6, [sp, #0]
 801a574:	4680      	mov	r8, r0
 801a576:	69a3      	ldr	r3, [r4, #24]
 801a578:	686a      	ldr	r2, [r5, #4]
 801a57a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801a57c:	6920      	ldr	r0, [r4, #16]
 801a57e:	f7ff ff7b 	bl	801a478 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801a582:	4440      	add	r0, r8
 801a584:	e7cc      	b.n	801a520 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801a586:	bf00      	nop
 801a588:	20012118 	.word	0x20012118

0801a58c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801a58c:	4b07      	ldr	r3, [pc, #28]	@ (801a5ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801a58e:	781b      	ldrb	r3, [r3, #0]
 801a590:	2b01      	cmp	r3, #1
 801a592:	d109      	bne.n	801a5a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801a594:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a598:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a59c:	8003      	strh	r3, [r0, #0]
 801a59e:	4b04      	ldr	r3, [pc, #16]	@ (801a5b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801a5a0:	881b      	ldrh	r3, [r3, #0]
 801a5a2:	3b01      	subs	r3, #1
 801a5a4:	1a9b      	subs	r3, r3, r2
 801a5a6:	800b      	strh	r3, [r1, #0]
 801a5a8:	4770      	bx	lr
 801a5aa:	bf00      	nop
 801a5ac:	200120fc 	.word	0x200120fc
 801a5b0:	200120f8 	.word	0x200120f8

0801a5b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801a5b4:	b510      	push	{r4, lr}
 801a5b6:	4b07      	ldr	r3, [pc, #28]	@ (801a5d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801a5b8:	781b      	ldrb	r3, [r3, #0]
 801a5ba:	2b01      	cmp	r3, #1
 801a5bc:	d108      	bne.n	801a5d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801a5be:	4b06      	ldr	r3, [pc, #24]	@ (801a5d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801a5c0:	880c      	ldrh	r4, [r1, #0]
 801a5c2:	881b      	ldrh	r3, [r3, #0]
 801a5c4:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a5c8:	3b01      	subs	r3, #1
 801a5ca:	1b1b      	subs	r3, r3, r4
 801a5cc:	8003      	strh	r3, [r0, #0]
 801a5ce:	800a      	strh	r2, [r1, #0]
 801a5d0:	bd10      	pop	{r4, pc}
 801a5d2:	bf00      	nop
 801a5d4:	200120fc 	.word	0x200120fc
 801a5d8:	200120f8 	.word	0x200120f8

0801a5dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801a5dc:	b510      	push	{r4, lr}
 801a5de:	4b0a      	ldr	r3, [pc, #40]	@ (801a608 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801a5e0:	781b      	ldrb	r3, [r3, #0]
 801a5e2:	2b01      	cmp	r3, #1
 801a5e4:	d10e      	bne.n	801a604 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801a5e6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a5ea:	8843      	ldrh	r3, [r0, #2]
 801a5ec:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a5f0:	18ca      	adds	r2, r1, r3
 801a5f2:	4b06      	ldr	r3, [pc, #24]	@ (801a60c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801a5f4:	8044      	strh	r4, [r0, #2]
 801a5f6:	881b      	ldrh	r3, [r3, #0]
 801a5f8:	1a9b      	subs	r3, r3, r2
 801a5fa:	8003      	strh	r3, [r0, #0]
 801a5fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a600:	8081      	strh	r1, [r0, #4]
 801a602:	80c3      	strh	r3, [r0, #6]
 801a604:	bd10      	pop	{r4, pc}
 801a606:	bf00      	nop
 801a608:	200120fc 	.word	0x200120fc
 801a60c:	200120f8 	.word	0x200120f8

0801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801a610:	4b08      	ldr	r3, [pc, #32]	@ (801a634 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801a612:	781b      	ldrb	r3, [r3, #0]
 801a614:	2b01      	cmp	r3, #1
 801a616:	d10c      	bne.n	801a632 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801a618:	8803      	ldrh	r3, [r0, #0]
 801a61a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801a61e:	8842      	ldrh	r2, [r0, #2]
 801a620:	8002      	strh	r2, [r0, #0]
 801a622:	185a      	adds	r2, r3, r1
 801a624:	4b04      	ldr	r3, [pc, #16]	@ (801a638 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801a626:	881b      	ldrh	r3, [r3, #0]
 801a628:	1a9b      	subs	r3, r3, r2
 801a62a:	8043      	strh	r3, [r0, #2]
 801a62c:	88c3      	ldrh	r3, [r0, #6]
 801a62e:	80c1      	strh	r1, [r0, #6]
 801a630:	8083      	strh	r3, [r0, #4]
 801a632:	4770      	bx	lr
 801a634:	200120fc 	.word	0x200120fc
 801a638:	200120f8 	.word	0x200120f8

0801a63c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801a63c:	b510      	push	{r4, lr}
 801a63e:	4b07      	ldr	r3, [pc, #28]	@ (801a65c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801a640:	781b      	ldrb	r3, [r3, #0]
 801a642:	2b01      	cmp	r3, #1
 801a644:	d108      	bne.n	801a658 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801a646:	f9b1 3000 	ldrsh.w	r3, [r1]
 801a64a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a64e:	8003      	strh	r3, [r0, #0]
 801a650:	8893      	ldrh	r3, [r2, #4]
 801a652:	3b01      	subs	r3, #1
 801a654:	1b1b      	subs	r3, r3, r4
 801a656:	800b      	strh	r3, [r1, #0]
 801a658:	bd10      	pop	{r4, pc}
 801a65a:	bf00      	nop
 801a65c:	200120fc 	.word	0x200120fc

0801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801a660:	b510      	push	{r4, lr}
 801a662:	4b0a      	ldr	r3, [pc, #40]	@ (801a68c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801a664:	460a      	mov	r2, r1
 801a666:	781b      	ldrb	r3, [r3, #0]
 801a668:	2b01      	cmp	r3, #1
 801a66a:	d10d      	bne.n	801a688 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801a66c:	8881      	ldrh	r1, [r0, #4]
 801a66e:	8803      	ldrh	r3, [r0, #0]
 801a670:	440b      	add	r3, r1
 801a672:	4601      	mov	r1, r0
 801a674:	3b01      	subs	r3, #1
 801a676:	f821 3b02 	strh.w	r3, [r1], #2
 801a67a:	f7ff ffdf 	bl	801a63c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801a67e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a682:	88c2      	ldrh	r2, [r0, #6]
 801a684:	80c3      	strh	r3, [r0, #6]
 801a686:	8082      	strh	r2, [r0, #4]
 801a688:	bd10      	pop	{r4, pc}
 801a68a:	bf00      	nop
 801a68c:	200120fc 	.word	0x200120fc

0801a690 <_ZN8touchgfx11Application13requestRedrawEv>:
 801a690:	2100      	movs	r1, #0
 801a692:	4b06      	ldr	r3, [pc, #24]	@ (801a6ac <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801a694:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801a698:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a69c:	4b04      	ldr	r3, [pc, #16]	@ (801a6b0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801a69e:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801a6a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6a6:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801a6aa:	4770      	bx	lr
 801a6ac:	200120f8 	.word	0x200120f8
 801a6b0:	200120fa 	.word	0x200120fa

0801a6b4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801a6b4:	4b03      	ldr	r3, [pc, #12]	@ (801a6c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801a6b6:	6818      	ldr	r0, [r3, #0]
 801a6b8:	b110      	cbz	r0, 801a6c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801a6ba:	6803      	ldr	r3, [r0, #0]
 801a6bc:	699b      	ldr	r3, [r3, #24]
 801a6be:	4718      	bx	r3
 801a6c0:	4770      	bx	lr
 801a6c2:	bf00      	nop
 801a6c4:	20012148 	.word	0x20012148

0801a6c8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801a6c8:	4770      	bx	lr
	...

0801a6cc <_ZN8touchgfx11Application4drawEv>:
 801a6cc:	b507      	push	{r0, r1, r2, lr}
 801a6ce:	2100      	movs	r1, #0
 801a6d0:	4b08      	ldr	r3, [pc, #32]	@ (801a6f4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801a6d2:	9100      	str	r1, [sp, #0]
 801a6d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a6d8:	4b07      	ldr	r3, [pc, #28]	@ (801a6f8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801a6da:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a6de:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6e2:	4669      	mov	r1, sp
 801a6e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a6e8:	6803      	ldr	r3, [r0, #0]
 801a6ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a6ec:	4798      	blx	r3
 801a6ee:	b003      	add	sp, #12
 801a6f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6f4:	200120f8 	.word	0x200120f8
 801a6f8:	200120fa 	.word	0x200120fa

0801a6fc <_ZN8touchgfx11Application10invalidateEv>:
 801a6fc:	2100      	movs	r1, #0
 801a6fe:	4b09      	ldr	r3, [pc, #36]	@ (801a724 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801a700:	b082      	sub	sp, #8
 801a702:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a706:	4b08      	ldr	r3, [pc, #32]	@ (801a728 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801a708:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a70c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a710:	9100      	str	r1, [sp, #0]
 801a712:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a716:	6803      	ldr	r3, [r0, #0]
 801a718:	aa02      	add	r2, sp, #8
 801a71a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a71c:	e912 0006 	ldmdb	r2, {r1, r2}
 801a720:	b002      	add	sp, #8
 801a722:	4718      	bx	r3
 801a724:	200120f8 	.word	0x200120f8
 801a728:	200120fa 	.word	0x200120fa

0801a72c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801a72c:	4b03      	ldr	r3, [pc, #12]	@ (801a73c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801a72e:	6818      	ldr	r0, [r3, #0]
 801a730:	b110      	cbz	r0, 801a738 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801a732:	6803      	ldr	r3, [r0, #0]
 801a734:	69db      	ldr	r3, [r3, #28]
 801a736:	4718      	bx	r3
 801a738:	4770      	bx	lr
 801a73a:	bf00      	nop
 801a73c:	20012148 	.word	0x20012148

0801a740 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801a740:	4b03      	ldr	r3, [pc, #12]	@ (801a750 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801a742:	6818      	ldr	r0, [r3, #0]
 801a744:	b110      	cbz	r0, 801a74c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801a746:	6803      	ldr	r3, [r0, #0]
 801a748:	6a1b      	ldr	r3, [r3, #32]
 801a74a:	4718      	bx	r3
 801a74c:	4770      	bx	lr
 801a74e:	bf00      	nop
 801a750:	20012148 	.word	0x20012148

0801a754 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801a754:	2300      	movs	r3, #0
 801a756:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801a75a:	4770      	bx	lr

0801a75c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801a75c:	4b03      	ldr	r3, [pc, #12]	@ (801a76c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801a75e:	6818      	ldr	r0, [r3, #0]
 801a760:	b110      	cbz	r0, 801a768 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801a762:	6803      	ldr	r3, [r0, #0]
 801a764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a766:	4718      	bx	r3
 801a768:	4770      	bx	lr
 801a76a:	bf00      	nop
 801a76c:	20012148 	.word	0x20012148

0801a770 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801a770:	b510      	push	{r4, lr}
 801a772:	f9b1 4000 	ldrsh.w	r4, [r1]
 801a776:	888a      	ldrh	r2, [r1, #4]
 801a778:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a77c:	4422      	add	r2, r4
 801a77e:	b212      	sxth	r2, r2
 801a780:	4293      	cmp	r3, r2
 801a782:	da15      	bge.n	801a7b0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a784:	8882      	ldrh	r2, [r0, #4]
 801a786:	4413      	add	r3, r2
 801a788:	b21b      	sxth	r3, r3
 801a78a:	429c      	cmp	r4, r3
 801a78c:	da10      	bge.n	801a7b0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a78e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801a792:	88c9      	ldrh	r1, [r1, #6]
 801a794:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a798:	4419      	add	r1, r3
 801a79a:	b209      	sxth	r1, r1
 801a79c:	428a      	cmp	r2, r1
 801a79e:	da07      	bge.n	801a7b0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801a7a0:	88c0      	ldrh	r0, [r0, #6]
 801a7a2:	4410      	add	r0, r2
 801a7a4:	b200      	sxth	r0, r0
 801a7a6:	4283      	cmp	r3, r0
 801a7a8:	bfac      	ite	ge
 801a7aa:	2000      	movge	r0, #0
 801a7ac:	2001      	movlt	r0, #1
 801a7ae:	bd10      	pop	{r4, pc}
 801a7b0:	2000      	movs	r0, #0
 801a7b2:	e7fc      	b.n	801a7ae <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801a7b4 <_ZN8touchgfx4Rect10restrictToEss>:
 801a7b4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801a7b8:	b510      	push	{r4, lr}
 801a7ba:	2b00      	cmp	r3, #0
 801a7bc:	da04      	bge.n	801a7c8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801a7be:	8884      	ldrh	r4, [r0, #4]
 801a7c0:	4423      	add	r3, r4
 801a7c2:	8083      	strh	r3, [r0, #4]
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	8003      	strh	r3, [r0, #0]
 801a7c8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801a7cc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801a7d0:	1b09      	subs	r1, r1, r4
 801a7d2:	428b      	cmp	r3, r1
 801a7d4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a7d8:	bfc8      	it	gt
 801a7da:	8081      	strhgt	r1, [r0, #4]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	da04      	bge.n	801a7ea <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801a7e0:	88c1      	ldrh	r1, [r0, #6]
 801a7e2:	440b      	add	r3, r1
 801a7e4:	80c3      	strh	r3, [r0, #6]
 801a7e6:	2300      	movs	r3, #0
 801a7e8:	8043      	strh	r3, [r0, #2]
 801a7ea:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a7ee:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801a7f2:	1a52      	subs	r2, r2, r1
 801a7f4:	4293      	cmp	r3, r2
 801a7f6:	bfc8      	it	gt
 801a7f8:	80c2      	strhgt	r2, [r0, #6]
 801a7fa:	bd10      	pop	{r4, pc}

0801a7fc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801a7fc:	b510      	push	{r4, lr}
 801a7fe:	460c      	mov	r4, r1
 801a800:	4b0f      	ldr	r3, [pc, #60]	@ (801a840 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801a802:	4620      	mov	r0, r4
 801a804:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a808:	4b0e      	ldr	r3, [pc, #56]	@ (801a844 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801a80a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a80e:	f7ff ffd1 	bl	801a7b4 <_ZN8touchgfx4Rect10restrictToEss>
 801a812:	4b0d      	ldr	r3, [pc, #52]	@ (801a848 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801a814:	6818      	ldr	r0, [r3, #0]
 801a816:	b190      	cbz	r0, 801a83e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801a818:	6803      	ldr	r3, [r0, #0]
 801a81a:	4621      	mov	r1, r4
 801a81c:	689b      	ldr	r3, [r3, #8]
 801a81e:	4798      	blx	r3
 801a820:	4b0a      	ldr	r3, [pc, #40]	@ (801a84c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801a822:	6818      	ldr	r0, [r3, #0]
 801a824:	b118      	cbz	r0, 801a82e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801a826:	6803      	ldr	r3, [r0, #0]
 801a828:	4621      	mov	r1, r4
 801a82a:	689b      	ldr	r3, [r3, #8]
 801a82c:	4798      	blx	r3
 801a82e:	4b08      	ldr	r3, [pc, #32]	@ (801a850 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801a830:	4621      	mov	r1, r4
 801a832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a836:	6818      	ldr	r0, [r3, #0]
 801a838:	6803      	ldr	r3, [r0, #0]
 801a83a:	69db      	ldr	r3, [r3, #28]
 801a83c:	4718      	bx	r3
 801a83e:	bd10      	pop	{r4, pc}
 801a840:	200120fa 	.word	0x200120fa
 801a844:	200120f8 	.word	0x200120f8
 801a848:	20012148 	.word	0x20012148
 801a84c:	20012144 	.word	0x20012144
 801a850:	20012104 	.word	0x20012104

0801a854 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a856:	4606      	mov	r6, r0
 801a858:	4608      	mov	r0, r1
 801a85a:	460f      	mov	r7, r1
 801a85c:	f7fa feeb 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a860:	b9e8      	cbnz	r0, 801a89e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a862:	f9b7 5000 	ldrsh.w	r5, [r7]
 801a866:	f9b6 4000 	ldrsh.w	r4, [r6]
 801a86a:	42a5      	cmp	r5, r4
 801a86c:	db17      	blt.n	801a89e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a86e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801a872:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801a876:	429a      	cmp	r2, r3
 801a878:	db11      	blt.n	801a89e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a87a:	88b9      	ldrh	r1, [r7, #4]
 801a87c:	440d      	add	r5, r1
 801a87e:	88b1      	ldrh	r1, [r6, #4]
 801a880:	b22d      	sxth	r5, r5
 801a882:	440c      	add	r4, r1
 801a884:	b224      	sxth	r4, r4
 801a886:	42a5      	cmp	r5, r4
 801a888:	dc09      	bgt.n	801a89e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801a88a:	88f8      	ldrh	r0, [r7, #6]
 801a88c:	4410      	add	r0, r2
 801a88e:	88f2      	ldrh	r2, [r6, #6]
 801a890:	b200      	sxth	r0, r0
 801a892:	4413      	add	r3, r2
 801a894:	b21b      	sxth	r3, r3
 801a896:	4298      	cmp	r0, r3
 801a898:	bfcc      	ite	gt
 801a89a:	2000      	movgt	r0, #0
 801a89c:	2001      	movle	r0, #1
 801a89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a8a0 <_ZN8touchgfx11Application11getInstanceEv>:
 801a8a0:	4b01      	ldr	r3, [pc, #4]	@ (801a8a8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a8a2:	6818      	ldr	r0, [r3, #0]
 801a8a4:	4770      	bx	lr
 801a8a6:	bf00      	nop
 801a8a8:	20012158 	.word	0x20012158

0801a8ac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	b510      	push	{r4, lr}
 801a8b0:	4604      	mov	r4, r0
 801a8b2:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 801a8b6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a8ba:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801a8be:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801a8c2:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 801a8c6:	429a      	cmp	r2, r3
 801a8c8:	d90e      	bls.n	801a8e8 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801a8ca:	18e2      	adds	r2, r4, r3
 801a8cc:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801a8d0:	b122      	cbz	r2, 801a8dc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801a8d2:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801a8d6:	6803      	ldr	r3, [r0, #0]
 801a8d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a8da:	4798      	blx	r3
 801a8dc:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801a8e0:	3301      	adds	r3, #1
 801a8e2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801a8e6:	e7ea      	b.n	801a8be <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 801a8e8:	bd10      	pop	{r4, pc}

0801a8ea <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801a8f0:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801a8f4:	30a4      	adds	r0, #164	@ 0xa4
 801a8f6:	f802 3b01 	strb.w	r3, [r2], #1
 801a8fa:	4282      	cmp	r2, r0
 801a8fc:	d1fb      	bne.n	801a8f6 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801a8fe:	4770      	bx	lr

0801a900 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801a900:	b570      	push	{r4, r5, r6, lr}
 801a902:	4c0b      	ldr	r4, [pc, #44]	@ (801a930 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801a904:	4605      	mov	r5, r0
 801a906:	6820      	ldr	r0, [r4, #0]
 801a908:	460e      	mov	r6, r1
 801a90a:	b110      	cbz	r0, 801a912 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801a90c:	6803      	ldr	r3, [r0, #0]
 801a90e:	695b      	ldr	r3, [r3, #20]
 801a910:	4798      	blx	r3
 801a912:	1d28      	adds	r0, r5, #4
 801a914:	f7ff ffe9 	bl	801a8ea <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801a918:	6026      	str	r6, [r4, #0]
 801a91a:	6833      	ldr	r3, [r6, #0]
 801a91c:	4630      	mov	r0, r6
 801a91e:	68db      	ldr	r3, [r3, #12]
 801a920:	4798      	blx	r3
 801a922:	682b      	ldr	r3, [r5, #0]
 801a924:	4628      	mov	r0, r5
 801a926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a92a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a92c:	4718      	bx	r3
 801a92e:	bf00      	nop
 801a930:	20012148 	.word	0x20012148

0801a934 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801a934:	2300      	movs	r3, #0
 801a936:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a938:	461a      	mov	r2, r3
 801a93a:	461c      	mov	r4, r3
 801a93c:	461d      	mov	r5, r3
 801a93e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801a942:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801a946:	459c      	cmp	ip, r3
 801a948:	dd1a      	ble.n	801a980 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801a94a:	18c6      	adds	r6, r0, r3
 801a94c:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 801a950:	b16e      	cbz	r6, 801a96e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801a952:	429a      	cmp	r2, r3
 801a954:	d008      	beq.n	801a968 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801a956:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801a95a:	fa1f fe82 	uxth.w	lr, r2
 801a95e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801a962:	1887      	adds	r7, r0, r2
 801a964:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 801a968:	3201      	adds	r2, #1
 801a96a:	3301      	adds	r3, #1
 801a96c:	e7eb      	b.n	801a946 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801a96e:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 801a972:	4299      	cmp	r1, r3
 801a974:	bfa8      	it	ge
 801a976:	3501      	addge	r5, #1
 801a978:	429e      	cmp	r6, r3
 801a97a:	bfc8      	it	gt
 801a97c:	3401      	addgt	r4, #1
 801a97e:	e7f4      	b.n	801a96a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801a980:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 801a984:	1b49      	subs	r1, r1, r5
 801a986:	1b1b      	subs	r3, r3, r4
 801a988:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 801a98c:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801a990:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801a994:	4293      	cmp	r3, r2
 801a996:	dd03      	ble.n	801a9a0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 801a998:	3b01      	subs	r3, #1
 801a99a:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801a99e:	e7f7      	b.n	801a990 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801a9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801a9a4 <_ZN8touchgfx11Application15handleTickEventEv>:
 801a9a4:	b570      	push	{r4, r5, r6, lr}
 801a9a6:	4d16      	ldr	r5, [pc, #88]	@ (801aa00 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 801a9a8:	4604      	mov	r4, r0
 801a9aa:	6828      	ldr	r0, [r5, #0]
 801a9ac:	b140      	cbz	r0, 801a9c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a9ae:	7a03      	ldrb	r3, [r0, #8]
 801a9b0:	b933      	cbnz	r3, 801a9c0 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801a9b2:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801a9b6:	6803      	ldr	r3, [r0, #0]
 801a9b8:	689b      	ldr	r3, [r3, #8]
 801a9ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a9be:	4718      	bx	r3
 801a9c0:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 801a9c4:	4e0f      	ldr	r6, [pc, #60]	@ (801aa04 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 801a9c6:	b973      	cbnz	r3, 801a9e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a9c8:	b168      	cbz	r0, 801a9e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a9ca:	7a03      	ldrb	r3, [r0, #8]
 801a9cc:	b15b      	cbz	r3, 801a9e6 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801a9ce:	6830      	ldr	r0, [r6, #0]
 801a9d0:	b110      	cbz	r0, 801a9d8 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801a9d2:	6803      	ldr	r3, [r0, #0]
 801a9d4:	691b      	ldr	r3, [r3, #16]
 801a9d6:	4798      	blx	r3
 801a9d8:	6828      	ldr	r0, [r5, #0]
 801a9da:	6803      	ldr	r3, [r0, #0]
 801a9dc:	68db      	ldr	r3, [r3, #12]
 801a9de:	4798      	blx	r3
 801a9e0:	2301      	movs	r3, #1
 801a9e2:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801a9e6:	3404      	adds	r4, #4
 801a9e8:	4620      	mov	r0, r4
 801a9ea:	f7ff ff5f 	bl	801a8ac <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801a9ee:	4620      	mov	r0, r4
 801a9f0:	f7ff ffa0 	bl	801a934 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801a9f4:	6830      	ldr	r0, [r6, #0]
 801a9f6:	b110      	cbz	r0, 801a9fe <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 801a9f8:	6803      	ldr	r3, [r0, #0]
 801a9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a9fc:	e7dd      	b.n	801a9ba <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801a9fe:	bd70      	pop	{r4, r5, r6, pc}
 801aa00:	2001214c 	.word	0x2001214c
 801aa04:	20012148 	.word	0x20012148

0801aa08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801aa08:	4603      	mov	r3, r0
 801aa0a:	2200      	movs	r2, #0
 801aa0c:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801aa10:	801a      	strh	r2, [r3, #0]
 801aa12:	805a      	strh	r2, [r3, #2]
 801aa14:	809a      	strh	r2, [r3, #4]
 801aa16:	80da      	strh	r2, [r3, #6]
 801aa18:	3308      	adds	r3, #8
 801aa1a:	428b      	cmp	r3, r1
 801aa1c:	d1f8      	bne.n	801aa10 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801aa1e:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 801aa22:	4770      	bx	lr

0801aa24 <_ZN8touchgfx11ApplicationC1Ev>:
 801aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa26:	4606      	mov	r6, r0
 801aa28:	4604      	mov	r4, r0
 801aa2a:	2500      	movs	r5, #0
 801aa2c:	4b1b      	ldr	r3, [pc, #108]	@ (801aa9c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801aa2e:	22a8      	movs	r2, #168	@ 0xa8
 801aa30:	f846 3b04 	str.w	r3, [r6], #4
 801aa34:	2100      	movs	r1, #0
 801aa36:	4630      	mov	r0, r6
 801aa38:	f012 f857 	bl	802caea <memset>
 801aa3c:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 801aa40:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801aa44:	f7ff ffe0 	bl	801aa08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aa48:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801aa4c:	f7ff ffdc 	bl	801aa08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801aa50:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 801aa54:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 801aa58:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 801aa5c:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 801aa60:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801aa64:	490e      	ldr	r1, [pc, #56]	@ (801aaa0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801aa66:	480f      	ldr	r0, [pc, #60]	@ (801aaa4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801aa68:	f011 f9ee 	bl	802be48 <CRC_Lock>
 801aa6c:	4f0e      	ldr	r7, [pc, #56]	@ (801aaa8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801aa6e:	4b0f      	ldr	r3, [pc, #60]	@ (801aaac <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 801aa70:	b158      	cbz	r0, 801aa8a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 801aa72:	801d      	strh	r5, [r3, #0]
 801aa74:	2300      	movs	r3, #0
 801aa76:	4a0e      	ldr	r2, [pc, #56]	@ (801aab0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801aa78:	4630      	mov	r0, r6
 801aa7a:	6013      	str	r3, [r2, #0]
 801aa7c:	4a0d      	ldr	r2, [pc, #52]	@ (801aab4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801aa7e:	603b      	str	r3, [r7, #0]
 801aa80:	6013      	str	r3, [r2, #0]
 801aa82:	f7ff ff32 	bl	801a8ea <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801aa86:	4620      	mov	r0, r4
 801aa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aa8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801aa8e:	2002      	movs	r0, #2
 801aa90:	801a      	strh	r2, [r3, #0]
 801aa92:	6038      	str	r0, [r7, #0]
 801aa94:	f001 fb20 	bl	801c0d8 <_ZN8touchgfx6Screen4drawEv>
 801aa98:	e7ec      	b.n	801aa74 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801aa9a:	bf00      	nop
 801aa9c:	0803041c 	.word	0x0803041c
 801aaa0:	b5e8b5cd 	.word	0xb5e8b5cd
 801aaa4:	f407a5c2 	.word	0xf407a5c2
 801aaa8:	20012148 	.word	0x20012148
 801aaac:	20000028 	.word	0x20000028
 801aab0:	20012158 	.word	0x20012158
 801aab4:	2001214c 	.word	0x2001214c

0801aab8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801aab8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801aabc:	b510      	push	{r4, lr}
 801aabe:	3b01      	subs	r3, #1
 801aac0:	b29b      	uxth	r3, r3
 801aac2:	428b      	cmp	r3, r1
 801aac4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801aac8:	d908      	bls.n	801aadc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801aaca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801aace:	681a      	ldr	r2, [r3, #0]
 801aad0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801aad4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801aad8:	685a      	ldr	r2, [r3, #4]
 801aada:	6062      	str	r2, [r4, #4]
 801aadc:	bd10      	pop	{r4, pc}
	...

0801aae0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801aae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aae4:	4b8f      	ldr	r3, [pc, #572]	@ (801ad24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801aae6:	b08f      	sub	sp, #60	@ 0x3c
 801aae8:	ac0a      	add	r4, sp, #40	@ 0x28
 801aaea:	e884 0006 	stmia.w	r4, {r1, r2}
 801aaee:	f9b3 2000 	ldrsh.w	r2, [r3]
 801aaf2:	4b8d      	ldr	r3, [pc, #564]	@ (801ad28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801aaf4:	4683      	mov	fp, r0
 801aaf6:	f9b3 1000 	ldrsh.w	r1, [r3]
 801aafa:	4620      	mov	r0, r4
 801aafc:	f7ff fe5a 	bl	801a7b4 <_ZN8touchgfx4Rect10restrictToEss>
 801ab00:	4620      	mov	r0, r4
 801ab02:	f7fa fd98 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab06:	2800      	cmp	r0, #0
 801ab08:	d16a      	bne.n	801abe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ab0a:	9403      	str	r4, [sp, #12]
 801ab0c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801ab10:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801ab14:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 801ab18:	35a4      	adds	r5, #164	@ 0xa4
 801ab1a:	9301      	str	r3, [sp, #4]
 801ab1c:	b15c      	cbz	r4, 801ab36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ab1e:	4629      	mov	r1, r5
 801ab20:	9803      	ldr	r0, [sp, #12]
 801ab22:	f7ff fe97 	bl	801a854 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ab26:	3c01      	subs	r4, #1
 801ab28:	b118      	cbz	r0, 801ab32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801ab2a:	b2a1      	uxth	r1, r4
 801ab2c:	9801      	ldr	r0, [sp, #4]
 801ab2e:	f7ff ffc3 	bl	801aab8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ab32:	3d08      	subs	r5, #8
 801ab34:	e7f2      	b.n	801ab1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801ab36:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 801ab3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ab3e:	9302      	str	r3, [sp, #8]
 801ab40:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ab44:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 801ab48:	f8cd a010 	str.w	sl, [sp, #16]
 801ab4c:	9306      	str	r3, [sp, #24]
 801ab4e:	445c      	add	r4, fp
 801ab50:	2500      	movs	r5, #0
 801ab52:	4626      	mov	r6, r4
 801ab54:	462f      	mov	r7, r5
 801ab56:	f8cd a014 	str.w	sl, [sp, #20]
 801ab5a:	9b05      	ldr	r3, [sp, #20]
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d073      	beq.n	801ac48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801ab60:	9903      	ldr	r1, [sp, #12]
 801ab62:	4630      	mov	r0, r6
 801ab64:	f7ff fe04 	bl	801a770 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ab68:	b350      	cbz	r0, 801abc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801ab6a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801ab6e:	f9b6 c000 	ldrsh.w	ip, [r6]
 801ab72:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801ab76:	45e6      	cmp	lr, ip
 801ab78:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801ab7c:	db33      	blt.n	801abe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ab7e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801ab82:	88b3      	ldrh	r3, [r6, #4]
 801ab84:	4472      	add	r2, lr
 801ab86:	4463      	add	r3, ip
 801ab88:	b212      	sxth	r2, r2
 801ab8a:	b21b      	sxth	r3, r3
 801ab8c:	429a      	cmp	r2, r3
 801ab8e:	dc2a      	bgt.n	801abe6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801ab90:	88f3      	ldrh	r3, [r6, #6]
 801ab92:	fa1f f289 	uxth.w	r2, r9
 801ab96:	4413      	add	r3, r2
 801ab98:	b29b      	uxth	r3, r3
 801ab9a:	45c8      	cmp	r8, r9
 801ab9c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801aba0:	fa1f fc88 	uxth.w	ip, r8
 801aba4:	fa0f fe83 	sxth.w	lr, r3
 801aba8:	db0f      	blt.n	801abca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801abaa:	eba3 030c 	sub.w	r3, r3, ip
 801abae:	1ac9      	subs	r1, r1, r3
 801abb0:	b209      	sxth	r1, r1
 801abb2:	2900      	cmp	r1, #0
 801abb4:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801abb8:	dd12      	ble.n	801abe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801abba:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801abbe:	4605      	mov	r5, r0
 801abc0:	9b05      	ldr	r3, [sp, #20]
 801abc2:	3e08      	subs	r6, #8
 801abc4:	3b01      	subs	r3, #1
 801abc6:	9305      	str	r3, [sp, #20]
 801abc8:	e7c7      	b.n	801ab5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801abca:	4461      	add	r1, ip
 801abcc:	b209      	sxth	r1, r1
 801abce:	4571      	cmp	r1, lr
 801abd0:	dc38      	bgt.n	801ac44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801abd2:	eba2 020c 	sub.w	r2, r2, ip
 801abd6:	b212      	sxth	r2, r2
 801abd8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801abdc:	2a00      	cmp	r2, #0
 801abde:	dcee      	bgt.n	801abbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801abe0:	b00f      	add	sp, #60	@ 0x3c
 801abe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abe6:	45c8      	cmp	r8, r9
 801abe8:	db2c      	blt.n	801ac44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801abea:	88f3      	ldrh	r3, [r6, #6]
 801abec:	4499      	add	r9, r3
 801abee:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801abf2:	fa0f f989 	sxth.w	r9, r9
 801abf6:	4498      	add	r8, r3
 801abf8:	fa0f f888 	sxth.w	r8, r8
 801abfc:	45c1      	cmp	r9, r8
 801abfe:	db21      	blt.n	801ac44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ac00:	88b3      	ldrh	r3, [r6, #4]
 801ac02:	fa1f f28c 	uxth.w	r2, ip
 801ac06:	4413      	add	r3, r2
 801ac08:	b29b      	uxth	r3, r3
 801ac0a:	45e6      	cmp	lr, ip
 801ac0c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801ac10:	fa1f f88e 	uxth.w	r8, lr
 801ac14:	fa0f f983 	sxth.w	r9, r3
 801ac18:	db0a      	blt.n	801ac30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801ac1a:	eba3 0308 	sub.w	r3, r3, r8
 801ac1e:	1ac9      	subs	r1, r1, r3
 801ac20:	b209      	sxth	r1, r1
 801ac22:	2900      	cmp	r1, #0
 801ac24:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 801ac28:	ddda      	ble.n	801abe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801ac2a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801ac2e:	e7c6      	b.n	801abbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801ac30:	4441      	add	r1, r8
 801ac32:	b209      	sxth	r1, r1
 801ac34:	4549      	cmp	r1, r9
 801ac36:	dc05      	bgt.n	801ac44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801ac38:	eba2 0208 	sub.w	r2, r2, r8
 801ac3c:	b212      	sxth	r2, r2
 801ac3e:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 801ac42:	e7cb      	b.n	801abdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801ac44:	4607      	mov	r7, r0
 801ac46:	e7bb      	b.n	801abc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801ac48:	2d00      	cmp	r5, #0
 801ac4a:	d181      	bne.n	801ab50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801ac4c:	2f00      	cmp	r7, #0
 801ac4e:	f000 81de 	beq.w	801b00e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801ac52:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 801ac56:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 801ac5a:	b2b3      	uxth	r3, r6
 801ac5c:	9305      	str	r3, [sp, #20]
 801ac5e:	9a05      	ldr	r2, [sp, #20]
 801ac60:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801ac64:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 801ac68:	4413      	add	r3, r2
 801ac6a:	b2ba      	uxth	r2, r7
 801ac6c:	4492      	add	sl, r2
 801ac6e:	b29b      	uxth	r3, r3
 801ac70:	fa1f fa8a 	uxth.w	sl, sl
 801ac74:	fa0f f883 	sxth.w	r8, r3
 801ac78:	fa0f f98a 	sxth.w	r9, sl
 801ac7c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801ac80:	9b04      	ldr	r3, [sp, #16]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d052      	beq.n	801ad2c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801ac86:	9903      	ldr	r1, [sp, #12]
 801ac88:	4620      	mov	r0, r4
 801ac8a:	f7ff fd71 	bl	801a770 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ac8e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801ac92:	b1c0      	cbz	r0, 801acc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ac94:	f9b4 e000 	ldrsh.w	lr, [r4]
 801ac98:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801ac9c:	4576      	cmp	r6, lr
 801ac9e:	dc22      	bgt.n	801ace6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801aca0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801aca4:	44f4      	add	ip, lr
 801aca6:	fa0f fc8c 	sxth.w	ip, ip
 801acaa:	45e0      	cmp	r8, ip
 801acac:	db1b      	blt.n	801ace6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801acae:	428f      	cmp	r7, r1
 801acb0:	fa1f fc81 	uxth.w	ip, r1
 801acb4:	88e1      	ldrh	r1, [r4, #6]
 801acb6:	dc0d      	bgt.n	801acd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801acb8:	ebaa 0c0c 	sub.w	ip, sl, ip
 801acbc:	eba1 010c 	sub.w	r1, r1, ip
 801acc0:	f8a4 9002 	strh.w	r9, [r4, #2]
 801acc4:	80e1      	strh	r1, [r4, #6]
 801acc6:	4628      	mov	r0, r5
 801acc8:	9904      	ldr	r1, [sp, #16]
 801acca:	3c08      	subs	r4, #8
 801accc:	3901      	subs	r1, #1
 801acce:	9104      	str	r1, [sp, #16]
 801acd0:	4605      	mov	r5, r0
 801acd2:	e7d3      	b.n	801ac7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801acd4:	4461      	add	r1, ip
 801acd6:	b209      	sxth	r1, r1
 801acd8:	4549      	cmp	r1, r9
 801acda:	dcf5      	bgt.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801acdc:	eba2 0c0c 	sub.w	ip, r2, ip
 801ace0:	f8a4 c006 	strh.w	ip, [r4, #6]
 801ace4:	e7ef      	b.n	801acc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ace6:	428f      	cmp	r7, r1
 801ace8:	dcee      	bgt.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801acea:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801acee:	4461      	add	r1, ip
 801acf0:	b209      	sxth	r1, r1
 801acf2:	4589      	cmp	r9, r1
 801acf4:	dbe8      	blt.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801acf6:	4576      	cmp	r6, lr
 801acf8:	fa1f fc8e 	uxth.w	ip, lr
 801acfc:	88a1      	ldrh	r1, [r4, #4]
 801acfe:	dc07      	bgt.n	801ad10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 801ad00:	eba3 0c0c 	sub.w	ip, r3, ip
 801ad04:	eba1 010c 	sub.w	r1, r1, ip
 801ad08:	f8a4 8000 	strh.w	r8, [r4]
 801ad0c:	80a1      	strh	r1, [r4, #4]
 801ad0e:	e7da      	b.n	801acc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ad10:	4461      	add	r1, ip
 801ad12:	b209      	sxth	r1, r1
 801ad14:	4588      	cmp	r8, r1
 801ad16:	dbd7      	blt.n	801acc8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801ad18:	9905      	ldr	r1, [sp, #20]
 801ad1a:	eba1 0c0c 	sub.w	ip, r1, ip
 801ad1e:	f8a4 c004 	strh.w	ip, [r4, #4]
 801ad22:	e7d0      	b.n	801acc6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801ad24:	200120fa 	.word	0x200120fa
 801ad28:	200120f8 	.word	0x200120f8
 801ad2c:	2d00      	cmp	r5, #0
 801ad2e:	f000 816e 	beq.w	801b00e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801ad32:	9b06      	ldr	r3, [sp, #24]
 801ad34:	445b      	add	r3, fp
 801ad36:	461c      	mov	r4, r3
 801ad38:	9b02      	ldr	r3, [sp, #8]
 801ad3a:	3301      	adds	r3, #1
 801ad3c:	f000 8167 	beq.w	801b00e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 801ad40:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 801ad44:	4629      	mov	r1, r5
 801ad46:	9803      	ldr	r0, [sp, #12]
 801ad48:	f7ff fd84 	bl	801a854 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ad4c:	b120      	cbz	r0, 801ad58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801ad4e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801ad52:	9801      	ldr	r0, [sp, #4]
 801ad54:	f7ff feb0 	bl	801aab8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad58:	9903      	ldr	r1, [sp, #12]
 801ad5a:	4628      	mov	r0, r5
 801ad5c:	f7ff fd08 	bl	801a770 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801ad60:	2800      	cmp	r0, #0
 801ad62:	f000 809c 	beq.w	801ae9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801ad66:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801ad6a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801ad6e:	fa1f f189 	uxth.w	r1, r9
 801ad72:	eb01 0c03 	add.w	ip, r1, r3
 801ad76:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801ad7a:	fa1f fa8c 	uxth.w	sl, ip
 801ad7e:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801ad82:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad84:	b283      	uxth	r3, r0
 801ad86:	eb03 050c 	add.w	r5, r3, ip
 801ad8a:	b2ad      	uxth	r5, r5
 801ad8c:	9505      	str	r5, [sp, #20]
 801ad8e:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801ad92:	4548      	cmp	r0, r9
 801ad94:	9504      	str	r5, [sp, #16]
 801ad96:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 801ad9a:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 801ad9e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 801ada2:	f340 8099 	ble.w	801aed8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801ada6:	1a5b      	subs	r3, r3, r1
 801ada8:	b29b      	uxth	r3, r3
 801adaa:	4596      	cmp	lr, r2
 801adac:	fa0f f08a 	sxth.w	r0, sl
 801adb0:	b21e      	sxth	r6, r3
 801adb2:	dd2e      	ble.n	801ae12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 801adb4:	9f02      	ldr	r7, [sp, #8]
 801adb6:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 801adba:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801adbe:	9f04      	ldr	r7, [sp, #16]
 801adc0:	fa1f fe8e 	uxth.w	lr, lr
 801adc4:	1a3f      	subs	r7, r7, r0
 801adc6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 801adca:	b292      	uxth	r2, r2
 801adcc:	ebae 0102 	sub.w	r1, lr, r2
 801add0:	44a6      	add	lr, r4
 801add2:	4402      	add	r2, r0
 801add4:	b289      	uxth	r1, r1
 801add6:	fa0f fe8e 	sxth.w	lr, lr
 801adda:	b212      	sxth	r2, r2
 801addc:	b20d      	sxth	r5, r1
 801adde:	ebae 0202 	sub.w	r2, lr, r2
 801ade2:	436f      	muls	r7, r5
 801ade4:	4372      	muls	r2, r6
 801ade6:	4297      	cmp	r7, r2
 801ade8:	db09      	blt.n	801adfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801adea:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801adee:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 801adf2:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801adf6:	449c      	add	ip, r3
 801adf8:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801adfc:	e686      	b.n	801ab0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801adfe:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 801ae02:	4421      	add	r1, r4
 801ae04:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801ae08:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801ae0c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801ae10:	e67c      	b.n	801ab0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ae12:	9f04      	ldr	r7, [sp, #16]
 801ae14:	42b8      	cmp	r0, r7
 801ae16:	da27      	bge.n	801ae68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801ae18:	9902      	ldr	r1, [sp, #8]
 801ae1a:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 801ae1e:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 801ae22:	eb05 010e 	add.w	r1, r5, lr
 801ae26:	fa1f f881 	uxth.w	r8, r1
 801ae2a:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 801ae2e:	fa0f f988 	sxth.w	r9, r8
 801ae32:	4411      	add	r1, r2
 801ae34:	eba1 0108 	sub.w	r1, r1, r8
 801ae38:	b289      	uxth	r1, r1
 801ae3a:	fa0f f881 	sxth.w	r8, r1
 801ae3e:	eba2 020e 	sub.w	r2, r2, lr
 801ae42:	1a3f      	subs	r7, r7, r0
 801ae44:	4372      	muls	r2, r6
 801ae46:	fb08 f707 	mul.w	r7, r8, r7
 801ae4a:	42ba      	cmp	r2, r7
 801ae4c:	dc06      	bgt.n	801ae5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801ae4e:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 801ae52:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 801ae56:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 801ae5a:	e7ca      	b.n	801adf2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801ae5c:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 801ae60:	4429      	add	r1, r5
 801ae62:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801ae66:	e651      	b.n	801ab0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801ae68:	9805      	ldr	r0, [sp, #20]
 801ae6a:	2d06      	cmp	r5, #6
 801ae6c:	ebaa 0000 	sub.w	r0, sl, r0
 801ae70:	b280      	uxth	r0, r0
 801ae72:	fa0f fe80 	sxth.w	lr, r0
 801ae76:	d817      	bhi.n	801aea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 801ae78:	9b04      	ldr	r3, [sp, #16]
 801ae7a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801ae7e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 801ae82:	1c6b      	adds	r3, r5, #1
 801ae84:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 801ae88:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801ae8c:	9b01      	ldr	r3, [sp, #4]
 801ae8e:	9801      	ldr	r0, [sp, #4]
 801ae90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ae94:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801ae98:	805a      	strh	r2, [r3, #2]
 801ae9a:	809e      	strh	r6, [r3, #4]
 801ae9c:	80d9      	strh	r1, [r3, #6]
 801ae9e:	9b02      	ldr	r3, [sp, #8]
 801aea0:	3c08      	subs	r4, #8
 801aea2:	3b01      	subs	r3, #1
 801aea4:	9302      	str	r3, [sp, #8]
 801aea6:	e747      	b.n	801ad38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801aea8:	9a02      	ldr	r2, [sp, #8]
 801aeaa:	45b6      	cmp	lr, r6
 801aeac:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801aeb0:	db0d      	blt.n	801aece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 801aeb2:	449c      	add	ip, r3
 801aeb4:	fa1f fc8c 	uxth.w	ip, ip
 801aeb8:	445a      	add	r2, fp
 801aeba:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801aebe:	448c      	add	ip, r1
 801aec0:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801aec4:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801aec8:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 801aecc:	e61e      	b.n	801ab0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801aece:	445a      	add	r2, fp
 801aed0:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801aed4:	4484      	add	ip, r0
 801aed6:	e78f      	b.n	801adf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801aed8:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 801aedc:	fa1f f18e 	uxth.w	r1, lr
 801aee0:	eb01 0806 	add.w	r8, r1, r6
 801aee4:	b293      	uxth	r3, r2
 801aee6:	fa1f f888 	uxth.w	r8, r8
 801aeea:	9306      	str	r3, [sp, #24]
 801aeec:	fa0f f388 	sxth.w	r3, r8
 801aef0:	9307      	str	r3, [sp, #28]
 801aef2:	9f06      	ldr	r7, [sp, #24]
 801aef4:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801aef8:	4596      	cmp	lr, r2
 801aefa:	443b      	add	r3, r7
 801aefc:	b29b      	uxth	r3, r3
 801aefe:	9308      	str	r3, [sp, #32]
 801af00:	da24      	bge.n	801af4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 801af02:	9905      	ldr	r1, [sp, #20]
 801af04:	eba3 0308 	sub.w	r3, r3, r8
 801af08:	ebaa 0401 	sub.w	r4, sl, r1
 801af0c:	b2a4      	uxth	r4, r4
 801af0e:	b29b      	uxth	r3, r3
 801af10:	b225      	sxth	r5, r4
 801af12:	b219      	sxth	r1, r3
 801af14:	eba2 020e 	sub.w	r2, r2, lr
 801af18:	eba9 0000 	sub.w	r0, r9, r0
 801af1c:	436a      	muls	r2, r5
 801af1e:	4348      	muls	r0, r1
 801af20:	4282      	cmp	r2, r0
 801af22:	9a02      	ldr	r2, [sp, #8]
 801af24:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801af28:	445a      	add	r2, fp
 801af2a:	dc06      	bgt.n	801af3a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801af2c:	9b07      	ldr	r3, [sp, #28]
 801af2e:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 801af32:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 801af36:	44a4      	add	ip, r4
 801af38:	e75e      	b.n	801adf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801af3a:	9904      	ldr	r1, [sp, #16]
 801af3c:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 801af40:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 801af44:	4433      	add	r3, r6
 801af46:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801af4a:	e5df      	b.n	801ab0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801af4c:	9f06      	ldr	r7, [sp, #24]
 801af4e:	9b04      	ldr	r3, [sp, #16]
 801af50:	1bc9      	subs	r1, r1, r7
 801af52:	fa0f f78a 	sxth.w	r7, sl
 801af56:	b289      	uxth	r1, r1
 801af58:	429f      	cmp	r7, r3
 801af5a:	fa0f fe81 	sxth.w	lr, r1
 801af5e:	dd24      	ble.n	801afaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 801af60:	9a05      	ldr	r2, [sp, #20]
 801af62:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801af66:	ebaa 0202 	sub.w	r2, sl, r2
 801af6a:	9d07      	ldr	r5, [sp, #28]
 801af6c:	b292      	uxth	r2, r2
 801af6e:	eba5 0a03 	sub.w	sl, r5, r3
 801af72:	b214      	sxth	r4, r2
 801af74:	eba9 0000 	sub.w	r0, r9, r0
 801af78:	fb0e f000 	mul.w	r0, lr, r0
 801af7c:	fb04 fa0a 	mul.w	sl, r4, sl
 801af80:	9b02      	ldr	r3, [sp, #8]
 801af82:	4550      	cmp	r0, sl
 801af84:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801af88:	445b      	add	r3, fp
 801af8a:	db03      	blt.n	801af94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 801af8c:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 801af90:	4494      	add	ip, r2
 801af92:	e731      	b.n	801adf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801af94:	9a04      	ldr	r2, [sp, #16]
 801af96:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801af9a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 801af9e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 801afa2:	4431      	add	r1, r6
 801afa4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801afa8:	e75b      	b.n	801ae62 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801afaa:	9b08      	ldr	r3, [sp, #32]
 801afac:	2d06      	cmp	r5, #6
 801afae:	eba3 0308 	sub.w	r3, r3, r8
 801afb2:	b29b      	uxth	r3, r3
 801afb4:	b218      	sxth	r0, r3
 801afb6:	d813      	bhi.n	801afe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 801afb8:	9b07      	ldr	r3, [sp, #28]
 801afba:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 801afbe:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 801afc2:	1c6b      	adds	r3, r5, #1
 801afc4:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801afc8:	9b01      	ldr	r3, [sp, #4]
 801afca:	9901      	ldr	r1, [sp, #4]
 801afcc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801afd0:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 801afd4:	805a      	strh	r2, [r3, #2]
 801afd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801afd8:	f8a3 e006 	strh.w	lr, [r3, #6]
 801afdc:	809a      	strh	r2, [r3, #4]
 801afde:	e75e      	b.n	801ae9e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801afe0:	9c02      	ldr	r4, [sp, #8]
 801afe2:	4570      	cmp	r0, lr
 801afe4:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801afe8:	db0d      	blt.n	801b006 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 801afea:	4431      	add	r1, r6
 801afec:	9b06      	ldr	r3, [sp, #24]
 801afee:	b289      	uxth	r1, r1
 801aff0:	445c      	add	r4, fp
 801aff2:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801aff6:	4419      	add	r1, r3
 801aff8:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 801affc:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 801b000:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801b004:	e582      	b.n	801ab0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b006:	445c      	add	r4, fp
 801b008:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801b00c:	e79a      	b.n	801af44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801b00e:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 801b012:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 801b016:	1e65      	subs	r5, r4, #1
 801b018:	b2ad      	uxth	r5, r5
 801b01a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801b01e:	42b5      	cmp	r5, r6
 801b020:	d044      	beq.n	801b0ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5cc>
 801b022:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 801b026:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801b02a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 801b02e:	4282      	cmp	r2, r0
 801b030:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 801b034:	d11f      	bne.n	801b076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 801b036:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 801b03a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b03e:	459c      	cmp	ip, r3
 801b040:	d119      	bne.n	801b076 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x596>
 801b042:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 801b046:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 801b04a:	19d8      	adds	r0, r3, r7
 801b04c:	b200      	sxth	r0, r0
 801b04e:	4288      	cmp	r0, r1
 801b050:	d109      	bne.n	801b066 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
 801b052:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 801b056:	4413      	add	r3, r2
 801b058:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 801b05c:	4629      	mov	r1, r5
 801b05e:	9801      	ldr	r0, [sp, #4]
 801b060:	f7ff fd2a 	bl	801aab8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b064:	e003      	b.n	801b06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801b066:	4411      	add	r1, r2
 801b068:	b209      	sxth	r1, r1
 801b06a:	42b9      	cmp	r1, r7
 801b06c:	d0f3      	beq.n	801b056 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x576>
 801b06e:	3d01      	subs	r5, #1
 801b070:	b2ad      	uxth	r5, r5
 801b072:	3c08      	subs	r4, #8
 801b074:	e7d3      	b.n	801b01e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53e>
 801b076:	42b9      	cmp	r1, r7
 801b078:	d1f9      	bne.n	801b06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801b07a:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 801b07e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b082:	4299      	cmp	r1, r3
 801b084:	d1f3      	bne.n	801b06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801b086:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801b08a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801b08e:	181f      	adds	r7, r3, r0
 801b090:	b23f      	sxth	r7, r7
 801b092:	42ba      	cmp	r2, r7
 801b094:	d105      	bne.n	801b0a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c2>
 801b096:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801b09a:	440b      	add	r3, r1
 801b09c:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801b0a0:	e7dc      	b.n	801b05c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57c>
 801b0a2:	440a      	add	r2, r1
 801b0a4:	b212      	sxth	r2, r2
 801b0a6:	4290      	cmp	r0, r2
 801b0a8:	d1e1      	bne.n	801b06e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58e>
 801b0aa:	e7f6      	b.n	801b09a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ba>
 801b0ac:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 801b0b0:	2e07      	cmp	r6, #7
 801b0b2:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b0b6:	d812      	bhi.n	801b0de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fe>
 801b0b8:	1c75      	adds	r5, r6, #1
 801b0ba:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 801b0be:	9d01      	ldr	r5, [sp, #4]
 801b0c0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801b0c4:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 801b0c8:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801b0cc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801b0d0:	442c      	add	r4, r5
 801b0d2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b0d6:	8061      	strh	r1, [r4, #2]
 801b0d8:	80a2      	strh	r2, [r4, #4]
 801b0da:	80e3      	strh	r3, [r4, #6]
 801b0dc:	e580      	b.n	801abe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b0de:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801b0e2:	f04f 37ff 	mov.w	r7, #4294967295
 801b0e6:	2500      	movs	r5, #0
 801b0e8:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801b0ec:	3e01      	subs	r6, #1
 801b0ee:	445c      	add	r4, fp
 801b0f0:	9305      	str	r3, [sp, #20]
 801b0f2:	1e72      	subs	r2, r6, #1
 801b0f4:	4691      	mov	r9, r2
 801b0f6:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801b0fa:	9302      	str	r3, [sp, #8]
 801b0fc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 801b100:	9304      	str	r3, [sp, #16]
 801b102:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 801b106:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b10a:	bf16      	itet	ne
 801b10c:	9905      	ldrne	r1, [sp, #20]
 801b10e:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b112:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b116:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b11a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b11e:	6818      	ldr	r0, [r3, #0]
 801b120:	fb18 f801 	smulbb	r8, r8, r1
 801b124:	6859      	ldr	r1, [r3, #4]
 801b126:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801b12a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b12e:	4671      	mov	r1, lr
 801b130:	a80c      	add	r0, sp, #48	@ 0x30
 801b132:	9207      	str	r2, [sp, #28]
 801b134:	9306      	str	r3, [sp, #24]
 801b136:	f7fb ff5b 	bl	8016ff0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b13a:	f04f 0c08 	mov.w	ip, #8
 801b13e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 801b142:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801b146:	9b04      	ldr	r3, [sp, #16]
 801b148:	9a02      	ldr	r2, [sp, #8]
 801b14a:	fb10 f001 	smulbb	r0, r0, r1
 801b14e:	fb02 8803 	mla	r8, r2, r3, r8
 801b152:	eba0 0108 	sub.w	r1, r0, r8
 801b156:	fb90 f0fc 	sdiv	r0, r0, ip
 801b15a:	4288      	cmp	r0, r1
 801b15c:	dc20      	bgt.n	801b1a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801b15e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b162:	4551      	cmp	r1, sl
 801b164:	da03      	bge.n	801b16e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 801b166:	b1d9      	cbz	r1, 801b1a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 801b168:	468a      	mov	sl, r1
 801b16a:	464f      	mov	r7, r9
 801b16c:	4635      	mov	r5, r6
 801b16e:	f109 39ff 	add.w	r9, r9, #4294967295
 801b172:	f119 0f02 	cmn.w	r9, #2
 801b176:	d1c6      	bne.n	801b106 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
 801b178:	4616      	mov	r6, r2
 801b17a:	3201      	adds	r2, #1
 801b17c:	f1a4 0408 	sub.w	r4, r4, #8
 801b180:	d1b7      	bne.n	801b0f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x612>
 801b182:	9b01      	ldr	r3, [sp, #4]
 801b184:	b2ac      	uxth	r4, r5
 801b186:	00ed      	lsls	r5, r5, #3
 801b188:	1958      	adds	r0, r3, r5
 801b18a:	1c7b      	adds	r3, r7, #1
 801b18c:	d10b      	bne.n	801b1a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 801b18e:	4601      	mov	r1, r0
 801b190:	9803      	ldr	r0, [sp, #12]
 801b192:	f7fb ff2d 	bl	8016ff0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b196:	4621      	mov	r1, r4
 801b198:	9801      	ldr	r0, [sp, #4]
 801b19a:	f7ff fc8d 	bl	801aab8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b19e:	e4b5      	b.n	801ab0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b1a0:	464f      	mov	r7, r9
 801b1a2:	4635      	mov	r5, r6
 801b1a4:	e7ed      	b.n	801b182 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 801b1a6:	9b01      	ldr	r3, [sp, #4]
 801b1a8:	00ff      	lsls	r7, r7, #3
 801b1aa:	19d9      	adds	r1, r3, r7
 801b1ac:	f7fb ff20 	bl	8016ff0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b1b0:	9b03      	ldr	r3, [sp, #12]
 801b1b2:	445f      	add	r7, fp
 801b1b4:	cb03      	ldmia	r3!, {r0, r1}
 801b1b6:	445d      	add	r5, fp
 801b1b8:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 801b1bc:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 801b1c0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 801b1c4:	9b03      	ldr	r3, [sp, #12]
 801b1c6:	6869      	ldr	r1, [r5, #4]
 801b1c8:	c303      	stmia	r3!, {r0, r1}
 801b1ca:	e7e4      	b.n	801b196 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0801b1cc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1d0:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 801b1d4:	b09b      	sub	sp, #108	@ 0x6c
 801b1d6:	4604      	mov	r4, r0
 801b1d8:	4630      	mov	r0, r6
 801b1da:	f7fa fa2c 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b1de:	4605      	mov	r5, r0
 801b1e0:	b948      	cbnz	r0, 801b1f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 801b1e2:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b1e6:	6823      	ldr	r3, [r4, #0]
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b1ec:	4798      	blx	r3
 801b1ee:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 801b1f2:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801b1f6:	4bc6      	ldr	r3, [pc, #792]	@ (801b510 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d03f      	beq.n	801b27e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b1fe:	4dc5      	ldr	r5, [pc, #788]	@ (801b514 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801b200:	4628      	mov	r0, r5
 801b202:	f7fa fa18 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b206:	4606      	mov	r6, r0
 801b208:	2800      	cmp	r0, #0
 801b20a:	d138      	bne.n	801b27e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801b20c:	4628      	mov	r0, r5
 801b20e:	f7ff f9e5 	bl	801a5dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b212:	6823      	ldr	r3, [r4, #0]
 801b214:	6829      	ldr	r1, [r5, #0]
 801b216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b218:	686a      	ldr	r2, [r5, #4]
 801b21a:	4620      	mov	r0, r4
 801b21c:	4798      	blx	r3
 801b21e:	802e      	strh	r6, [r5, #0]
 801b220:	806e      	strh	r6, [r5, #2]
 801b222:	80ae      	strh	r6, [r5, #4]
 801b224:	80ee      	strh	r6, [r5, #6]
 801b226:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801b22a:	4dbb      	ldr	r5, [pc, #748]	@ (801b518 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b22c:	4640      	mov	r0, r8
 801b22e:	f7ff fbeb 	bl	801aa08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b232:	882e      	ldrh	r6, [r5, #0]
 801b234:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801b238:	4633      	mov	r3, r6
 801b23a:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 801b23e:	42bb      	cmp	r3, r7
 801b240:	d224      	bcs.n	801b28c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b242:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 801b246:	2907      	cmp	r1, #7
 801b248:	d816      	bhi.n	801b278 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801b24a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b24e:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801b252:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801b256:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801b25a:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 801b25e:	1c4a      	adds	r2, r1, #1
 801b260:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 801b264:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801b268:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801b26c:	f8a2 a002 	strh.w	sl, [r2, #2]
 801b270:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b274:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b278:	3301      	adds	r3, #1
 801b27a:	b29b      	uxth	r3, r3
 801b27c:	e7df      	b.n	801b23e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801b27e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b282:	2b00      	cmp	r3, #0
 801b284:	d1cf      	bne.n	801b226 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 801b286:	b01b      	add	sp, #108	@ 0x6c
 801b288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b28c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 801b290:	42b3      	cmp	r3, r6
 801b292:	d90c      	bls.n	801b2ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 801b294:	6822      	ldr	r2, [r4, #0]
 801b296:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801b29a:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 801b29c:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 801b2a0:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801b2a4:	4620      	mov	r0, r4
 801b2a6:	3601      	adds	r6, #1
 801b2a8:	47b8      	blx	r7
 801b2aa:	b2b6      	uxth	r6, r6
 801b2ac:	e7ee      	b.n	801b28c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 801b2ae:	4a9b      	ldr	r2, [pc, #620]	@ (801b51c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801b2b0:	6813      	ldr	r3, [r2, #0]
 801b2b2:	4691      	mov	r9, r2
 801b2b4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801b2b8:	2b01      	cmp	r3, #1
 801b2ba:	f040 80e2 	bne.w	801b482 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801b2be:	2600      	movs	r6, #0
 801b2c0:	8829      	ldrh	r1, [r5, #0]
 801b2c2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801b2c6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801b2ca:	33ae      	adds	r3, #174	@ 0xae
 801b2cc:	428f      	cmp	r7, r1
 801b2ce:	f103 0308 	add.w	r3, r3, #8
 801b2d2:	dd0a      	ble.n	801b2ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 801b2d4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801b2d8:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 801b2dc:	3101      	adds	r1, #1
 801b2de:	4402      	add	r2, r0
 801b2e0:	b212      	sxth	r2, r2
 801b2e2:	4296      	cmp	r6, r2
 801b2e4:	bfb8      	it	lt
 801b2e6:	4616      	movlt	r6, r2
 801b2e8:	e7f0      	b.n	801b2cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801b2ea:	4b8d      	ldr	r3, [pc, #564]	@ (801b520 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801b2ec:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 801b51c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 801b2f0:	881b      	ldrh	r3, [r3, #0]
 801b2f2:	2b0f      	cmp	r3, #15
 801b2f4:	bf88      	it	hi
 801b2f6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801b2fa:	f04f 0300 	mov.w	r3, #0
 801b2fe:	bf98      	it	ls
 801b300:	f04f 0b01 	movls.w	fp, #1
 801b304:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b308:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801b30c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801b310:	4b82      	ldr	r3, [pc, #520]	@ (801b51c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801b312:	4438      	add	r0, r7
 801b314:	b207      	sxth	r7, r0
 801b316:	6818      	ldr	r0, [r3, #0]
 801b318:	42b7      	cmp	r7, r6
 801b31a:	6803      	ldr	r3, [r0, #0]
 801b31c:	f280 8083 	bge.w	801b426 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801b320:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801b324:	4798      	blx	r3
 801b326:	eb07 030b 	add.w	r3, r7, fp
 801b32a:	4298      	cmp	r0, r3
 801b32c:	da07      	bge.n	801b33e <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801b32e:	42b0      	cmp	r0, r6
 801b330:	da05      	bge.n	801b33e <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 801b332:	4287      	cmp	r7, r0
 801b334:	dd6c      	ble.n	801b410 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801b336:	2f00      	cmp	r7, #0
 801b338:	dd6a      	ble.n	801b410 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801b33a:	4630      	mov	r0, r6
 801b33c:	e004      	b.n	801b348 <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 801b33e:	4287      	cmp	r7, r0
 801b340:	dcfb      	bgt.n	801b33a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801b342:	42b0      	cmp	r0, r6
 801b344:	bfa8      	it	ge
 801b346:	4630      	movge	r0, r6
 801b348:	2200      	movs	r2, #0
 801b34a:	4b76      	ldr	r3, [pc, #472]	@ (801b524 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801b34c:	1bc0      	subs	r0, r0, r7
 801b34e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b352:	f8ad 7016 	strh.w	r7, [sp, #22]
 801b356:	882f      	ldrh	r7, [r5, #0]
 801b358:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b35c:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b360:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b364:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b368:	42bb      	cmp	r3, r7
 801b36a:	d9cd      	bls.n	801b308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801b36c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801b370:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b374:	ab07      	add	r3, sp, #28
 801b376:	6851      	ldr	r1, [r2, #4]
 801b378:	c303      	stmia	r3!, {r0, r1}
 801b37a:	a905      	add	r1, sp, #20
 801b37c:	a807      	add	r0, sp, #28
 801b37e:	f7ff f9f7 	bl	801a770 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b382:	2800      	cmp	r0, #0
 801b384:	d04c      	beq.n	801b420 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801b386:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801b38a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801b38e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801b392:	4686      	mov	lr, r0
 801b394:	4290      	cmp	r0, r2
 801b396:	4450      	add	r0, sl
 801b398:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801b39c:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801b3a0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b3a4:	bfb8      	it	lt
 801b3a6:	4696      	movlt	lr, r2
 801b3a8:	4452      	add	r2, sl
 801b3aa:	4299      	cmp	r1, r3
 801b3ac:	b280      	uxth	r0, r0
 801b3ae:	b292      	uxth	r2, r2
 801b3b0:	468c      	mov	ip, r1
 801b3b2:	9302      	str	r3, [sp, #8]
 801b3b4:	bfb8      	it	lt
 801b3b6:	469c      	movlt	ip, r3
 801b3b8:	fa0f fa82 	sxth.w	sl, r2
 801b3bc:	b203      	sxth	r3, r0
 801b3be:	4553      	cmp	r3, sl
 801b3c0:	bfb8      	it	lt
 801b3c2:	4602      	movlt	r2, r0
 801b3c4:	eba2 020e 	sub.w	r2, r2, lr
 801b3c8:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b3cc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801b3d0:	9b02      	ldr	r3, [sp, #8]
 801b3d2:	4411      	add	r1, r2
 801b3d4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b3d8:	b289      	uxth	r1, r1
 801b3da:	4413      	add	r3, r2
 801b3dc:	b29b      	uxth	r3, r3
 801b3de:	b208      	sxth	r0, r1
 801b3e0:	b21a      	sxth	r2, r3
 801b3e2:	4290      	cmp	r0, r2
 801b3e4:	bfb8      	it	lt
 801b3e6:	460b      	movlt	r3, r1
 801b3e8:	eba3 030c 	sub.w	r3, r3, ip
 801b3ec:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801b3f0:	f8ad e01c 	strh.w	lr, [sp, #28]
 801b3f4:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b3f8:	a807      	add	r0, sp, #28
 801b3fa:	f7fa f91c 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b3fe:	b920      	cbnz	r0, 801b40a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 801b400:	6823      	ldr	r3, [r4, #0]
 801b402:	a907      	add	r1, sp, #28
 801b404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b406:	4620      	mov	r0, r4
 801b408:	4798      	blx	r3
 801b40a:	3701      	adds	r7, #1
 801b40c:	b2bf      	uxth	r7, r7
 801b40e:	e7a9      	b.n	801b364 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 801b410:	f8d9 0000 	ldr.w	r0, [r9]
 801b414:	2101      	movs	r1, #1
 801b416:	6803      	ldr	r3, [r0, #0]
 801b418:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801b41c:	4798      	blx	r3
 801b41e:	e773      	b.n	801b308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 801b420:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801b424:	e7e8      	b.n	801b3f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 801b426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b428:	4798      	blx	r3
 801b42a:	4b3f      	ldr	r3, [pc, #252]	@ (801b528 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801b42c:	781b      	ldrb	r3, [r3, #0]
 801b42e:	2b00      	cmp	r3, #0
 801b430:	f43f af29 	beq.w	801b286 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801b434:	2300      	movs	r3, #0
 801b436:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 801b43a:	882b      	ldrh	r3, [r5, #0]
 801b43c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801b440:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801b444:	42ab      	cmp	r3, r5
 801b446:	f4bf af1e 	bcs.w	801b286 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801b44a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 801b44e:	2907      	cmp	r1, #7
 801b450:	d814      	bhi.n	801b47c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801b452:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801b456:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801b45a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801b45e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801b462:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801b466:	1c4a      	adds	r2, r1, #1
 801b468:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801b46c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801b470:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 801b474:	f8a2 c002 	strh.w	ip, [r2, #2]
 801b478:	8097      	strh	r7, [r2, #4]
 801b47a:	80d6      	strh	r6, [r2, #6]
 801b47c:	3301      	adds	r3, #1
 801b47e:	b29b      	uxth	r3, r3
 801b480:	e7e0      	b.n	801b444 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 801b482:	2b02      	cmp	r3, #2
 801b484:	f040 8133 	bne.w	801b6ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 801b488:	4b28      	ldr	r3, [pc, #160]	@ (801b52c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801b48a:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801b48e:	781b      	ldrb	r3, [r3, #0]
 801b490:	2b01      	cmp	r3, #1
 801b492:	f000 8098 	beq.w	801b5c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801b496:	882a      	ldrh	r2, [r5, #0]
 801b498:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801b49c:	3201      	adds	r2, #1
 801b49e:	b292      	uxth	r2, r2
 801b4a0:	2900      	cmp	r1, #0
 801b4a2:	d0c2      	beq.n	801b42a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801b4a4:	4694      	mov	ip, r2
 801b4a6:	f04f 0900 	mov.w	r9, #0
 801b4aa:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801b4ae:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801b4b2:	441e      	add	r6, r3
 801b4b4:	b236      	sxth	r6, r6
 801b4b6:	fa1f f38c 	uxth.w	r3, ip
 801b4ba:	4299      	cmp	r1, r3
 801b4bc:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801b4c0:	f240 80bf 	bls.w	801b642 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 801b4c4:	4427      	add	r7, r4
 801b4c6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801b4ca:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801b4ce:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 801b4d2:	4283      	cmp	r3, r0
 801b4d4:	f340 80a1 	ble.w	801b61a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 801b4d8:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801b4dc:	46e1      	mov	r9, ip
 801b4de:	4406      	add	r6, r0
 801b4e0:	b236      	sxth	r6, r6
 801b4e2:	429e      	cmp	r6, r3
 801b4e4:	bfa8      	it	ge
 801b4e6:	461e      	movge	r6, r3
 801b4e8:	f10c 0c01 	add.w	ip, ip, #1
 801b4ec:	e7e3      	b.n	801b4b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 801b4ee:	d10a      	bne.n	801b506 <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 801b4f0:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801b4f4:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801b4f8:	4562      	cmp	r2, ip
 801b4fa:	bfb8      	it	lt
 801b4fc:	4662      	movlt	r2, ip
 801b4fe:	4288      	cmp	r0, r1
 801b500:	bfb8      	it	lt
 801b502:	461f      	movlt	r7, r3
 801b504:	e087      	b.n	801b616 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801b506:	428a      	cmp	r2, r1
 801b508:	bfb8      	it	lt
 801b50a:	460a      	movlt	r2, r1
 801b50c:	e083      	b.n	801b616 <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 801b50e:	bf00      	nop
 801b510:	20012144 	.word	0x20012144
 801b514:	20012150 	.word	0x20012150
 801b518:	20000028 	.word	0x20000028
 801b51c:	20012104 	.word	0x20012104
 801b520:	200120fa 	.word	0x200120fa
 801b524:	200120f8 	.word	0x200120f8
 801b528:	20012102 	.word	0x20012102
 801b52c:	200120fc 	.word	0x200120fc
 801b530:	19a1      	adds	r1, r4, r6
 801b532:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801b536:	ab07      	add	r3, sp, #28
 801b538:	6849      	ldr	r1, [r1, #4]
 801b53a:	c303      	stmia	r3!, {r0, r1}
 801b53c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b540:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b544:	2b13      	cmp	r3, #19
 801b546:	bfd8      	it	le
 801b548:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801b54c:	440b      	add	r3, r1
 801b54e:	1a9b      	subs	r3, r3, r2
 801b550:	a807      	add	r0, sp, #28
 801b552:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b556:	f8ad 201c 	strh.w	r2, [sp, #28]
 801b55a:	f7ff f859 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b55e:	a807      	add	r0, sp, #28
 801b560:	f7fa f869 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b564:	bb78      	cbnz	r0, 801b5c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801b566:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801b56a:	f8d9 0000 	ldr.w	r0, [r9]
 801b56e:	f1bc 0f14 	cmp.w	ip, #20
 801b572:	bfa8      	it	ge
 801b574:	f04f 0c14 	movge.w	ip, #20
 801b578:	f8d0 e000 	ldr.w	lr, [r0]
 801b57c:	fa1f fc8c 	uxth.w	ip, ip
 801b580:	f8cd c000 	str.w	ip, [sp]
 801b584:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 801b588:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b58c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801b590:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801b594:	47d8      	blx	fp
 801b596:	4683      	mov	fp, r0
 801b598:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801b59c:	a807      	add	r0, sp, #28
 801b59e:	f7ff f81d 	bl	801a5dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b5a2:	6823      	ldr	r3, [r4, #0]
 801b5a4:	4620      	mov	r0, r4
 801b5a6:	4426      	add	r6, r4
 801b5a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b5aa:	a907      	add	r1, sp, #28
 801b5ac:	4798      	blx	r3
 801b5ae:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801b5b2:	eba0 000b 	sub.w	r0, r0, fp
 801b5b6:	b200      	sxth	r0, r0
 801b5b8:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801b5bc:	b918      	cbnz	r0, 801b5c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 801b5be:	b2b9      	uxth	r1, r7
 801b5c0:	4650      	mov	r0, sl
 801b5c2:	f7ff fa79 	bl	801aab8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b5c6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801b5ca:	f1bb 0f00 	cmp.w	fp, #0
 801b5ce:	f43f af2c 	beq.w	801b42a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801b5d2:	2700      	movs	r7, #0
 801b5d4:	882b      	ldrh	r3, [r5, #0]
 801b5d6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801b5da:	3301      	adds	r3, #1
 801b5dc:	b29b      	uxth	r3, r3
 801b5de:	b299      	uxth	r1, r3
 801b5e0:	458b      	cmp	fp, r1
 801b5e2:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 801b5e6:	d9a3      	bls.n	801b530 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 801b5e8:	4426      	add	r6, r4
 801b5ea:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801b5ee:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801b5f2:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801b5f6:	4408      	add	r0, r1
 801b5f8:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801b5fc:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801b600:	b200      	sxth	r0, r0
 801b602:	4461      	add	r1, ip
 801b604:	b209      	sxth	r1, r1
 801b606:	4288      	cmp	r0, r1
 801b608:	f6bf af71 	bge.w	801b4ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801b60c:	4584      	cmp	ip, r0
 801b60e:	4662      	mov	r2, ip
 801b610:	461f      	mov	r7, r3
 801b612:	bfb8      	it	lt
 801b614:	4602      	movlt	r2, r0
 801b616:	3301      	adds	r3, #1
 801b618:	e7e1      	b.n	801b5de <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 801b61a:	d10e      	bne.n	801b63a <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 801b61c:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801b620:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 801b624:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801b628:	4473      	add	r3, lr
 801b62a:	b21b      	sxth	r3, r3
 801b62c:	429e      	cmp	r6, r3
 801b62e:	bfa8      	it	ge
 801b630:	461e      	movge	r6, r3
 801b632:	4287      	cmp	r7, r0
 801b634:	bfb8      	it	lt
 801b636:	46e1      	movlt	r9, ip
 801b638:	e756      	b.n	801b4e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801b63a:	4286      	cmp	r6, r0
 801b63c:	bfa8      	it	ge
 801b63e:	4606      	movge	r6, r0
 801b640:	e752      	b.n	801b4e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801b642:	eb0a 0007 	add.w	r0, sl, r7
 801b646:	4427      	add	r7, r4
 801b648:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 801b64c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801b650:	f1bb 0f13 	cmp.w	fp, #19
 801b654:	bfde      	ittt	le
 801b656:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 801b65a:	445e      	addle	r6, fp
 801b65c:	b236      	sxthle	r6, r6
 801b65e:	f7f9 ffea 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b662:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b666:	2800      	cmp	r0, #0
 801b668:	f47f af1a 	bne.w	801b4a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 801b66c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801b670:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801b674:	1ab6      	subs	r6, r6, r2
 801b676:	2e14      	cmp	r6, #20
 801b678:	bfa8      	it	ge
 801b67a:	2614      	movge	r6, #20
 801b67c:	4828      	ldr	r0, [pc, #160]	@ (801b720 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 801b67e:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801b682:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 801b686:	6800      	ldr	r0, [r0, #0]
 801b688:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b68c:	f8ad 201e 	strh.w	r2, [sp, #30]
 801b690:	f8ad 3020 	strh.w	r3, [sp, #32]
 801b694:	f8d0 c000 	ldr.w	ip, [r0]
 801b698:	b2b6      	uxth	r6, r6
 801b69a:	fa1f fb8b 	uxth.w	fp, fp
 801b69e:	455e      	cmp	r6, fp
 801b6a0:	bf94      	ite	ls
 801b6a2:	9600      	strls	r6, [sp, #0]
 801b6a4:	f8cd b000 	strhi.w	fp, [sp]
 801b6a8:	b292      	uxth	r2, r2
 801b6aa:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801b6ae:	b29b      	uxth	r3, r3
 801b6b0:	b289      	uxth	r1, r1
 801b6b2:	47b0      	blx	r6
 801b6b4:	6823      	ldr	r3, [r4, #0]
 801b6b6:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801b6ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b6bc:	a907      	add	r1, sp, #28
 801b6be:	4620      	mov	r0, r4
 801b6c0:	4798      	blx	r3
 801b6c2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801b6c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801b6ca:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801b6ce:	1a5b      	subs	r3, r3, r1
 801b6d0:	440a      	add	r2, r1
 801b6d2:	b21b      	sxth	r3, r3
 801b6d4:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801b6d8:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	f47f aeda 	bne.w	801b496 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801b6e2:	fa1f f189 	uxth.w	r1, r9
 801b6e6:	4650      	mov	r0, sl
 801b6e8:	f7ff f9e6 	bl	801aab8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b6ec:	e6d3      	b.n	801b496 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801b6ee:	882e      	ldrh	r6, [r5, #0]
 801b6f0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 801b6f4:	42b3      	cmp	r3, r6
 801b6f6:	f67f ae98 	bls.w	801b42a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 801b6fa:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801b6fe:	f852 0fac 	ldr.w	r0, [r2, #172]!
 801b702:	ab07      	add	r3, sp, #28
 801b704:	6851      	ldr	r1, [r2, #4]
 801b706:	c303      	stmia	r3!, {r0, r1}
 801b708:	a807      	add	r0, sp, #28
 801b70a:	f7f9 ff94 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b70e:	b920      	cbnz	r0, 801b71a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 801b710:	6823      	ldr	r3, [r4, #0]
 801b712:	a907      	add	r1, sp, #28
 801b714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b716:	4620      	mov	r0, r4
 801b718:	4798      	blx	r3
 801b71a:	3601      	adds	r6, #1
 801b71c:	b2b6      	uxth	r6, r6
 801b71e:	e7e7      	b.n	801b6f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 801b720:	20012104 	.word	0x20012104

0801b724 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801b724:	2200      	movs	r2, #0
 801b726:	4b03      	ldr	r3, [pc, #12]	@ (801b734 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801b728:	801a      	strh	r2, [r3, #0]
 801b72a:	805a      	strh	r2, [r3, #2]
 801b72c:	809a      	strh	r2, [r3, #4]
 801b72e:	80da      	strh	r2, [r3, #6]
 801b730:	4770      	bx	lr
 801b732:	bf00      	nop
 801b734:	20012150 	.word	0x20012150

0801b738 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b73c:	4606      	mov	r6, r0
 801b73e:	b09d      	sub	sp, #116	@ 0x74
 801b740:	a803      	add	r0, sp, #12
 801b742:	4614      	mov	r4, r2
 801b744:	468a      	mov	sl, r1
 801b746:	461d      	mov	r5, r3
 801b748:	f000 fe40 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801b74c:	6833      	ldr	r3, [r6, #0]
 801b74e:	4630      	mov	r0, r6
 801b750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b752:	4798      	blx	r3
 801b754:	6833      	ldr	r3, [r6, #0]
 801b756:	4607      	mov	r7, r0
 801b758:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b75a:	4630      	mov	r0, r6
 801b75c:	4798      	blx	r3
 801b75e:	462a      	mov	r2, r5
 801b760:	2500      	movs	r5, #0
 801b762:	9000      	str	r0, [sp, #0]
 801b764:	4621      	mov	r1, r4
 801b766:	463b      	mov	r3, r7
 801b768:	a803      	add	r0, sp, #12
 801b76a:	f000 fe8a 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b76e:	462c      	mov	r4, r5
 801b770:	46a9      	mov	r9, r5
 801b772:	46a8      	mov	r8, r5
 801b774:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 801b778:	2300      	movs	r3, #0
 801b77a:	9302      	str	r3, [sp, #8]
 801b77c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801b780:	429c      	cmp	r4, r3
 801b782:	d002      	beq.n	801b78a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801b784:	455c      	cmp	r4, fp
 801b786:	bf18      	it	ne
 801b788:	4625      	movne	r5, r4
 801b78a:	ab02      	add	r3, sp, #8
 801b78c:	4632      	mov	r2, r6
 801b78e:	4651      	mov	r1, sl
 801b790:	a803      	add	r0, sp, #12
 801b792:	f001 f9a3 	bl	801cadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b796:	4604      	mov	r4, r0
 801b798:	b108      	cbz	r0, 801b79e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801b79a:	280a      	cmp	r0, #10
 801b79c:	d10a      	bne.n	801b7b4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801b79e:	45c1      	cmp	r9, r8
 801b7a0:	bf38      	it	cc
 801b7a2:	46c1      	movcc	r9, r8
 801b7a4:	f04f 0800 	mov.w	r8, #0
 801b7a8:	2c00      	cmp	r4, #0
 801b7aa:	d1e5      	bne.n	801b778 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b7ac:	4648      	mov	r0, r9
 801b7ae:	b01d      	add	sp, #116	@ 0x74
 801b7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7b4:	9a02      	ldr	r2, [sp, #8]
 801b7b6:	2a00      	cmp	r2, #0
 801b7b8:	d0de      	beq.n	801b778 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801b7ba:	7b57      	ldrb	r7, [r2, #13]
 801b7bc:	6833      	ldr	r3, [r6, #0]
 801b7be:	007f      	lsls	r7, r7, #1
 801b7c0:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801b7c4:	7a97      	ldrb	r7, [r2, #10]
 801b7c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b7c8:	4307      	orrs	r7, r0
 801b7ca:	4629      	mov	r1, r5
 801b7cc:	4630      	mov	r0, r6
 801b7ce:	8894      	ldrh	r4, [r2, #4]
 801b7d0:	4798      	blx	r3
 801b7d2:	4438      	add	r0, r7
 801b7d4:	4480      	add	r8, r0
 801b7d6:	fa1f f888 	uxth.w	r8, r8
 801b7da:	e7e5      	b.n	801b7a8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801b7dc <_ZNK8touchgfx4Font12getCharWidthEt>:
 801b7dc:	b508      	push	{r3, lr}
 801b7de:	6803      	ldr	r3, [r0, #0]
 801b7e0:	68db      	ldr	r3, [r3, #12]
 801b7e2:	4798      	blx	r3
 801b7e4:	b128      	cbz	r0, 801b7f2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801b7e6:	7b43      	ldrb	r3, [r0, #13]
 801b7e8:	7a80      	ldrb	r0, [r0, #10]
 801b7ea:	005b      	lsls	r3, r3, #1
 801b7ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b7f0:	4318      	orrs	r0, r3
 801b7f2:	bd08      	pop	{r3, pc}

0801b7f4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801b7f4:	b40e      	push	{r1, r2, r3}
 801b7f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7f8:	4605      	mov	r5, r0
 801b7fa:	b09e      	sub	sp, #120	@ 0x78
 801b7fc:	ab23      	add	r3, sp, #140	@ 0x8c
 801b7fe:	f853 4b04 	ldr.w	r4, [r3], #4
 801b802:	a805      	add	r0, sp, #20
 801b804:	9303      	str	r3, [sp, #12]
 801b806:	f000 fde1 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801b80a:	682b      	ldr	r3, [r5, #0]
 801b80c:	4628      	mov	r0, r5
 801b80e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b810:	4798      	blx	r3
 801b812:	682b      	ldr	r3, [r5, #0]
 801b814:	4606      	mov	r6, r0
 801b816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b818:	4628      	mov	r0, r5
 801b81a:	4798      	blx	r3
 801b81c:	4621      	mov	r1, r4
 801b81e:	2400      	movs	r4, #0
 801b820:	4633      	mov	r3, r6
 801b822:	9000      	str	r0, [sp, #0]
 801b824:	9a03      	ldr	r2, [sp, #12]
 801b826:	ae1e      	add	r6, sp, #120	@ 0x78
 801b828:	a805      	add	r0, sp, #20
 801b82a:	f000 fe2a 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b82e:	f846 4d68 	str.w	r4, [r6, #-104]!
 801b832:	4633      	mov	r3, r6
 801b834:	462a      	mov	r2, r5
 801b836:	4621      	mov	r1, r4
 801b838:	a805      	add	r0, sp, #20
 801b83a:	f001 f94f 	bl	801cadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b83e:	b1f0      	cbz	r0, 801b87e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801b840:	280a      	cmp	r0, #10
 801b842:	d018      	beq.n	801b876 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b844:	9f04      	ldr	r7, [sp, #16]
 801b846:	b1b7      	cbz	r7, 801b876 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 801b848:	7b78      	ldrb	r0, [r7, #13]
 801b84a:	7a3b      	ldrb	r3, [r7, #8]
 801b84c:	00c1      	lsls	r1, r0, #3
 801b84e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801b852:	4319      	orrs	r1, r3
 801b854:	0643      	lsls	r3, r0, #25
 801b856:	bf44      	itt	mi
 801b858:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 801b85c:	b219      	sxthmi	r1, r3
 801b85e:	0100      	lsls	r0, r0, #4
 801b860:	79fb      	ldrb	r3, [r7, #7]
 801b862:	88ea      	ldrh	r2, [r5, #6]
 801b864:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801b868:	4303      	orrs	r3, r0
 801b86a:	4413      	add	r3, r2
 801b86c:	1a5b      	subs	r3, r3, r1
 801b86e:	b21b      	sxth	r3, r3
 801b870:	429c      	cmp	r4, r3
 801b872:	bfb8      	it	lt
 801b874:	461c      	movlt	r4, r3
 801b876:	4633      	mov	r3, r6
 801b878:	462a      	mov	r2, r5
 801b87a:	2100      	movs	r1, #0
 801b87c:	e7dc      	b.n	801b838 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801b87e:	b2a0      	uxth	r0, r4
 801b880:	b01e      	add	sp, #120	@ 0x78
 801b882:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b886:	b003      	add	sp, #12
 801b888:	4770      	bx	lr

0801b88a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801b88a:	7a43      	ldrb	r3, [r0, #9]
 801b88c:	8880      	ldrh	r0, [r0, #4]
 801b88e:	4418      	add	r0, r3
 801b890:	b280      	uxth	r0, r0
 801b892:	4770      	bx	lr

0801b894 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801b894:	6803      	ldr	r3, [r0, #0]
 801b896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b898:	4718      	bx	r3

0801b89a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801b89a:	b40e      	push	{r1, r2, r3}
 801b89c:	b570      	push	{r4, r5, r6, lr}
 801b89e:	4604      	mov	r4, r0
 801b8a0:	b09d      	sub	sp, #116	@ 0x74
 801b8a2:	ab21      	add	r3, sp, #132	@ 0x84
 801b8a4:	f853 5b04 	ldr.w	r5, [r3], #4
 801b8a8:	a803      	add	r0, sp, #12
 801b8aa:	9302      	str	r3, [sp, #8]
 801b8ac:	f000 fd8e 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801b8b0:	6823      	ldr	r3, [r4, #0]
 801b8b2:	4620      	mov	r0, r4
 801b8b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b8b6:	4798      	blx	r3
 801b8b8:	6823      	ldr	r3, [r4, #0]
 801b8ba:	4606      	mov	r6, r0
 801b8bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b8be:	4620      	mov	r0, r4
 801b8c0:	4798      	blx	r3
 801b8c2:	4633      	mov	r3, r6
 801b8c4:	9000      	str	r0, [sp, #0]
 801b8c6:	9a02      	ldr	r2, [sp, #8]
 801b8c8:	4629      	mov	r1, r5
 801b8ca:	a803      	add	r0, sp, #12
 801b8cc:	f000 fdd9 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b8d0:	a803      	add	r0, sp, #12
 801b8d2:	f001 f9d1 	bl	801cc78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b8d6:	2401      	movs	r4, #1
 801b8d8:	b2a3      	uxth	r3, r4
 801b8da:	b140      	cbz	r0, 801b8ee <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 801b8dc:	280a      	cmp	r0, #10
 801b8de:	bf08      	it	eq
 801b8e0:	3301      	addeq	r3, #1
 801b8e2:	a803      	add	r0, sp, #12
 801b8e4:	bf08      	it	eq
 801b8e6:	b21c      	sxtheq	r4, r3
 801b8e8:	f001 f9c6 	bl	801cc78 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801b8ec:	e7f4      	b.n	801b8d8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	b01d      	add	sp, #116	@ 0x74
 801b8f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b8f6:	b003      	add	sp, #12
 801b8f8:	4770      	bx	lr

0801b8fa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801b8fa:	b40e      	push	{r1, r2, r3}
 801b8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b8fe:	4604      	mov	r4, r0
 801b900:	b09e      	sub	sp, #120	@ 0x78
 801b902:	ab23      	add	r3, sp, #140	@ 0x8c
 801b904:	f853 5b04 	ldr.w	r5, [r3], #4
 801b908:	a805      	add	r0, sp, #20
 801b90a:	9303      	str	r3, [sp, #12]
 801b90c:	f000 fd5e 	bl	801c3cc <_ZN8touchgfx12TextProviderC1Ev>
 801b910:	6823      	ldr	r3, [r4, #0]
 801b912:	4620      	mov	r0, r4
 801b914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b916:	4798      	blx	r3
 801b918:	6823      	ldr	r3, [r4, #0]
 801b91a:	4606      	mov	r6, r0
 801b91c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b91e:	4620      	mov	r0, r4
 801b920:	4798      	blx	r3
 801b922:	4633      	mov	r3, r6
 801b924:	4629      	mov	r1, r5
 801b926:	9000      	str	r0, [sp, #0]
 801b928:	9a03      	ldr	r2, [sp, #12]
 801b92a:	a805      	add	r0, sp, #20
 801b92c:	f000 fda9 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801b930:	2100      	movs	r1, #0
 801b932:	ad1e      	add	r5, sp, #120	@ 0x78
 801b934:	f845 1d68 	str.w	r1, [r5, #-104]!
 801b938:	462b      	mov	r3, r5
 801b93a:	4622      	mov	r2, r4
 801b93c:	a805      	add	r0, sp, #20
 801b93e:	f001 f8cd 	bl	801cadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b942:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801b946:	b1d8      	cbz	r0, 801b980 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801b948:	280a      	cmp	r0, #10
 801b94a:	d012      	beq.n	801b972 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b94c:	9804      	ldr	r0, [sp, #16]
 801b94e:	b180      	cbz	r0, 801b972 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801b950:	7b47      	ldrb	r7, [r0, #13]
 801b952:	88e2      	ldrh	r2, [r4, #6]
 801b954:	00fb      	lsls	r3, r7, #3
 801b956:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801b95a:	7a03      	ldrb	r3, [r0, #8]
 801b95c:	430b      	orrs	r3, r1
 801b95e:	0679      	lsls	r1, r7, #25
 801b960:	bf44      	itt	mi
 801b962:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801b966:	b21b      	sxthmi	r3, r3
 801b968:	1ad3      	subs	r3, r2, r3
 801b96a:	b21b      	sxth	r3, r3
 801b96c:	429e      	cmp	r6, r3
 801b96e:	bfa8      	it	ge
 801b970:	461e      	movge	r6, r3
 801b972:	462b      	mov	r3, r5
 801b974:	4622      	mov	r2, r4
 801b976:	2100      	movs	r1, #0
 801b978:	a805      	add	r0, sp, #20
 801b97a:	f001 f8af 	bl	801cadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801b97e:	e7e2      	b.n	801b946 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801b980:	4630      	mov	r0, r6
 801b982:	b01e      	add	sp, #120	@ 0x78
 801b984:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b988:	b003      	add	sp, #12
 801b98a:	4770      	bx	lr

0801b98c <_ZNK8touchgfx8Drawable10invalidateEv>:
 801b98c:	b513      	push	{r0, r1, r4, lr}
 801b98e:	2400      	movs	r4, #0
 801b990:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b994:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b998:	6803      	ldr	r3, [r0, #0]
 801b99a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b99e:	9400      	str	r4, [sp, #0]
 801b9a0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b9a4:	691b      	ldr	r3, [r3, #16]
 801b9a6:	4669      	mov	r1, sp
 801b9a8:	4798      	blx	r3
 801b9aa:	b002      	add	sp, #8
 801b9ac:	bd10      	pop	{r4, pc}

0801b9ae <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801b9ae:	b538      	push	{r3, r4, r5, lr}
 801b9b0:	460c      	mov	r4, r1
 801b9b2:	4605      	mov	r5, r0
 801b9b4:	680b      	ldr	r3, [r1, #0]
 801b9b6:	68db      	ldr	r3, [r3, #12]
 801b9b8:	4798      	blx	r3
 801b9ba:	6823      	ldr	r3, [r4, #0]
 801b9bc:	4620      	mov	r0, r4
 801b9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9c0:	4629      	mov	r1, r5
 801b9c2:	4798      	blx	r3
 801b9c4:	4628      	mov	r0, r5
 801b9c6:	bd38      	pop	{r3, r4, r5, pc}

0801b9c8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801b9c8:	b410      	push	{r4}
 801b9ca:	880a      	ldrh	r2, [r1, #0]
 801b9cc:	8884      	ldrh	r4, [r0, #4]
 801b9ce:	4422      	add	r2, r4
 801b9d0:	800a      	strh	r2, [r1, #0]
 801b9d2:	88c4      	ldrh	r4, [r0, #6]
 801b9d4:	884a      	ldrh	r2, [r1, #2]
 801b9d6:	4422      	add	r2, r4
 801b9d8:	804a      	strh	r2, [r1, #2]
 801b9da:	6940      	ldr	r0, [r0, #20]
 801b9dc:	b120      	cbz	r0, 801b9e8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801b9de:	6803      	ldr	r3, [r0, #0]
 801b9e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b9e6:	4718      	bx	r3
 801b9e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b9ec:	4770      	bx	lr

0801b9ee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b9ee:	b570      	push	{r4, r5, r6, lr}
 801b9f0:	460c      	mov	r4, r1
 801b9f2:	8882      	ldrh	r2, [r0, #4]
 801b9f4:	880b      	ldrh	r3, [r1, #0]
 801b9f6:	4605      	mov	r5, r0
 801b9f8:	4413      	add	r3, r2
 801b9fa:	800b      	strh	r3, [r1, #0]
 801b9fc:	88c2      	ldrh	r2, [r0, #6]
 801b9fe:	884b      	ldrh	r3, [r1, #2]
 801ba00:	4413      	add	r3, r2
 801ba02:	804b      	strh	r3, [r1, #2]
 801ba04:	1d01      	adds	r1, r0, #4
 801ba06:	4620      	mov	r0, r4
 801ba08:	f7f9 fdd2 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801ba0c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	dd0b      	ble.n	801ba2c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba14:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	dd07      	ble.n	801ba2c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba1c:	6968      	ldr	r0, [r5, #20]
 801ba1e:	b128      	cbz	r0, 801ba2c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801ba20:	6803      	ldr	r3, [r0, #0]
 801ba22:	4621      	mov	r1, r4
 801ba24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba2a:	4718      	bx	r3
 801ba2c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ba30 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801ba30:	b570      	push	{r4, r5, r6, lr}
 801ba32:	460c      	mov	r4, r1
 801ba34:	8882      	ldrh	r2, [r0, #4]
 801ba36:	880b      	ldrh	r3, [r1, #0]
 801ba38:	4605      	mov	r5, r0
 801ba3a:	4413      	add	r3, r2
 801ba3c:	800b      	strh	r3, [r1, #0]
 801ba3e:	88c2      	ldrh	r2, [r0, #6]
 801ba40:	884b      	ldrh	r3, [r1, #2]
 801ba42:	4413      	add	r3, r2
 801ba44:	804b      	strh	r3, [r1, #2]
 801ba46:	1d01      	adds	r1, r0, #4
 801ba48:	4620      	mov	r0, r4
 801ba4a:	f7f9 fdb1 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801ba4e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	dd19      	ble.n	801ba8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ba56:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	dd15      	ble.n	801ba8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ba5e:	6968      	ldr	r0, [r5, #20]
 801ba60:	b128      	cbz	r0, 801ba6e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801ba62:	6803      	ldr	r3, [r0, #0]
 801ba64:	4621      	mov	r1, r4
 801ba66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba6a:	691b      	ldr	r3, [r3, #16]
 801ba6c:	4718      	bx	r3
 801ba6e:	4b07      	ldr	r3, [pc, #28]	@ (801ba8c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	3304      	adds	r3, #4
 801ba74:	429d      	cmp	r5, r3
 801ba76:	d108      	bne.n	801ba8a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801ba78:	f7fe ff12 	bl	801a8a0 <_ZN8touchgfx11Application11getInstanceEv>
 801ba7c:	6803      	ldr	r3, [r0, #0]
 801ba7e:	6821      	ldr	r1, [r4, #0]
 801ba80:	6862      	ldr	r2, [r4, #4]
 801ba82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ba84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba88:	4718      	bx	r3
 801ba8a:	bd70      	pop	{r4, r5, r6, pc}
 801ba8c:	20012148 	.word	0x20012148

0801ba90 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ba90:	b570      	push	{r4, r5, r6, lr}
 801ba92:	4604      	mov	r4, r0
 801ba94:	4616      	mov	r6, r2
 801ba96:	460d      	mov	r5, r1
 801ba98:	b901      	cbnz	r1, 801ba9c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801ba9a:	b192      	cbz	r2, 801bac2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801ba9c:	6823      	ldr	r3, [r4, #0]
 801ba9e:	4620      	mov	r0, r4
 801baa0:	699b      	ldr	r3, [r3, #24]
 801baa2:	4798      	blx	r3
 801baa4:	88e2      	ldrh	r2, [r4, #6]
 801baa6:	88a1      	ldrh	r1, [r4, #4]
 801baa8:	4432      	add	r2, r6
 801baaa:	4429      	add	r1, r5
 801baac:	4620      	mov	r0, r4
 801baae:	b212      	sxth	r2, r2
 801bab0:	b209      	sxth	r1, r1
 801bab2:	f7f3 fb42 	bl	800f13a <_ZN8touchgfx8Drawable5setXYEss>
 801bab6:	6823      	ldr	r3, [r4, #0]
 801bab8:	4620      	mov	r0, r4
 801baba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801babe:	699b      	ldr	r3, [r3, #24]
 801bac0:	4718      	bx	r3
 801bac2:	bd70      	pop	{r4, r5, r6, pc}

0801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801bac4:	b510      	push	{r4, lr}
 801bac6:	2300      	movs	r3, #0
 801bac8:	4604      	mov	r4, r0
 801baca:	4608      	mov	r0, r1
 801bacc:	8023      	strh	r3, [r4, #0]
 801bace:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bad2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801bad6:	8063      	strh	r3, [r4, #2]
 801bad8:	6803      	ldr	r3, [r0, #0]
 801bada:	80a1      	strh	r1, [r4, #4]
 801badc:	80e2      	strh	r2, [r4, #6]
 801bade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bae0:	4621      	mov	r1, r4
 801bae2:	4798      	blx	r3
 801bae4:	4620      	mov	r0, r4
 801bae6:	bd10      	pop	{r4, pc}

0801bae8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 801bae8:	b530      	push	{r4, r5, lr}
 801baea:	8083      	strh	r3, [r0, #4]
 801baec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801baf0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801baf4:	80c3      	strh	r3, [r0, #6]
 801baf6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801bafa:	6141      	str	r1, [r0, #20]
 801bafc:	7203      	strb	r3, [r0, #8]
 801bafe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801bb02:	8302      	strh	r2, [r0, #24]
 801bb04:	7243      	strb	r3, [r0, #9]
 801bb06:	7a83      	ldrb	r3, [r0, #10]
 801bb08:	f365 0306 	bfi	r3, r5, #0, #7
 801bb0c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801bb10:	f365 13c7 	bfi	r3, r5, #7, #1
 801bb14:	7283      	strb	r3, [r0, #10]
 801bb16:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801bb1a:	72c3      	strb	r3, [r0, #11]
 801bb1c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801bb20:	7303      	strb	r3, [r0, #12]
 801bb22:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801bb26:	81c3      	strh	r3, [r0, #14]
 801bb28:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801bb2c:	8203      	strh	r3, [r0, #16]
 801bb2e:	4b01      	ldr	r3, [pc, #4]	@ (801bb34 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801bb30:	6003      	str	r3, [r0, #0]
 801bb32:	bd30      	pop	{r4, r5, pc}
 801bb34:	080304d8 	.word	0x080304d8

0801bb38 <_ZNK8touchgfx9ConstFont4findEt>:
 801bb38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb3a:	6944      	ldr	r4, [r0, #20]
 801bb3c:	b3bc      	cbz	r4, 801bbae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb3e:	88a3      	ldrh	r3, [r4, #4]
 801bb40:	8b02      	ldrh	r2, [r0, #24]
 801bb42:	1acb      	subs	r3, r1, r3
 801bb44:	f102 32ff 	add.w	r2, r2, #4294967295
 801bb48:	d431      	bmi.n	801bbae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb4a:	4293      	cmp	r3, r2
 801bb4c:	dd0c      	ble.n	801bb68 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801bb4e:	230e      	movs	r3, #14
 801bb50:	fb03 4302 	mla	r3, r3, r2, r4
 801bb54:	889b      	ldrh	r3, [r3, #4]
 801bb56:	1a5b      	subs	r3, r3, r1
 801bb58:	1ad3      	subs	r3, r2, r3
 801bb5a:	429a      	cmp	r2, r3
 801bb5c:	db27      	blt.n	801bbae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	bfbc      	itt	lt
 801bb62:	2302      	movlt	r3, #2
 801bb64:	fb92 f3f3 	sdivlt	r3, r2, r3
 801bb68:	2500      	movs	r5, #0
 801bb6a:	260e      	movs	r6, #14
 801bb6c:	4295      	cmp	r5, r2
 801bb6e:	dc1e      	bgt.n	801bbae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb70:	fb06 4003 	mla	r0, r6, r3, r4
 801bb74:	8887      	ldrh	r7, [r0, #4]
 801bb76:	42b9      	cmp	r1, r7
 801bb78:	d01a      	beq.n	801bbb0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801bb7a:	d20d      	bcs.n	801bb98 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801bb7c:	1e5a      	subs	r2, r3, #1
 801bb7e:	4295      	cmp	r5, r2
 801bb80:	dc15      	bgt.n	801bbae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb82:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801bb86:	1a5b      	subs	r3, r3, r1
 801bb88:	1ad3      	subs	r3, r2, r3
 801bb8a:	429a      	cmp	r2, r3
 801bb8c:	db0f      	blt.n	801bbae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb8e:	429d      	cmp	r5, r3
 801bb90:	ddec      	ble.n	801bb6c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bb92:	1953      	adds	r3, r2, r5
 801bb94:	105b      	asrs	r3, r3, #1
 801bb96:	e7e9      	b.n	801bb6c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bb98:	1c5d      	adds	r5, r3, #1
 801bb9a:	42aa      	cmp	r2, r5
 801bb9c:	db07      	blt.n	801bbae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bb9e:	8a43      	ldrh	r3, [r0, #18]
 801bba0:	1acb      	subs	r3, r1, r3
 801bba2:	442b      	add	r3, r5
 801bba4:	429d      	cmp	r5, r3
 801bba6:	dc02      	bgt.n	801bbae <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801bba8:	429a      	cmp	r2, r3
 801bbaa:	dadf      	bge.n	801bb6c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801bbac:	e7f1      	b.n	801bb92 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801bbae:	2000      	movs	r0, #0
 801bbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bbb2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801bbb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bbb4:	4604      	mov	r4, r0
 801bbb6:	4617      	mov	r7, r2
 801bbb8:	461e      	mov	r6, r3
 801bbba:	b911      	cbnz	r1, 801bbc2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801bbbc:	2500      	movs	r5, #0
 801bbbe:	4628      	mov	r0, r5
 801bbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbc2:	290a      	cmp	r1, #10
 801bbc4:	d0fa      	beq.n	801bbbc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bbc6:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801bbca:	4291      	cmp	r1, r2
 801bbcc:	d0f6      	beq.n	801bbbc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bbce:	f242 020b 	movw	r2, #8203	@ 0x200b
 801bbd2:	4291      	cmp	r1, r2
 801bbd4:	d0f2      	beq.n	801bbbc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bbd6:	f7ff ffaf 	bl	801bb38 <_ZNK8touchgfx9ConstFont4findEt>
 801bbda:	4605      	mov	r5, r0
 801bbdc:	b950      	cbnz	r0, 801bbf4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801bbde:	6823      	ldr	r3, [r4, #0]
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	691b      	ldr	r3, [r3, #16]
 801bbe4:	4798      	blx	r3
 801bbe6:	4601      	mov	r1, r0
 801bbe8:	4620      	mov	r0, r4
 801bbea:	f7ff ffa5 	bl	801bb38 <_ZNK8touchgfx9ConstFont4findEt>
 801bbee:	4605      	mov	r5, r0
 801bbf0:	2800      	cmp	r0, #0
 801bbf2:	d0e3      	beq.n	801bbbc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801bbf4:	6823      	ldr	r3, [r4, #0]
 801bbf6:	4629      	mov	r1, r5
 801bbf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bbfa:	4620      	mov	r0, r4
 801bbfc:	4798      	blx	r3
 801bbfe:	6038      	str	r0, [r7, #0]
 801bc00:	6823      	ldr	r3, [r4, #0]
 801bc02:	4620      	mov	r0, r4
 801bc04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bc06:	4798      	blx	r3
 801bc08:	7030      	strb	r0, [r6, #0]
 801bc0a:	e7d8      	b.n	801bbbe <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801bc0c <_ZN8touchgfx4clzuEm>:
 801bc0c:	4603      	mov	r3, r0
 801bc0e:	b1c8      	cbz	r0, 801bc44 <_ZN8touchgfx4clzuEm+0x38>
 801bc10:	0c02      	lsrs	r2, r0, #16
 801bc12:	0412      	lsls	r2, r2, #16
 801bc14:	b9a2      	cbnz	r2, 801bc40 <_ZN8touchgfx4clzuEm+0x34>
 801bc16:	0403      	lsls	r3, r0, #16
 801bc18:	2010      	movs	r0, #16
 801bc1a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 801bc1e:	bf04      	itt	eq
 801bc20:	021b      	lsleq	r3, r3, #8
 801bc22:	3008      	addeq	r0, #8
 801bc24:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801bc28:	bf04      	itt	eq
 801bc2a:	011b      	lsleq	r3, r3, #4
 801bc2c:	3004      	addeq	r0, #4
 801bc2e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 801bc32:	bf04      	itt	eq
 801bc34:	009b      	lsleq	r3, r3, #2
 801bc36:	3002      	addeq	r0, #2
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	db04      	blt.n	801bc46 <_ZN8touchgfx4clzuEm+0x3a>
 801bc3c:	3001      	adds	r0, #1
 801bc3e:	4770      	bx	lr
 801bc40:	2000      	movs	r0, #0
 801bc42:	e7ea      	b.n	801bc1a <_ZN8touchgfx4clzuEm+0xe>
 801bc44:	2020      	movs	r0, #32
 801bc46:	4770      	bx	lr

0801bc48 <_ZN8touchgfx7muldivuEmmmRm>:
 801bc48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801bc4c:	460f      	mov	r7, r1
 801bc4e:	4615      	mov	r5, r2
 801bc50:	461e      	mov	r6, r3
 801bc52:	4601      	mov	r1, r0
 801bc54:	b100      	cbz	r0, 801bc58 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 801bc56:	b927      	cbnz	r7, 801bc62 <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 801bc58:	2000      	movs	r0, #0
 801bc5a:	6030      	str	r0, [r6, #0]
 801bc5c:	b002      	add	sp, #8
 801bc5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc62:	f7ff ffd3 	bl	801bc0c <_ZN8touchgfx4clzuEm>
 801bc66:	b980      	cbnz	r0, 801bc8a <_ZN8touchgfx7muldivuEmmmRm+0x42>
 801bc68:	4638      	mov	r0, r7
 801bc6a:	f7ff ffcf 	bl	801bc0c <_ZN8touchgfx4clzuEm>
 801bc6e:	2800      	cmp	r0, #0
 801bc70:	dd05      	ble.n	801bc7e <_ZN8touchgfx7muldivuEmmmRm+0x36>
 801bc72:	4633      	mov	r3, r6
 801bc74:	462a      	mov	r2, r5
 801bc76:	4638      	mov	r0, r7
 801bc78:	f7ff ffe6 	bl	801bc48 <_ZN8touchgfx7muldivuEmmmRm>
 801bc7c:	e7ee      	b.n	801bc5c <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801bc7e:	f04f 33ff 	mov.w	r3, #4294967295
 801bc82:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801bc86:	6033      	str	r3, [r6, #0]
 801bc88:	e7e8      	b.n	801bc5c <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801bc8a:	fa37 f800 	lsrs.w	r8, r7, r0
 801bc8e:	fb07 f301 	mul.w	r3, r7, r1
 801bc92:	d105      	bne.n	801bca0 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 801bc94:	fbb3 f0f5 	udiv	r0, r3, r5
 801bc98:	fb05 3510 	mls	r5, r5, r0, r3
 801bc9c:	6035      	str	r5, [r6, #0]
 801bc9e:	e7dd      	b.n	801bc5c <_ZN8touchgfx7muldivuEmmmRm+0x14>
 801bca0:	2301      	movs	r3, #1
 801bca2:	fa01 fa00 	lsl.w	sl, r1, r0
 801bca6:	fa03 f000 	lsl.w	r0, r3, r0
 801bcaa:	3801      	subs	r0, #1
 801bcac:	462a      	mov	r2, r5
 801bcae:	4633      	mov	r3, r6
 801bcb0:	4038      	ands	r0, r7
 801bcb2:	f7ff ffc9 	bl	801bc48 <_ZN8touchgfx7muldivuEmmmRm>
 801bcb6:	fbba f9f5 	udiv	r9, sl, r5
 801bcba:	462a      	mov	r2, r5
 801bcbc:	4607      	mov	r7, r0
 801bcbe:	ab01      	add	r3, sp, #4
 801bcc0:	fb05 a119 	mls	r1, r5, r9, sl
 801bcc4:	4640      	mov	r0, r8
 801bcc6:	f7ff ffbf 	bl	801bc48 <_ZN8touchgfx7muldivuEmmmRm>
 801bcca:	9b01      	ldr	r3, [sp, #4]
 801bccc:	6832      	ldr	r2, [r6, #0]
 801bcce:	fb08 f409 	mul.w	r4, r8, r9
 801bcd2:	441a      	add	r2, r3
 801bcd4:	fbb2 f3f5 	udiv	r3, r2, r5
 801bcd8:	441c      	add	r4, r3
 801bcda:	443c      	add	r4, r7
 801bcdc:	4420      	add	r0, r4
 801bcde:	fb05 2513 	mls	r5, r5, r3, r2
 801bce2:	e7db      	b.n	801bc9c <_ZN8touchgfx7muldivuEmmmRm+0x54>

0801bce4 <_ZN8touchgfx6muldivElllRl>:
 801bce4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bce6:	2800      	cmp	r0, #0
 801bce8:	bfb6      	itet	lt
 801bcea:	f04f 34ff 	movlt.w	r4, #4294967295
 801bcee:	2401      	movge	r4, #1
 801bcf0:	4240      	neglt	r0, r0
 801bcf2:	2900      	cmp	r1, #0
 801bcf4:	bfbc      	itt	lt
 801bcf6:	4249      	neglt	r1, r1
 801bcf8:	4264      	neglt	r4, r4
 801bcfa:	2a00      	cmp	r2, #0
 801bcfc:	bfb6      	itet	lt
 801bcfe:	4265      	neglt	r5, r4
 801bd00:	4625      	movge	r5, r4
 801bd02:	4252      	neglt	r2, r2
 801bd04:	4288      	cmp	r0, r1
 801bd06:	461e      	mov	r6, r3
 801bd08:	bfc2      	ittt	gt
 801bd0a:	4603      	movgt	r3, r0
 801bd0c:	4608      	movgt	r0, r1
 801bd0e:	4619      	movgt	r1, r3
 801bd10:	ab01      	add	r3, sp, #4
 801bd12:	f7ff ff99 	bl	801bc48 <_ZN8touchgfx7muldivuEmmmRm>
 801bd16:	9b01      	ldr	r3, [sp, #4]
 801bd18:	4368      	muls	r0, r5
 801bd1a:	435c      	muls	r4, r3
 801bd1c:	6034      	str	r4, [r6, #0]
 801bd1e:	b002      	add	sp, #8
 801bd20:	bd70      	pop	{r4, r5, r6, pc}

0801bd22 <_ZN8touchgfx6muldivElll>:
 801bd22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bd24:	4606      	mov	r6, r0
 801bd26:	ab01      	add	r3, sp, #4
 801bd28:	460d      	mov	r5, r1
 801bd2a:	4614      	mov	r4, r2
 801bd2c:	f7ff ffda 	bl	801bce4 <_ZN8touchgfx6muldivElllRl>
 801bd30:	2e00      	cmp	r6, #0
 801bd32:	db20      	blt.n	801bd76 <_ZN8touchgfx6muldivElll+0x54>
 801bd34:	bf14      	ite	ne
 801bd36:	2301      	movne	r3, #1
 801bd38:	2300      	moveq	r3, #0
 801bd3a:	2d00      	cmp	r5, #0
 801bd3c:	db1e      	blt.n	801bd7c <_ZN8touchgfx6muldivElll+0x5a>
 801bd3e:	bf14      	ite	ne
 801bd40:	2201      	movne	r2, #1
 801bd42:	2200      	moveq	r2, #0
 801bd44:	2c00      	cmp	r4, #0
 801bd46:	fb03 f202 	mul.w	r2, r3, r2
 801bd4a:	db1a      	blt.n	801bd82 <_ZN8touchgfx6muldivElll+0x60>
 801bd4c:	bf14      	ite	ne
 801bd4e:	2301      	movne	r3, #1
 801bd50:	2300      	moveq	r3, #0
 801bd52:	4353      	muls	r3, r2
 801bd54:	2b01      	cmp	r3, #1
 801bd56:	d117      	bne.n	801bd88 <_ZN8touchgfx6muldivElll+0x66>
 801bd58:	9b01      	ldr	r3, [sp, #4]
 801bd5a:	2c00      	cmp	r4, #0
 801bd5c:	bfb8      	it	lt
 801bd5e:	4264      	neglt	r4, r4
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	f104 0401 	add.w	r4, r4, #1
 801bd66:	bfb8      	it	lt
 801bd68:	425b      	neglt	r3, r3
 801bd6a:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801bd6e:	db00      	blt.n	801bd72 <_ZN8touchgfx6muldivElll+0x50>
 801bd70:	3001      	adds	r0, #1
 801bd72:	b002      	add	sp, #8
 801bd74:	bd70      	pop	{r4, r5, r6, pc}
 801bd76:	f04f 33ff 	mov.w	r3, #4294967295
 801bd7a:	e7de      	b.n	801bd3a <_ZN8touchgfx6muldivElll+0x18>
 801bd7c:	f04f 32ff 	mov.w	r2, #4294967295
 801bd80:	e7e0      	b.n	801bd44 <_ZN8touchgfx6muldivElll+0x22>
 801bd82:	f04f 33ff 	mov.w	r3, #4294967295
 801bd86:	e7e4      	b.n	801bd52 <_ZN8touchgfx6muldivElll+0x30>
 801bd88:	3301      	adds	r3, #1
 801bd8a:	d1f2      	bne.n	801bd72 <_ZN8touchgfx6muldivElll+0x50>
 801bd8c:	9b01      	ldr	r3, [sp, #4]
 801bd8e:	2c00      	cmp	r4, #0
 801bd90:	bfb8      	it	lt
 801bd92:	4264      	neglt	r4, r4
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	bfb8      	it	lt
 801bd98:	425b      	neglt	r3, r3
 801bd9a:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801bd9e:	bfc8      	it	gt
 801bda0:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801bda4:	e7e5      	b.n	801bd72 <_ZN8touchgfx6muldivElll+0x50>

0801bda6 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801bda6:	2000      	movs	r0, #0
 801bda8:	4770      	bx	lr

0801bdaa <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801bdaa:	2001      	movs	r0, #1
 801bdac:	4770      	bx	lr

0801bdae <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801bdae:	2002      	movs	r0, #2
 801bdb0:	4770      	bx	lr

0801bdb2 <_ZN8touchgfx12GestureEventD1Ev>:
 801bdb2:	4770      	bx	lr

0801bdb4 <_ZN8touchgfx9DragEventD1Ev>:
 801bdb4:	4770      	bx	lr

0801bdb6 <_ZN8touchgfx10ClickEventD1Ev>:
 801bdb6:	4770      	bx	lr

0801bdb8 <_ZN8touchgfx10ClickEventD0Ev>:
 801bdb8:	b510      	push	{r4, lr}
 801bdba:	4604      	mov	r4, r0
 801bdbc:	210c      	movs	r1, #12
 801bdbe:	f010 fc60 	bl	802c682 <_ZdlPvj>
 801bdc2:	4620      	mov	r0, r4
 801bdc4:	bd10      	pop	{r4, pc}

0801bdc6 <_ZN8touchgfx9DragEventD0Ev>:
 801bdc6:	b510      	push	{r4, lr}
 801bdc8:	4604      	mov	r4, r0
 801bdca:	2110      	movs	r1, #16
 801bdcc:	f010 fc59 	bl	802c682 <_ZdlPvj>
 801bdd0:	4620      	mov	r0, r4
 801bdd2:	bd10      	pop	{r4, pc}

0801bdd4 <_ZN8touchgfx12GestureEventD0Ev>:
 801bdd4:	b510      	push	{r4, lr}
 801bdd6:	4604      	mov	r4, r0
 801bdd8:	210c      	movs	r1, #12
 801bdda:	f010 fc52 	bl	802c682 <_ZdlPvj>
 801bdde:	4620      	mov	r0, r4
 801bde0:	bd10      	pop	{r4, pc}
	...

0801bde4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801bde4:	b530      	push	{r4, r5, lr}
 801bde6:	460d      	mov	r5, r1
 801bde8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801bdea:	b087      	sub	sp, #28
 801bdec:	4604      	mov	r4, r0
 801bdee:	b301      	cbz	r1, 801be32 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801bdf0:	a801      	add	r0, sp, #4
 801bdf2:	f7ff fe67 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bdf6:	892a      	ldrh	r2, [r5, #8]
 801bdf8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801bdfc:	7928      	ldrb	r0, [r5, #4]
 801bdfe:	1ad2      	subs	r2, r2, r3
 801be00:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801be02:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801be06:	441a      	add	r2, r3
 801be08:	896b      	ldrh	r3, [r5, #10]
 801be0a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801be0e:	f88d 0010 	strb.w	r0, [sp, #16]
 801be12:	1b5b      	subs	r3, r3, r5
 801be14:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 801be16:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801be18:	442b      	add	r3, r5
 801be1a:	4d07      	ldr	r5, [pc, #28]	@ (801be38 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801be1c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801be20:	9503      	str	r5, [sp, #12]
 801be22:	f8ad 2014 	strh.w	r2, [sp, #20]
 801be26:	f8ad 3016 	strh.w	r3, [sp, #22]
 801be2a:	6803      	ldr	r3, [r0, #0]
 801be2c:	a903      	add	r1, sp, #12
 801be2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be30:	4798      	blx	r3
 801be32:	b007      	add	sp, #28
 801be34:	bd30      	pop	{r4, r5, pc}
 801be36:	bf00      	nop
 801be38:	08030568 	.word	0x08030568

0801be3c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801be42:	b08a      	sub	sp, #40	@ 0x28
 801be44:	4604      	mov	r4, r0
 801be46:	460d      	mov	r5, r1
 801be48:	b113      	cbz	r3, 801be50 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801be4a:	790b      	ldrb	r3, [r1, #4]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d044      	beq.n	801beda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801be50:	f104 0804 	add.w	r8, r4, #4
 801be54:	4641      	mov	r1, r8
 801be56:	a803      	add	r0, sp, #12
 801be58:	f7ff fe34 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801be5c:	792b      	ldrb	r3, [r5, #4]
 801be5e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801be62:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801be66:	b983      	cbnz	r3, 801be8a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801be68:	892a      	ldrh	r2, [r5, #8]
 801be6a:	88e9      	ldrh	r1, [r5, #6]
 801be6c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 801be70:	1b92      	subs	r2, r2, r6
 801be72:	1bc9      	subs	r1, r1, r7
 801be74:	9301      	str	r3, [sp, #4]
 801be76:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 801be7a:	9300      	str	r3, [sp, #0]
 801be7c:	b212      	sxth	r2, r2
 801be7e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 801be82:	b209      	sxth	r1, r1
 801be84:	4640      	mov	r0, r8
 801be86:	f7f9 fab3 	bl	80153f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801be8a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801be8c:	b329      	cbz	r1, 801beda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801be8e:	a805      	add	r0, sp, #20
 801be90:	f7ff fe18 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801be94:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801be98:	792b      	ldrb	r3, [r5, #4]
 801be9a:	1abf      	subs	r7, r7, r2
 801be9c:	88ea      	ldrh	r2, [r5, #6]
 801be9e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801bea0:	4417      	add	r7, r2
 801bea2:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 801bea4:	f88d 3020 	strb.w	r3, [sp, #32]
 801bea8:	4417      	add	r7, r2
 801beaa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801beae:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 801beb2:	1ab6      	subs	r6, r6, r2
 801beb4:	892a      	ldrh	r2, [r5, #8]
 801beb6:	a907      	add	r1, sp, #28
 801beb8:	4416      	add	r6, r2
 801beba:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801bebc:	4416      	add	r6, r2
 801bebe:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 801bec2:	2600      	movs	r6, #0
 801bec4:	4a06      	ldr	r2, [pc, #24]	@ (801bee0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801bec6:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 801beca:	9207      	str	r2, [sp, #28]
 801becc:	6803      	ldr	r3, [r0, #0]
 801bece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bed0:	4798      	blx	r3
 801bed2:	792b      	ldrb	r3, [r5, #4]
 801bed4:	b10b      	cbz	r3, 801beda <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801bed6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 801beda:	b00a      	add	sp, #40	@ 0x28
 801bedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bee0:	08030540 	.word	0x08030540

0801bee4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801bee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bee8:	460c      	mov	r4, r1
 801beea:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801beec:	b088      	sub	sp, #32
 801beee:	4605      	mov	r5, r0
 801bef0:	2900      	cmp	r1, #0
 801bef2:	d06d      	beq.n	801bfd0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801bef4:	4668      	mov	r0, sp
 801bef6:	f7ff fde5 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801befa:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801befc:	88e3      	ldrh	r3, [r4, #6]
 801befe:	f9bd 8000 	ldrsh.w	r8, [sp]
 801bf02:	440b      	add	r3, r1
 801bf04:	b21b      	sxth	r3, r3
 801bf06:	4543      	cmp	r3, r8
 801bf08:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801bf0c:	db31      	blt.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf0e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801bf12:	44c4      	add	ip, r8
 801bf14:	fa0f fc8c 	sxth.w	ip, ip
 801bf18:	4563      	cmp	r3, ip
 801bf1a:	da2a      	bge.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf1c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801bf1e:	8926      	ldrh	r6, [r4, #8]
 801bf20:	4416      	add	r6, r2
 801bf22:	b236      	sxth	r6, r6
 801bf24:	42be      	cmp	r6, r7
 801bf26:	db24      	blt.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf28:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801bf2c:	4438      	add	r0, r7
 801bf2e:	b200      	sxth	r0, r0
 801bf30:	4286      	cmp	r6, r0
 801bf32:	da1e      	bge.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf34:	8963      	ldrh	r3, [r4, #10]
 801bf36:	4419      	add	r1, r3
 801bf38:	b209      	sxth	r1, r1
 801bf3a:	4541      	cmp	r1, r8
 801bf3c:	db08      	blt.n	801bf50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801bf3e:	4561      	cmp	r1, ip
 801bf40:	da06      	bge.n	801bf50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801bf42:	89a3      	ldrh	r3, [r4, #12]
 801bf44:	441a      	add	r2, r3
 801bf46:	b212      	sxth	r2, r2
 801bf48:	42ba      	cmp	r2, r7
 801bf4a:	db01      	blt.n	801bf50 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801bf4c:	4282      	cmp	r2, r0
 801bf4e:	db10      	blt.n	801bf72 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801bf50:	4b21      	ldr	r3, [pc, #132]	@ (801bfd8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801bf52:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801bf54:	9304      	str	r3, [sp, #16]
 801bf56:	2302      	movs	r3, #2
 801bf58:	f88d 3014 	strb.w	r3, [sp, #20]
 801bf5c:	2300      	movs	r3, #0
 801bf5e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bf62:	f8ad 3018 	strh.w	r3, [sp, #24]
 801bf66:	f8ad 301a 	strh.w	r3, [sp, #26]
 801bf6a:	6803      	ldr	r3, [r0, #0]
 801bf6c:	a904      	add	r1, sp, #16
 801bf6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bf70:	4798      	blx	r3
 801bf72:	1d29      	adds	r1, r5, #4
 801bf74:	a802      	add	r0, sp, #8
 801bf76:	f7ff fda5 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801bf7a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801bf7e:	88e0      	ldrh	r0, [r4, #6]
 801bf80:	eba3 0808 	sub.w	r8, r3, r8
 801bf84:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801bf88:	7921      	ldrb	r1, [r4, #4]
 801bf8a:	1bdf      	subs	r7, r3, r7
 801bf8c:	b2bb      	uxth	r3, r7
 801bf8e:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 801bf92:	fa1f f888 	uxth.w	r8, r8
 801bf96:	8922      	ldrh	r2, [r4, #8]
 801bf98:	8967      	ldrh	r7, [r4, #10]
 801bf9a:	89a4      	ldrh	r4, [r4, #12]
 801bf9c:	4440      	add	r0, r8
 801bf9e:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 801bfa0:	4460      	add	r0, ip
 801bfa2:	441a      	add	r2, r3
 801bfa4:	44b8      	add	r8, r7
 801bfa6:	4423      	add	r3, r4
 801bfa8:	4c0c      	ldr	r4, [pc, #48]	@ (801bfdc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801bfaa:	f8ad 0016 	strh.w	r0, [sp, #22]
 801bfae:	4433      	add	r3, r6
 801bfb0:	4432      	add	r2, r6
 801bfb2:	44e0      	add	r8, ip
 801bfb4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801bfb6:	f88d 1014 	strb.w	r1, [sp, #20]
 801bfba:	9404      	str	r4, [sp, #16]
 801bfbc:	f8ad 2018 	strh.w	r2, [sp, #24]
 801bfc0:	f8ad 801a 	strh.w	r8, [sp, #26]
 801bfc4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801bfc8:	6803      	ldr	r3, [r0, #0]
 801bfca:	a904      	add	r1, sp, #16
 801bfcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bfce:	4798      	blx	r3
 801bfd0:	b008      	add	sp, #32
 801bfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfd6:	bf00      	nop
 801bfd8:	08030540 	.word	0x08030540
 801bfdc:	08030554 	.word	0x08030554

0801bfe0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801bfe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bfe2:	4604      	mov	r4, r0
 801bfe4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801bfe8:	3201      	adds	r2, #1
 801bfea:	d112      	bne.n	801c012 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801bfec:	2500      	movs	r5, #0
 801bfee:	9500      	str	r5, [sp, #0]
 801bff0:	466d      	mov	r5, sp
 801bff2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801bff6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bffa:	6803      	ldr	r3, [r0, #0]
 801bffc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c000:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c004:	4629      	mov	r1, r5
 801c006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c008:	4798      	blx	r3
 801c00a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c00e:	e884 0003 	stmia.w	r4, {r0, r1}
 801c012:	4620      	mov	r0, r4
 801c014:	b003      	add	sp, #12
 801c016:	bd30      	pop	{r4, r5, pc}

0801c018 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c018:	b513      	push	{r0, r1, r4, lr}
 801c01a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c01e:	4604      	mov	r4, r0
 801c020:	3301      	adds	r3, #1
 801c022:	d109      	bne.n	801c038 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c024:	4601      	mov	r1, r0
 801c026:	4668      	mov	r0, sp
 801c028:	f7ff fd4c 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c02c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c030:	8423      	strh	r3, [r4, #32]
 801c032:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c036:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c038:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c03c:	b002      	add	sp, #8
 801c03e:	bd10      	pop	{r4, pc}

0801c040 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c040:	b513      	push	{r0, r1, r4, lr}
 801c042:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801c046:	4604      	mov	r4, r0
 801c048:	3301      	adds	r3, #1
 801c04a:	d109      	bne.n	801c060 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c04c:	4601      	mov	r1, r0
 801c04e:	4668      	mov	r0, sp
 801c050:	f7ff fd38 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c054:	f8bd 3000 	ldrh.w	r3, [sp]
 801c058:	8423      	strh	r3, [r4, #32]
 801c05a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c05e:	8463      	strh	r3, [r4, #34]	@ 0x22
 801c060:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 801c064:	b002      	add	sp, #8
 801c066:	bd10      	pop	{r4, pc}

0801c068 <_ZN8touchgfx6ScreenC1Ev>:
 801c068:	b570      	push	{r4, r5, r6, lr}
 801c06a:	4605      	mov	r5, r0
 801c06c:	4b16      	ldr	r3, [pc, #88]	@ (801c0c8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c06e:	2101      	movs	r1, #1
 801c070:	f845 3b04 	str.w	r3, [r5], #4
 801c074:	2300      	movs	r3, #0
 801c076:	4604      	mov	r4, r0
 801c078:	8103      	strh	r3, [r0, #8]
 801c07a:	8143      	strh	r3, [r0, #10]
 801c07c:	8183      	strh	r3, [r0, #12]
 801c07e:	81c3      	strh	r3, [r0, #14]
 801c080:	8203      	strh	r3, [r0, #16]
 801c082:	8243      	strh	r3, [r0, #18]
 801c084:	8283      	strh	r3, [r0, #20]
 801c086:	82c3      	strh	r3, [r0, #22]
 801c088:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c08c:	6203      	str	r3, [r0, #32]
 801c08e:	8483      	strh	r3, [r0, #36]	@ 0x24
 801c090:	84c3      	strh	r3, [r0, #38]	@ 0x26
 801c092:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801c096:	4a0d      	ldr	r2, [pc, #52]	@ (801c0cc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c098:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801c09c:	6343      	str	r3, [r0, #52]	@ 0x34
 801c09e:	4b0c      	ldr	r3, [pc, #48]	@ (801c0d0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c0a0:	6042      	str	r2, [r0, #4]
 801c0a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c0a6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801c0a8:	4a0a      	ldr	r2, [pc, #40]	@ (801c0d4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c0aa:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801c0ae:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801c0b2:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c0b6:	4628      	mov	r0, r5
 801c0b8:	4798      	blx	r3
 801c0ba:	6863      	ldr	r3, [r4, #4]
 801c0bc:	4628      	mov	r0, r5
 801c0be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c0c0:	4631      	mov	r1, r6
 801c0c2:	4798      	blx	r3
 801c0c4:	4620      	mov	r0, r4
 801c0c6:	bd70      	pop	{r4, r5, r6, pc}
 801c0c8:	0803057c 	.word	0x0803057c
 801c0cc:	0802fa00 	.word	0x0802fa00
 801c0d0:	200120fa 	.word	0x200120fa
 801c0d4:	200120f8 	.word	0x200120f8

0801c0d8 <_ZN8touchgfx6Screen4drawEv>:
 801c0d8:	b507      	push	{r0, r1, r2, lr}
 801c0da:	2100      	movs	r1, #0
 801c0dc:	4b08      	ldr	r3, [pc, #32]	@ (801c100 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c0de:	9100      	str	r1, [sp, #0]
 801c0e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c0e4:	4b07      	ldr	r3, [pc, #28]	@ (801c104 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c0e6:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c0ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c0ee:	4669      	mov	r1, sp
 801c0f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c0f4:	6803      	ldr	r3, [r0, #0]
 801c0f6:	689b      	ldr	r3, [r3, #8]
 801c0f8:	4798      	blx	r3
 801c0fa:	b003      	add	sp, #12
 801c0fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801c100:	200120f8 	.word	0x200120f8
 801c104:	200120fa 	.word	0x200120fa

0801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c10c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c110:	b089      	sub	sp, #36	@ 0x24
 801c112:	2b00      	cmp	r3, #0
 801c114:	4680      	mov	r8, r0
 801c116:	460c      	mov	r4, r1
 801c118:	4615      	mov	r5, r2
 801c11a:	dd0e      	ble.n	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c11c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c120:	2b00      	cmp	r3, #0
 801c122:	dd0a      	ble.n	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c124:	4628      	mov	r0, r5
 801c126:	f7ff ff5b 	bl	801bfe0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c12a:	4621      	mov	r1, r4
 801c12c:	f7fe fb20 	bl	801a770 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c130:	69eb      	ldr	r3, [r5, #28]
 801c132:	b928      	cbnz	r0, 801c140 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c134:	461d      	mov	r5, r3
 801c136:	2b00      	cmp	r3, #0
 801c138:	d1f4      	bne.n	801c124 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c13a:	b009      	add	sp, #36	@ 0x24
 801c13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c140:	ae04      	add	r6, sp, #16
 801c142:	2b00      	cmp	r3, #0
 801c144:	f000 80b5 	beq.w	801c2b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c148:	682b      	ldr	r3, [r5, #0]
 801c14a:	4629      	mov	r1, r5
 801c14c:	68db      	ldr	r3, [r3, #12]
 801c14e:	a802      	add	r0, sp, #8
 801c150:	4798      	blx	r3
 801c152:	4628      	mov	r0, r5
 801c154:	f7ff ff60 	bl	801c018 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c158:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c15c:	4407      	add	r7, r0
 801c15e:	4628      	mov	r0, r5
 801c160:	f7ff ff6e 	bl	801c040 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c164:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c168:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c16c:	4418      	add	r0, r3
 801c16e:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c172:	4621      	mov	r1, r4
 801c174:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c178:	b23f      	sxth	r7, r7
 801c17a:	4630      	mov	r0, r6
 801c17c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c180:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c184:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c188:	f7f9 fa12 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801c18c:	4628      	mov	r0, r5
 801c18e:	f7ff ff27 	bl	801bfe0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c192:	4602      	mov	r2, r0
 801c194:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c198:	ab06      	add	r3, sp, #24
 801c19a:	e883 0003 	stmia.w	r3, {r0, r1}
 801c19e:	4611      	mov	r1, r2
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	f7f9 fa05 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801c1a6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c1aa:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c1ae:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c1b2:	4299      	cmp	r1, r3
 801c1b4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c1b8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c1bc:	d10b      	bne.n	801c1d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c1be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c1c2:	4552      	cmp	r2, sl
 801c1c4:	d107      	bne.n	801c1d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c1c6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c1ca:	455a      	cmp	r2, fp
 801c1cc:	d103      	bne.n	801c1d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c1ce:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c1d2:	454a      	cmp	r2, r9
 801c1d4:	d06d      	beq.n	801c2b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c1d6:	f1bb 0f00 	cmp.w	fp, #0
 801c1da:	dd65      	ble.n	801c2a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c1dc:	f1b9 0f00 	cmp.w	r9, #0
 801c1e0:	dd62      	ble.n	801c2a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c1e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c1e6:	fa1f f08a 	uxth.w	r0, sl
 801c1ea:	4552      	cmp	r2, sl
 801c1ec:	9000      	str	r0, [sp, #0]
 801c1ee:	da12      	bge.n	801c216 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c1f0:	9301      	str	r3, [sp, #4]
 801c1f2:	9b00      	ldr	r3, [sp, #0]
 801c1f4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c1f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c1fc:	1a9a      	subs	r2, r3, r2
 801c1fe:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c202:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c206:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c20a:	69ea      	ldr	r2, [r5, #28]
 801c20c:	4631      	mov	r1, r6
 801c20e:	4640      	mov	r0, r8
 801c210:	f7ff ff7a 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c214:	9b01      	ldr	r3, [sp, #4]
 801c216:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c21a:	b29f      	uxth	r7, r3
 801c21c:	429a      	cmp	r2, r3
 801c21e:	da0d      	bge.n	801c23c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c220:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c224:	1aba      	subs	r2, r7, r2
 801c226:	f8ad a012 	strh.w	sl, [sp, #18]
 801c22a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c22e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c232:	69ea      	ldr	r2, [r5, #28]
 801c234:	4631      	mov	r1, r6
 801c236:	4640      	mov	r0, r8
 801c238:	f7ff ff66 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c23c:	8822      	ldrh	r2, [r4, #0]
 801c23e:	88a3      	ldrh	r3, [r4, #4]
 801c240:	445f      	add	r7, fp
 801c242:	4413      	add	r3, r2
 801c244:	b29b      	uxth	r3, r3
 801c246:	b2bf      	uxth	r7, r7
 801c248:	b23a      	sxth	r2, r7
 801c24a:	b219      	sxth	r1, r3
 801c24c:	4291      	cmp	r1, r2
 801c24e:	dd0d      	ble.n	801c26c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c250:	1bdb      	subs	r3, r3, r7
 801c252:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c256:	f8ad a012 	strh.w	sl, [sp, #18]
 801c25a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c25e:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c262:	69ea      	ldr	r2, [r5, #28]
 801c264:	4631      	mov	r1, r6
 801c266:	4640      	mov	r0, r8
 801c268:	f7ff ff4e 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c26c:	88e2      	ldrh	r2, [r4, #6]
 801c26e:	8863      	ldrh	r3, [r4, #2]
 801c270:	4413      	add	r3, r2
 801c272:	9a00      	ldr	r2, [sp, #0]
 801c274:	b29b      	uxth	r3, r3
 801c276:	444a      	add	r2, r9
 801c278:	fa1f f982 	uxth.w	r9, r2
 801c27c:	fa0f f289 	sxth.w	r2, r9
 801c280:	b219      	sxth	r1, r3
 801c282:	428a      	cmp	r2, r1
 801c284:	da15      	bge.n	801c2b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c286:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c28a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c28e:	eba3 0309 	sub.w	r3, r3, r9
 801c292:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c296:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c29a:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c29e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c2a2:	69ea      	ldr	r2, [r5, #28]
 801c2a4:	4631      	mov	r1, r6
 801c2a6:	e001      	b.n	801c2ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c2a8:	4621      	mov	r1, r4
 801c2aa:	69ea      	ldr	r2, [r5, #28]
 801c2ac:	4640      	mov	r0, r8
 801c2ae:	f7ff ff2b 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	f7ff fe94 	bl	801bfe0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c2b8:	4633      	mov	r3, r6
 801c2ba:	4602      	mov	r2, r0
 801c2bc:	6861      	ldr	r1, [r4, #4]
 801c2be:	6820      	ldr	r0, [r4, #0]
 801c2c0:	c303      	stmia	r3!, {r0, r1}
 801c2c2:	4611      	mov	r1, r2
 801c2c4:	4630      	mov	r0, r6
 801c2c6:	f7f9 f973 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801c2ca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	f77f af33 	ble.w	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c2d4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	f77f af2e 	ble.w	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c2de:	4628      	mov	r0, r5
 801c2e0:	f7ff fe9a 	bl	801c018 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c2e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c2e8:	1a18      	subs	r0, r3, r0
 801c2ea:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c2ee:	4628      	mov	r0, r5
 801c2f0:	f7ff fea6 	bl	801c040 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c2f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c2f8:	4631      	mov	r1, r6
 801c2fa:	1a18      	subs	r0, r3, r0
 801c2fc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c300:	682b      	ldr	r3, [r5, #0]
 801c302:	4628      	mov	r0, r5
 801c304:	689b      	ldr	r3, [r3, #8]
 801c306:	4798      	blx	r3
 801c308:	e717      	b.n	801c13a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c30a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c30a:	b570      	push	{r4, r5, r6, lr}
 801c30c:	2300      	movs	r3, #0
 801c30e:	460c      	mov	r4, r1
 801c310:	b086      	sub	sp, #24
 801c312:	1d06      	adds	r6, r0, #4
 801c314:	4631      	mov	r1, r6
 801c316:	4605      	mov	r5, r0
 801c318:	a802      	add	r0, sp, #8
 801c31a:	9301      	str	r3, [sp, #4]
 801c31c:	f7ff fbd2 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c320:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c324:	8822      	ldrh	r2, [r4, #0]
 801c326:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801c32a:	1ad2      	subs	r2, r2, r3
 801c32c:	8863      	ldrh	r3, [r4, #2]
 801c32e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c332:	1a5b      	subs	r3, r3, r1
 801c334:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c338:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c33c:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c340:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c344:	aa01      	add	r2, sp, #4
 801c346:	a904      	add	r1, sp, #16
 801c348:	4630      	mov	r0, r6
 801c34a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c34e:	f7f9 fa07 	bl	8015760 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c352:	9a01      	ldr	r2, [sp, #4]
 801c354:	b11a      	cbz	r2, 801c35e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801c356:	4621      	mov	r1, r4
 801c358:	4628      	mov	r0, r5
 801c35a:	f7ff fed5 	bl	801c108 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c35e:	b006      	add	sp, #24
 801c360:	bd70      	pop	{r4, r5, r6, pc}

0801c362 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c362:	b530      	push	{r4, r5, lr}
 801c364:	4602      	mov	r2, r0
 801c366:	b085      	sub	sp, #20
 801c368:	460d      	mov	r5, r1
 801c36a:	466b      	mov	r3, sp
 801c36c:	4604      	mov	r4, r0
 801c36e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c372:	6851      	ldr	r1, [r2, #4]
 801c374:	c303      	stmia	r3!, {r0, r1}
 801c376:	4629      	mov	r1, r5
 801c378:	4668      	mov	r0, sp
 801c37a:	f7f9 f919 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 801c37e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801c382:	b12b      	cbz	r3, 801c390 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801c384:	4669      	mov	r1, sp
 801c386:	4620      	mov	r0, r4
 801c388:	f7ff ffbf 	bl	801c30a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c38c:	b005      	add	sp, #20
 801c38e:	bd30      	pop	{r4, r5, pc}
 801c390:	3404      	adds	r4, #4
 801c392:	4621      	mov	r1, r4
 801c394:	a802      	add	r0, sp, #8
 801c396:	f7ff fb95 	bl	801bac4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c39a:	f8bd 3000 	ldrh.w	r3, [sp]
 801c39e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c3a2:	4669      	mov	r1, sp
 801c3a4:	1a9b      	subs	r3, r3, r2
 801c3a6:	f8ad 3000 	strh.w	r3, [sp]
 801c3aa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c3ae:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c3b2:	4620      	mov	r0, r4
 801c3b4:	1a9b      	subs	r3, r3, r2
 801c3b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c3ba:	f7f9 f998 	bl	80156ee <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c3be:	e7e5      	b.n	801c38c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801c3c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c3c0:	460b      	mov	r3, r1
 801c3c2:	680a      	ldr	r2, [r1, #0]
 801c3c4:	1d01      	adds	r1, r0, #4
 801c3c6:	6992      	ldr	r2, [r2, #24]
 801c3c8:	4618      	mov	r0, r3
 801c3ca:	4710      	bx	r2

0801c3cc <_ZN8touchgfx12TextProviderC1Ev>:
 801c3cc:	b538      	push	{r3, r4, r5, lr}
 801c3ce:	2500      	movs	r5, #0
 801c3d0:	2302      	movs	r3, #2
 801c3d2:	4604      	mov	r4, r0
 801c3d4:	e9c0 5500 	strd	r5, r5, [r0]
 801c3d8:	7403      	strb	r3, [r0, #16]
 801c3da:	6145      	str	r5, [r0, #20]
 801c3dc:	7605      	strb	r5, [r0, #24]
 801c3de:	83c5      	strh	r5, [r0, #30]
 801c3e0:	8405      	strh	r5, [r0, #32]
 801c3e2:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801c3e4:	8705      	strh	r5, [r0, #56]	@ 0x38
 801c3e6:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 801c3e8:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801c3ec:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801c3f0:	220e      	movs	r2, #14
 801c3f2:	4629      	mov	r1, r5
 801c3f4:	304c      	adds	r0, #76	@ 0x4c
 801c3f6:	f010 fb78 	bl	802caea <memset>
 801c3fa:	2301      	movs	r3, #1
 801c3fc:	4620      	mov	r0, r4
 801c3fe:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801c402:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c406:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801c40a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801c40e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801c412:	f7f6 fb6d 	bl	8012af0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c416:	4620      	mov	r0, r4
 801c418:	bd38      	pop	{r3, r4, r5, pc}

0801c41a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801c41a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801c41c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c420:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 801c422:	fab0 f080 	clz	r0, r0
 801c426:	0940      	lsrs	r0, r0, #5
 801c428:	4770      	bx	lr

0801c42a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c42a:	b530      	push	{r4, r5, lr}
 801c42c:	2500      	movs	r5, #0
 801c42e:	2401      	movs	r4, #1
 801c430:	6843      	ldr	r3, [r0, #4]
 801c432:	b913      	cbnz	r3, 801c43a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c434:	6803      	ldr	r3, [r0, #0]
 801c436:	b313      	cbz	r3, 801c47e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c438:	6043      	str	r3, [r0, #4]
 801c43a:	7e03      	ldrb	r3, [r0, #24]
 801c43c:	b143      	cbz	r3, 801c450 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c43e:	6943      	ldr	r3, [r0, #20]
 801c440:	b12b      	cbz	r3, 801c44e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c442:	881a      	ldrh	r2, [r3, #0]
 801c444:	b11a      	cbz	r2, 801c44e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c446:	1c9a      	adds	r2, r3, #2
 801c448:	6142      	str	r2, [r0, #20]
 801c44a:	8818      	ldrh	r0, [r3, #0]
 801c44c:	bd30      	pop	{r4, r5, pc}
 801c44e:	7605      	strb	r5, [r0, #24]
 801c450:	6843      	ldr	r3, [r0, #4]
 801c452:	8819      	ldrh	r1, [r3, #0]
 801c454:	b199      	cbz	r1, 801c47e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c456:	1c9a      	adds	r2, r3, #2
 801c458:	2902      	cmp	r1, #2
 801c45a:	6042      	str	r2, [r0, #4]
 801c45c:	d1f5      	bne.n	801c44a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c45e:	7c03      	ldrb	r3, [r0, #16]
 801c460:	2b01      	cmp	r3, #1
 801c462:	d8e5      	bhi.n	801c430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c464:	1c5a      	adds	r2, r3, #1
 801c466:	7402      	strb	r2, [r0, #16]
 801c468:	3302      	adds	r3, #2
 801c46a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801c46e:	6143      	str	r3, [r0, #20]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d0dd      	beq.n	801c430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c474:	881b      	ldrh	r3, [r3, #0]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d0da      	beq.n	801c430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c47a:	7604      	strb	r4, [r0, #24]
 801c47c:	e7d8      	b.n	801c430 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c47e:	2000      	movs	r0, #0
 801c480:	e7e4      	b.n	801c44c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c482:	6001      	str	r1, [r0, #0]
 801c484:	2100      	movs	r1, #0
 801c486:	b430      	push	{r4, r5}
 801c488:	6041      	str	r1, [r0, #4]
 801c48a:	6815      	ldr	r5, [r2, #0]
 801c48c:	6085      	str	r5, [r0, #8]
 801c48e:	6852      	ldr	r2, [r2, #4]
 801c490:	6443      	str	r3, [r0, #68]	@ 0x44
 801c492:	9b02      	ldr	r3, [sp, #8]
 801c494:	60c2      	str	r2, [r0, #12]
 801c496:	7401      	strb	r1, [r0, #16]
 801c498:	6141      	str	r1, [r0, #20]
 801c49a:	7601      	strb	r1, [r0, #24]
 801c49c:	8701      	strh	r1, [r0, #56]	@ 0x38
 801c49e:	8401      	strh	r1, [r0, #32]
 801c4a0:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 801c4a4:	6483      	str	r3, [r0, #72]	@ 0x48
 801c4a6:	bc30      	pop	{r4, r5}
 801c4a8:	f7f6 bb22 	b.w	8012af0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c4ac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801c4ac:	b408      	push	{r3}
 801c4ae:	b510      	push	{r4, lr}
 801c4b0:	b085      	sub	sp, #20
 801c4b2:	ac07      	add	r4, sp, #28
 801c4b4:	f854 3b04 	ldr.w	r3, [r4], #4
 801c4b8:	9300      	str	r3, [sp, #0]
 801c4ba:	4613      	mov	r3, r2
 801c4bc:	4622      	mov	r2, r4
 801c4be:	9403      	str	r4, [sp, #12]
 801c4c0:	f7ff ffdf 	bl	801c482 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801c4c4:	b005      	add	sp, #20
 801c4c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4ca:	b001      	add	sp, #4
 801c4cc:	4770      	bx	lr

0801c4ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801c4ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c4d0:	4605      	mov	r5, r0
 801c4d2:	4608      	mov	r0, r1
 801c4d4:	b1e9      	cbz	r1, 801c512 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 801c4d6:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 801c4da:	460b      	mov	r3, r1
 801c4dc:	4622      	mov	r2, r4
 801c4de:	f101 0708 	add.w	r7, r1, #8
 801c4e2:	4626      	mov	r6, r4
 801c4e4:	6818      	ldr	r0, [r3, #0]
 801c4e6:	6859      	ldr	r1, [r3, #4]
 801c4e8:	3308      	adds	r3, #8
 801c4ea:	c603      	stmia	r6!, {r0, r1}
 801c4ec:	42bb      	cmp	r3, r7
 801c4ee:	4634      	mov	r4, r6
 801c4f0:	d1f7      	bne.n	801c4e2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801c4f2:	6818      	ldr	r0, [r3, #0]
 801c4f4:	6030      	str	r0, [r6, #0]
 801c4f6:	4610      	mov	r0, r2
 801c4f8:	889b      	ldrh	r3, [r3, #4]
 801c4fa:	80b3      	strh	r3, [r6, #4]
 801c4fc:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801c500:	015b      	lsls	r3, r3, #5
 801c502:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c506:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 801c50a:	430b      	orrs	r3, r1
 801c50c:	425b      	negs	r3, r3
 801c50e:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801c512:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c514 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801c514:	b538      	push	{r3, r4, r5, lr}
 801c516:	460c      	mov	r4, r1
 801c518:	6811      	ldr	r1, [r2, #0]
 801c51a:	4610      	mov	r0, r2
 801c51c:	68cd      	ldr	r5, [r1, #12]
 801c51e:	4619      	mov	r1, r3
 801c520:	47a8      	blx	r5
 801c522:	2800      	cmp	r0, #0
 801c524:	bf08      	it	eq
 801c526:	4620      	moveq	r0, r4
 801c528:	bd38      	pop	{r3, r4, r5, pc}
	...

0801c52c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801c52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c530:	468c      	mov	ip, r1
 801c532:	4605      	mov	r5, r0
 801c534:	4614      	mov	r4, r2
 801c536:	b942      	cbnz	r2, 801c54a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 801c538:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801c53c:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801c540:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801c544:	4620      	mov	r0, r4
 801c546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c54a:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801c54e:	7b50      	ldrb	r0, [r2, #13]
 801c550:	8893      	ldrh	r3, [r2, #4]
 801c552:	0106      	lsls	r6, r0, #4
 801c554:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801c558:	79e6      	ldrb	r6, [r4, #7]
 801c55a:	4316      	orrs	r6, r2
 801c55c:	185a      	adds	r2, r3, r1
 801c55e:	b291      	uxth	r1, r2
 801c560:	291d      	cmp	r1, #29
 801c562:	b2b7      	uxth	r7, r6
 801c564:	d87d      	bhi.n	801c662 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801c566:	2201      	movs	r2, #1
 801c568:	408a      	lsls	r2, r1
 801c56a:	498a      	ldr	r1, [pc, #552]	@ (801c794 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x268>)
 801c56c:	10f6      	asrs	r6, r6, #3
 801c56e:	420a      	tst	r2, r1
 801c570:	d12d      	bne.n	801c5ce <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801c572:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801c576:	d074      	beq.n	801c662 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x136>
 801c578:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801c57c:	4623      	mov	r3, r4
 801c57e:	f104 0e08 	add.w	lr, r4, #8
 801c582:	4614      	mov	r4, r2
 801c584:	4694      	mov	ip, r2
 801c586:	6818      	ldr	r0, [r3, #0]
 801c588:	6859      	ldr	r1, [r3, #4]
 801c58a:	3308      	adds	r3, #8
 801c58c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801c590:	4573      	cmp	r3, lr
 801c592:	4662      	mov	r2, ip
 801c594:	d1f6      	bne.n	801c584 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801c596:	6818      	ldr	r0, [r3, #0]
 801c598:	f8cc 0000 	str.w	r0, [ip]
 801c59c:	889b      	ldrh	r3, [r3, #4]
 801c59e:	f8ac 3004 	strh.w	r3, [ip, #4]
 801c5a2:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801c5a6:	b2b3      	uxth	r3, r6
 801c5a8:	1aca      	subs	r2, r1, r3
 801c5aa:	b292      	uxth	r2, r2
 801c5ac:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801c5b0:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801c5b4:	10d2      	asrs	r2, r2, #3
 801c5b6:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 801c5ba:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 801c5be:	4302      	orrs	r2, r0
 801c5c0:	1bcf      	subs	r7, r1, r7
 801c5c2:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 801c5c6:	1afb      	subs	r3, r7, r3
 801c5c8:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 801c5cc:	e7ba      	b.n	801c544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801c5ce:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801c5d2:	4623      	mov	r3, r4
 801c5d4:	f104 0808 	add.w	r8, r4, #8
 801c5d8:	4614      	mov	r4, r2
 801c5da:	4696      	mov	lr, r2
 801c5dc:	6818      	ldr	r0, [r3, #0]
 801c5de:	6859      	ldr	r1, [r3, #4]
 801c5e0:	3308      	adds	r3, #8
 801c5e2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c5e6:	4543      	cmp	r3, r8
 801c5e8:	4672      	mov	r2, lr
 801c5ea:	d1f6      	bne.n	801c5da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xae>
 801c5ec:	6818      	ldr	r0, [r3, #0]
 801c5ee:	f8ce 0000 	str.w	r0, [lr]
 801c5f2:	889b      	ldrh	r3, [r3, #4]
 801c5f4:	f8ae 3004 	strh.w	r3, [lr, #4]
 801c5f8:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 801c5fa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801c5fe:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801c600:	f640 6333 	movw	r3, #3635	@ 0xe33
 801c604:	4299      	cmp	r1, r3
 801c606:	d111      	bne.n	801c62c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x100>
 801c608:	f8dc 3000 	ldr.w	r3, [ip]
 801c60c:	4660      	mov	r0, ip
 801c60e:	68db      	ldr	r3, [r3, #12]
 801c610:	4798      	blx	r3
 801c612:	7b41      	ldrb	r1, [r0, #13]
 801c614:	00cb      	lsls	r3, r1, #3
 801c616:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c61a:	7a03      	ldrb	r3, [r0, #8]
 801c61c:	4313      	orrs	r3, r2
 801c61e:	064a      	lsls	r2, r1, #25
 801c620:	bf44      	itt	mi
 801c622:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c626:	b21b      	sxthmi	r3, r3
 801c628:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801c62c:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801c630:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 801c634:	443b      	add	r3, r7
 801c636:	4433      	add	r3, r6
 801c638:	b29b      	uxth	r3, r3
 801c63a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801c63e:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801c642:	10db      	asrs	r3, r3, #3
 801c644:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801c648:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801c64c:	4313      	orrs	r3, r2
 801c64e:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801c652:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801c656:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801c65a:	1a9b      	subs	r3, r3, r2
 801c65c:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801c660:	e770      	b.n	801c544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801c662:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801c666:	f023 0204 	bic.w	r2, r3, #4
 801c66a:	428a      	cmp	r2, r1
 801c66c:	d003      	beq.n	801c676 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14a>
 801c66e:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801c672:	4293      	cmp	r3, r2
 801c674:	d137      	bne.n	801c6e6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801c676:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801c67a:	4622      	mov	r2, r4
 801c67c:	f104 0808 	add.w	r8, r4, #8
 801c680:	4634      	mov	r4, r6
 801c682:	46b6      	mov	lr, r6
 801c684:	6810      	ldr	r0, [r2, #0]
 801c686:	6851      	ldr	r1, [r2, #4]
 801c688:	3208      	adds	r2, #8
 801c68a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c68e:	4542      	cmp	r2, r8
 801c690:	4676      	mov	r6, lr
 801c692:	d1f6      	bne.n	801c682 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x156>
 801c694:	6810      	ldr	r0, [r2, #0]
 801c696:	3b01      	subs	r3, #1
 801c698:	f8ce 0000 	str.w	r0, [lr]
 801c69c:	8892      	ldrh	r2, [r2, #4]
 801c69e:	b29b      	uxth	r3, r3
 801c6a0:	f8ae 2004 	strh.w	r2, [lr, #4]
 801c6a4:	4621      	mov	r1, r4
 801c6a6:	4662      	mov	r2, ip
 801c6a8:	4628      	mov	r0, r5
 801c6aa:	f7ff ff33 	bl	801c514 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c6ae:	7b41      	ldrb	r1, [r0, #13]
 801c6b0:	00cb      	lsls	r3, r1, #3
 801c6b2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c6b6:	7a03      	ldrb	r3, [r0, #8]
 801c6b8:	0648      	lsls	r0, r1, #25
 801c6ba:	ea43 0302 	orr.w	r3, r3, r2
 801c6be:	bf44      	itt	mi
 801c6c0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c6c4:	b21b      	sxthmi	r3, r3
 801c6c6:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801c6ca:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 801c6ce:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 801c6d2:	005b      	lsls	r3, r3, #1
 801c6d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c6d8:	4313      	orrs	r3, r2
 801c6da:	115a      	asrs	r2, r3, #5
 801c6dc:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801c6e0:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 801c6e4:	e046      	b.n	801c774 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x248>
 801c6e6:	00c2      	lsls	r2, r0, #3
 801c6e8:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801c6ec:	7a22      	ldrb	r2, [r4, #8]
 801c6ee:	430a      	orrs	r2, r1
 801c6f0:	0641      	lsls	r1, r0, #25
 801c6f2:	f640 6109 	movw	r1, #3593	@ 0xe09
 801c6f6:	bf44      	itt	mi
 801c6f8:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801c6fc:	b212      	sxthmi	r2, r2
 801c6fe:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801c702:	f023 0210 	bic.w	r2, r3, #16
 801c706:	428a      	cmp	r2, r1
 801c708:	d003      	beq.n	801c712 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e6>
 801c70a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801c70e:	4293      	cmp	r3, r2
 801c710:	d13d      	bne.n	801c78e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x262>
 801c712:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801c716:	4696      	mov	lr, r2
 801c718:	f104 0808 	add.w	r8, r4, #8
 801c71c:	4616      	mov	r6, r2
 801c71e:	6820      	ldr	r0, [r4, #0]
 801c720:	6861      	ldr	r1, [r4, #4]
 801c722:	3408      	adds	r4, #8
 801c724:	c603      	stmia	r6!, {r0, r1}
 801c726:	4544      	cmp	r4, r8
 801c728:	4632      	mov	r2, r6
 801c72a:	d1f7      	bne.n	801c71c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f0>
 801c72c:	6820      	ldr	r0, [r4, #0]
 801c72e:	6030      	str	r0, [r6, #0]
 801c730:	88a1      	ldrh	r1, [r4, #4]
 801c732:	4628      	mov	r0, r5
 801c734:	80b1      	strh	r1, [r6, #4]
 801c736:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801c73a:	4671      	mov	r1, lr
 801c73c:	0076      	lsls	r6, r6, #1
 801c73e:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801c742:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801c746:	4674      	mov	r4, lr
 801c748:	4316      	orrs	r6, r2
 801c74a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801c74e:	4293      	cmp	r3, r2
 801c750:	bf1a      	itte	ne
 801c752:	f103 33ff 	addne.w	r3, r3, #4294967295
 801c756:	b29b      	uxthne	r3, r3
 801c758:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801c75c:	4662      	mov	r2, ip
 801c75e:	f7ff fed9 	bl	801c514 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801c762:	7b43      	ldrb	r3, [r0, #13]
 801c764:	7a82      	ldrb	r2, [r0, #10]
 801c766:	005b      	lsls	r3, r3, #1
 801c768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c76c:	4313      	orrs	r3, r2
 801c76e:	1af6      	subs	r6, r6, r3
 801c770:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801c774:	7b61      	ldrb	r1, [r4, #13]
 801c776:	00cb      	lsls	r3, r1, #3
 801c778:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c77c:	7a23      	ldrb	r3, [r4, #8]
 801c77e:	4313      	orrs	r3, r2
 801c780:	064a      	lsls	r2, r1, #25
 801c782:	bf44      	itt	mi
 801c784:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c788:	b21b      	sxthmi	r3, r3
 801c78a:	1bdb      	subs	r3, r3, r7
 801c78c:	e71c      	b.n	801c5c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 801c78e:	2300      	movs	r3, #0
 801c790:	e7a6      	b.n	801c6e0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b4>
 801c792:	bf00      	nop
 801c794:	3fc00079 	.word	0x3fc00079

0801c798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801c798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c79c:	4604      	mov	r4, r0
 801c79e:	b942      	cbnz	r2, 801c7b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801c7a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801c7a4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801c7a8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 801c7ac:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 801c7b0:	e047      	b.n	801c842 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801c7b2:	7b51      	ldrb	r1, [r2, #13]
 801c7b4:	8893      	ldrh	r3, [r2, #4]
 801c7b6:	010d      	lsls	r5, r1, #4
 801c7b8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 801c7bc:	79d5      	ldrb	r5, [r2, #7]
 801c7be:	4305      	orrs	r5, r0
 801c7c0:	2d04      	cmp	r5, #4
 801c7c2:	bfcc      	ite	gt
 801c7c4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801c7c8:	f04f 0e01 	movle.w	lr, #1
 801c7cc:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 801c7d0:	f200 80ab 	bhi.w	801c92a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801c7d4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801c7d8:	4283      	cmp	r3, r0
 801c7da:	d216      	bcs.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c7dc:	f240 605b 	movw	r0, #1627	@ 0x65b
 801c7e0:	4283      	cmp	r3, r0
 801c7e2:	d859      	bhi.n	801c898 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801c7e4:	f240 6057 	movw	r0, #1623	@ 0x657
 801c7e8:	4283      	cmp	r3, r0
 801c7ea:	d20e      	bcs.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c7ec:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801c7f0:	d24a      	bcs.n	801c888 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801c7f2:	f240 604e 	movw	r0, #1614	@ 0x64e
 801c7f6:	4283      	cmp	r3, r0
 801c7f8:	d207      	bcs.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c7fa:	f240 601a 	movw	r0, #1562	@ 0x61a
 801c7fe:	4283      	cmp	r3, r0
 801c800:	d02a      	beq.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c802:	d821      	bhi.n	801c848 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801c804:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801c808:	d35b      	bcc.n	801c8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c80a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801c80e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c812:	f040 80d0 	bne.w	801c9b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c816:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801c81a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c81e:	f040 80ca 	bne.w	801c9b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801c822:	00cb      	lsls	r3, r1, #3
 801c824:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c828:	7a13      	ldrb	r3, [r2, #8]
 801c82a:	0649      	lsls	r1, r1, #25
 801c82c:	ea43 0300 	orr.w	r3, r3, r0
 801c830:	bf44      	itt	mi
 801c832:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c836:	b21b      	sxthmi	r3, r3
 801c838:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c83c:	1b5d      	subs	r5, r3, r5
 801c83e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c842:	4610      	mov	r0, r2
 801c844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c848:	f240 604b 	movw	r0, #1611	@ 0x64b
 801c84c:	4283      	cmp	r3, r0
 801c84e:	d338      	bcc.n	801c8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c850:	f240 604c 	movw	r0, #1612	@ 0x64c
 801c854:	4283      	cmp	r3, r0
 801c856:	d9d8      	bls.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c858:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801c85c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 801c860:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c864:	f040 80f2 	bne.w	801ca4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801c868:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801c86c:	f040 80ee 	bne.w	801ca4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801c870:	00cb      	lsls	r3, r1, #3
 801c872:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c876:	7a13      	ldrb	r3, [r2, #8]
 801c878:	064e      	lsls	r6, r1, #25
 801c87a:	ea43 0300 	orr.w	r3, r3, r0
 801c87e:	bf44      	itt	mi
 801c880:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c884:	b21b      	sxthmi	r3, r3
 801c886:	e7d9      	b.n	801c83c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801c888:	f240 6054 	movw	r0, #1620	@ 0x654
 801c88c:	4283      	cmp	r3, r0
 801c88e:	d8e3      	bhi.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c890:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801c894:	d9e0      	bls.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c896:	e7b8      	b.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c898:	f240 6074 	movw	r0, #1652	@ 0x674
 801c89c:	4283      	cmp	r3, r0
 801c89e:	d0b4      	beq.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8a0:	d82d      	bhi.n	801c8fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801c8a2:	f240 605e 	movw	r0, #1630	@ 0x65e
 801c8a6:	4283      	cmp	r3, r0
 801c8a8:	d804      	bhi.n	801c8b4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801c8aa:	f240 605d 	movw	r0, #1629	@ 0x65d
 801c8ae:	4283      	cmp	r3, r0
 801c8b0:	d3d2      	bcc.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c8b2:	e7aa      	b.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8b4:	f240 605f 	movw	r0, #1631	@ 0x65f
 801c8b8:	4283      	cmp	r3, r0
 801c8ba:	d0cd      	beq.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c8bc:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 801c8c0:	d0a3      	beq.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c8c2:	00cb      	lsls	r3, r1, #3
 801c8c4:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801c8c8:	7a13      	ldrb	r3, [r2, #8]
 801c8ca:	0649      	lsls	r1, r1, #25
 801c8cc:	ea43 0300 	orr.w	r3, r3, r0
 801c8d0:	bf44      	itt	mi
 801c8d2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801c8d6:	b21b      	sxthmi	r3, r3
 801c8d8:	1b5d      	subs	r5, r3, r5
 801c8da:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801c8de:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801c8e2:	7b53      	ldrb	r3, [r2, #13]
 801c8e4:	015b      	lsls	r3, r3, #5
 801c8e6:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801c8ea:	7993      	ldrb	r3, [r2, #6]
 801c8ec:	430b      	orrs	r3, r1
 801c8ee:	2105      	movs	r1, #5
 801c8f0:	005b      	lsls	r3, r3, #1
 801c8f2:	fb93 f3f1 	sdiv	r3, r3, r1
 801c8f6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801c8fa:	440b      	add	r3, r1
 801c8fc:	e756      	b.n	801c7ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801c8fe:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 801c902:	4283      	cmp	r3, r0
 801c904:	d809      	bhi.n	801c91a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801c906:	f240 60df 	movw	r0, #1759	@ 0x6df
 801c90a:	4283      	cmp	r3, r0
 801c90c:	f4bf af7d 	bcs.w	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c910:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 801c914:	2b05      	cmp	r3, #5
 801c916:	d8d4      	bhi.n	801c8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c918:	e777      	b.n	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c91a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801c91e:	4283      	cmp	r3, r0
 801c920:	d09a      	beq.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c922:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801c926:	4283      	cmp	r3, r0
 801c928:	e7ca      	b.n	801c8c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801c92a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801c92e:	d22b      	bcs.n	801c988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801c930:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 801c934:	4283      	cmp	r3, r0
 801c936:	d28f      	bcs.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c938:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801c93c:	4283      	cmp	r3, r0
 801c93e:	d816      	bhi.n	801c96e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801c940:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 801c944:	4283      	cmp	r3, r0
 801c946:	f4bf af60 	bcs.w	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c94a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801c94e:	4283      	cmp	r3, r0
 801c950:	d80a      	bhi.n	801c968 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801c952:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 801c956:	4283      	cmp	r3, r0
 801c958:	f4bf af57 	bcs.w	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c95c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 801c960:	4283      	cmp	r3, r0
 801c962:	f43f af79 	beq.w	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c966:	e7ac      	b.n	801c8c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801c968:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801c96c:	e7f8      	b.n	801c960 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801c96e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 801c972:	4283      	cmp	r3, r0
 801c974:	d802      	bhi.n	801c97c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801c976:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801c97a:	e798      	b.n	801c8ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801c97c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 801c980:	4283      	cmp	r3, r0
 801c982:	f47f af42 	bne.w	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c986:	e767      	b.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c988:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 801c98c:	4283      	cmp	r3, r0
 801c98e:	f43f af63 	beq.w	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c992:	d802      	bhi.n	801c99a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801c994:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 801c998:	e7f2      	b.n	801c980 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801c99a:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 801c99e:	4283      	cmp	r3, r0
 801c9a0:	d805      	bhi.n	801c9ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801c9a2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801c9a6:	4283      	cmp	r3, r0
 801c9a8:	f4ff af2f 	bcc.w	801c80a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801c9ac:	e754      	b.n	801c858 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801c9ae:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 801c9b2:	4283      	cmp	r3, r0
 801c9b4:	e7af      	b.n	801c916 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801c9b6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801c9ba:	4617      	mov	r7, r2
 801c9bc:	4666      	mov	r6, ip
 801c9be:	f102 0808 	add.w	r8, r2, #8
 801c9c2:	46e6      	mov	lr, ip
 801c9c4:	6838      	ldr	r0, [r7, #0]
 801c9c6:	6879      	ldr	r1, [r7, #4]
 801c9c8:	3708      	adds	r7, #8
 801c9ca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801c9ce:	4547      	cmp	r7, r8
 801c9d0:	46f4      	mov	ip, lr
 801c9d2:	d1f6      	bne.n	801c9c2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801c9d4:	6838      	ldr	r0, [r7, #0]
 801c9d6:	f8ce 0000 	str.w	r0, [lr]
 801c9da:	88b9      	ldrh	r1, [r7, #4]
 801c9dc:	f8ae 1004 	strh.w	r1, [lr, #4]
 801c9e0:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801c9e4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801c9e8:	d009      	beq.n	801c9fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801c9ea:	7b51      	ldrb	r1, [r2, #13]
 801c9ec:	7992      	ldrb	r2, [r2, #6]
 801c9ee:	0149      	lsls	r1, r1, #5
 801c9f0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801c9f4:	4311      	orrs	r1, r2
 801c9f6:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c9fa:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801c9fe:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801ca02:	b2ad      	uxth	r5, r5
 801ca04:	d00d      	beq.n	801ca22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 801ca06:	442b      	add	r3, r5
 801ca08:	b29b      	uxth	r3, r3
 801ca0a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801ca0e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801ca12:	10db      	asrs	r3, r3, #3
 801ca14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801ca18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801ca1c:	4313      	orrs	r3, r2
 801ca1e:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801ca22:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801ca26:	00cb      	lsls	r3, r1, #3
 801ca28:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801ca2c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801ca30:	064f      	lsls	r7, r1, #25
 801ca32:	ea43 0302 	orr.w	r3, r3, r2
 801ca36:	bf44      	itt	mi
 801ca38:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801ca3c:	b21b      	sxthmi	r3, r3
 801ca3e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801ca42:	1b5b      	subs	r3, r3, r5
 801ca44:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 801ca48:	4632      	mov	r2, r6
 801ca4a:	e6fa      	b.n	801c842 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ca4c:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801ca50:	4617      	mov	r7, r2
 801ca52:	4666      	mov	r6, ip
 801ca54:	f102 0908 	add.w	r9, r2, #8
 801ca58:	46e0      	mov	r8, ip
 801ca5a:	6838      	ldr	r0, [r7, #0]
 801ca5c:	6879      	ldr	r1, [r7, #4]
 801ca5e:	3708      	adds	r7, #8
 801ca60:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801ca64:	454f      	cmp	r7, r9
 801ca66:	46c4      	mov	ip, r8
 801ca68:	d1f6      	bne.n	801ca58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801ca6a:	6838      	ldr	r0, [r7, #0]
 801ca6c:	f8c8 0000 	str.w	r0, [r8]
 801ca70:	88b9      	ldrh	r1, [r7, #4]
 801ca72:	f8a8 1004 	strh.w	r1, [r8, #4]
 801ca76:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801ca7a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801ca7e:	d009      	beq.n	801ca94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 801ca80:	7b51      	ldrb	r1, [r2, #13]
 801ca82:	7992      	ldrb	r2, [r2, #6]
 801ca84:	0149      	lsls	r1, r1, #5
 801ca86:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801ca8a:	4311      	orrs	r1, r2
 801ca8c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801ca90:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 801ca94:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801ca98:	d00e      	beq.n	801cab8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801ca9a:	eba3 030e 	sub.w	r3, r3, lr
 801ca9e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801caa2:	b29b      	uxth	r3, r3
 801caa4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801caa8:	10db      	asrs	r3, r3, #3
 801caaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801caae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801cab2:	4313      	orrs	r3, r2
 801cab4:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 801cab8:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801cabc:	00cb      	lsls	r3, r1, #3
 801cabe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801cac2:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 801cac6:	0648      	lsls	r0, r1, #25
 801cac8:	ea43 0302 	orr.w	r3, r3, r2
 801cacc:	bf44      	itt	mi
 801cace:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801cad2:	b21b      	sxthmi	r3, r3
 801cad4:	1b5d      	subs	r5, r3, r5
 801cad6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801cada:	e7b5      	b.n	801ca48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0801cadc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cae0:	461e      	mov	r6, r3
 801cae2:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801cae4:	4604      	mov	r4, r0
 801cae6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801caea:	4617      	mov	r7, r2
 801caec:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801caf0:	f7f5 ff58 	bl	80129a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801caf4:	4605      	mov	r5, r0
 801caf6:	b918      	cbnz	r0, 801cb00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801caf8:	6030      	str	r0, [r6, #0]
 801cafa:	4628      	mov	r0, r5
 801cafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb00:	683b      	ldr	r3, [r7, #0]
 801cb02:	4601      	mov	r1, r0
 801cb04:	68db      	ldr	r3, [r3, #12]
 801cb06:	4638      	mov	r0, r7
 801cb08:	4798      	blx	r3
 801cb0a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801cb0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801cb12:	4602      	mov	r2, r0
 801cb14:	6030      	str	r0, [r6, #0]
 801cb16:	d213      	bcs.n	801cb40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801cb18:	4643      	mov	r3, r8
 801cb1a:	4639      	mov	r1, r7
 801cb1c:	4620      	mov	r0, r4
 801cb1e:	f7ff fe3b 	bl	801c798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cb22:	6030      	str	r0, [r6, #0]
 801cb24:	6833      	ldr	r3, [r6, #0]
 801cb26:	b143      	cbz	r3, 801cb3a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801cb28:	7b5a      	ldrb	r2, [r3, #13]
 801cb2a:	7a9b      	ldrb	r3, [r3, #10]
 801cb2c:	0052      	lsls	r2, r2, #1
 801cb2e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801cb32:	4313      	orrs	r3, r2
 801cb34:	bf0c      	ite	eq
 801cb36:	2301      	moveq	r3, #1
 801cb38:	2300      	movne	r3, #0
 801cb3a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801cb3e:	e7dc      	b.n	801cafa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801cb40:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801cb44:	b29b      	uxth	r3, r3
 801cb46:	2b7f      	cmp	r3, #127	@ 0x7f
 801cb48:	d804      	bhi.n	801cb54 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801cb4a:	4639      	mov	r1, r7
 801cb4c:	4620      	mov	r0, r4
 801cb4e:	f7ff fced 	bl	801c52c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cb52:	e7e6      	b.n	801cb22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801cb54:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d0e3      	beq.n	801cb24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801cb5c:	f640 1302 	movw	r3, #2306	@ 0x902
 801cb60:	429d      	cmp	r5, r3
 801cb62:	d1df      	bne.n	801cb24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801cb64:	4601      	mov	r1, r0
 801cb66:	4620      	mov	r0, r4
 801cb68:	f7ff fcb1 	bl	801c4ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cb6c:	e7d9      	b.n	801cb22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801cb6e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801cb6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb72:	461e      	mov	r6, r3
 801cb74:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801cb76:	4604      	mov	r4, r0
 801cb78:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cb7c:	4617      	mov	r7, r2
 801cb7e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801cb82:	f7f5 ff0f 	bl	80129a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cb86:	4605      	mov	r5, r0
 801cb88:	b918      	cbnz	r0, 801cb92 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801cb8a:	6030      	str	r0, [r6, #0]
 801cb8c:	4628      	mov	r0, r5
 801cb8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cb92:	683b      	ldr	r3, [r7, #0]
 801cb94:	4601      	mov	r1, r0
 801cb96:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801cb9a:	4638      	mov	r0, r7
 801cb9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cba0:	47c8      	blx	r9
 801cba2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801cba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801cbaa:	4602      	mov	r2, r0
 801cbac:	6030      	str	r0, [r6, #0]
 801cbae:	d213      	bcs.n	801cbd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801cbb0:	4643      	mov	r3, r8
 801cbb2:	4639      	mov	r1, r7
 801cbb4:	4620      	mov	r0, r4
 801cbb6:	f7ff fdef 	bl	801c798 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801cbba:	6030      	str	r0, [r6, #0]
 801cbbc:	6833      	ldr	r3, [r6, #0]
 801cbbe:	b143      	cbz	r3, 801cbd2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801cbc0:	7b5a      	ldrb	r2, [r3, #13]
 801cbc2:	7a9b      	ldrb	r3, [r3, #10]
 801cbc4:	0052      	lsls	r2, r2, #1
 801cbc6:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801cbca:	4313      	orrs	r3, r2
 801cbcc:	bf0c      	ite	eq
 801cbce:	2301      	moveq	r3, #1
 801cbd0:	2300      	movne	r3, #0
 801cbd2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801cbd6:	e7d9      	b.n	801cb8c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801cbd8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 801cbdc:	b29b      	uxth	r3, r3
 801cbde:	2b7f      	cmp	r3, #127	@ 0x7f
 801cbe0:	d804      	bhi.n	801cbec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801cbe2:	4639      	mov	r1, r7
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	f7ff fca1 	bl	801c52c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801cbea:	e7e6      	b.n	801cbba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801cbec:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d0e3      	beq.n	801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801cbf4:	f640 1302 	movw	r3, #2306	@ 0x902
 801cbf8:	429d      	cmp	r5, r3
 801cbfa:	d1df      	bne.n	801cbbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801cbfc:	4601      	mov	r1, r0
 801cbfe:	4620      	mov	r0, r4
 801cc00:	f7ff fc65 	bl	801c4ce <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801cc04:	e7d9      	b.n	801cbba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801cc06 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801cc06:	b510      	push	{r4, lr}
 801cc08:	4604      	mov	r4, r0
 801cc0a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 801cc0e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801cc10:	b1f1      	cbz	r1, 801cc50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801cc12:	2b0a      	cmp	r3, #10
 801cc14:	d02f      	beq.n	801cc76 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801cc16:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 801cc18:	3901      	subs	r1, #1
 801cc1a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801cc1e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 801cc20:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801cc24:	1c51      	adds	r1, r2, #1
 801cc26:	b289      	uxth	r1, r1
 801cc28:	2901      	cmp	r1, #1
 801cc2a:	bf84      	itt	hi
 801cc2c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801cc30:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801cc32:	f103 0201 	add.w	r2, r3, #1
 801cc36:	8722      	strh	r2, [r4, #56]	@ 0x38
 801cc38:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801cc3a:	bf98      	it	ls
 801cc3c:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801cc3e:	4413      	add	r3, r2
 801cc40:	b29b      	uxth	r3, r3
 801cc42:	2b09      	cmp	r3, #9
 801cc44:	bf88      	it	hi
 801cc46:	3b0a      	subhi	r3, #10
 801cc48:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cc4c:	8458      	strh	r0, [r3, #34]	@ 0x22
 801cc4e:	e7dc      	b.n	801cc0a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801cc50:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801cc52:	2b0a      	cmp	r3, #10
 801cc54:	d00f      	beq.n	801cc76 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 801cc56:	4620      	mov	r0, r4
 801cc58:	f7ff fbe7 	bl	801c42a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801cc5c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 801cc5e:	1c5a      	adds	r2, r3, #1
 801cc60:	8722      	strh	r2, [r4, #56]	@ 0x38
 801cc62:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801cc64:	4413      	add	r3, r2
 801cc66:	b29b      	uxth	r3, r3
 801cc68:	2b09      	cmp	r3, #9
 801cc6a:	bf88      	it	hi
 801cc6c:	3b0a      	subhi	r3, #10
 801cc6e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cc72:	8458      	strh	r0, [r3, #34]	@ 0x22
 801cc74:	e7ec      	b.n	801cc50 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801cc76:	bd10      	pop	{r4, pc}

0801cc78 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801cc78:	b538      	push	{r3, r4, r5, lr}
 801cc7a:	4604      	mov	r4, r0
 801cc7c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801cc7e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801cc82:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 801cc84:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 801cc86:	3a01      	subs	r2, #1
 801cc88:	8702      	strh	r2, [r0, #56]	@ 0x38
 801cc8a:	1c5a      	adds	r2, r3, #1
 801cc8c:	b292      	uxth	r2, r2
 801cc8e:	2a09      	cmp	r2, #9
 801cc90:	bf86      	itte	hi
 801cc92:	3b09      	subhi	r3, #9
 801cc94:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 801cc96:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 801cc98:	f7ff ffb5 	bl	801cc06 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801cc9c:	8c23      	ldrh	r3, [r4, #32]
 801cc9e:	2b01      	cmp	r3, #1
 801cca0:	bf9c      	itt	ls
 801cca2:	3301      	addls	r3, #1
 801cca4:	8423      	strhls	r3, [r4, #32]
 801cca6:	8be3      	ldrh	r3, [r4, #30]
 801cca8:	b90b      	cbnz	r3, 801ccae <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801ccaa:	2302      	movs	r3, #2
 801ccac:	83e3      	strh	r3, [r4, #30]
 801ccae:	8be3      	ldrh	r3, [r4, #30]
 801ccb0:	4628      	mov	r0, r5
 801ccb2:	3b01      	subs	r3, #1
 801ccb4:	b29b      	uxth	r3, r3
 801ccb6:	83e3      	strh	r3, [r4, #30]
 801ccb8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ccbc:	8365      	strh	r5, [r4, #26]
 801ccbe:	bd38      	pop	{r3, r4, r5, pc}

0801ccc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801ccc0:	428a      	cmp	r2, r1
 801ccc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccc6:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801ccc8:	d931      	bls.n	801cd2e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 801ccca:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 801cccc:	1a54      	subs	r4, r2, r1
 801ccce:	19ee      	adds	r6, r5, r7
 801ccd0:	3e01      	subs	r6, #1
 801ccd2:	fa1f fe84 	uxth.w	lr, r4
 801ccd6:	b2b4      	uxth	r4, r6
 801ccd8:	eba4 090e 	sub.w	r9, r4, lr
 801ccdc:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 801cce0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 801cce4:	fa1f f989 	uxth.w	r9, r9
 801cce8:	2c09      	cmp	r4, #9
 801ccea:	4626      	mov	r6, r4
 801ccec:	bf88      	it	hi
 801ccee:	f1a4 060a 	subhi.w	r6, r4, #10
 801ccf2:	f1bc 0f00 	cmp.w	ip, #0
 801ccf6:	bf08      	it	eq
 801ccf8:	f04f 0c02 	moveq.w	ip, #2
 801ccfc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801cd00:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cd04:	3c01      	subs	r4, #1
 801cd06:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 801cd0a:	fa1f fc8c 	uxth.w	ip, ip
 801cd0e:	b2a4      	uxth	r4, r4
 801cd10:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801cd14:	454c      	cmp	r4, r9
 801cd16:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 801cd1a:	d1e5      	bne.n	801cce8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801cd1c:	eba5 050e 	sub.w	r5, r5, lr
 801cd20:	eb0e 0408 	add.w	r4, lr, r8
 801cd24:	8705      	strh	r5, [r0, #56]	@ 0x38
 801cd26:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 801cd2a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801cd2e:	250a      	movs	r5, #10
 801cd30:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 801cd32:	1a64      	subs	r4, r4, r1
 801cd34:	4439      	add	r1, r7
 801cd36:	b289      	uxth	r1, r1
 801cd38:	2909      	cmp	r1, #9
 801cd3a:	bf88      	it	hi
 801cd3c:	390a      	subhi	r1, #10
 801cd3e:	8704      	strh	r4, [r0, #56]	@ 0x38
 801cd40:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801cd42:	b18a      	cbz	r2, 801cd68 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 801cd44:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 801cd46:	3a01      	subs	r2, #1
 801cd48:	3101      	adds	r1, #1
 801cd4a:	b292      	uxth	r2, r2
 801cd4c:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801cd50:	8701      	strh	r1, [r0, #56]	@ 0x38
 801cd52:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801cd54:	b901      	cbnz	r1, 801cd58 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 801cd56:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801cd58:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 801cd5a:	3901      	subs	r1, #1
 801cd5c:	b289      	uxth	r1, r1
 801cd5e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 801cd60:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801cd64:	844c      	strh	r4, [r1, #34]	@ 0x22
 801cd66:	e7ec      	b.n	801cd42 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 801cd68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd6c:	f7ff bf4b 	b.w	801cc06 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801cd70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801cd70:	b570      	push	{r4, r5, r6, lr}
 801cd72:	2500      	movs	r5, #0
 801cd74:	4295      	cmp	r5, r2
 801cd76:	d011      	beq.n	801cd9c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801cd78:	8bc4      	ldrh	r4, [r0, #30]
 801cd7a:	f831 6b02 	ldrh.w	r6, [r1], #2
 801cd7e:	4414      	add	r4, r2
 801cd80:	3c01      	subs	r4, #1
 801cd82:	1b64      	subs	r4, r4, r5
 801cd84:	b2a4      	uxth	r4, r4
 801cd86:	2c01      	cmp	r4, #1
 801cd88:	bf88      	it	hi
 801cd8a:	3c02      	subhi	r4, #2
 801cd8c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801cd90:	8b64      	ldrh	r4, [r4, #26]
 801cd92:	42b4      	cmp	r4, r6
 801cd94:	d117      	bne.n	801cdc6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801cd96:	3501      	adds	r5, #1
 801cd98:	b2ad      	uxth	r5, r5
 801cd9a:	e7eb      	b.n	801cd74 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801cd9c:	2400      	movs	r4, #0
 801cd9e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801cda2:	4413      	add	r3, r2
 801cda4:	b2a2      	uxth	r2, r4
 801cda6:	429a      	cmp	r2, r3
 801cda8:	da0f      	bge.n	801cdca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801cdaa:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 801cdac:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801cdb0:	4432      	add	r2, r6
 801cdb2:	b292      	uxth	r2, r2
 801cdb4:	2a09      	cmp	r2, #9
 801cdb6:	bf88      	it	hi
 801cdb8:	3a0a      	subhi	r2, #10
 801cdba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801cdbe:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 801cdc0:	3401      	adds	r4, #1
 801cdc2:	42aa      	cmp	r2, r5
 801cdc4:	d0ee      	beq.n	801cda4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801cdc6:	2000      	movs	r0, #0
 801cdc8:	bd70      	pop	{r4, r5, r6, pc}
 801cdca:	2001      	movs	r0, #1
 801cdcc:	e7fc      	b.n	801cdc8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801cdce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801cdce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdd2:	4605      	mov	r5, r0
 801cdd4:	4616      	mov	r6, r2
 801cdd6:	1c8c      	adds	r4, r1, #2
 801cdd8:	8809      	ldrh	r1, [r1, #0]
 801cdda:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801cdde:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801cde2:	42b3      	cmp	r3, r6
 801cde4:	d124      	bne.n	801ce30 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801cde6:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801cdea:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801cdee:	f001 070f 	and.w	r7, r1, #15
 801cdf2:	f8cd 8000 	str.w	r8, [sp]
 801cdf6:	464b      	mov	r3, r9
 801cdf8:	4652      	mov	r2, sl
 801cdfa:	4621      	mov	r1, r4
 801cdfc:	4628      	mov	r0, r5
 801cdfe:	f7ff ffb7 	bl	801cd70 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801ce02:	4683      	mov	fp, r0
 801ce04:	b168      	cbz	r0, 801ce22 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801ce06:	eb0a 0109 	add.w	r1, sl, r9
 801ce0a:	4441      	add	r1, r8
 801ce0c:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801ce10:	463a      	mov	r2, r7
 801ce12:	4649      	mov	r1, r9
 801ce14:	4628      	mov	r0, r5
 801ce16:	f7ff ff53 	bl	801ccc0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801ce1a:	4658      	mov	r0, fp
 801ce1c:	b003      	add	sp, #12
 801ce1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce22:	eb07 010a 	add.w	r1, r7, sl
 801ce26:	4449      	add	r1, r9
 801ce28:	4441      	add	r1, r8
 801ce2a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801ce2e:	e7d2      	b.n	801cdd6 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801ce30:	f04f 0b00 	mov.w	fp, #0
 801ce34:	e7f1      	b.n	801ce1a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801ce36 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801ce36:	b570      	push	{r4, r5, r6, lr}
 801ce38:	8810      	ldrh	r0, [r2, #0]
 801ce3a:	4298      	cmp	r0, r3
 801ce3c:	d817      	bhi.n	801ce6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ce3e:	1e48      	subs	r0, r1, #1
 801ce40:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801ce44:	4298      	cmp	r0, r3
 801ce46:	d312      	bcc.n	801ce6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ce48:	2400      	movs	r4, #0
 801ce4a:	428c      	cmp	r4, r1
 801ce4c:	d20f      	bcs.n	801ce6e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801ce4e:	1860      	adds	r0, r4, r1
 801ce50:	1040      	asrs	r0, r0, #1
 801ce52:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801ce56:	0085      	lsls	r5, r0, #2
 801ce58:	42b3      	cmp	r3, r6
 801ce5a:	d902      	bls.n	801ce62 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801ce5c:	3001      	adds	r0, #1
 801ce5e:	b284      	uxth	r4, r0
 801ce60:	e7f3      	b.n	801ce4a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ce62:	d201      	bcs.n	801ce68 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801ce64:	b281      	uxth	r1, r0
 801ce66:	e7f0      	b.n	801ce4a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801ce68:	442a      	add	r2, r5
 801ce6a:	8850      	ldrh	r0, [r2, #2]
 801ce6c:	bd70      	pop	{r4, r5, r6, pc}
 801ce6e:	2000      	movs	r0, #0
 801ce70:	e7fc      	b.n	801ce6c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801ce72 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801ce72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce76:	4604      	mov	r4, r0
 801ce78:	260b      	movs	r6, #11
 801ce7a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 801ce7c:	886f      	ldrh	r7, [r5, #2]
 801ce7e:	087f      	lsrs	r7, r7, #1
 801ce80:	3e01      	subs	r6, #1
 801ce82:	d013      	beq.n	801ceac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ce84:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 801ce86:	462a      	mov	r2, r5
 801ce88:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801ce8c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 801ce90:	4639      	mov	r1, r7
 801ce92:	4643      	mov	r3, r8
 801ce94:	4620      	mov	r0, r4
 801ce96:	f7ff ffce 	bl	801ce36 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801ce9a:	b138      	cbz	r0, 801ceac <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801ce9c:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801cea0:	4642      	mov	r2, r8
 801cea2:	4620      	mov	r0, r4
 801cea4:	f7ff ff93 	bl	801cdce <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801cea8:	2800      	cmp	r0, #0
 801ceaa:	d1e9      	bne.n	801ce80 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ceb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801ceb0:	b570      	push	{r4, r5, r6, lr}
 801ceb2:	694a      	ldr	r2, [r1, #20]
 801ceb4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801ceb6:	684b      	ldr	r3, [r1, #4]
 801ceb8:	1b54      	subs	r4, r2, r5
 801ceba:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801cebc:	f000 8107 	beq.w	801d0ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 801cec0:	1b9b      	subs	r3, r3, r6
 801cec2:	d003      	beq.n	801cecc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801cec4:	2210      	movs	r2, #16
 801cec6:	4363      	muls	r3, r4
 801cec8:	fb93 f3f2 	sdiv	r3, r3, r2
 801cecc:	680c      	ldr	r4, [r1, #0]
 801cece:	698a      	ldr	r2, [r1, #24]
 801ced0:	1b65      	subs	r5, r4, r5
 801ced2:	f000 80fe 	beq.w	801d0d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 801ced6:	1b92      	subs	r2, r2, r6
 801ced8:	d003      	beq.n	801cee2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801ceda:	2410      	movs	r4, #16
 801cedc:	436a      	muls	r2, r5
 801cede:	fb92 f2f4 	sdiv	r2, r2, r4
 801cee2:	1a9b      	subs	r3, r3, r2
 801cee4:	ee07 3a90 	vmov	s15, r3
 801cee8:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801d110 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 801ceec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cef0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cef4:	ee67 7a84 	vmul.f32	s15, s15, s8
 801cef8:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801cefc:	460a      	mov	r2, r1
 801cefe:	eeb1 6a43 	vneg.f32	s12, s6
 801cf02:	4603      	mov	r3, r0
 801cf04:	f100 040c 	add.w	r4, r0, #12
 801cf08:	edd2 7a02 	vldr	s15, [r2, #8]
 801cf0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801cf10:	ece3 6a01 	vstmia	r3!, {s13}
 801cf14:	edd2 7a03 	vldr	s15, [r2, #12]
 801cf18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cf1c:	edc3 7a02 	vstr	s15, [r3, #8]
 801cf20:	edd2 7a04 	vldr	s15, [r2, #16]
 801cf24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801cf28:	429c      	cmp	r4, r3
 801cf2a:	edc3 7a05 	vstr	s15, [r3, #20]
 801cf2e:	f102 0214 	add.w	r2, r2, #20
 801cf32:	d1e9      	bne.n	801cf08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801cf34:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801cf36:	698b      	ldr	r3, [r1, #24]
 801cf38:	edd0 4a02 	vldr	s9, [r0, #8]
 801cf3c:	1a9b      	subs	r3, r3, r2
 801cf3e:	ee07 3a90 	vmov	s15, r3
 801cf42:	684b      	ldr	r3, [r1, #4]
 801cf44:	edd0 3a00 	vldr	s7, [r0]
 801cf48:	1a9b      	subs	r3, r3, r2
 801cf4a:	edd0 6a01 	vldr	s13, [r0, #4]
 801cf4e:	ee07 3a10 	vmov	s14, r3
 801cf52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cf56:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801cf5a:	ee67 7a84 	vmul.f32	s15, s15, s8
 801cf5e:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801cf62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf66:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801cf6a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf6e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801cf72:	ee67 7a83 	vmul.f32	s15, s15, s6
 801cf76:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 801cf7a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801cf7c:	694a      	ldr	r2, [r1, #20]
 801cf7e:	ed90 5a05 	vldr	s10, [r0, #20]
 801cf82:	1b13      	subs	r3, r2, r4
 801cf84:	ee07 3a10 	vmov	s14, r3
 801cf88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cf8c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cf90:	680b      	ldr	r3, [r1, #0]
 801cf92:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801cf96:	1b1b      	subs	r3, r3, r4
 801cf98:	ee07 3a10 	vmov	s14, r3
 801cf9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cfa0:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cfa4:	eee6 4a87 	vfma.f32	s9, s13, s14
 801cfa8:	ee64 4a86 	vmul.f32	s9, s9, s12
 801cfac:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801cfb0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801cfb2:	698b      	ldr	r3, [r1, #24]
 801cfb4:	ed90 2a03 	vldr	s4, [r0, #12]
 801cfb8:	1a9b      	subs	r3, r3, r2
 801cfba:	ee06 3a90 	vmov	s13, r3
 801cfbe:	684b      	ldr	r3, [r1, #4]
 801cfc0:	edd0 5a04 	vldr	s11, [r0, #16]
 801cfc4:	1a9b      	subs	r3, r3, r2
 801cfc6:	ee07 3a10 	vmov	s14, r3
 801cfca:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801cfce:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801cfd2:	ee66 6a84 	vmul.f32	s13, s13, s8
 801cfd6:	ee32 5a45 	vsub.f32	s10, s4, s10
 801cfda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cfde:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801cfe2:	ee27 7a04 	vmul.f32	s14, s14, s8
 801cfe6:	eee5 6a87 	vfma.f32	s13, s11, s14
 801cfea:	ee66 6a83 	vmul.f32	s13, s13, s6
 801cfee:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801cff2:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801cff4:	694a      	ldr	r2, [r1, #20]
 801cff6:	ed90 1a07 	vldr	s2, [r0, #28]
 801cffa:	1b13      	subs	r3, r2, r4
 801cffc:	ee07 3a10 	vmov	s14, r3
 801d000:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d004:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d008:	680b      	ldr	r3, [r1, #0]
 801d00a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d00e:	1b1b      	subs	r3, r3, r4
 801d010:	ee07 3a10 	vmov	s14, r3
 801d014:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d018:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d01c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d020:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d024:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801d028:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d02a:	698b      	ldr	r3, [r1, #24]
 801d02c:	edd0 5a08 	vldr	s11, [r0, #32]
 801d030:	1a9b      	subs	r3, r3, r2
 801d032:	ee07 3a10 	vmov	s14, r3
 801d036:	684b      	ldr	r3, [r1, #4]
 801d038:	edd0 2a06 	vldr	s5, [r0, #24]
 801d03c:	1a9b      	subs	r3, r3, r2
 801d03e:	ee01 3a90 	vmov	s3, r3
 801d042:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d046:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d04a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d04e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d052:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d056:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d05a:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d05e:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d062:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d066:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801d06a:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801d06c:	694a      	ldr	r2, [r1, #20]
 801d06e:	1b13      	subs	r3, r2, r4
 801d070:	ee03 3a10 	vmov	s6, r3
 801d074:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d078:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d07c:	680b      	ldr	r3, [r1, #0]
 801d07e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d082:	1b1b      	subs	r3, r3, r4
 801d084:	ee03 3a10 	vmov	s6, r3
 801d088:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d08c:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d090:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d094:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d098:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d09c:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d0a0:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0a8:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801d0ac:	dd13      	ble.n	801d0d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d0ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d0b2:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d0b6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d0ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0c2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801d0c4:	dd15      	ble.n	801d0f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d0c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801d0ca:	6403      	str	r3, [r0, #64]	@ 0x40
 801d0cc:	bd70      	pop	{r4, r5, r6, pc}
 801d0ce:	4623      	mov	r3, r4
 801d0d0:	e6fc      	b.n	801cecc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d0d2:	462a      	mov	r2, r5
 801d0d4:	e705      	b.n	801cee2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d0d6:	d502      	bpl.n	801d0de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 801d0d8:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d0dc:	e7e9      	b.n	801d0b2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 801d0de:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d0e2:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d0e6:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0ee:	dade      	bge.n	801d0ae <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 801d0f0:	e7f2      	b.n	801d0d8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 801d0f2:	d502      	bpl.n	801d0fa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 801d0f4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801d0f8:	e7e7      	b.n	801d0ca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 801d0fa:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d0fe:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d102:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d10a:	dadc      	bge.n	801d0c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 801d10c:	e7f2      	b.n	801d0f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 801d10e:	bf00      	nop
 801d110:	3d800000 	.word	0x3d800000

0801d114 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d118:	2714      	movs	r7, #20
 801d11a:	435f      	muls	r7, r3
 801d11c:	eb02 0c07 	add.w	ip, r2, r7
 801d120:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d124:	f115 0e0f 	adds.w	lr, r5, #15
 801d128:	f100 80a2 	bmi.w	801d270 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d12c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d130:	2614      	movs	r6, #20
 801d132:	9c08      	ldr	r4, [sp, #32]
 801d134:	f8c0 e014 	str.w	lr, [r0, #20]
 801d138:	4366      	muls	r6, r4
 801d13a:	eb02 0806 	add.w	r8, r2, r6
 801d13e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d142:	f115 040f 	adds.w	r4, r5, #15
 801d146:	f100 809f 	bmi.w	801d288 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d14a:	1124      	asrs	r4, r4, #4
 801d14c:	eba4 040e 	sub.w	r4, r4, lr
 801d150:	6184      	str	r4, [r0, #24]
 801d152:	2c00      	cmp	r4, #0
 801d154:	f000 808a 	beq.w	801d26c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d158:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d15c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d160:	5995      	ldr	r5, [r2, r6]
 801d162:	eba4 0809 	sub.w	r8, r4, r9
 801d166:	59d4      	ldr	r4, [r2, r7]
 801d168:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d16c:	eba5 0a04 	sub.w	sl, r5, r4
 801d170:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801d174:	fb0e fe05 	mul.w	lr, lr, r5
 801d178:	fb0a ee19 	mls	lr, sl, r9, lr
 801d17c:	fb08 e404 	mla	r4, r8, r4, lr
 801d180:	3c01      	subs	r4, #1
 801d182:	19a4      	adds	r4, r4, r6
 801d184:	f100 808c 	bmi.w	801d2a0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801d188:	fb94 fef6 	sdiv	lr, r4, r6
 801d18c:	fb06 441e 	mls	r4, r6, lr, r4
 801d190:	f8c0 e000 	str.w	lr, [r0]
 801d194:	6104      	str	r4, [r0, #16]
 801d196:	2d00      	cmp	r5, #0
 801d198:	f2c0 8095 	blt.w	801d2c6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801d19c:	fb95 f4f6 	sdiv	r4, r5, r6
 801d1a0:	fb06 5514 	mls	r5, r6, r4, r5
 801d1a4:	6044      	str	r4, [r0, #4]
 801d1a6:	6085      	str	r5, [r0, #8]
 801d1a8:	60c6      	str	r6, [r0, #12]
 801d1aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d1ae:	6945      	ldr	r5, [r0, #20]
 801d1b0:	59d2      	ldr	r2, [r2, r7]
 801d1b2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801d1b6:	ee07 4a10 	vmov	s14, r4
 801d1ba:	6804      	ldr	r4, [r0, #0]
 801d1bc:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 801d2e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801d1c0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801d1c4:	ee07 2a90 	vmov	s15, r2
 801d1c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d1cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d1d0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d1d4:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801d1d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d1dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d1e0:	edd3 6a00 	vldr	s13, [r3]
 801d1e4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d1e8:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801d1ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d1f0:	edc0 6a07 	vstr	s13, [r0, #28]
 801d1f4:	edd0 6a01 	vldr	s13, [r0, #4]
 801d1f8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801d1fc:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801d200:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d204:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d208:	ed80 6a08 	vstr	s12, [r0, #32]
 801d20c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801d20e:	6242      	str	r2, [r0, #36]	@ 0x24
 801d210:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801d214:	ed93 6a03 	vldr	s12, [r3, #12]
 801d218:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d21c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801d220:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d224:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 801d228:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801d22c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801d230:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d234:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 801d238:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801d23a:	6302      	str	r2, [r0, #48]	@ 0x30
 801d23c:	ed93 6a06 	vldr	s12, [r3, #24]
 801d240:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 801d244:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d248:	eeb0 7a46 	vmov.f32	s14, s12
 801d24c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801d250:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d254:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 801d258:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 801d25c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 801d260:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d264:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 801d268:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 801d26a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801d26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d270:	2410      	movs	r4, #16
 801d272:	f1c5 0501 	rsb	r5, r5, #1
 801d276:	f015 050f 	ands.w	r5, r5, #15
 801d27a:	fb9e fef4 	sdiv	lr, lr, r4
 801d27e:	bf18      	it	ne
 801d280:	2501      	movne	r5, #1
 801d282:	ebae 0e05 	sub.w	lr, lr, r5
 801d286:	e753      	b.n	801d130 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801d288:	f04f 0910 	mov.w	r9, #16
 801d28c:	f1c5 0501 	rsb	r5, r5, #1
 801d290:	f015 050f 	ands.w	r5, r5, #15
 801d294:	fb94 f4f9 	sdiv	r4, r4, r9
 801d298:	bf18      	it	ne
 801d29a:	2501      	movne	r5, #1
 801d29c:	1b64      	subs	r4, r4, r5
 801d29e:	e755      	b.n	801d14c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801d2a0:	4264      	negs	r4, r4
 801d2a2:	fb94 fef6 	sdiv	lr, r4, r6
 801d2a6:	fb06 441e 	mls	r4, r6, lr, r4
 801d2aa:	f1ce 0800 	rsb	r8, lr, #0
 801d2ae:	f8c0 8000 	str.w	r8, [r0]
 801d2b2:	6104      	str	r4, [r0, #16]
 801d2b4:	2c00      	cmp	r4, #0
 801d2b6:	f43f af6e 	beq.w	801d196 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801d2ba:	ea6f 0e0e 	mvn.w	lr, lr
 801d2be:	1b34      	subs	r4, r6, r4
 801d2c0:	f8c0 e000 	str.w	lr, [r0]
 801d2c4:	e766      	b.n	801d194 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801d2c6:	426d      	negs	r5, r5
 801d2c8:	fb95 f4f6 	sdiv	r4, r5, r6
 801d2cc:	fb06 5514 	mls	r5, r6, r4, r5
 801d2d0:	f1c4 0e00 	rsb	lr, r4, #0
 801d2d4:	f8c0 e004 	str.w	lr, [r0, #4]
 801d2d8:	6085      	str	r5, [r0, #8]
 801d2da:	2d00      	cmp	r5, #0
 801d2dc:	f43f af64 	beq.w	801d1a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801d2e0:	43e4      	mvns	r4, r4
 801d2e2:	1b75      	subs	r5, r6, r5
 801d2e4:	6044      	str	r4, [r0, #4]
 801d2e6:	e75e      	b.n	801d1a6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801d2e8:	3d800000 	.word	0x3d800000

0801d2ec <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d2ec:	4602      	mov	r2, r0
 801d2ee:	b148      	cbz	r0, 801d304 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	b298      	uxth	r0, r3
 801d2f4:	3301      	adds	r3, #1
 801d2f6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d2fa:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d2fe:	2900      	cmp	r1, #0
 801d300:	d1f7      	bne.n	801d2f2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d302:	4770      	bx	lr
 801d304:	4770      	bx	lr

0801d306 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d306:	b530      	push	{r4, r5, lr}
 801d308:	4604      	mov	r4, r0
 801d30a:	b159      	cbz	r1, 801d324 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d30c:	b148      	cbz	r0, 801d322 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d30e:	2300      	movs	r3, #0
 801d310:	b298      	uxth	r0, r3
 801d312:	4282      	cmp	r2, r0
 801d314:	d905      	bls.n	801d322 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d316:	5ccd      	ldrb	r5, [r1, r3]
 801d318:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d31c:	3301      	adds	r3, #1
 801d31e:	2d00      	cmp	r5, #0
 801d320:	d1f6      	bne.n	801d310 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d322:	bd30      	pop	{r4, r5, pc}
 801d324:	4608      	mov	r0, r1
 801d326:	e7fc      	b.n	801d322 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d328 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 801d328:	468c      	mov	ip, r1
 801d32a:	2100      	movs	r1, #0
 801d32c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d32e:	4604      	mov	r4, r0
 801d330:	261f      	movs	r6, #31
 801d332:	b08b      	sub	sp, #44	@ 0x2c
 801d334:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801d338:	af01      	add	r7, sp, #4
 801d33a:	fb94 fef3 	sdiv	lr, r4, r3
 801d33e:	fb03 441e 	mls	r4, r3, lr, r4
 801d342:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d346:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d34a:	b2ec      	uxtb	r4, r5
 801d34c:	2d09      	cmp	r5, #9
 801d34e:	bfd4      	ite	le
 801d350:	3430      	addle	r4, #48	@ 0x30
 801d352:	3457      	addgt	r4, #87	@ 0x57
 801d354:	b2e4      	uxtb	r4, r4
 801d356:	55bc      	strb	r4, [r7, r6]
 801d358:	4674      	mov	r4, lr
 801d35a:	1e71      	subs	r1, r6, #1
 801d35c:	b974      	cbnz	r4, 801d37c <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 801d35e:	2800      	cmp	r0, #0
 801d360:	da05      	bge.n	801d36e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 801d362:	ab0a      	add	r3, sp, #40	@ 0x28
 801d364:	4419      	add	r1, r3
 801d366:	232d      	movs	r3, #45	@ 0x2d
 801d368:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d36c:	1eb1      	subs	r1, r6, #2
 801d36e:	3101      	adds	r1, #1
 801d370:	4439      	add	r1, r7
 801d372:	4660      	mov	r0, ip
 801d374:	f7ff ffc7 	bl	801d306 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d378:	b00b      	add	sp, #44	@ 0x2c
 801d37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d37c:	460e      	mov	r6, r1
 801d37e:	e7dc      	b.n	801d33a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0801d380 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 801d380:	468c      	mov	ip, r1
 801d382:	2100      	movs	r1, #0
 801d384:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d386:	b08b      	sub	sp, #44	@ 0x2c
 801d388:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801d38c:	211f      	movs	r1, #31
 801d38e:	ae01      	add	r6, sp, #4
 801d390:	fbb0 f7f3 	udiv	r7, r0, r3
 801d394:	fb03 0517 	mls	r5, r3, r7, r0
 801d398:	b2ec      	uxtb	r4, r5
 801d39a:	2d09      	cmp	r5, #9
 801d39c:	bfd4      	ite	le
 801d39e:	3430      	addle	r4, #48	@ 0x30
 801d3a0:	3457      	addgt	r4, #87	@ 0x57
 801d3a2:	b2e4      	uxtb	r4, r4
 801d3a4:	558c      	strb	r4, [r1, r6]
 801d3a6:	4638      	mov	r0, r7
 801d3a8:	1e4c      	subs	r4, r1, #1
 801d3aa:	b92f      	cbnz	r7, 801d3b8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 801d3ac:	4431      	add	r1, r6
 801d3ae:	4660      	mov	r0, ip
 801d3b0:	f7ff ffa9 	bl	801d306 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d3b4:	b00b      	add	sp, #44	@ 0x2c
 801d3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3b8:	4621      	mov	r1, r4
 801d3ba:	e7e9      	b.n	801d390 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0801d3bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3c0:	4691      	mov	r9, r2
 801d3c2:	b085      	sub	sp, #20
 801d3c4:	6802      	ldr	r2, [r0, #0]
 801d3c6:	4688      	mov	r8, r1
 801d3c8:	461c      	mov	r4, r3
 801d3ca:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 801d3ce:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 801d3d2:	4683      	mov	fp, r0
 801d3d4:	4610      	mov	r0, r2
 801d3d6:	9103      	str	r1, [sp, #12]
 801d3d8:	9302      	str	r3, [sp, #8]
 801d3da:	9201      	str	r2, [sp, #4]
 801d3dc:	f7ff ff86 	bl	801d2ec <_ZN8touchgfx7Unicode6strlenEPKt>
 801d3e0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d3e4:	f1b8 0f00 	cmp.w	r8, #0
 801d3e8:	bf0c      	ite	eq
 801d3ea:	4684      	moveq	ip, r0
 801d3ec:	f100 0c01 	addne.w	ip, r0, #1
 801d3f0:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 801d3f4:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 801d3f8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801d3fa:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801d3fc:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 801d400:	fa1f fc8c 	uxth.w	ip, ip
 801d404:	9903      	ldr	r1, [sp, #12]
 801d406:	d041      	beq.n	801d48c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d408:	d834      	bhi.n	801d474 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d40a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 801d40e:	d059      	beq.n	801d4c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d410:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 801d414:	d03a      	beq.n	801d48c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d416:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 801d41a:	d034      	beq.n	801d486 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d41c:	2400      	movs	r4, #0
 801d41e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801d422:	3a01      	subs	r2, #1
 801d424:	b169      	cbz	r1, 801d442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d426:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801d428:	458c      	cmp	ip, r1
 801d42a:	da09      	bge.n	801d440 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d42c:	eba1 010c 	sub.w	r1, r1, ip
 801d430:	b289      	uxth	r1, r1
 801d432:	b933      	cbnz	r3, 801d442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d434:	2e00      	cmp	r6, #0
 801d436:	d051      	beq.n	801d4dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d438:	2800      	cmp	r0, #0
 801d43a:	d04f      	beq.n	801d4dc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d43c:	440c      	add	r4, r1
 801d43e:	b2a4      	uxth	r4, r4
 801d440:	2100      	movs	r1, #0
 801d442:	682b      	ldr	r3, [r5, #0]
 801d444:	4293      	cmp	r3, r2
 801d446:	da07      	bge.n	801d458 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d448:	f1b8 0f00 	cmp.w	r8, #0
 801d44c:	d004      	beq.n	801d458 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d44e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d452:	682b      	ldr	r3, [r5, #0]
 801d454:	3301      	adds	r3, #1
 801d456:	602b      	str	r3, [r5, #0]
 801d458:	2730      	movs	r7, #48	@ 0x30
 801d45a:	2c00      	cmp	r4, #0
 801d45c:	d04e      	beq.n	801d4fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d45e:	682e      	ldr	r6, [r5, #0]
 801d460:	3c01      	subs	r4, #1
 801d462:	42b2      	cmp	r2, r6
 801d464:	b2a4      	uxth	r4, r4
 801d466:	dd49      	ble.n	801d4fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d468:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d46c:	682b      	ldr	r3, [r5, #0]
 801d46e:	3301      	adds	r3, #1
 801d470:	602b      	str	r3, [r5, #0]
 801d472:	e7f2      	b.n	801d45a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d474:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 801d478:	d01d      	beq.n	801d4b6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d47a:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 801d47e:	d002      	beq.n	801d486 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d480:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 801d484:	e7c9      	b.n	801d41a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d486:	4684      	mov	ip, r0
 801d488:	f04f 0800 	mov.w	r8, #0
 801d48c:	2c00      	cmp	r4, #0
 801d48e:	d0c6      	beq.n	801d41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d490:	b947      	cbnz	r7, 801d4a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d492:	2801      	cmp	r0, #1
 801d494:	d106      	bne.n	801d4a4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d496:	8814      	ldrh	r4, [r2, #0]
 801d498:	2c30      	cmp	r4, #48	@ 0x30
 801d49a:	bf02      	ittt	eq
 801d49c:	4638      	moveq	r0, r7
 801d49e:	3202      	addeq	r2, #2
 801d4a0:	f8cb 2000 	streq.w	r2, [fp]
 801d4a4:	45bc      	cmp	ip, r7
 801d4a6:	da14      	bge.n	801d4d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d4a8:	b2bf      	uxth	r7, r7
 801d4aa:	eba7 040c 	sub.w	r4, r7, ip
 801d4ae:	46bc      	mov	ip, r7
 801d4b0:	b2a4      	uxth	r4, r4
 801d4b2:	2600      	movs	r6, #0
 801d4b4:	e7b3      	b.n	801d41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d4b6:	4684      	mov	ip, r0
 801d4b8:	b16c      	cbz	r4, 801d4d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d4ba:	42b8      	cmp	r0, r7
 801d4bc:	dd00      	ble.n	801d4c0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d4be:	b2b8      	uxth	r0, r7
 801d4c0:	2400      	movs	r4, #0
 801d4c2:	e003      	b.n	801d4cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d4c4:	f04f 0c01 	mov.w	ip, #1
 801d4c8:	2400      	movs	r4, #0
 801d4ca:	4660      	mov	r0, ip
 801d4cc:	4626      	mov	r6, r4
 801d4ce:	46a0      	mov	r8, r4
 801d4d0:	e7a5      	b.n	801d41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d4d2:	2400      	movs	r4, #0
 801d4d4:	e7ed      	b.n	801d4b2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d4d6:	4626      	mov	r6, r4
 801d4d8:	46a0      	mov	r8, r4
 801d4da:	e7a0      	b.n	801d41e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d4dc:	2900      	cmp	r1, #0
 801d4de:	d0b0      	beq.n	801d442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d4e0:	2720      	movs	r7, #32
 801d4e2:	682e      	ldr	r6, [r5, #0]
 801d4e4:	2900      	cmp	r1, #0
 801d4e6:	d0ac      	beq.n	801d442 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d4e8:	3901      	subs	r1, #1
 801d4ea:	4296      	cmp	r6, r2
 801d4ec:	b289      	uxth	r1, r1
 801d4ee:	daa7      	bge.n	801d440 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d4f0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d4f4:	682b      	ldr	r3, [r5, #0]
 801d4f6:	3301      	adds	r3, #1
 801d4f8:	602b      	str	r3, [r5, #0]
 801d4fa:	e7f2      	b.n	801d4e2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801d4fc:	b188      	cbz	r0, 801d522 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d4fe:	682b      	ldr	r3, [r5, #0]
 801d500:	3801      	subs	r0, #1
 801d502:	429a      	cmp	r2, r3
 801d504:	b280      	uxth	r0, r0
 801d506:	dd0c      	ble.n	801d522 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801d508:	f8db 3000 	ldr.w	r3, [fp]
 801d50c:	1c9c      	adds	r4, r3, #2
 801d50e:	f8cb 4000 	str.w	r4, [fp]
 801d512:	881c      	ldrh	r4, [r3, #0]
 801d514:	682b      	ldr	r3, [r5, #0]
 801d516:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801d51a:	682b      	ldr	r3, [r5, #0]
 801d51c:	3301      	adds	r3, #1
 801d51e:	602b      	str	r3, [r5, #0]
 801d520:	e7ec      	b.n	801d4fc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d522:	2620      	movs	r6, #32
 801d524:	b151      	cbz	r1, 801d53c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d526:	6828      	ldr	r0, [r5, #0]
 801d528:	3901      	subs	r1, #1
 801d52a:	4282      	cmp	r2, r0
 801d52c:	b289      	uxth	r1, r1
 801d52e:	dd05      	ble.n	801d53c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801d530:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801d534:	682b      	ldr	r3, [r5, #0]
 801d536:	3301      	adds	r3, #1
 801d538:	602b      	str	r3, [r5, #0]
 801d53a:	e7f3      	b.n	801d524 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801d53c:	b005      	add	sp, #20
 801d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801d542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d546:	2400      	movs	r4, #0
 801d548:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801d54c:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801d550:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 801d554:	8014      	strh	r4, [r2, #0]
 801d556:	701c      	strb	r4, [r3, #0]
 801d558:	f888 4000 	strb.w	r4, [r8]
 801d55c:	f88c 4000 	strb.w	r4, [ip]
 801d560:	f88e 4000 	strb.w	r4, [lr]
 801d564:	703c      	strb	r4, [r7, #0]
 801d566:	6804      	ldr	r4, [r0, #0]
 801d568:	b1a4      	cbz	r4, 801d594 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801d56a:	8824      	ldrh	r4, [r4, #0]
 801d56c:	f04f 0901 	mov.w	r9, #1
 801d570:	b314      	cbz	r4, 801d5b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d572:	2c2b      	cmp	r4, #43	@ 0x2b
 801d574:	d001      	beq.n	801d57a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801d576:	2c20      	cmp	r4, #32
 801d578:	d110      	bne.n	801d59c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801d57a:	8014      	strh	r4, [r2, #0]
 801d57c:	6804      	ldr	r4, [r0, #0]
 801d57e:	b10c      	cbz	r4, 801d584 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801d580:	3402      	adds	r4, #2
 801d582:	6004      	str	r4, [r0, #0]
 801d584:	680c      	ldr	r4, [r1, #0]
 801d586:	b10c      	cbz	r4, 801d58c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801d588:	3401      	adds	r4, #1
 801d58a:	600c      	str	r4, [r1, #0]
 801d58c:	6804      	ldr	r4, [r0, #0]
 801d58e:	b17c      	cbz	r4, 801d5b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801d590:	8824      	ldrh	r4, [r4, #0]
 801d592:	e7ed      	b.n	801d570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d594:	680c      	ldr	r4, [r1, #0]
 801d596:	b17c      	cbz	r4, 801d5b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d598:	7824      	ldrb	r4, [r4, #0]
 801d59a:	e7e7      	b.n	801d56c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801d59c:	2c2d      	cmp	r4, #45	@ 0x2d
 801d59e:	d102      	bne.n	801d5a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801d5a0:	f883 9000 	strb.w	r9, [r3]
 801d5a4:	e7ea      	b.n	801d57c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d5a6:	2c23      	cmp	r4, #35	@ 0x23
 801d5a8:	d107      	bne.n	801d5ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801d5aa:	f888 9000 	strb.w	r9, [r8]
 801d5ae:	e7e5      	b.n	801d57c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801d5b0:	680c      	ldr	r4, [r1, #0]
 801d5b2:	b10c      	cbz	r4, 801d5b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801d5b4:	7824      	ldrb	r4, [r4, #0]
 801d5b6:	e7db      	b.n	801d570 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801d5b8:	2400      	movs	r4, #0
 801d5ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801d5be:	2b09      	cmp	r3, #9
 801d5c0:	d901      	bls.n	801d5c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801d5c2:	2c2a      	cmp	r4, #42	@ 0x2a
 801d5c4:	d122      	bne.n	801d60c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d5c6:	2301      	movs	r3, #1
 801d5c8:	2c30      	cmp	r4, #48	@ 0x30
 801d5ca:	f88e 3000 	strb.w	r3, [lr]
 801d5ce:	d10d      	bne.n	801d5ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d5d0:	f88c 3000 	strb.w	r3, [ip]
 801d5d4:	6803      	ldr	r3, [r0, #0]
 801d5d6:	b10b      	cbz	r3, 801d5dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801d5d8:	3302      	adds	r3, #2
 801d5da:	6003      	str	r3, [r0, #0]
 801d5dc:	680b      	ldr	r3, [r1, #0]
 801d5de:	b10b      	cbz	r3, 801d5e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801d5e0:	3301      	adds	r3, #1
 801d5e2:	600b      	str	r3, [r1, #0]
 801d5e4:	6803      	ldr	r3, [r0, #0]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d02f      	beq.n	801d64a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801d5ea:	881c      	ldrh	r4, [r3, #0]
 801d5ec:	2c2a      	cmp	r4, #42	@ 0x2a
 801d5ee:	d135      	bne.n	801d65c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d5f0:	f04f 33ff 	mov.w	r3, #4294967295
 801d5f4:	6033      	str	r3, [r6, #0]
 801d5f6:	6803      	ldr	r3, [r0, #0]
 801d5f8:	b10b      	cbz	r3, 801d5fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801d5fa:	3302      	adds	r3, #2
 801d5fc:	6003      	str	r3, [r0, #0]
 801d5fe:	680b      	ldr	r3, [r1, #0]
 801d600:	b10b      	cbz	r3, 801d606 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801d602:	3301      	adds	r3, #1
 801d604:	600b      	str	r3, [r1, #0]
 801d606:	6803      	ldr	r3, [r0, #0]
 801d608:	b31b      	cbz	r3, 801d652 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801d60a:	881c      	ldrh	r4, [r3, #0]
 801d60c:	2c2e      	cmp	r4, #46	@ 0x2e
 801d60e:	d11a      	bne.n	801d646 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d610:	2301      	movs	r3, #1
 801d612:	703b      	strb	r3, [r7, #0]
 801d614:	6803      	ldr	r3, [r0, #0]
 801d616:	b10b      	cbz	r3, 801d61c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801d618:	3302      	adds	r3, #2
 801d61a:	6003      	str	r3, [r0, #0]
 801d61c:	680b      	ldr	r3, [r1, #0]
 801d61e:	b10b      	cbz	r3, 801d624 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801d620:	3301      	adds	r3, #1
 801d622:	600b      	str	r3, [r1, #0]
 801d624:	6803      	ldr	r3, [r0, #0]
 801d626:	2b00      	cmp	r3, #0
 801d628:	d036      	beq.n	801d698 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801d62a:	881b      	ldrh	r3, [r3, #0]
 801d62c:	2b2a      	cmp	r3, #42	@ 0x2a
 801d62e:	d137      	bne.n	801d6a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d630:	f04f 33ff 	mov.w	r3, #4294967295
 801d634:	602b      	str	r3, [r5, #0]
 801d636:	6803      	ldr	r3, [r0, #0]
 801d638:	b10b      	cbz	r3, 801d63e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801d63a:	3302      	adds	r3, #2
 801d63c:	6003      	str	r3, [r0, #0]
 801d63e:	680b      	ldr	r3, [r1, #0]
 801d640:	b10b      	cbz	r3, 801d646 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d642:	3301      	adds	r3, #1
 801d644:	600b      	str	r3, [r1, #0]
 801d646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d64a:	680c      	ldr	r4, [r1, #0]
 801d64c:	b134      	cbz	r4, 801d65c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801d64e:	7824      	ldrb	r4, [r4, #0]
 801d650:	e7cc      	b.n	801d5ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801d652:	680b      	ldr	r3, [r1, #0]
 801d654:	2b00      	cmp	r3, #0
 801d656:	d0f6      	beq.n	801d646 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801d658:	781c      	ldrb	r4, [r3, #0]
 801d65a:	e7d7      	b.n	801d60c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d65c:	2300      	movs	r3, #0
 801d65e:	220a      	movs	r2, #10
 801d660:	6033      	str	r3, [r6, #0]
 801d662:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801d666:	fa1f f38c 	uxth.w	r3, ip
 801d66a:	2b09      	cmp	r3, #9
 801d66c:	d8ce      	bhi.n	801d60c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801d66e:	6833      	ldr	r3, [r6, #0]
 801d670:	fb02 c303 	mla	r3, r2, r3, ip
 801d674:	6033      	str	r3, [r6, #0]
 801d676:	6803      	ldr	r3, [r0, #0]
 801d678:	b10b      	cbz	r3, 801d67e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801d67a:	3302      	adds	r3, #2
 801d67c:	6003      	str	r3, [r0, #0]
 801d67e:	680b      	ldr	r3, [r1, #0]
 801d680:	b10b      	cbz	r3, 801d686 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801d682:	3301      	adds	r3, #1
 801d684:	600b      	str	r3, [r1, #0]
 801d686:	6803      	ldr	r3, [r0, #0]
 801d688:	b10b      	cbz	r3, 801d68e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801d68a:	881c      	ldrh	r4, [r3, #0]
 801d68c:	e7e9      	b.n	801d662 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d68e:	680c      	ldr	r4, [r1, #0]
 801d690:	2c00      	cmp	r4, #0
 801d692:	d0e6      	beq.n	801d662 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d694:	7824      	ldrb	r4, [r4, #0]
 801d696:	e7e4      	b.n	801d662 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801d698:	680b      	ldr	r3, [r1, #0]
 801d69a:	b10b      	cbz	r3, 801d6a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801d69c:	781b      	ldrb	r3, [r3, #0]
 801d69e:	e7c5      	b.n	801d62c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801d6a0:	2200      	movs	r2, #0
 801d6a2:	240a      	movs	r4, #10
 801d6a4:	602a      	str	r2, [r5, #0]
 801d6a6:	3b30      	subs	r3, #48	@ 0x30
 801d6a8:	b29e      	uxth	r6, r3
 801d6aa:	2e09      	cmp	r6, #9
 801d6ac:	682a      	ldr	r2, [r5, #0]
 801d6ae:	d813      	bhi.n	801d6d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801d6b0:	fb04 3302 	mla	r3, r4, r2, r3
 801d6b4:	602b      	str	r3, [r5, #0]
 801d6b6:	6803      	ldr	r3, [r0, #0]
 801d6b8:	b10b      	cbz	r3, 801d6be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801d6ba:	3302      	adds	r3, #2
 801d6bc:	6003      	str	r3, [r0, #0]
 801d6be:	680b      	ldr	r3, [r1, #0]
 801d6c0:	b10b      	cbz	r3, 801d6c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801d6c2:	3301      	adds	r3, #1
 801d6c4:	600b      	str	r3, [r1, #0]
 801d6c6:	6803      	ldr	r3, [r0, #0]
 801d6c8:	b10b      	cbz	r3, 801d6ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801d6ca:	881b      	ldrh	r3, [r3, #0]
 801d6cc:	e7eb      	b.n	801d6a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d6ce:	680b      	ldr	r3, [r1, #0]
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d0e8      	beq.n	801d6a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d6d4:	781b      	ldrb	r3, [r3, #0]
 801d6d6:	e7e6      	b.n	801d6a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801d6d8:	2a06      	cmp	r2, #6
 801d6da:	bfa8      	it	ge
 801d6dc:	2206      	movge	r2, #6
 801d6de:	602a      	str	r2, [r5, #0]
 801d6e0:	e7b1      	b.n	801d646 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801d6e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801d6e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e6:	2600      	movs	r6, #0
 801d6e8:	4607      	mov	r7, r0
 801d6ea:	b0a3      	sub	sp, #140	@ 0x8c
 801d6ec:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 801d6f0:	4688      	mov	r8, r1
 801d6f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801d6f6:	4631      	mov	r1, r6
 801d6f8:	2242      	movs	r2, #66	@ 0x42
 801d6fa:	4648      	mov	r0, r9
 801d6fc:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 801d6fe:	960d      	str	r6, [sp, #52]	@ 0x34
 801d700:	f00f f9f3 	bl	802caea <memset>
 801d704:	b15f      	cbz	r7, 801d71e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801d706:	f108 3aff 	add.w	sl, r8, #4294967295
 801d70a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d70c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d70e:	b152      	cbz	r2, 801d726 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801d710:	8812      	ldrh	r2, [r2, #0]
 801d712:	b10a      	cbz	r2, 801d718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d714:	459a      	cmp	sl, r3
 801d716:	dc2e      	bgt.n	801d776 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801d718:	2200      	movs	r2, #0
 801d71a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d71e:	4638      	mov	r0, r7
 801d720:	b023      	add	sp, #140	@ 0x8c
 801d722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d726:	9a08      	ldr	r2, [sp, #32]
 801d728:	2a00      	cmp	r2, #0
 801d72a:	d0f5      	beq.n	801d718 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801d72c:	7812      	ldrb	r2, [r2, #0]
 801d72e:	e7f0      	b.n	801d712 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801d730:	2d00      	cmp	r5, #0
 801d732:	d0ea      	beq.n	801d70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d734:	782a      	ldrb	r2, [r5, #0]
 801d736:	b142      	cbz	r2, 801d74a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801d738:	2a25      	cmp	r2, #37	@ 0x25
 801d73a:	d001      	beq.n	801d740 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801d73c:	459a      	cmp	sl, r3
 801d73e:	dc08      	bgt.n	801d752 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801d740:	f1bb 0f00 	cmp.w	fp, #0
 801d744:	d121      	bne.n	801d78a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801d746:	2d00      	cmp	r5, #0
 801d748:	d0df      	beq.n	801d70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d74a:	782a      	ldrb	r2, [r5, #0]
 801d74c:	f04f 0b00 	mov.w	fp, #0
 801d750:	e01d      	b.n	801d78e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801d752:	f1bb 0f00 	cmp.w	fp, #0
 801d756:	d076      	beq.n	801d846 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x164>
 801d758:	f8bb 2000 	ldrh.w	r2, [fp]
 801d75c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801d760:	f1bb 0f00 	cmp.w	fp, #0
 801d764:	d002      	beq.n	801d76c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801d766:	f10b 0202 	add.w	r2, fp, #2
 801d76a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d76c:	b10d      	cbz	r5, 801d772 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801d76e:	3501      	adds	r5, #1
 801d770:	9508      	str	r5, [sp, #32]
 801d772:	3301      	adds	r3, #1
 801d774:	930d      	str	r3, [sp, #52]	@ 0x34
 801d776:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801d77a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d77c:	f1bb 0f00 	cmp.w	fp, #0
 801d780:	d0d6      	beq.n	801d730 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801d782:	f8bb 2000 	ldrh.w	r2, [fp]
 801d786:	2a00      	cmp	r2, #0
 801d788:	d1d6      	bne.n	801d738 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801d78a:	f8bb 2000 	ldrh.w	r2, [fp]
 801d78e:	2a00      	cmp	r2, #0
 801d790:	d0bb      	beq.n	801d70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d792:	459a      	cmp	sl, r3
 801d794:	ddb9      	ble.n	801d70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d796:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801d79a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801d79e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801d7a2:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801d7a6:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801d7aa:	960e      	str	r6, [sp, #56]	@ 0x38
 801d7ac:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801d7b0:	960f      	str	r6, [sp, #60]	@ 0x3c
 801d7b2:	f1bb 0f00 	cmp.w	fp, #0
 801d7b6:	d002      	beq.n	801d7be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801d7b8:	f10b 0302 	add.w	r3, fp, #2
 801d7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7be:	b10d      	cbz	r5, 801d7c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801d7c0:	1c6b      	adds	r3, r5, #1
 801d7c2:	9308      	str	r3, [sp, #32]
 801d7c4:	ab0f      	add	r3, sp, #60	@ 0x3c
 801d7c6:	9305      	str	r3, [sp, #20]
 801d7c8:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801d7cc:	9304      	str	r3, [sp, #16]
 801d7ce:	ab0e      	add	r3, sp, #56	@ 0x38
 801d7d0:	9303      	str	r3, [sp, #12]
 801d7d2:	ab0c      	add	r3, sp, #48	@ 0x30
 801d7d4:	9302      	str	r3, [sp, #8]
 801d7d6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801d7da:	9301      	str	r3, [sp, #4]
 801d7dc:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801d7e0:	9300      	str	r3, [sp, #0]
 801d7e2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801d7e6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801d7ea:	a908      	add	r1, sp, #32
 801d7ec:	a809      	add	r0, sp, #36	@ 0x24
 801d7ee:	f7ff fea8 	bl	801d542 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801d7f2:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801d7f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	bfbf      	itttt	lt
 801d7fc:	6823      	ldrlt	r3, [r4, #0]
 801d7fe:	3404      	addlt	r4, #4
 801d800:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d804:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801d806:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d808:	2b00      	cmp	r3, #0
 801d80a:	bfbf      	itttt	lt
 801d80c:	6823      	ldrlt	r3, [r4, #0]
 801d80e:	3404      	addlt	r4, #4
 801d810:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801d814:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801d816:	b1d9      	cbz	r1, 801d850 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801d818:	880b      	ldrh	r3, [r1, #0]
 801d81a:	2b69      	cmp	r3, #105	@ 0x69
 801d81c:	d01f      	beq.n	801d85e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801d81e:	d82f      	bhi.n	801d880 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19e>
 801d820:	2b58      	cmp	r3, #88	@ 0x58
 801d822:	d01c      	beq.n	801d85e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801d824:	d818      	bhi.n	801d858 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x176>
 801d826:	2b25      	cmp	r3, #37	@ 0x25
 801d828:	d034      	beq.n	801d894 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b2>
 801d82a:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801d82e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d830:	f1bb 0f00 	cmp.w	fp, #0
 801d834:	f000 80b7 	beq.w	801d9a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c4>
 801d838:	f8bb 5000 	ldrh.w	r5, [fp]
 801d83c:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801d840:	3301      	adds	r3, #1
 801d842:	930d      	str	r3, [sp, #52]	@ 0x34
 801d844:	e029      	b.n	801d89a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b8>
 801d846:	b10d      	cbz	r5, 801d84c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16a>
 801d848:	782a      	ldrb	r2, [r5, #0]
 801d84a:	e787      	b.n	801d75c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d84c:	462a      	mov	r2, r5
 801d84e:	e785      	b.n	801d75c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801d850:	2a00      	cmp	r2, #0
 801d852:	d0ea      	beq.n	801d82a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 801d854:	7813      	ldrb	r3, [r2, #0]
 801d856:	e7e0      	b.n	801d81a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x138>
 801d858:	3b63      	subs	r3, #99	@ 0x63
 801d85a:	2b01      	cmp	r3, #1
 801d85c:	d8e5      	bhi.n	801d82a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 801d85e:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801d862:	b329      	cbz	r1, 801d8b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ce>
 801d864:	880b      	ldrh	r3, [r1, #0]
 801d866:	2b69      	cmp	r3, #105	@ 0x69
 801d868:	d063      	beq.n	801d932 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801d86a:	d825      	bhi.n	801d8b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d6>
 801d86c:	2b63      	cmp	r3, #99	@ 0x63
 801d86e:	d038      	beq.n	801d8e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x200>
 801d870:	2b64      	cmp	r3, #100	@ 0x64
 801d872:	d05e      	beq.n	801d932 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801d874:	2b58      	cmp	r3, #88	@ 0x58
 801d876:	d07a      	beq.n	801d96e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28c>
 801d878:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801d87c:	4625      	mov	r5, r4
 801d87e:	e036      	b.n	801d8ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801d880:	2b73      	cmp	r3, #115	@ 0x73
 801d882:	d0ec      	beq.n	801d85e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801d884:	d802      	bhi.n	801d88c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 801d886:	2b6f      	cmp	r3, #111	@ 0x6f
 801d888:	d1cf      	bne.n	801d82a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x148>
 801d88a:	e7e8      	b.n	801d85e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801d88c:	2b75      	cmp	r3, #117	@ 0x75
 801d88e:	d0e6      	beq.n	801d85e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17c>
 801d890:	2b78      	cmp	r3, #120	@ 0x78
 801d892:	e7f9      	b.n	801d888 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a6>
 801d894:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d896:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801d89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d89c:	b10b      	cbz	r3, 801d8a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c0>
 801d89e:	3302      	adds	r3, #2
 801d8a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8a2:	9b08      	ldr	r3, [sp, #32]
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	f43f af30 	beq.w	801d70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d8aa:	3301      	adds	r3, #1
 801d8ac:	9308      	str	r3, [sp, #32]
 801d8ae:	e72c      	b.n	801d70a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801d8b0:	2a00      	cmp	r2, #0
 801d8b2:	d0e1      	beq.n	801d878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 801d8b4:	7813      	ldrb	r3, [r2, #0]
 801d8b6:	e7d6      	b.n	801d866 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x184>
 801d8b8:	2b73      	cmp	r3, #115	@ 0x73
 801d8ba:	d036      	beq.n	801d92a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x248>
 801d8bc:	d807      	bhi.n	801d8ce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ec>
 801d8be:	2b6f      	cmp	r3, #111	@ 0x6f
 801d8c0:	d1da      	bne.n	801d878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 801d8c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d8c4:	1d25      	adds	r5, r4, #4
 801d8c6:	eba8 0202 	sub.w	r2, r8, r2
 801d8ca:	2308      	movs	r3, #8
 801d8cc:	e049      	b.n	801d962 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x280>
 801d8ce:	2b75      	cmp	r3, #117	@ 0x75
 801d8d0:	d042      	beq.n	801d958 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x276>
 801d8d2:	2b78      	cmp	r3, #120	@ 0x78
 801d8d4:	d1d0      	bne.n	801d878 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x196>
 801d8d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d8d8:	1d25      	adds	r5, r4, #4
 801d8da:	eba8 0202 	sub.w	r2, r8, r2
 801d8de:	2310      	movs	r3, #16
 801d8e0:	e03f      	b.n	801d962 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x280>
 801d8e2:	6823      	ldr	r3, [r4, #0]
 801d8e4:	1d25      	adds	r5, r4, #4
 801d8e6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801d8ea:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801d8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8f0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d051      	beq.n	801d99c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ba>
 801d8f8:	881a      	ldrh	r2, [r3, #0]
 801d8fa:	a80d      	add	r0, sp, #52	@ 0x34
 801d8fc:	9005      	str	r0, [sp, #20]
 801d8fe:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801d902:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801d906:	9004      	str	r0, [sp, #16]
 801d908:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801d90a:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801d90e:	9003      	str	r0, [sp, #12]
 801d910:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801d914:	462c      	mov	r4, r5
 801d916:	9002      	str	r0, [sp, #8]
 801d918:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801d91a:	9001      	str	r0, [sp, #4]
 801d91c:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801d920:	9000      	str	r0, [sp, #0]
 801d922:	a810      	add	r0, sp, #64	@ 0x40
 801d924:	f7ff fd4a 	bl	801d3bc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801d928:	e7b7      	b.n	801d89a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b8>
 801d92a:	6823      	ldr	r3, [r4, #0]
 801d92c:	1d25      	adds	r5, r4, #4
 801d92e:	9310      	str	r3, [sp, #64]	@ 0x40
 801d930:	e7dd      	b.n	801d8ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801d932:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d934:	230a      	movs	r3, #10
 801d936:	eba8 0202 	sub.w	r2, r8, r2
 801d93a:	b292      	uxth	r2, r2
 801d93c:	4649      	mov	r1, r9
 801d93e:	6820      	ldr	r0, [r4, #0]
 801d940:	f7ff fcf2 	bl	801d328 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801d944:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801d948:	1d25      	adds	r5, r4, #4
 801d94a:	2b2d      	cmp	r3, #45	@ 0x2d
 801d94c:	d1cf      	bne.n	801d8ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801d94e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d952:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d954:	3302      	adds	r3, #2
 801d956:	e7ea      	b.n	801d92e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 801d958:	230a      	movs	r3, #10
 801d95a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d95c:	1d25      	adds	r5, r4, #4
 801d95e:	eba8 0202 	sub.w	r2, r8, r2
 801d962:	b292      	uxth	r2, r2
 801d964:	4649      	mov	r1, r9
 801d966:	6820      	ldr	r0, [r4, #0]
 801d968:	f7ff fd0a 	bl	801d380 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801d96c:	e7bf      	b.n	801d8ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801d96e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d970:	2310      	movs	r3, #16
 801d972:	eba8 0202 	sub.w	r2, r8, r2
 801d976:	b292      	uxth	r2, r2
 801d978:	4649      	mov	r1, r9
 801d97a:	6820      	ldr	r0, [r4, #0]
 801d97c:	f7ff fd00 	bl	801d380 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801d980:	1d25      	adds	r5, r4, #4
 801d982:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801d986:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d0af      	beq.n	801d8ee <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20c>
 801d98e:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801d992:	2919      	cmp	r1, #25
 801d994:	d8f7      	bhi.n	801d986 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a4>
 801d996:	3b20      	subs	r3, #32
 801d998:	8013      	strh	r3, [r2, #0]
 801d99a:	e7f4      	b.n	801d986 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a4>
 801d99c:	9a08      	ldr	r2, [sp, #32]
 801d99e:	2a00      	cmp	r2, #0
 801d9a0:	d0ab      	beq.n	801d8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x218>
 801d9a2:	7812      	ldrb	r2, [r2, #0]
 801d9a4:	e7a9      	b.n	801d8fa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x218>
 801d9a6:	2d00      	cmp	r5, #0
 801d9a8:	f43f af48 	beq.w	801d83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15a>
 801d9ac:	782d      	ldrb	r5, [r5, #0]
 801d9ae:	e745      	b.n	801d83c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15a>

0801d9b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801d9b0:	b507      	push	{r0, r1, r2, lr}
 801d9b2:	9300      	str	r3, [sp, #0]
 801d9b4:	4613      	mov	r3, r2
 801d9b6:	2200      	movs	r2, #0
 801d9b8:	f7ff fe93 	bl	801d6e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801d9bc:	b003      	add	sp, #12
 801d9be:	f85d fb04 	ldr.w	pc, [sp], #4

0801d9c2 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801d9c2:	b40c      	push	{r2, r3}
 801d9c4:	b507      	push	{r0, r1, r2, lr}
 801d9c6:	ab04      	add	r3, sp, #16
 801d9c8:	f853 2b04 	ldr.w	r2, [r3], #4
 801d9cc:	9301      	str	r3, [sp, #4]
 801d9ce:	f7ff ffef 	bl	801d9b0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801d9d2:	b003      	add	sp, #12
 801d9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d9d8:	b002      	add	sp, #8
 801d9da:	4770      	bx	lr

0801d9dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801d9dc:	4b01      	ldr	r3, [pc, #4]	@ (801d9e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801d9de:	6018      	str	r0, [r3, #0]
 801d9e0:	4770      	bx	lr
 801d9e2:	bf00      	nop
 801d9e4:	2001216c 	.word	0x2001216c

0801d9e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801d9e8:	4b06      	ldr	r3, [pc, #24]	@ (801da04 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801d9ea:	881a      	ldrh	r2, [r3, #0]
 801d9ec:	4282      	cmp	r2, r0
 801d9ee:	d807      	bhi.n	801da00 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801d9f0:	4b05      	ldr	r3, [pc, #20]	@ (801da08 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801d9f2:	881b      	ldrh	r3, [r3, #0]
 801d9f4:	4413      	add	r3, r2
 801d9f6:	4298      	cmp	r0, r3
 801d9f8:	bfac      	ite	ge
 801d9fa:	2000      	movge	r0, #0
 801d9fc:	2001      	movlt	r0, #1
 801d9fe:	4770      	bx	lr
 801da00:	2000      	movs	r0, #0
 801da02:	4770      	bx	lr
 801da04:	2001218c 	.word	0x2001218c
 801da08:	20012190 	.word	0x20012190

0801da0c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801da0c:	b508      	push	{r3, lr}
 801da0e:	4601      	mov	r1, r0
 801da10:	f7ff ffea 	bl	801d9e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801da14:	b118      	cbz	r0, 801da1e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801da16:	4b02      	ldr	r3, [pc, #8]	@ (801da20 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801da18:	681b      	ldr	r3, [r3, #0]
 801da1a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801da1e:	bd08      	pop	{r3, pc}
 801da20:	20012170 	.word	0x20012170

0801da24 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801da24:	b5f0      	push	{r4, r5, r6, r7, lr}
 801da26:	4c24      	ldr	r4, [pc, #144]	@ (801dab8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801da28:	6823      	ldr	r3, [r4, #0]
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d042      	beq.n	801dab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801da2e:	4a23      	ldr	r2, [pc, #140]	@ (801dabc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801da30:	4d23      	ldr	r5, [pc, #140]	@ (801dac0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801da32:	8811      	ldrh	r1, [r2, #0]
 801da34:	f8b5 c000 	ldrh.w	ip, [r5]
 801da38:	4822      	ldr	r0, [pc, #136]	@ (801dac4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801da3a:	4461      	add	r1, ip
 801da3c:	1c4a      	adds	r2, r1, #1
 801da3e:	f022 0201 	bic.w	r2, r2, #1
 801da42:	008f      	lsls	r7, r1, #2
 801da44:	0412      	lsls	r2, r2, #16
 801da46:	19de      	adds	r6, r3, r7
 801da48:	0c12      	lsrs	r2, r2, #16
 801da4a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801da4e:	6006      	str	r6, [r0, #0]
 801da50:	4e1d      	ldr	r6, [pc, #116]	@ (801dac8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801da52:	19da      	adds	r2, r3, r7
 801da54:	6032      	str	r2, [r6, #0]
 801da56:	220e      	movs	r2, #14
 801da58:	fb02 f20c 	mul.w	r2, r2, ip
 801da5c:	3203      	adds	r2, #3
 801da5e:	f022 0203 	bic.w	r2, r2, #3
 801da62:	443a      	add	r2, r7
 801da64:	4f19      	ldr	r7, [pc, #100]	@ (801dacc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801da66:	4413      	add	r3, r2
 801da68:	603b      	str	r3, [r7, #0]
 801da6a:	2300      	movs	r3, #0
 801da6c:	4f18      	ldr	r7, [pc, #96]	@ (801dad0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801da6e:	469c      	mov	ip, r3
 801da70:	803b      	strh	r3, [r7, #0]
 801da72:	4f18      	ldr	r7, [pc, #96]	@ (801dad4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801da74:	683f      	ldr	r7, [r7, #0]
 801da76:	1aba      	subs	r2, r7, r2
 801da78:	4f17      	ldr	r7, [pc, #92]	@ (801dad8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801da7a:	603a      	str	r2, [r7, #0]
 801da7c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801da80:	4a16      	ldr	r2, [pc, #88]	@ (801dadc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801da82:	8013      	strh	r3, [r2, #0]
 801da84:	428b      	cmp	r3, r1
 801da86:	d10d      	bne.n	801daa4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801da88:	2300      	movs	r3, #0
 801da8a:	240e      	movs	r4, #14
 801da8c:	882d      	ldrh	r5, [r5, #0]
 801da8e:	6830      	ldr	r0, [r6, #0]
 801da90:	429d      	cmp	r5, r3
 801da92:	d90f      	bls.n	801dab4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801da94:	fb04 0203 	mla	r2, r4, r3, r0
 801da98:	7b11      	ldrb	r1, [r2, #12]
 801da9a:	3301      	adds	r3, #1
 801da9c:	f36f 1145 	bfc	r1, #5, #1
 801daa0:	7311      	strb	r1, [r2, #12]
 801daa2:	e7f5      	b.n	801da90 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801daa4:	6822      	ldr	r2, [r4, #0]
 801daa6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801daaa:	6802      	ldr	r2, [r0, #0]
 801daac:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801dab0:	3301      	adds	r3, #1
 801dab2:	e7e7      	b.n	801da84 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801dab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dab6:	bf00      	nop
 801dab8:	20012170 	.word	0x20012170
 801dabc:	2001218c 	.word	0x2001218c
 801dac0:	20012190 	.word	0x20012190
 801dac4:	20012184 	.word	0x20012184
 801dac8:	20012174 	.word	0x20012174
 801dacc:	2001217c 	.word	0x2001217c
 801dad0:	2001218e 	.word	0x2001218e
 801dad4:	20012178 	.word	0x20012178
 801dad8:	20012188 	.word	0x20012188
 801dadc:	20012180 	.word	0x20012180

0801dae0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801dae0:	4b06      	ldr	r3, [pc, #24]	@ (801dafc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	b943      	cbnz	r3, 801daf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dae6:	b139      	cbz	r1, 801daf8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801dae8:	4b05      	ldr	r3, [pc, #20]	@ (801db00 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801daea:	801a      	strh	r2, [r3, #0]
 801daec:	4b05      	ldr	r3, [pc, #20]	@ (801db04 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801daee:	6019      	str	r1, [r3, #0]
 801daf0:	4b05      	ldr	r3, [pc, #20]	@ (801db08 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801daf2:	6018      	str	r0, [r3, #0]
 801daf4:	f7ff bf96 	b.w	801da24 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801daf8:	4770      	bx	lr
 801dafa:	bf00      	nop
 801dafc:	2001217c 	.word	0x2001217c
 801db00:	20012190 	.word	0x20012190
 801db04:	20012178 	.word	0x20012178
 801db08:	20012170 	.word	0x20012170

0801db0c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801db0c:	b470      	push	{r4, r5, r6}
 801db0e:	4c07      	ldr	r4, [pc, #28]	@ (801db2c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801db10:	4605      	mov	r5, r0
 801db12:	6826      	ldr	r6, [r4, #0]
 801db14:	4610      	mov	r0, r2
 801db16:	9a03      	ldr	r2, [sp, #12]
 801db18:	b936      	cbnz	r6, 801db28 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801db1a:	6025      	str	r5, [r4, #0]
 801db1c:	4c04      	ldr	r4, [pc, #16]	@ (801db30 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801db1e:	8021      	strh	r1, [r4, #0]
 801db20:	bc70      	pop	{r4, r5, r6}
 801db22:	4619      	mov	r1, r3
 801db24:	f7ff bfdc 	b.w	801dae0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801db28:	bc70      	pop	{r4, r5, r6}
 801db2a:	4770      	bx	lr
 801db2c:	20012194 	.word	0x20012194
 801db30:	2001218c 	.word	0x2001218c

0801db34 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801db34:	4a12      	ldr	r2, [pc, #72]	@ (801db80 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801db36:	8803      	ldrh	r3, [r0, #0]
 801db38:	8812      	ldrh	r2, [r2, #0]
 801db3a:	4293      	cmp	r3, r2
 801db3c:	d207      	bcs.n	801db4e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801db3e:	2114      	movs	r1, #20
 801db40:	4a10      	ldr	r2, [pc, #64]	@ (801db84 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801db42:	6812      	ldr	r2, [r2, #0]
 801db44:	fb01 2303 	mla	r3, r1, r3, r2
 801db48:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801db4c:	4770      	bx	lr
 801db4e:	490e      	ldr	r1, [pc, #56]	@ (801db88 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801db50:	8809      	ldrh	r1, [r1, #0]
 801db52:	4411      	add	r1, r2
 801db54:	428b      	cmp	r3, r1
 801db56:	da04      	bge.n	801db62 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801db58:	1a9b      	subs	r3, r3, r2
 801db5a:	4a0c      	ldr	r2, [pc, #48]	@ (801db8c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801db5c:	210e      	movs	r1, #14
 801db5e:	6812      	ldr	r2, [r2, #0]
 801db60:	e7f0      	b.n	801db44 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801db62:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801db66:	4293      	cmp	r3, r2
 801db68:	d108      	bne.n	801db7c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801db6a:	4b09      	ldr	r3, [pc, #36]	@ (801db90 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801db6c:	781b      	ldrb	r3, [r3, #0]
 801db6e:	b91b      	cbnz	r3, 801db78 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801db70:	4b08      	ldr	r3, [pc, #32]	@ (801db94 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801db72:	f9b3 0000 	ldrsh.w	r0, [r3]
 801db76:	4770      	bx	lr
 801db78:	4b07      	ldr	r3, [pc, #28]	@ (801db98 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801db7a:	e7fa      	b.n	801db72 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801db7c:	2000      	movs	r0, #0
 801db7e:	4770      	bx	lr
 801db80:	2001218c 	.word	0x2001218c
 801db84:	20012194 	.word	0x20012194
 801db88:	20012190 	.word	0x20012190
 801db8c:	20012174 	.word	0x20012174
 801db90:	200120fc 	.word	0x200120fc
 801db94:	200120fe 	.word	0x200120fe
 801db98:	20012100 	.word	0x20012100

0801db9c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801db9c:	4a12      	ldr	r2, [pc, #72]	@ (801dbe8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801db9e:	8803      	ldrh	r3, [r0, #0]
 801dba0:	8812      	ldrh	r2, [r2, #0]
 801dba2:	4293      	cmp	r3, r2
 801dba4:	d207      	bcs.n	801dbb6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801dba6:	2114      	movs	r1, #20
 801dba8:	4a10      	ldr	r2, [pc, #64]	@ (801dbec <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801dbaa:	6812      	ldr	r2, [r2, #0]
 801dbac:	fb01 2303 	mla	r3, r1, r3, r2
 801dbb0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801dbb4:	4770      	bx	lr
 801dbb6:	490e      	ldr	r1, [pc, #56]	@ (801dbf0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801dbb8:	8809      	ldrh	r1, [r1, #0]
 801dbba:	4411      	add	r1, r2
 801dbbc:	428b      	cmp	r3, r1
 801dbbe:	da04      	bge.n	801dbca <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801dbc0:	1a9b      	subs	r3, r3, r2
 801dbc2:	4a0c      	ldr	r2, [pc, #48]	@ (801dbf4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801dbc4:	210e      	movs	r1, #14
 801dbc6:	6812      	ldr	r2, [r2, #0]
 801dbc8:	e7f0      	b.n	801dbac <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801dbca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801dbce:	4293      	cmp	r3, r2
 801dbd0:	d108      	bne.n	801dbe4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801dbd2:	4b09      	ldr	r3, [pc, #36]	@ (801dbf8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801dbd4:	781b      	ldrb	r3, [r3, #0]
 801dbd6:	b91b      	cbnz	r3, 801dbe0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801dbd8:	4b08      	ldr	r3, [pc, #32]	@ (801dbfc <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801dbda:	f9b3 0000 	ldrsh.w	r0, [r3]
 801dbde:	4770      	bx	lr
 801dbe0:	4b07      	ldr	r3, [pc, #28]	@ (801dc00 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801dbe2:	e7fa      	b.n	801dbda <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801dbe4:	2000      	movs	r0, #0
 801dbe6:	4770      	bx	lr
 801dbe8:	2001218c 	.word	0x2001218c
 801dbec:	20012194 	.word	0x20012194
 801dbf0:	20012190 	.word	0x20012190
 801dbf4:	20012174 	.word	0x20012174
 801dbf8:	200120fc 	.word	0x200120fc
 801dbfc:	20012100 	.word	0x20012100
 801dc00:	200120fe 	.word	0x200120fe

0801dc04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801dc04:	b530      	push	{r4, r5, lr}
 801dc06:	4a22      	ldr	r2, [pc, #136]	@ (801dc90 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801dc08:	880b      	ldrh	r3, [r1, #0]
 801dc0a:	8812      	ldrh	r2, [r2, #0]
 801dc0c:	4293      	cmp	r3, r2
 801dc0e:	d213      	bcs.n	801dc38 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801dc10:	2114      	movs	r1, #20
 801dc12:	4a20      	ldr	r2, [pc, #128]	@ (801dc94 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801dc14:	6812      	ldr	r2, [r2, #0]
 801dc16:	fb01 2303 	mla	r3, r1, r3, r2
 801dc1a:	8a1a      	ldrh	r2, [r3, #16]
 801dc1c:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801dc20:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801dc24:	8a5b      	ldrh	r3, [r3, #18]
 801dc26:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dc2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc2e:	8004      	strh	r4, [r0, #0]
 801dc30:	8041      	strh	r1, [r0, #2]
 801dc32:	8082      	strh	r2, [r0, #4]
 801dc34:	80c3      	strh	r3, [r0, #6]
 801dc36:	e024      	b.n	801dc82 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801dc38:	4917      	ldr	r1, [pc, #92]	@ (801dc98 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801dc3a:	8809      	ldrh	r1, [r1, #0]
 801dc3c:	4411      	add	r1, r2
 801dc3e:	428b      	cmp	r3, r1
 801dc40:	da10      	bge.n	801dc64 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801dc42:	1a9b      	subs	r3, r3, r2
 801dc44:	220e      	movs	r2, #14
 801dc46:	4353      	muls	r3, r2
 801dc48:	4a14      	ldr	r2, [pc, #80]	@ (801dc9c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801dc4a:	6811      	ldr	r1, [r2, #0]
 801dc4c:	18ca      	adds	r2, r1, r3
 801dc4e:	5ecd      	ldrsh	r5, [r1, r3]
 801dc50:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801dc54:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801dc58:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801dc5c:	8005      	strh	r5, [r0, #0]
 801dc5e:	8044      	strh	r4, [r0, #2]
 801dc60:	8081      	strh	r1, [r0, #4]
 801dc62:	e7e7      	b.n	801dc34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801dc64:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801dc68:	4293      	cmp	r3, r2
 801dc6a:	d10b      	bne.n	801dc84 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801dc6c:	4b0c      	ldr	r3, [pc, #48]	@ (801dca0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801dc6e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801dc72:	4b0c      	ldr	r3, [pc, #48]	@ (801dca4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801dc74:	8081      	strh	r1, [r0, #4]
 801dc76:	f9b3 2000 	ldrsh.w	r2, [r3]
 801dc7a:	2300      	movs	r3, #0
 801dc7c:	80c2      	strh	r2, [r0, #6]
 801dc7e:	8003      	strh	r3, [r0, #0]
 801dc80:	8043      	strh	r3, [r0, #2]
 801dc82:	bd30      	pop	{r4, r5, pc}
 801dc84:	2300      	movs	r3, #0
 801dc86:	8003      	strh	r3, [r0, #0]
 801dc88:	8043      	strh	r3, [r0, #2]
 801dc8a:	8083      	strh	r3, [r0, #4]
 801dc8c:	e7d2      	b.n	801dc34 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801dc8e:	bf00      	nop
 801dc90:	2001218c 	.word	0x2001218c
 801dc94:	20012194 	.word	0x20012194
 801dc98:	20012190 	.word	0x20012190
 801dc9c:	20012174 	.word	0x20012174
 801dca0:	200120f8 	.word	0x200120f8
 801dca4:	200120fa 	.word	0x200120fa

0801dca8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801dca8:	4a17      	ldr	r2, [pc, #92]	@ (801dd08 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801dcaa:	8803      	ldrh	r3, [r0, #0]
 801dcac:	8812      	ldrh	r2, [r2, #0]
 801dcae:	4293      	cmp	r3, r2
 801dcb0:	d213      	bcs.n	801dcda <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801dcb2:	2114      	movs	r1, #20
 801dcb4:	4a15      	ldr	r2, [pc, #84]	@ (801dd0c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801dcb6:	6812      	ldr	r2, [r2, #0]
 801dcb8:	fb01 2303 	mla	r3, r1, r3, r2
 801dcbc:	8a1a      	ldrh	r2, [r3, #16]
 801dcbe:	8919      	ldrh	r1, [r3, #8]
 801dcc0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801dcc4:	428a      	cmp	r2, r1
 801dcc6:	db1d      	blt.n	801dd04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801dcc8:	8a58      	ldrh	r0, [r3, #18]
 801dcca:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801dcce:	895b      	ldrh	r3, [r3, #10]
 801dcd0:	4298      	cmp	r0, r3
 801dcd2:	bfac      	ite	ge
 801dcd4:	2000      	movge	r0, #0
 801dcd6:	2001      	movlt	r0, #1
 801dcd8:	4770      	bx	lr
 801dcda:	490d      	ldr	r1, [pc, #52]	@ (801dd10 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801dcdc:	8809      	ldrh	r1, [r1, #0]
 801dcde:	4411      	add	r1, r2
 801dce0:	428b      	cmp	r3, r1
 801dce2:	da0d      	bge.n	801dd00 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801dce4:	210e      	movs	r1, #14
 801dce6:	1a9b      	subs	r3, r3, r2
 801dce8:	4a0a      	ldr	r2, [pc, #40]	@ (801dd14 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801dcea:	6812      	ldr	r2, [r2, #0]
 801dcec:	fb01 2303 	mla	r3, r1, r3, r2
 801dcf0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801dcf4:	891a      	ldrh	r2, [r3, #8]
 801dcf6:	4291      	cmp	r1, r2
 801dcf8:	db04      	blt.n	801dd04 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801dcfa:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801dcfe:	e7e6      	b.n	801dcce <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801dd00:	2000      	movs	r0, #0
 801dd02:	4770      	bx	lr
 801dd04:	2001      	movs	r0, #1
 801dd06:	4770      	bx	lr
 801dd08:	2001218c 	.word	0x2001218c
 801dd0c:	20012194 	.word	0x20012194
 801dd10:	20012190 	.word	0x20012190
 801dd14:	20012174 	.word	0x20012174

0801dd18 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801dd18:	4a12      	ldr	r2, [pc, #72]	@ (801dd64 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801dd1a:	8803      	ldrh	r3, [r0, #0]
 801dd1c:	8811      	ldrh	r1, [r2, #0]
 801dd1e:	428b      	cmp	r3, r1
 801dd20:	d20b      	bcs.n	801dd3a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801dd22:	4a11      	ldr	r2, [pc, #68]	@ (801dd68 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dd24:	6812      	ldr	r2, [r2, #0]
 801dd26:	b112      	cbz	r2, 801dd2e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801dd28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dd2c:	b9c0      	cbnz	r0, 801dd60 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801dd2e:	4a0f      	ldr	r2, [pc, #60]	@ (801dd6c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801dd30:	6811      	ldr	r1, [r2, #0]
 801dd32:	2214      	movs	r2, #20
 801dd34:	4353      	muls	r3, r2
 801dd36:	58c8      	ldr	r0, [r1, r3]
 801dd38:	4770      	bx	lr
 801dd3a:	4a0d      	ldr	r2, [pc, #52]	@ (801dd70 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801dd3c:	8812      	ldrh	r2, [r2, #0]
 801dd3e:	440a      	add	r2, r1
 801dd40:	4293      	cmp	r3, r2
 801dd42:	da04      	bge.n	801dd4e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801dd44:	4a08      	ldr	r2, [pc, #32]	@ (801dd68 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801dd46:	6812      	ldr	r2, [r2, #0]
 801dd48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801dd4c:	4770      	bx	lr
 801dd4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801dd52:	4293      	cmp	r3, r2
 801dd54:	d103      	bne.n	801dd5e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801dd56:	4b07      	ldr	r3, [pc, #28]	@ (801dd74 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801dd58:	681b      	ldr	r3, [r3, #0]
 801dd5a:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801dd5c:	4770      	bx	lr
 801dd5e:	2000      	movs	r0, #0
 801dd60:	4770      	bx	lr
 801dd62:	bf00      	nop
 801dd64:	2001218c 	.word	0x2001218c
 801dd68:	20012170 	.word	0x20012170
 801dd6c:	20012194 	.word	0x20012194
 801dd70:	20012190 	.word	0x20012190
 801dd74:	20012104 	.word	0x20012104

0801dd78 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801dd78:	4b24      	ldr	r3, [pc, #144]	@ (801de0c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801dd7a:	8802      	ldrh	r2, [r0, #0]
 801dd7c:	8818      	ldrh	r0, [r3, #0]
 801dd7e:	4282      	cmp	r2, r0
 801dd80:	d221      	bcs.n	801ddc6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801dd82:	4b23      	ldr	r3, [pc, #140]	@ (801de10 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801dd84:	6819      	ldr	r1, [r3, #0]
 801dd86:	2314      	movs	r3, #20
 801dd88:	fb03 1302 	mla	r3, r3, r2, r1
 801dd8c:	6858      	ldr	r0, [r3, #4]
 801dd8e:	2800      	cmp	r0, #0
 801dd90:	d03a      	beq.n	801de08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801dd92:	4920      	ldr	r1, [pc, #128]	@ (801de14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801dd94:	6809      	ldr	r1, [r1, #0]
 801dd96:	2900      	cmp	r1, #0
 801dd98:	d036      	beq.n	801de08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801dd9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801dd9e:	2900      	cmp	r1, #0
 801dda0:	d032      	beq.n	801de08 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801dda2:	891a      	ldrh	r2, [r3, #8]
 801dda4:	8958      	ldrh	r0, [r3, #10]
 801dda6:	4350      	muls	r0, r2
 801dda8:	7c5a      	ldrb	r2, [r3, #17]
 801ddaa:	7cdb      	ldrb	r3, [r3, #19]
 801ddac:	0952      	lsrs	r2, r2, #5
 801ddae:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801ddb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801ddb6:	2b0b      	cmp	r3, #11
 801ddb8:	bf18      	it	ne
 801ddba:	0040      	lslne	r0, r0, #1
 801ddbc:	3003      	adds	r0, #3
 801ddbe:	f020 0003 	bic.w	r0, r0, #3
 801ddc2:	4408      	add	r0, r1
 801ddc4:	4770      	bx	lr
 801ddc6:	4b14      	ldr	r3, [pc, #80]	@ (801de18 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801ddc8:	881b      	ldrh	r3, [r3, #0]
 801ddca:	4403      	add	r3, r0
 801ddcc:	429a      	cmp	r2, r3
 801ddce:	da1a      	bge.n	801de06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801ddd0:	210e      	movs	r1, #14
 801ddd2:	4b12      	ldr	r3, [pc, #72]	@ (801de1c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801ddd4:	1a10      	subs	r0, r2, r0
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	fb01 3000 	mla	r0, r1, r0, r3
 801dddc:	7b03      	ldrb	r3, [r0, #12]
 801ddde:	f003 031f 	and.w	r3, r3, #31
 801dde2:	2b0b      	cmp	r3, #11
 801dde4:	d10b      	bne.n	801ddfe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801dde6:	8903      	ldrh	r3, [r0, #8]
 801dde8:	8940      	ldrh	r0, [r0, #10]
 801ddea:	4358      	muls	r0, r3
 801ddec:	4b09      	ldr	r3, [pc, #36]	@ (801de14 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801ddee:	3003      	adds	r0, #3
 801ddf0:	6819      	ldr	r1, [r3, #0]
 801ddf2:	f020 0303 	bic.w	r3, r0, #3
 801ddf6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801ddfa:	4418      	add	r0, r3
 801ddfc:	4770      	bx	lr
 801ddfe:	2b0d      	cmp	r3, #13
 801de00:	d101      	bne.n	801de06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801de02:	300d      	adds	r0, #13
 801de04:	4770      	bx	lr
 801de06:	2000      	movs	r0, #0
 801de08:	4770      	bx	lr
 801de0a:	bf00      	nop
 801de0c:	2001218c 	.word	0x2001218c
 801de10:	20012194 	.word	0x20012194
 801de14:	20012170 	.word	0x20012170
 801de18:	20012190 	.word	0x20012190
 801de1c:	20012174 	.word	0x20012174

0801de20 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801de20:	b510      	push	{r4, lr}
 801de22:	4b1f      	ldr	r3, [pc, #124]	@ (801dea0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801de24:	8802      	ldrh	r2, [r0, #0]
 801de26:	881b      	ldrh	r3, [r3, #0]
 801de28:	429a      	cmp	r2, r3
 801de2a:	d21a      	bcs.n	801de62 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801de2c:	2114      	movs	r1, #20
 801de2e:	4b1d      	ldr	r3, [pc, #116]	@ (801dea4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	fb01 3102 	mla	r1, r1, r2, r3
 801de36:	7c4b      	ldrb	r3, [r1, #17]
 801de38:	0958      	lsrs	r0, r3, #5
 801de3a:	7ccb      	ldrb	r3, [r1, #19]
 801de3c:	491a      	ldr	r1, [pc, #104]	@ (801dea8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801de3e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801de42:	6809      	ldr	r1, [r1, #0]
 801de44:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801de48:	b2d8      	uxtb	r0, r3
 801de4a:	b149      	cbz	r1, 801de60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801de4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801de50:	b132      	cbz	r2, 801de60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801de52:	2b0e      	cmp	r3, #14
 801de54:	d021      	beq.n	801de9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801de56:	280f      	cmp	r0, #15
 801de58:	d01d      	beq.n	801de96 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801de5a:	2810      	cmp	r0, #16
 801de5c:	bf08      	it	eq
 801de5e:	2002      	moveq	r0, #2
 801de60:	bd10      	pop	{r4, pc}
 801de62:	4912      	ldr	r1, [pc, #72]	@ (801deac <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801de64:	8809      	ldrh	r1, [r1, #0]
 801de66:	4419      	add	r1, r3
 801de68:	428a      	cmp	r2, r1
 801de6a:	da09      	bge.n	801de80 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801de6c:	210e      	movs	r1, #14
 801de6e:	1ad3      	subs	r3, r2, r3
 801de70:	4a0f      	ldr	r2, [pc, #60]	@ (801deb0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801de72:	6812      	ldr	r2, [r2, #0]
 801de74:	fb01 2303 	mla	r3, r1, r3, r2
 801de78:	7b18      	ldrb	r0, [r3, #12]
 801de7a:	f000 001f 	and.w	r0, r0, #31
 801de7e:	e7ef      	b.n	801de60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801de80:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801de84:	429a      	cmp	r2, r3
 801de86:	d108      	bne.n	801de9a <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801de88:	f7f0 fbac 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 801de8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801de90:	6803      	ldr	r3, [r0, #0]
 801de92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de94:	4718      	bx	r3
 801de96:	2001      	movs	r0, #1
 801de98:	e7e2      	b.n	801de60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801de9a:	2000      	movs	r0, #0
 801de9c:	e7e0      	b.n	801de60 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801de9e:	bf00      	nop
 801dea0:	2001218c 	.word	0x2001218c
 801dea4:	20012194 	.word	0x20012194
 801dea8:	20012170 	.word	0x20012170
 801deac:	20012190 	.word	0x20012190
 801deb0:	20012174 	.word	0x20012174

0801deb4 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801deb4:	2010      	movs	r0, #16
 801deb6:	4770      	bx	lr

0801deb8 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 801deb8:	2000      	movs	r0, #0
 801deba:	4770      	bx	lr

0801debc <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 801debc:	4b02      	ldr	r3, [pc, #8]	@ (801dec8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 801debe:	8818      	ldrh	r0, [r3, #0]
 801dec0:	0040      	lsls	r0, r0, #1
 801dec2:	b280      	uxth	r0, r0
 801dec4:	4770      	bx	lr
 801dec6:	bf00      	nop
 801dec8:	200120fe 	.word	0x200120fe

0801decc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801decc:	2bff      	cmp	r3, #255	@ 0xff
 801dece:	d05e      	beq.n	801df8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 801ded0:	2a0b      	cmp	r2, #11
 801ded2:	d058      	beq.n	801df86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801ded4:	d80e      	bhi.n	801def4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 801ded6:	2a03      	cmp	r2, #3
 801ded8:	d04d      	beq.n	801df76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 801deda:	d804      	bhi.n	801dee6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 801dedc:	2a01      	cmp	r2, #1
 801dede:	d04c      	beq.n	801df7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 801dee0:	d94d      	bls.n	801df7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 801dee2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801dee4:	e031      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801dee6:	2a09      	cmp	r2, #9
 801dee8:	d04d      	beq.n	801df86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 801deea:	d84a      	bhi.n	801df82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801deec:	2a08      	cmp	r2, #8
 801deee:	d048      	beq.n	801df82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801def0:	2300      	movs	r3, #0
 801def2:	e02a      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801def4:	2a2f      	cmp	r2, #47	@ 0x2f
 801def6:	d02c      	beq.n	801df52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 801def8:	d811      	bhi.n	801df1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 801defa:	2a2d      	cmp	r2, #45	@ 0x2d
 801defc:	d018      	beq.n	801df30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 801defe:	d831      	bhi.n	801df64 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 801df00:	2a2c      	cmp	r2, #44	@ 0x2c
 801df02:	d1f5      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df04:	684a      	ldr	r2, [r1, #4]
 801df06:	7813      	ldrb	r3, [r2, #0]
 801df08:	7852      	ldrb	r2, [r2, #1]
 801df0a:	2a00      	cmp	r2, #0
 801df0c:	d1f0      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df0e:	2b01      	cmp	r3, #1
 801df10:	d01d      	beq.n	801df4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801df12:	2b00      	cmp	r3, #0
 801df14:	d02d      	beq.n	801df72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 801df16:	2b02      	cmp	r3, #2
 801df18:	d1ea      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df1a:	68c3      	ldr	r3, [r0, #12]
 801df1c:	e015      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df1e:	2a31      	cmp	r2, #49	@ 0x31
 801df20:	d004      	beq.n	801df2c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 801df22:	d332      	bcc.n	801df8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801df24:	2a32      	cmp	r2, #50	@ 0x32
 801df26:	d030      	beq.n	801df8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 801df28:	2a33      	cmp	r2, #51	@ 0x33
 801df2a:	d1e1      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df2c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 801df2e:	e00c      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df30:	684a      	ldr	r2, [r1, #4]
 801df32:	7813      	ldrb	r3, [r2, #0]
 801df34:	7852      	ldrb	r2, [r2, #1]
 801df36:	2a00      	cmp	r2, #0
 801df38:	d1da      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df3a:	2b01      	cmp	r3, #1
 801df3c:	d004      	beq.n	801df48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 801df3e:	d30f      	bcc.n	801df60 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 801df40:	2b02      	cmp	r3, #2
 801df42:	d1d5      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df44:	6943      	ldr	r3, [r0, #20]
 801df46:	e000      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df48:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801df4a:	4618      	mov	r0, r3
 801df4c:	4770      	bx	lr
 801df4e:	69c3      	ldr	r3, [r0, #28]
 801df50:	e7fb      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df52:	684b      	ldr	r3, [r1, #4]
 801df54:	781a      	ldrb	r2, [r3, #0]
 801df56:	785b      	ldrb	r3, [r3, #1]
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d1c9      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df5c:	2a00      	cmp	r2, #0
 801df5e:	d1f4      	bne.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df60:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801df62:	e7f2      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df64:	684b      	ldr	r3, [r1, #4]
 801df66:	781a      	ldrb	r2, [r3, #0]
 801df68:	785b      	ldrb	r3, [r3, #1]
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d1c0      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801df6e:	2a00      	cmp	r2, #0
 801df70:	d1eb      	bne.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df72:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801df74:	e7e9      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df76:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801df78:	e7e7      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df7a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801df7c:	e7e5      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df7e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801df80:	e7e3      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df82:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 801df84:	e7e1      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df86:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 801df88:	e7df      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df8a:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 801df8c:	e7dd      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801df8e:	2a0b      	cmp	r2, #11
 801df90:	d059      	beq.n	801e046 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801df92:	d80e      	bhi.n	801dfb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 801df94:	2a03      	cmp	r2, #3
 801df96:	d050      	beq.n	801e03a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 801df98:	d804      	bhi.n	801dfa4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 801df9a:	2a01      	cmp	r2, #1
 801df9c:	d04f      	beq.n	801e03e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 801df9e:	d950      	bls.n	801e042 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 801dfa0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801dfa2:	e7d2      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801dfa4:	2a09      	cmp	r2, #9
 801dfa6:	d04e      	beq.n	801e046 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 801dfa8:	d801      	bhi.n	801dfae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801dfaa:	2a08      	cmp	r2, #8
 801dfac:	d1a0      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfae:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 801dfb0:	e7cb      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801dfb2:	2a2f      	cmp	r2, #47	@ 0x2f
 801dfb4:	d02d      	beq.n	801e012 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 801dfb6:	d811      	bhi.n	801dfdc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 801dfb8:	2a2d      	cmp	r2, #45	@ 0x2d
 801dfba:	d018      	beq.n	801dfee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 801dfbc:	d833      	bhi.n	801e026 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 801dfbe:	2a2c      	cmp	r2, #44	@ 0x2c
 801dfc0:	d196      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfc2:	684a      	ldr	r2, [r1, #4]
 801dfc4:	7813      	ldrb	r3, [r2, #0]
 801dfc6:	7852      	ldrb	r2, [r2, #1]
 801dfc8:	2a00      	cmp	r2, #0
 801dfca:	d191      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfcc:	2b01      	cmp	r3, #1
 801dfce:	d01e      	beq.n	801e00e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d030      	beq.n	801e036 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 801dfd4:	2b02      	cmp	r3, #2
 801dfd6:	d18b      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfd8:	6903      	ldr	r3, [r0, #16]
 801dfda:	e7b6      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801dfdc:	2a31      	cmp	r2, #49	@ 0x31
 801dfde:	d004      	beq.n	801dfea <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 801dfe0:	d333      	bcc.n	801e04a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801dfe2:	2a32      	cmp	r2, #50	@ 0x32
 801dfe4:	d031      	beq.n	801e04a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 801dfe6:	2a33      	cmp	r2, #51	@ 0x33
 801dfe8:	d182      	bne.n	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dfea:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 801dfec:	e7ad      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801dfee:	684a      	ldr	r2, [r1, #4]
 801dff0:	7813      	ldrb	r3, [r2, #0]
 801dff2:	7852      	ldrb	r2, [r2, #1]
 801dff4:	2a00      	cmp	r2, #0
 801dff6:	f47f af7b 	bne.w	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801dffa:	2b01      	cmp	r3, #1
 801dffc:	d005      	beq.n	801e00a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 801dffe:	d310      	bcc.n	801e022 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 801e000:	2b02      	cmp	r3, #2
 801e002:	f47f af75 	bne.w	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e006:	6983      	ldr	r3, [r0, #24]
 801e008:	e79f      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e00a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801e00c:	e79d      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e00e:	6a03      	ldr	r3, [r0, #32]
 801e010:	e79b      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e012:	684b      	ldr	r3, [r1, #4]
 801e014:	781a      	ldrb	r2, [r3, #0]
 801e016:	785b      	ldrb	r3, [r3, #1]
 801e018:	2b00      	cmp	r3, #0
 801e01a:	f47f af69 	bne.w	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e01e:	2a00      	cmp	r2, #0
 801e020:	d193      	bne.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e022:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801e024:	e791      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e026:	684b      	ldr	r3, [r1, #4]
 801e028:	781a      	ldrb	r2, [r3, #0]
 801e02a:	785b      	ldrb	r3, [r3, #1]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	f47f af5f 	bne.w	801def0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801e032:	2a00      	cmp	r2, #0
 801e034:	d189      	bne.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e036:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801e038:	e787      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e03a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801e03c:	e785      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e03e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801e040:	e783      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e042:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801e044:	e781      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e046:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 801e048:	e77f      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801e04a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 801e04c:	e77d      	b.n	801df4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

0801e04e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e04e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e052:	b087      	sub	sp, #28
 801e054:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e056:	9101      	str	r1, [sp, #4]
 801e058:	9205      	str	r2, [sp, #20]
 801e05a:	6841      	ldr	r1, [r0, #4]
 801e05c:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e060:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801e064:	9202      	str	r2, [sp, #8]
 801e066:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801e06a:	fb01 2404 	mla	r4, r1, r4, r2
 801e06e:	6802      	ldr	r2, [r0, #0]
 801e070:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e074:	f8de 2000 	ldr.w	r2, [lr]
 801e078:	9203      	str	r2, [sp, #12]
 801e07a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801e07e:	3204      	adds	r2, #4
 801e080:	9204      	str	r2, [sp, #16]
 801e082:	9a02      	ldr	r2, [sp, #8]
 801e084:	43d6      	mvns	r6, r2
 801e086:	b2f6      	uxtb	r6, r6
 801e088:	9a01      	ldr	r2, [sp, #4]
 801e08a:	2a00      	cmp	r2, #0
 801e08c:	dc03      	bgt.n	801e096 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e08e:	9a05      	ldr	r2, [sp, #20]
 801e090:	2a00      	cmp	r2, #0
 801e092:	f340 8129 	ble.w	801e2e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e096:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e098:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801e09c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e0a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e0a2:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801e0a6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	dd0e      	ble.n	801e0cc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e0ae:	1408      	asrs	r0, r1, #16
 801e0b0:	d405      	bmi.n	801e0be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e0b2:	4560      	cmp	r0, ip
 801e0b4:	da03      	bge.n	801e0be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e0b6:	1410      	asrs	r0, r2, #16
 801e0b8:	d401      	bmi.n	801e0be <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e0ba:	42b8      	cmp	r0, r7
 801e0bc:	db07      	blt.n	801e0ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e0be:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e0c0:	3b01      	subs	r3, #1
 801e0c2:	4401      	add	r1, r0
 801e0c4:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e0c6:	3402      	adds	r4, #2
 801e0c8:	4402      	add	r2, r0
 801e0ca:	e7ee      	b.n	801e0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e0cc:	d071      	beq.n	801e1b2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801e0ce:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e0d0:	1e58      	subs	r0, r3, #1
 801e0d2:	fb05 1500 	mla	r5, r5, r0, r1
 801e0d6:	142d      	asrs	r5, r5, #16
 801e0d8:	d45f      	bmi.n	801e19a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e0da:	4565      	cmp	r5, ip
 801e0dc:	da5d      	bge.n	801e19a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e0de:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e0e0:	fb05 2000 	mla	r0, r5, r0, r2
 801e0e4:	1400      	asrs	r0, r0, #16
 801e0e6:	d458      	bmi.n	801e19a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e0e8:	42b8      	cmp	r0, r7
 801e0ea:	da56      	bge.n	801e19a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801e0ec:	4699      	mov	r9, r3
 801e0ee:	46a2      	mov	sl, r4
 801e0f0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 801e0f4:	f1b9 0f00 	cmp.w	r9, #0
 801e0f8:	dd57      	ble.n	801e1aa <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801e0fa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801e0fe:	9803      	ldr	r0, [sp, #12]
 801e100:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801e104:	fb07 000c 	mla	r0, r7, ip, r0
 801e108:	140d      	asrs	r5, r1, #16
 801e10a:	5d40      	ldrb	r0, [r0, r5]
 801e10c:	9d04      	ldr	r5, [sp, #16]
 801e10e:	f109 39ff 	add.w	r9, r9, #4294967295
 801e112:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e116:	f8ba 5000 	ldrh.w	r5, [sl]
 801e11a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e11e:	122f      	asrs	r7, r5, #8
 801e120:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e124:	fb17 f706 	smulbb	r7, r7, r6
 801e128:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801e12c:	00ed      	lsls	r5, r5, #3
 801e12e:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801e132:	b2ed      	uxtb	r5, r5
 801e134:	fb18 f806 	smulbb	r8, r8, r6
 801e138:	fb15 f506 	smulbb	r5, r5, r6
 801e13c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e140:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801e144:	10c7      	asrs	r7, r0, #3
 801e146:	00c0      	lsls	r0, r0, #3
 801e148:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e14c:	b2c0      	uxtb	r0, r0
 801e14e:	fb07 870b 	mla	r7, r7, fp, r8
 801e152:	fb00 500b 	mla	r0, r0, fp, r5
 801e156:	fa1f fc8c 	uxth.w	ip, ip
 801e15a:	b280      	uxth	r0, r0
 801e15c:	b2bf      	uxth	r7, r7
 801e15e:	f10c 0501 	add.w	r5, ip, #1
 801e162:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e166:	f107 0801 	add.w	r8, r7, #1
 801e16a:	1c45      	adds	r5, r0, #1
 801e16c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e170:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801e174:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e176:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e17a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e17e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801e182:	ea45 0c0c 	orr.w	ip, r5, ip
 801e186:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801e18a:	4401      	add	r1, r0
 801e18c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e18e:	ea4c 0c08 	orr.w	ip, ip, r8
 801e192:	f82a cb02 	strh.w	ip, [sl], #2
 801e196:	4402      	add	r2, r0
 801e198:	e7ac      	b.n	801e0f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801e19a:	f04f 0800 	mov.w	r8, #0
 801e19e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e1a2:	eb03 0008 	add.w	r0, r3, r8
 801e1a6:	2800      	cmp	r0, #0
 801e1a8:	dc41      	bgt.n	801e22e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801e1aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e1ae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e1b2:	9b01      	ldr	r3, [sp, #4]
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	f340 8097 	ble.w	801e2e8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801e1ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e1be:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e1c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e1c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e1ca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e1ce:	eef0 6a62 	vmov.f32	s13, s5
 801e1d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e1d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e1da:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e1de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e1e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e1e6:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801e1ea:	eef0 6a43 	vmov.f32	s13, s6
 801e1ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e1f2:	ee12 2a90 	vmov	r2, s5
 801e1f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e1fa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e1fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e200:	fb92 f3f3 	sdiv	r3, r2, r3
 801e204:	ee13 2a10 	vmov	r2, s6
 801e208:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e20a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e20c:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801e210:	fb92 f3f3 	sdiv	r3, r2, r3
 801e214:	9314      	str	r3, [sp, #80]	@ 0x50
 801e216:	9b01      	ldr	r3, [sp, #4]
 801e218:	9a05      	ldr	r2, [sp, #20]
 801e21a:	3b01      	subs	r3, #1
 801e21c:	9301      	str	r3, [sp, #4]
 801e21e:	eeb0 3a67 	vmov.f32	s6, s15
 801e222:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e224:	eef0 2a47 	vmov.f32	s5, s14
 801e228:	bf08      	it	eq
 801e22a:	4613      	moveq	r3, r2
 801e22c:	e72c      	b.n	801e088 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e22e:	140f      	asrs	r7, r1, #16
 801e230:	d453      	bmi.n	801e2da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e232:	f8de 5008 	ldr.w	r5, [lr, #8]
 801e236:	42bd      	cmp	r5, r7
 801e238:	dd4f      	ble.n	801e2da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e23a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e23e:	d44c      	bmi.n	801e2da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e240:	f8de 000c 	ldr.w	r0, [lr, #12]
 801e244:	4560      	cmp	r0, ip
 801e246:	dd48      	ble.n	801e2da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e248:	9803      	ldr	r0, [sp, #12]
 801e24a:	b22d      	sxth	r5, r5
 801e24c:	fb0c 0505 	mla	r5, ip, r5, r0
 801e250:	5de8      	ldrb	r0, [r5, r7]
 801e252:	9d04      	ldr	r5, [sp, #16]
 801e254:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801e258:	f06f 0501 	mvn.w	r5, #1
 801e25c:	fb05 fb08 	mul.w	fp, r5, r8
 801e260:	f834 500b 	ldrh.w	r5, [r4, fp]
 801e264:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801e268:	122f      	asrs	r7, r5, #8
 801e26a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e26e:	fb17 f706 	smulbb	r7, r7, r6
 801e272:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801e276:	00ed      	lsls	r5, r5, #3
 801e278:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801e27c:	b2ed      	uxtb	r5, r5
 801e27e:	fb19 f906 	smulbb	r9, r9, r6
 801e282:	fb15 f506 	smulbb	r5, r5, r6
 801e286:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801e28a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801e28e:	10c7      	asrs	r7, r0, #3
 801e290:	00c0      	lsls	r0, r0, #3
 801e292:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801e296:	b2c0      	uxtb	r0, r0
 801e298:	fb07 970a 	mla	r7, r7, sl, r9
 801e29c:	fb00 500a 	mla	r0, r0, sl, r5
 801e2a0:	fa1f fc8c 	uxth.w	ip, ip
 801e2a4:	b2bf      	uxth	r7, r7
 801e2a6:	b280      	uxth	r0, r0
 801e2a8:	f10c 0501 	add.w	r5, ip, #1
 801e2ac:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801e2b0:	f107 0901 	add.w	r9, r7, #1
 801e2b4:	1c45      	adds	r5, r0, #1
 801e2b6:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801e2ba:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801e2be:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801e2c2:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801e2c6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e2ca:	ea45 0c0c 	orr.w	ip, r5, ip
 801e2ce:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801e2d2:	ea4c 0c09 	orr.w	ip, ip, r9
 801e2d6:	f824 c00b 	strh.w	ip, [r4, fp]
 801e2da:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e2dc:	f108 38ff 	add.w	r8, r8, #4294967295
 801e2e0:	4401      	add	r1, r0
 801e2e2:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e2e4:	4402      	add	r2, r0
 801e2e6:	e75c      	b.n	801e1a2 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801e2e8:	b007      	add	sp, #28
 801e2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e2ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e2ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e2f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2f6:	b085      	sub	sp, #20
 801e2f8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e2fa:	4693      	mov	fp, r2
 801e2fc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e300:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801e304:	6870      	ldr	r0, [r6, #4]
 801e306:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801e308:	fb00 2404 	mla	r4, r0, r4, r2
 801e30c:	6832      	ldr	r2, [r6, #0]
 801e30e:	9100      	str	r1, [sp, #0]
 801e310:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e314:	682a      	ldr	r2, [r5, #0]
 801e316:	9201      	str	r2, [sp, #4]
 801e318:	686a      	ldr	r2, [r5, #4]
 801e31a:	3204      	adds	r2, #4
 801e31c:	9202      	str	r2, [sp, #8]
 801e31e:	9a00      	ldr	r2, [sp, #0]
 801e320:	2a00      	cmp	r2, #0
 801e322:	dc03      	bgt.n	801e32c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e324:	f1bb 0f00 	cmp.w	fp, #0
 801e328:	f340 80a0 	ble.w	801e46c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e32c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e32e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e332:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e336:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e338:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e33c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e340:	2b00      	cmp	r3, #0
 801e342:	dd0c      	ble.n	801e35e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e344:	1406      	asrs	r6, r0, #16
 801e346:	d405      	bmi.n	801e354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e348:	454e      	cmp	r6, r9
 801e34a:	da03      	bge.n	801e354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e34c:	1416      	asrs	r6, r2, #16
 801e34e:	d401      	bmi.n	801e354 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e350:	4546      	cmp	r6, r8
 801e352:	db05      	blt.n	801e360 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e354:	4470      	add	r0, lr
 801e356:	4462      	add	r2, ip
 801e358:	3b01      	subs	r3, #1
 801e35a:	3402      	adds	r4, #2
 801e35c:	e7f0      	b.n	801e340 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e35e:	d00f      	beq.n	801e380 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e360:	1e5e      	subs	r6, r3, #1
 801e362:	fb0e 0706 	mla	r7, lr, r6, r0
 801e366:	143f      	asrs	r7, r7, #16
 801e368:	d541      	bpl.n	801e3ee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801e36a:	4698      	mov	r8, r3
 801e36c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801e370:	9603      	str	r6, [sp, #12]
 801e372:	f1b8 0f00 	cmp.w	r8, #0
 801e376:	dc59      	bgt.n	801e42c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801e378:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e37c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e380:	9b00      	ldr	r3, [sp, #0]
 801e382:	2b00      	cmp	r3, #0
 801e384:	dd72      	ble.n	801e46c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 801e386:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e38a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e38e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e392:	eeb0 6a62 	vmov.f32	s12, s5
 801e396:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e39a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e39e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e3a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e3aa:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e3ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e3b2:	eeb0 6a43 	vmov.f32	s12, s6
 801e3b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e3ba:	ee12 2a90 	vmov	r2, s5
 801e3be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e3c8:	fb92 fef3 	sdiv	lr, r2, r3
 801e3cc:	ee13 2a10 	vmov	r2, s6
 801e3d0:	fb92 fcf3 	sdiv	ip, r2, r3
 801e3d4:	9b00      	ldr	r3, [sp, #0]
 801e3d6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e3da:	3b01      	subs	r3, #1
 801e3dc:	9300      	str	r3, [sp, #0]
 801e3de:	eeb0 3a67 	vmov.f32	s6, s15
 801e3e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e3e4:	eef0 2a47 	vmov.f32	s5, s14
 801e3e8:	bf08      	it	eq
 801e3ea:	465b      	moveq	r3, fp
 801e3ec:	e797      	b.n	801e31e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e3ee:	454f      	cmp	r7, r9
 801e3f0:	dabb      	bge.n	801e36a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e3f2:	fb0c 2606 	mla	r6, ip, r6, r2
 801e3f6:	1436      	asrs	r6, r6, #16
 801e3f8:	d4b7      	bmi.n	801e36a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e3fa:	4546      	cmp	r6, r8
 801e3fc:	dab5      	bge.n	801e36a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e3fe:	461e      	mov	r6, r3
 801e400:	46a0      	mov	r8, r4
 801e402:	2e00      	cmp	r6, #0
 801e404:	ddb8      	ble.n	801e378 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e406:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801e40a:	9901      	ldr	r1, [sp, #4]
 801e40c:	1417      	asrs	r7, r2, #16
 801e40e:	fb0a 1707 	mla	r7, sl, r7, r1
 801e412:	ea4f 4920 	mov.w	r9, r0, asr #16
 801e416:	f817 7009 	ldrb.w	r7, [r7, r9]
 801e41a:	9902      	ldr	r1, [sp, #8]
 801e41c:	4470      	add	r0, lr
 801e41e:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801e422:	4462      	add	r2, ip
 801e424:	f828 7b02 	strh.w	r7, [r8], #2
 801e428:	3e01      	subs	r6, #1
 801e42a:	e7ea      	b.n	801e402 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e42c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e430:	d417      	bmi.n	801e462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e432:	68ae      	ldr	r6, [r5, #8]
 801e434:	454e      	cmp	r6, r9
 801e436:	dd14      	ble.n	801e462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e438:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e43c:	d411      	bmi.n	801e462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e43e:	68ef      	ldr	r7, [r5, #12]
 801e440:	4557      	cmp	r7, sl
 801e442:	dd0e      	ble.n	801e462 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801e444:	f06f 0101 	mvn.w	r1, #1
 801e448:	9f01      	ldr	r7, [sp, #4]
 801e44a:	b236      	sxth	r6, r6
 801e44c:	fb0a 7606 	mla	r6, sl, r6, r7
 801e450:	9f02      	ldr	r7, [sp, #8]
 801e452:	f816 6009 	ldrb.w	r6, [r6, r9]
 801e456:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801e45a:	fb01 f608 	mul.w	r6, r1, r8
 801e45e:	9903      	ldr	r1, [sp, #12]
 801e460:	538f      	strh	r7, [r1, r6]
 801e462:	4470      	add	r0, lr
 801e464:	4462      	add	r2, ip
 801e466:	f108 38ff 	add.w	r8, r8, #4294967295
 801e46a:	e782      	b.n	801e372 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e46c:	b005      	add	sp, #20
 801e46e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e472 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e472:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e476:	b087      	sub	sp, #28
 801e478:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e47a:	9102      	str	r1, [sp, #8]
 801e47c:	9205      	str	r2, [sp, #20]
 801e47e:	6861      	ldr	r1, [r4, #4]
 801e480:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e484:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801e488:	9203      	str	r2, [sp, #12]
 801e48a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801e48e:	fb01 2000 	mla	r0, r1, r0, r2
 801e492:	6822      	ldr	r2, [r4, #0]
 801e494:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801e498:	9200      	str	r2, [sp, #0]
 801e49a:	f8dc 2000 	ldr.w	r2, [ip]
 801e49e:	9204      	str	r2, [sp, #16]
 801e4a0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e4a4:	3204      	adds	r2, #4
 801e4a6:	9201      	str	r2, [sp, #4]
 801e4a8:	9a03      	ldr	r2, [sp, #12]
 801e4aa:	43d5      	mvns	r5, r2
 801e4ac:	b2ed      	uxtb	r5, r5
 801e4ae:	9a02      	ldr	r2, [sp, #8]
 801e4b0:	2a00      	cmp	r2, #0
 801e4b2:	dc03      	bgt.n	801e4bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e4b4:	9a05      	ldr	r2, [sp, #20]
 801e4b6:	2a00      	cmp	r2, #0
 801e4b8:	f340 812c 	ble.w	801e714 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e4bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e4be:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801e4c2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e4c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e4c8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801e4cc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	dd10      	ble.n	801e4f6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e4d4:	140c      	asrs	r4, r1, #16
 801e4d6:	d405      	bmi.n	801e4e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4d8:	4574      	cmp	r4, lr
 801e4da:	da03      	bge.n	801e4e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4dc:	1414      	asrs	r4, r2, #16
 801e4de:	d401      	bmi.n	801e4e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e4e0:	42bc      	cmp	r4, r7
 801e4e2:	db09      	blt.n	801e4f8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801e4e4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e4e6:	9800      	ldr	r0, [sp, #0]
 801e4e8:	4421      	add	r1, r4
 801e4ea:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e4ec:	3002      	adds	r0, #2
 801e4ee:	4422      	add	r2, r4
 801e4f0:	3b01      	subs	r3, #1
 801e4f2:	9000      	str	r0, [sp, #0]
 801e4f4:	e7ec      	b.n	801e4d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801e4f6:	d071      	beq.n	801e5dc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801e4f8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e4fa:	1e5c      	subs	r4, r3, #1
 801e4fc:	fb06 1604 	mla	r6, r6, r4, r1
 801e500:	1436      	asrs	r6, r6, #16
 801e502:	d45d      	bmi.n	801e5c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e504:	4576      	cmp	r6, lr
 801e506:	da5b      	bge.n	801e5c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e508:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801e50a:	fb06 2404 	mla	r4, r6, r4, r2
 801e50e:	1424      	asrs	r4, r4, #16
 801e510:	d456      	bmi.n	801e5c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e512:	42bc      	cmp	r4, r7
 801e514:	da54      	bge.n	801e5c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801e516:	4698      	mov	r8, r3
 801e518:	f8dd 9000 	ldr.w	r9, [sp]
 801e51c:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 801e520:	f1b8 0f00 	cmp.w	r8, #0
 801e524:	dd54      	ble.n	801e5d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801e526:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e52a:	9804      	ldr	r0, [sp, #16]
 801e52c:	1414      	asrs	r4, r2, #16
 801e52e:	fb07 0404 	mla	r4, r7, r4, r0
 801e532:	140e      	asrs	r6, r1, #16
 801e534:	f814 e006 	ldrb.w	lr, [r4, r6]
 801e538:	9801      	ldr	r0, [sp, #4]
 801e53a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e53e:	eb00 0b0e 	add.w	fp, r0, lr
 801e542:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e546:	f8b9 4000 	ldrh.w	r4, [r9]
 801e54a:	fb16 f60a 	smulbb	r6, r6, sl
 801e54e:	1227      	asrs	r7, r4, #8
 801e550:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e554:	fb07 6705 	mla	r7, r7, r5, r6
 801e558:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e55c:	10e6      	asrs	r6, r4, #3
 801e55e:	00e4      	lsls	r4, r4, #3
 801e560:	b2e4      	uxtb	r4, r4
 801e562:	fb1b fb0a 	smulbb	fp, fp, sl
 801e566:	fb14 f405 	smulbb	r4, r4, r5
 801e56a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801e56e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e572:	fb06 b605 	mla	r6, r6, r5, fp
 801e576:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801e57a:	b2bf      	uxth	r7, r7
 801e57c:	b2b6      	uxth	r6, r6
 801e57e:	fa1f fe8e 	uxth.w	lr, lr
 801e582:	1c7c      	adds	r4, r7, #1
 801e584:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e588:	f106 0b01 	add.w	fp, r6, #1
 801e58c:	f10e 0401 	add.w	r4, lr, #1
 801e590:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e592:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 801e596:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e59a:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e59e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e5a2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e5a6:	4327      	orrs	r7, r4
 801e5a8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801e5ac:	4401      	add	r1, r0
 801e5ae:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e5b0:	ea47 070b 	orr.w	r7, r7, fp
 801e5b4:	f829 7b02 	strh.w	r7, [r9], #2
 801e5b8:	4402      	add	r2, r0
 801e5ba:	f108 38ff 	add.w	r8, r8, #4294967295
 801e5be:	e7af      	b.n	801e520 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 801e5c0:	f04f 0e00 	mov.w	lr, #0
 801e5c4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 801e5c8:	eb03 040e 	add.w	r4, r3, lr
 801e5cc:	2c00      	cmp	r4, #0
 801e5ce:	dc43      	bgt.n	801e658 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801e5d0:	9a00      	ldr	r2, [sp, #0]
 801e5d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e5d6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e5da:	9300      	str	r3, [sp, #0]
 801e5dc:	9b02      	ldr	r3, [sp, #8]
 801e5de:	2b00      	cmp	r3, #0
 801e5e0:	f340 8098 	ble.w	801e714 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801e5e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e5e8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e5ec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e5f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e5f4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e5f8:	eef0 6a62 	vmov.f32	s13, s5
 801e5fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e600:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e604:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e608:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e60c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e610:	edcd 6a11 	vstr	s13, [sp, #68]	@ 0x44
 801e614:	eef0 6a43 	vmov.f32	s13, s6
 801e618:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e61c:	ee12 2a90 	vmov	r2, s5
 801e620:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e624:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e626:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e62a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e62e:	ee13 2a10 	vmov	r2, s6
 801e632:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e634:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e636:	edcd 6a12 	vstr	s13, [sp, #72]	@ 0x48
 801e63a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e63e:	9314      	str	r3, [sp, #80]	@ 0x50
 801e640:	9b02      	ldr	r3, [sp, #8]
 801e642:	9a05      	ldr	r2, [sp, #20]
 801e644:	3b01      	subs	r3, #1
 801e646:	9302      	str	r3, [sp, #8]
 801e648:	eeb0 3a67 	vmov.f32	s6, s15
 801e64c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e64e:	eef0 2a47 	vmov.f32	s5, s14
 801e652:	bf08      	it	eq
 801e654:	4613      	moveq	r3, r2
 801e656:	e72a      	b.n	801e4ae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e658:	140f      	asrs	r7, r1, #16
 801e65a:	d454      	bmi.n	801e706 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e65c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801e660:	42be      	cmp	r6, r7
 801e662:	dd50      	ble.n	801e706 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e664:	ea5f 4822 	movs.w	r8, r2, asr #16
 801e668:	d44d      	bmi.n	801e706 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e66a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801e66e:	4544      	cmp	r4, r8
 801e670:	dd49      	ble.n	801e706 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801e672:	f06f 0001 	mvn.w	r0, #1
 801e676:	9c04      	ldr	r4, [sp, #16]
 801e678:	b236      	sxth	r6, r6
 801e67a:	fb08 4606 	mla	r6, r8, r6, r4
 801e67e:	f816 8007 	ldrb.w	r8, [r6, r7]
 801e682:	9c01      	ldr	r4, [sp, #4]
 801e684:	fb00 fa0e 	mul.w	sl, r0, lr
 801e688:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e68c:	eb04 0b08 	add.w	fp, r4, r8
 801e690:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801e694:	9800      	ldr	r0, [sp, #0]
 801e696:	fb16 f609 	smulbb	r6, r6, r9
 801e69a:	f830 400a 	ldrh.w	r4, [r0, sl]
 801e69e:	f89b b001 	ldrb.w	fp, [fp, #1]
 801e6a2:	1227      	asrs	r7, r4, #8
 801e6a4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801e6a8:	fb07 6705 	mla	r7, r7, r5, r6
 801e6ac:	10e6      	asrs	r6, r4, #3
 801e6ae:	00e4      	lsls	r4, r4, #3
 801e6b0:	b2e4      	uxtb	r4, r4
 801e6b2:	fb1b fb09 	smulbb	fp, fp, r9
 801e6b6:	9801      	ldr	r0, [sp, #4]
 801e6b8:	fb14 f405 	smulbb	r4, r4, r5
 801e6bc:	f810 8008 	ldrb.w	r8, [r0, r8]
 801e6c0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801e6c4:	fb06 b605 	mla	r6, r6, r5, fp
 801e6c8:	fb08 4809 	mla	r8, r8, r9, r4
 801e6cc:	b2bf      	uxth	r7, r7
 801e6ce:	b2b6      	uxth	r6, r6
 801e6d0:	fa1f f888 	uxth.w	r8, r8
 801e6d4:	1c7c      	adds	r4, r7, #1
 801e6d6:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 801e6da:	f106 0b01 	add.w	fp, r6, #1
 801e6de:	f108 0401 	add.w	r4, r8, #1
 801e6e2:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 801e6e6:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801e6ea:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801e6ee:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 801e6f2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801e6f6:	4327      	orrs	r7, r4
 801e6f8:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 801e6fc:	9800      	ldr	r0, [sp, #0]
 801e6fe:	ea47 070b 	orr.w	r7, r7, fp
 801e702:	f820 700a 	strh.w	r7, [r0, sl]
 801e706:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e708:	f10e 3eff 	add.w	lr, lr, #4294967295
 801e70c:	4401      	add	r1, r0
 801e70e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801e710:	4402      	add	r2, r0
 801e712:	e759      	b.n	801e5c8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e714:	b007      	add	sp, #28
 801e716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e71c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e71c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e724:	b085      	sub	sp, #20
 801e726:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801e728:	9203      	str	r2, [sp, #12]
 801e72a:	6870      	ldr	r0, [r6, #4]
 801e72c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801e730:	fb00 2404 	mla	r4, r0, r4, r2
 801e734:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801e736:	6832      	ldr	r2, [r6, #0]
 801e738:	686f      	ldr	r7, [r5, #4]
 801e73a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e73e:	682a      	ldr	r2, [r5, #0]
 801e740:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 801e744:	9101      	str	r1, [sp, #4]
 801e746:	9202      	str	r2, [sp, #8]
 801e748:	3704      	adds	r7, #4
 801e74a:	9a01      	ldr	r2, [sp, #4]
 801e74c:	2a00      	cmp	r2, #0
 801e74e:	dc03      	bgt.n	801e758 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e750:	9a03      	ldr	r2, [sp, #12]
 801e752:	2a00      	cmp	r2, #0
 801e754:	f340 80cc 	ble.w	801e8f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e758:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e75a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e75e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e762:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e764:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801e768:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	dd0d      	ble.n	801e78c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801e770:	1406      	asrs	r6, r0, #16
 801e772:	d405      	bmi.n	801e780 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e774:	454e      	cmp	r6, r9
 801e776:	da03      	bge.n	801e780 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e778:	1416      	asrs	r6, r2, #16
 801e77a:	d401      	bmi.n	801e780 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801e77c:	4546      	cmp	r6, r8
 801e77e:	db06      	blt.n	801e78e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e780:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801e782:	4460      	add	r0, ip
 801e784:	4432      	add	r2, r6
 801e786:	3b01      	subs	r3, #1
 801e788:	3402      	adds	r4, #2
 801e78a:	e7ef      	b.n	801e76c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801e78c:	d00f      	beq.n	801e7ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e78e:	1e5e      	subs	r6, r3, #1
 801e790:	fb0c 0e06 	mla	lr, ip, r6, r0
 801e794:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 801e798:	d543      	bpl.n	801e822 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801e79a:	4698      	mov	r8, r3
 801e79c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 801e7a0:	f1b8 0f00 	cmp.w	r8, #0
 801e7a4:	dc71      	bgt.n	801e88a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801e7a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e7aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e7ae:	9b01      	ldr	r3, [sp, #4]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	f340 809d 	ble.w	801e8f0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801e7b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e7ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e7be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e7c2:	eeb0 6a62 	vmov.f32	s12, s5
 801e7c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e7ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e7ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e7d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e7d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e7da:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801e7de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e7e2:	eeb0 6a43 	vmov.f32	s12, s6
 801e7e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e7ea:	ee12 2a90 	vmov	r2, s5
 801e7ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e7f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e7f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e7f8:	fb92 fcf3 	sdiv	ip, r2, r3
 801e7fc:	ee13 2a10 	vmov	r2, s6
 801e800:	fb92 f3f3 	sdiv	r3, r2, r3
 801e804:	9312      	str	r3, [sp, #72]	@ 0x48
 801e806:	9b01      	ldr	r3, [sp, #4]
 801e808:	9a03      	ldr	r2, [sp, #12]
 801e80a:	3b01      	subs	r3, #1
 801e80c:	9301      	str	r3, [sp, #4]
 801e80e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801e812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e814:	eeb0 3a67 	vmov.f32	s6, s15
 801e818:	bf08      	it	eq
 801e81a:	4613      	moveq	r3, r2
 801e81c:	eef0 2a47 	vmov.f32	s5, s14
 801e820:	e793      	b.n	801e74a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e822:	45ce      	cmp	lr, r9
 801e824:	dab9      	bge.n	801e79a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e826:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e828:	fb01 2606 	mla	r6, r1, r6, r2
 801e82c:	1436      	asrs	r6, r6, #16
 801e82e:	d4b4      	bmi.n	801e79a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e830:	4546      	cmp	r6, r8
 801e832:	dab2      	bge.n	801e79a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e834:	4698      	mov	r8, r3
 801e836:	46a2      	mov	sl, r4
 801e838:	f1b8 0f00 	cmp.w	r8, #0
 801e83c:	ddb3      	ble.n	801e7a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801e83e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801e842:	9902      	ldr	r1, [sp, #8]
 801e844:	1416      	asrs	r6, r2, #16
 801e846:	fb09 1606 	mla	r6, r9, r6, r1
 801e84a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801e84e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801e852:	4929      	ldr	r1, [pc, #164]	@ (801e8f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 801e854:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e858:	eb07 0b0e 	add.w	fp, r7, lr
 801e85c:	f89b 6001 	ldrb.w	r6, [fp, #1]
 801e860:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801e864:	00f6      	lsls	r6, r6, #3
 801e866:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 801e86a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e86e:	ea49 0606 	orr.w	r6, r9, r6
 801e872:	f817 900e 	ldrb.w	r9, [r7, lr]
 801e876:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e878:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 801e87c:	f82a 6b02 	strh.w	r6, [sl], #2
 801e880:	4460      	add	r0, ip
 801e882:	440a      	add	r2, r1
 801e884:	f108 38ff 	add.w	r8, r8, #4294967295
 801e888:	e7d6      	b.n	801e838 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e88a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e88e:	d429      	bmi.n	801e8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e890:	68ae      	ldr	r6, [r5, #8]
 801e892:	454e      	cmp	r6, r9
 801e894:	dd26      	ble.n	801e8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e896:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801e89a:	d423      	bmi.n	801e8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e89c:	68e9      	ldr	r1, [r5, #12]
 801e89e:	4559      	cmp	r1, fp
 801e8a0:	dd20      	ble.n	801e8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801e8a2:	9902      	ldr	r1, [sp, #8]
 801e8a4:	fa0f fe86 	sxth.w	lr, r6
 801e8a8:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801e8ac:	f06f 0101 	mvn.w	r1, #1
 801e8b0:	f81e e009 	ldrb.w	lr, [lr, r9]
 801e8b4:	fb01 f908 	mul.w	r9, r1, r8
 801e8b8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801e8bc:	eb07 060e 	add.w	r6, r7, lr
 801e8c0:	f896 b002 	ldrb.w	fp, [r6, #2]
 801e8c4:	7876      	ldrb	r6, [r6, #1]
 801e8c6:	f2a1 71fe 	subw	r1, r1, #2046	@ 0x7fe
 801e8ca:	00f6      	lsls	r6, r6, #3
 801e8cc:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 801e8d0:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801e8d4:	ea4b 0606 	orr.w	r6, fp, r6
 801e8d8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 801e8dc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 801e8e0:	f82a 6009 	strh.w	r6, [sl, r9]
 801e8e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801e8e6:	4460      	add	r0, ip
 801e8e8:	440a      	add	r2, r1
 801e8ea:	f108 38ff 	add.w	r8, r8, #4294967295
 801e8ee:	e757      	b.n	801e7a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e8f0:	b005      	add	sp, #20
 801e8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8f6:	bf00      	nop
 801e8f8:	fffff800 	.word	0xfffff800

0801e8fc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e904:	b087      	sub	sp, #28
 801e906:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e908:	468b      	mov	fp, r1
 801e90a:	9204      	str	r2, [sp, #16]
 801e90c:	6841      	ldr	r1, [r0, #4]
 801e90e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801e912:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801e916:	9205      	str	r2, [sp, #20]
 801e918:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801e91c:	fb01 2404 	mla	r4, r1, r4, r2
 801e920:	6802      	ldr	r2, [r0, #0]
 801e922:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801e926:	f8dc 2000 	ldr.w	r2, [ip]
 801e92a:	9201      	str	r2, [sp, #4]
 801e92c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801e930:	3204      	adds	r2, #4
 801e932:	9202      	str	r2, [sp, #8]
 801e934:	f1bb 0f00 	cmp.w	fp, #0
 801e938:	dc03      	bgt.n	801e942 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801e93a:	9a04      	ldr	r2, [sp, #16]
 801e93c:	2a00      	cmp	r2, #0
 801e93e:	f340 8138 	ble.w	801ebb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e942:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801e944:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801e948:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801e94c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801e94e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 801e952:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801e956:	2b00      	cmp	r3, #0
 801e958:	dd0e      	ble.n	801e978 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e95a:	1402      	asrs	r2, r0, #16
 801e95c:	d405      	bmi.n	801e96a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e95e:	42ba      	cmp	r2, r7
 801e960:	da03      	bge.n	801e96a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e962:	140a      	asrs	r2, r1, #16
 801e964:	d401      	bmi.n	801e96a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e966:	42b2      	cmp	r2, r6
 801e968:	db07      	blt.n	801e97a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e96a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e96c:	3b01      	subs	r3, #1
 801e96e:	4410      	add	r0, r2
 801e970:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e972:	3402      	adds	r4, #2
 801e974:	4411      	add	r1, r2
 801e976:	e7ee      	b.n	801e956 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801e978:	d019      	beq.n	801e9ae <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801e97a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801e97c:	1e5a      	subs	r2, r3, #1
 801e97e:	fb05 0502 	mla	r5, r5, r2, r0
 801e982:	142d      	asrs	r5, r5, #16
 801e984:	d409      	bmi.n	801e99a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e986:	42bd      	cmp	r5, r7
 801e988:	da07      	bge.n	801e99a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e98a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801e98c:	fb05 1202 	mla	r2, r5, r2, r1
 801e990:	1412      	asrs	r2, r2, #16
 801e992:	d402      	bmi.n	801e99a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e994:	42b2      	cmp	r2, r6
 801e996:	f2c0 80ac 	blt.w	801eaf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801e99a:	f04f 0e00 	mov.w	lr, #0
 801e99e:	eb03 020e 	add.w	r2, r3, lr
 801e9a2:	2a00      	cmp	r2, #0
 801e9a4:	dc3e      	bgt.n	801ea24 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e9a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e9aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801e9ae:	f1bb 0f00 	cmp.w	fp, #0
 801e9b2:	f340 80fe 	ble.w	801ebb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801e9b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e9ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e9be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e9c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e9c6:	eeb0 6a62 	vmov.f32	s12, s5
 801e9ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e9ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e9d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e9d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e9da:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e9de:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801e9e2:	eeb0 6a43 	vmov.f32	s12, s6
 801e9e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e9ea:	ee12 2a90 	vmov	r2, s5
 801e9ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e9f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e9f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e9f8:	fb92 f3f3 	sdiv	r3, r2, r3
 801e9fc:	ee13 2a10 	vmov	r2, s6
 801ea00:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ea02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea04:	f1bb 0b01 	subs.w	fp, fp, #1
 801ea08:	fb92 f3f3 	sdiv	r3, r2, r3
 801ea0c:	9a04      	ldr	r2, [sp, #16]
 801ea0e:	9314      	str	r3, [sp, #80]	@ 0x50
 801ea10:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ea14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ea16:	eeb0 3a67 	vmov.f32	s6, s15
 801ea1a:	bf08      	it	eq
 801ea1c:	4613      	moveq	r3, r2
 801ea1e:	eef0 2a47 	vmov.f32	s5, s14
 801ea22:	e787      	b.n	801e934 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ea24:	1406      	asrs	r6, r0, #16
 801ea26:	d45d      	bmi.n	801eae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ea28:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801ea2c:	42b5      	cmp	r5, r6
 801ea2e:	dd59      	ble.n	801eae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ea30:	140f      	asrs	r7, r1, #16
 801ea32:	d457      	bmi.n	801eae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ea34:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801ea38:	42ba      	cmp	r2, r7
 801ea3a:	dd53      	ble.n	801eae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ea3c:	9a01      	ldr	r2, [sp, #4]
 801ea3e:	b22d      	sxth	r5, r5
 801ea40:	fb07 2505 	mla	r5, r7, r5, r2
 801ea44:	5daa      	ldrb	r2, [r5, r6]
 801ea46:	9d02      	ldr	r5, [sp, #8]
 801ea48:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801ea4c:	0e2e      	lsrs	r6, r5, #24
 801ea4e:	d049      	beq.n	801eae4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ea50:	f06f 0201 	mvn.w	r2, #1
 801ea54:	fb02 f20e 	mul.w	r2, r2, lr
 801ea58:	f834 8002 	ldrh.w	r8, [r4, r2]
 801ea5c:	9203      	str	r2, [sp, #12]
 801ea5e:	9a05      	ldr	r2, [sp, #20]
 801ea60:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ea64:	4356      	muls	r6, r2
 801ea66:	1c72      	adds	r2, r6, #1
 801ea68:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801ea6c:	1212      	asrs	r2, r2, #8
 801ea6e:	fa1f f982 	uxth.w	r9, r2
 801ea72:	43d2      	mvns	r2, r2
 801ea74:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ea78:	fb16 f609 	smulbb	r6, r6, r9
 801ea7c:	b2ed      	uxtb	r5, r5
 801ea7e:	ea4f 2728 	mov.w	r7, r8, asr #8
 801ea82:	fb15 f509 	smulbb	r5, r5, r9
 801ea86:	b2d2      	uxtb	r2, r2
 801ea88:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ea8c:	fb07 6702 	mla	r7, r7, r2, r6
 801ea90:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801ea94:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ea98:	fb1a fa09 	smulbb	sl, sl, r9
 801ea9c:	fa5f f888 	uxtb.w	r8, r8
 801eaa0:	fb08 5502 	mla	r5, r8, r2, r5
 801eaa4:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801eaa8:	fb06 a602 	mla	r6, r6, r2, sl
 801eaac:	b2bf      	uxth	r7, r7
 801eaae:	b2ad      	uxth	r5, r5
 801eab0:	1c7a      	adds	r2, r7, #1
 801eab2:	f105 0a01 	add.w	sl, r5, #1
 801eab6:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801eaba:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eabe:	b2b6      	uxth	r6, r6
 801eac0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eac4:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801eac8:	ea4a 0707 	orr.w	r7, sl, r7
 801eacc:	f106 0a01 	add.w	sl, r6, #1
 801ead0:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ead4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ead8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801eadc:	9a03      	ldr	r2, [sp, #12]
 801eade:	ea47 070a 	orr.w	r7, r7, sl
 801eae2:	52a7      	strh	r7, [r4, r2]
 801eae4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eae6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801eaea:	4410      	add	r0, r2
 801eaec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eaee:	4411      	add	r1, r2
 801eaf0:	e755      	b.n	801e99e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801eaf2:	f04f 0800 	mov.w	r8, #0
 801eaf6:	eba3 0208 	sub.w	r2, r3, r8
 801eafa:	2a00      	cmp	r2, #0
 801eafc:	f77f af53 	ble.w	801e9a6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801eb00:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 801eb04:	9f01      	ldr	r7, [sp, #4]
 801eb06:	140a      	asrs	r2, r1, #16
 801eb08:	fb06 7202 	mla	r2, r6, r2, r7
 801eb0c:	1405      	asrs	r5, r0, #16
 801eb0e:	5d52      	ldrb	r2, [r2, r5]
 801eb10:	9d02      	ldr	r5, [sp, #8]
 801eb12:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801eb16:	0e2e      	lsrs	r6, r5, #24
 801eb18:	d044      	beq.n	801eba4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801eb1a:	9a05      	ldr	r2, [sp, #20]
 801eb1c:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801eb20:	4356      	muls	r6, r2
 801eb22:	1c72      	adds	r2, r6, #1
 801eb24:	eb02 2226 	add.w	r2, r2, r6, asr #8
 801eb28:	1212      	asrs	r2, r2, #8
 801eb2a:	fa1f f982 	uxth.w	r9, r2
 801eb2e:	43d2      	mvns	r2, r2
 801eb30:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801eb34:	fb16 f609 	smulbb	r6, r6, r9
 801eb38:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801eb3c:	b2ed      	uxtb	r5, r5
 801eb3e:	ea4f 272e 	mov.w	r7, lr, asr #8
 801eb42:	fb15 f509 	smulbb	r5, r5, r9
 801eb46:	b2d2      	uxtb	r2, r2
 801eb48:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801eb4c:	fb07 6702 	mla	r7, r7, r2, r6
 801eb50:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801eb54:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801eb58:	fb1a fa09 	smulbb	sl, sl, r9
 801eb5c:	fa5f fe8e 	uxtb.w	lr, lr
 801eb60:	fb0e 5502 	mla	r5, lr, r2, r5
 801eb64:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801eb68:	fb06 a602 	mla	r6, r6, r2, sl
 801eb6c:	b2bf      	uxth	r7, r7
 801eb6e:	b2ad      	uxth	r5, r5
 801eb70:	1c7a      	adds	r2, r7, #1
 801eb72:	f105 0a01 	add.w	sl, r5, #1
 801eb76:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801eb7a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801eb7e:	b2b6      	uxth	r6, r6
 801eb80:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eb84:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801eb88:	ea4a 0707 	orr.w	r7, sl, r7
 801eb8c:	f106 0a01 	add.w	sl, r6, #1
 801eb90:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801eb94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801eb98:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801eb9c:	ea47 070a 	orr.w	r7, r7, sl
 801eba0:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801eba4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801eba6:	f108 0801 	add.w	r8, r8, #1
 801ebaa:	4410      	add	r0, r2
 801ebac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ebae:	4411      	add	r1, r2
 801ebb0:	e7a1      	b.n	801eaf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ebb2:	b007      	add	sp, #28
 801ebb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ebb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ebb8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebc0:	b085      	sub	sp, #20
 801ebc2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801ebc4:	468b      	mov	fp, r1
 801ebc6:	6841      	ldr	r1, [r0, #4]
 801ebc8:	9203      	str	r2, [sp, #12]
 801ebca:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801ebce:	fb01 2404 	mla	r4, r1, r4, r2
 801ebd2:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801ebd6:	6802      	ldr	r2, [r0, #0]
 801ebd8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801ebdc:	f8de 2000 	ldr.w	r2, [lr]
 801ebe0:	9200      	str	r2, [sp, #0]
 801ebe2:	f8de 2004 	ldr.w	r2, [lr, #4]
 801ebe6:	3204      	adds	r2, #4
 801ebe8:	9201      	str	r2, [sp, #4]
 801ebea:	f1bb 0f00 	cmp.w	fp, #0
 801ebee:	dc03      	bgt.n	801ebf8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ebf0:	9a03      	ldr	r2, [sp, #12]
 801ebf2:	2a00      	cmp	r2, #0
 801ebf4:	f340 8153 	ble.w	801ee9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ebf8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ebfa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801ebfe:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801ec02:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ec04:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801ec08:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	dd0e      	ble.n	801ec2e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ec10:	1408      	asrs	r0, r1, #16
 801ec12:	d405      	bmi.n	801ec20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ec14:	42b8      	cmp	r0, r7
 801ec16:	da03      	bge.n	801ec20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ec18:	1410      	asrs	r0, r2, #16
 801ec1a:	d401      	bmi.n	801ec20 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801ec1c:	42b0      	cmp	r0, r6
 801ec1e:	db07      	blt.n	801ec30 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801ec20:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ec22:	3b01      	subs	r3, #1
 801ec24:	4401      	add	r1, r0
 801ec26:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ec28:	3402      	adds	r4, #2
 801ec2a:	4402      	add	r2, r0
 801ec2c:	e7ee      	b.n	801ec0c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801ec2e:	d017      	beq.n	801ec60 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801ec30:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ec32:	1e58      	subs	r0, r3, #1
 801ec34:	fb05 1500 	mla	r5, r5, r0, r1
 801ec38:	142d      	asrs	r5, r5, #16
 801ec3a:	d409      	bmi.n	801ec50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ec3c:	42bd      	cmp	r5, r7
 801ec3e:	da07      	bge.n	801ec50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ec40:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801ec42:	fb05 2000 	mla	r0, r5, r0, r2
 801ec46:	1400      	asrs	r0, r0, #16
 801ec48:	d402      	bmi.n	801ec50 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ec4a:	42b0      	cmp	r0, r6
 801ec4c:	f2c0 80bc 	blt.w	801edc8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801ec50:	2600      	movs	r6, #0
 801ec52:	1998      	adds	r0, r3, r6
 801ec54:	2800      	cmp	r0, #0
 801ec56:	dc3e      	bgt.n	801ecd6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ec58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec5c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801ec60:	f1bb 0f00 	cmp.w	fp, #0
 801ec64:	f340 811b 	ble.w	801ee9e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 801ec68:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ec6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ec70:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ec74:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ec78:	eeb0 6a62 	vmov.f32	s12, s5
 801ec7c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ec80:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ec84:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ec88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ec8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ec90:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801ec94:	eeb0 6a43 	vmov.f32	s12, s6
 801ec98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ec9c:	ee12 2a90 	vmov	r2, s5
 801eca0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eca4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eca6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ecaa:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecae:	ee13 2a10 	vmov	r2, s6
 801ecb2:	9311      	str	r3, [sp, #68]	@ 0x44
 801ecb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ecb6:	f1bb 0b01 	subs.w	fp, fp, #1
 801ecba:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecbe:	9a03      	ldr	r2, [sp, #12]
 801ecc0:	9312      	str	r3, [sp, #72]	@ 0x48
 801ecc2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801ecc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ecc8:	eeb0 3a67 	vmov.f32	s6, s15
 801eccc:	bf08      	it	eq
 801ecce:	4613      	moveq	r3, r2
 801ecd0:	eef0 2a47 	vmov.f32	s5, s14
 801ecd4:	e789      	b.n	801ebea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ecd6:	140f      	asrs	r7, r1, #16
 801ecd8:	d426      	bmi.n	801ed28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ecda:	f8de 5008 	ldr.w	r5, [lr, #8]
 801ecde:	42bd      	cmp	r5, r7
 801ece0:	dd22      	ble.n	801ed28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ece2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801ece6:	d41f      	bmi.n	801ed28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ece8:	f8de 000c 	ldr.w	r0, [lr, #12]
 801ecec:	4560      	cmp	r0, ip
 801ecee:	dd1b      	ble.n	801ed28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ecf0:	9800      	ldr	r0, [sp, #0]
 801ecf2:	b22d      	sxth	r5, r5
 801ecf4:	fb0c 0505 	mla	r5, ip, r5, r0
 801ecf8:	5de8      	ldrb	r0, [r5, r7]
 801ecfa:	9d01      	ldr	r5, [sp, #4]
 801ecfc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ed00:	0e07      	lsrs	r7, r0, #24
 801ed02:	2fff      	cmp	r7, #255	@ 0xff
 801ed04:	d116      	bne.n	801ed34 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ed06:	f06f 0501 	mvn.w	r5, #1
 801ed0a:	fb05 f706 	mul.w	r7, r5, r6
 801ed0e:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801ed12:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801ed16:	0945      	lsrs	r5, r0, #5
 801ed18:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801ed1c:	ea4c 0505 	orr.w	r5, ip, r5
 801ed20:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801ed24:	4305      	orrs	r5, r0
 801ed26:	53e5      	strh	r5, [r4, r7]
 801ed28:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ed2a:	3e01      	subs	r6, #1
 801ed2c:	4401      	add	r1, r0
 801ed2e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ed30:	4402      	add	r2, r0
 801ed32:	e78e      	b.n	801ec52 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801ed34:	b2fd      	uxtb	r5, r7
 801ed36:	2f00      	cmp	r7, #0
 801ed38:	d0f6      	beq.n	801ed28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801ed3a:	f06f 0701 	mvn.w	r7, #1
 801ed3e:	fa1f f985 	uxth.w	r9, r5
 801ed42:	43ed      	mvns	r5, r5
 801ed44:	4377      	muls	r7, r6
 801ed46:	f834 8007 	ldrh.w	r8, [r4, r7]
 801ed4a:	9702      	str	r7, [sp, #8]
 801ed4c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801ed50:	fb17 f709 	smulbb	r7, r7, r9
 801ed54:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801ed58:	b2c0      	uxtb	r0, r0
 801ed5a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801ed5e:	fb10 f009 	smulbb	r0, r0, r9
 801ed62:	b2ed      	uxtb	r5, r5
 801ed64:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801ed68:	fb0c 7c05 	mla	ip, ip, r5, r7
 801ed6c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 801ed70:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801ed74:	fb1a fa09 	smulbb	sl, sl, r9
 801ed78:	fa5f f888 	uxtb.w	r8, r8
 801ed7c:	fb08 0005 	mla	r0, r8, r5, r0
 801ed80:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801ed84:	fb07 a705 	mla	r7, r7, r5, sl
 801ed88:	b280      	uxth	r0, r0
 801ed8a:	fa1f fc8c 	uxth.w	ip, ip
 801ed8e:	f100 0a01 	add.w	sl, r0, #1
 801ed92:	f10c 0501 	add.w	r5, ip, #1
 801ed96:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801ed9a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801ed9e:	b2bf      	uxth	r7, r7
 801eda0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801eda4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801eda8:	ea4a 0c0c 	orr.w	ip, sl, ip
 801edac:	f107 0a01 	add.w	sl, r7, #1
 801edb0:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801edb4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801edb8:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801edbc:	9802      	ldr	r0, [sp, #8]
 801edbe:	ea4c 0c0a 	orr.w	ip, ip, sl
 801edc2:	f824 c000 	strh.w	ip, [r4, r0]
 801edc6:	e7af      	b.n	801ed28 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801edc8:	f04f 0800 	mov.w	r8, #0
 801edcc:	eba3 0008 	sub.w	r0, r3, r8
 801edd0:	2800      	cmp	r0, #0
 801edd2:	f77f af41 	ble.w	801ec58 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801edd6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801edda:	9f00      	ldr	r7, [sp, #0]
 801eddc:	1410      	asrs	r0, r2, #16
 801edde:	fb06 7000 	mla	r0, r6, r0, r7
 801ede2:	140d      	asrs	r5, r1, #16
 801ede4:	5d40      	ldrb	r0, [r0, r5]
 801ede6:	9d01      	ldr	r5, [sp, #4]
 801ede8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801edec:	0e2e      	lsrs	r6, r5, #24
 801edee:	2eff      	cmp	r6, #255	@ 0xff
 801edf0:	d112      	bne.n	801ee18 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 801edf2:	482c      	ldr	r0, [pc, #176]	@ (801eea4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 801edf4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801edf8:	0968      	lsrs	r0, r5, #5
 801edfa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801edfe:	4330      	orrs	r0, r6
 801ee00:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ee04:	4328      	orrs	r0, r5
 801ee06:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 801ee0a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ee0c:	f108 0801 	add.w	r8, r8, #1
 801ee10:	4401      	add	r1, r0
 801ee12:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801ee14:	4402      	add	r2, r0
 801ee16:	e7d9      	b.n	801edcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ee18:	b2f0      	uxtb	r0, r6
 801ee1a:	2e00      	cmp	r6, #0
 801ee1c:	d0f5      	beq.n	801ee0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ee1e:	fa1f f980 	uxth.w	r9, r0
 801ee22:	43c0      	mvns	r0, r0
 801ee24:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801ee28:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 801ee2c:	fb16 f609 	smulbb	r6, r6, r9
 801ee30:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801ee34:	b2ed      	uxtb	r5, r5
 801ee36:	ea4f 272c 	mov.w	r7, ip, asr #8
 801ee3a:	fb15 f509 	smulbb	r5, r5, r9
 801ee3e:	b2c0      	uxtb	r0, r0
 801ee40:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801ee44:	fb07 6700 	mla	r7, r7, r0, r6
 801ee48:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801ee4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801ee50:	fb1a fa09 	smulbb	sl, sl, r9
 801ee54:	fa5f fc8c 	uxtb.w	ip, ip
 801ee58:	fb0c 5500 	mla	r5, ip, r0, r5
 801ee5c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801ee60:	fb06 a600 	mla	r6, r6, r0, sl
 801ee64:	b2bf      	uxth	r7, r7
 801ee66:	b2ad      	uxth	r5, r5
 801ee68:	1c78      	adds	r0, r7, #1
 801ee6a:	f105 0a01 	add.w	sl, r5, #1
 801ee6e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801ee72:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801ee76:	b2b6      	uxth	r6, r6
 801ee78:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801ee7c:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801ee80:	ea4a 0707 	orr.w	r7, sl, r7
 801ee84:	f106 0a01 	add.w	sl, r6, #1
 801ee88:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801ee8c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801ee90:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801ee94:	ea47 070a 	orr.w	r7, r7, sl
 801ee98:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801ee9c:	e7b5      	b.n	801ee0a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ee9e:	b005      	add	sp, #20
 801eea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eea4:	fffff800 	.word	0xfffff800

0801eea8 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eea8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eeac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeb0:	b087      	sub	sp, #28
 801eeb2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801eeb4:	468b      	mov	fp, r1
 801eeb6:	9204      	str	r2, [sp, #16]
 801eeb8:	6861      	ldr	r1, [r4, #4]
 801eeba:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801eebe:	f8dd e060 	ldr.w	lr, [sp, #96]	@ 0x60
 801eec2:	9205      	str	r2, [sp, #20]
 801eec4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	@ 0x58
 801eec8:	fb01 2000 	mla	r0, r1, r0, r2
 801eecc:	6822      	ldr	r2, [r4, #0]
 801eece:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801eed2:	f8de 2000 	ldr.w	r2, [lr]
 801eed6:	9201      	str	r2, [sp, #4]
 801eed8:	f8de 2004 	ldr.w	r2, [lr, #4]
 801eedc:	9202      	str	r2, [sp, #8]
 801eede:	f1bb 0f00 	cmp.w	fp, #0
 801eee2:	dc03      	bgt.n	801eeec <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801eee4:	9a04      	ldr	r2, [sp, #16]
 801eee6:	2a00      	cmp	r2, #0
 801eee8:	f340 8142 	ble.w	801f170 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801eeec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801eeee:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801eef2:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801eef6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801eef8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 801eefc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	dd0e      	ble.n	801ef22 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ef04:	140c      	asrs	r4, r1, #16
 801ef06:	d405      	bmi.n	801ef14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef08:	42bc      	cmp	r4, r7
 801ef0a:	da03      	bge.n	801ef14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef0c:	1414      	asrs	r4, r2, #16
 801ef0e:	d401      	bmi.n	801ef14 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef10:	42b4      	cmp	r4, r6
 801ef12:	db07      	blt.n	801ef24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ef14:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ef16:	3b01      	subs	r3, #1
 801ef18:	4421      	add	r1, r4
 801ef1a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801ef1c:	3002      	adds	r0, #2
 801ef1e:	4422      	add	r2, r4
 801ef20:	e7ee      	b.n	801ef00 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ef22:	d019      	beq.n	801ef58 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 801ef24:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801ef26:	1e5c      	subs	r4, r3, #1
 801ef28:	fb05 1504 	mla	r5, r5, r4, r1
 801ef2c:	142d      	asrs	r5, r5, #16
 801ef2e:	d409      	bmi.n	801ef44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ef30:	42bd      	cmp	r5, r7
 801ef32:	da07      	bge.n	801ef44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ef34:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801ef36:	fb05 2404 	mla	r4, r5, r4, r2
 801ef3a:	1424      	asrs	r4, r4, #16
 801ef3c:	d402      	bmi.n	801ef44 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ef3e:	42b4      	cmp	r4, r6
 801ef40:	f2c0 80b1 	blt.w	801f0a6 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801ef44:	f04f 0800 	mov.w	r8, #0
 801ef48:	eb03 0408 	add.w	r4, r3, r8
 801ef4c:	2c00      	cmp	r4, #0
 801ef4e:	dc3e      	bgt.n	801efce <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801ef50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ef54:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ef58:	f1bb 0f00 	cmp.w	fp, #0
 801ef5c:	f340 8108 	ble.w	801f170 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 801ef60:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ef64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ef68:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ef6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ef70:	eeb0 6a62 	vmov.f32	s12, s5
 801ef74:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ef78:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ef7c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ef80:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ef84:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ef88:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ef8c:	eeb0 6a43 	vmov.f32	s12, s6
 801ef90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ef94:	ee12 2a90 	vmov	r2, s5
 801ef98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ef9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ef9e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efa2:	fb92 f3f3 	sdiv	r3, r2, r3
 801efa6:	ee13 2a10 	vmov	r2, s6
 801efaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 801efac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801efae:	f1bb 0b01 	subs.w	fp, fp, #1
 801efb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801efb6:	9a04      	ldr	r2, [sp, #16]
 801efb8:	9314      	str	r3, [sp, #80]	@ 0x50
 801efba:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801efbe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801efc0:	eeb0 3a67 	vmov.f32	s6, s15
 801efc4:	bf08      	it	eq
 801efc6:	4613      	moveq	r3, r2
 801efc8:	eef0 2a47 	vmov.f32	s5, s14
 801efcc:	e787      	b.n	801eede <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801efce:	140e      	asrs	r6, r1, #16
 801efd0:	d462      	bmi.n	801f098 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801efd2:	f8de 5008 	ldr.w	r5, [lr, #8]
 801efd6:	42b5      	cmp	r5, r6
 801efd8:	dd5e      	ble.n	801f098 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801efda:	1417      	asrs	r7, r2, #16
 801efdc:	d45c      	bmi.n	801f098 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801efde:	f8de 400c 	ldr.w	r4, [lr, #12]
 801efe2:	42bc      	cmp	r4, r7
 801efe4:	dd58      	ble.n	801f098 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801efe6:	b22d      	sxth	r5, r5
 801efe8:	fb07 6505 	mla	r5, r7, r5, r6
 801efec:	9c02      	ldr	r4, [sp, #8]
 801efee:	5d66      	ldrb	r6, [r4, r5]
 801eff0:	2e00      	cmp	r6, #0
 801eff2:	d051      	beq.n	801f098 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801eff4:	9c01      	ldr	r4, [sp, #4]
 801eff6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 801effa:	f06f 0401 	mvn.w	r4, #1
 801effe:	fb04 f408 	mul.w	r4, r4, r8
 801f002:	5b05      	ldrh	r5, [r0, r4]
 801f004:	9403      	str	r4, [sp, #12]
 801f006:	9c05      	ldr	r4, [sp, #20]
 801f008:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f00c:	4366      	muls	r6, r4
 801f00e:	1c74      	adds	r4, r6, #1
 801f010:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f014:	1224      	asrs	r4, r4, #8
 801f016:	b2a7      	uxth	r7, r4
 801f018:	43e4      	mvns	r4, r4
 801f01a:	122e      	asrs	r6, r5, #8
 801f01c:	b2e4      	uxtb	r4, r4
 801f01e:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f022:	fb16 f604 	smulbb	r6, r6, r4
 801f026:	00ed      	lsls	r5, r5, #3
 801f028:	b2ed      	uxtb	r5, r5
 801f02a:	ea4f 2c29 	mov.w	ip, r9, asr #8
 801f02e:	fb15 f504 	smulbb	r5, r5, r4
 801f032:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f036:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f03a:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f03e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 801f042:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f046:	fb1a fa04 	smulbb	sl, sl, r4
 801f04a:	fa5f f989 	uxtb.w	r9, r9
 801f04e:	fb09 5507 	mla	r5, r9, r7, r5
 801f052:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f056:	fb06 a607 	mla	r6, r6, r7, sl
 801f05a:	fa1f fc8c 	uxth.w	ip, ip
 801f05e:	b2ad      	uxth	r5, r5
 801f060:	f10c 0401 	add.w	r4, ip, #1
 801f064:	f105 0a01 	add.w	sl, r5, #1
 801f068:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f06c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f070:	b2b6      	uxth	r6, r6
 801f072:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f076:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f07a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f07e:	f106 0a01 	add.w	sl, r6, #1
 801f082:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f086:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f08a:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f08e:	9c03      	ldr	r4, [sp, #12]
 801f090:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f094:	f820 c004 	strh.w	ip, [r0, r4]
 801f098:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f09a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f09e:	4421      	add	r1, r4
 801f0a0:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f0a2:	4422      	add	r2, r4
 801f0a4:	e750      	b.n	801ef48 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f0a6:	f04f 0900 	mov.w	r9, #0
 801f0aa:	eba3 0409 	sub.w	r4, r3, r9
 801f0ae:	2c00      	cmp	r4, #0
 801f0b0:	f77f af4e 	ble.w	801ef50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f0b4:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801f0b8:	140d      	asrs	r5, r1, #16
 801f0ba:	1414      	asrs	r4, r2, #16
 801f0bc:	fb06 5404 	mla	r4, r6, r4, r5
 801f0c0:	9d02      	ldr	r5, [sp, #8]
 801f0c2:	5d2e      	ldrb	r6, [r5, r4]
 801f0c4:	2e00      	cmp	r6, #0
 801f0c6:	d04c      	beq.n	801f162 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801f0c8:	9d01      	ldr	r5, [sp, #4]
 801f0ca:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801f0ce:	9c05      	ldr	r4, [sp, #20]
 801f0d0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f0d4:	4366      	muls	r6, r4
 801f0d6:	1c74      	adds	r4, r6, #1
 801f0d8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801f0dc:	1224      	asrs	r4, r4, #8
 801f0de:	b2a7      	uxth	r7, r4
 801f0e0:	43e4      	mvns	r4, r4
 801f0e2:	122e      	asrs	r6, r5, #8
 801f0e4:	b2e4      	uxtb	r4, r4
 801f0e6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f0ea:	fb16 f604 	smulbb	r6, r6, r4
 801f0ee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f0f2:	00ed      	lsls	r5, r5, #3
 801f0f4:	b2ed      	uxtb	r5, r5
 801f0f6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801f0fa:	fb15 f504 	smulbb	r5, r5, r4
 801f0fe:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f102:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f106:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f10a:	ea4f 06e8 	mov.w	r6, r8, asr #3
 801f10e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801f112:	fb1a fa04 	smulbb	sl, sl, r4
 801f116:	fa5f f888 	uxtb.w	r8, r8
 801f11a:	fb08 5507 	mla	r5, r8, r7, r5
 801f11e:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f122:	fb06 a607 	mla	r6, r6, r7, sl
 801f126:	fa1f fc8c 	uxth.w	ip, ip
 801f12a:	b2ad      	uxth	r5, r5
 801f12c:	f10c 0401 	add.w	r4, ip, #1
 801f130:	f105 0a01 	add.w	sl, r5, #1
 801f134:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f138:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f13c:	b2b6      	uxth	r6, r6
 801f13e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f142:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f146:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f14a:	f106 0a01 	add.w	sl, r6, #1
 801f14e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f152:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f156:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f15a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f15e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f162:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f164:	f109 0901 	add.w	r9, r9, #1
 801f168:	4421      	add	r1, r4
 801f16a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f16c:	4422      	add	r2, r4
 801f16e:	e79c      	b.n	801f0aa <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 801f170:	b007      	add	sp, #28
 801f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f176 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f17a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f17e:	b085      	sub	sp, #20
 801f180:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f182:	468b      	mov	fp, r1
 801f184:	6861      	ldr	r1, [r4, #4]
 801f186:	9203      	str	r2, [sp, #12]
 801f188:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	@ 0x50
 801f18c:	fb01 2000 	mla	r0, r1, r0, r2
 801f190:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801f194:	6822      	ldr	r2, [r4, #0]
 801f196:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801f19a:	f8d8 2000 	ldr.w	r2, [r8]
 801f19e:	9200      	str	r2, [sp, #0]
 801f1a0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801f1a4:	9201      	str	r2, [sp, #4]
 801f1a6:	f1bb 0f00 	cmp.w	fp, #0
 801f1aa:	dc03      	bgt.n	801f1b4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f1ac:	9a03      	ldr	r2, [sp, #12]
 801f1ae:	2a00      	cmp	r2, #0
 801f1b0:	f340 8146 	ble.w	801f440 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f1b4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f1b6:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801f1ba:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f1be:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f1c0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801f1c4:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f1c8:	2b00      	cmp	r3, #0
 801f1ca:	dd0e      	ble.n	801f1ea <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f1cc:	140c      	asrs	r4, r1, #16
 801f1ce:	d405      	bmi.n	801f1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f1d0:	42bc      	cmp	r4, r7
 801f1d2:	da03      	bge.n	801f1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f1d4:	1414      	asrs	r4, r2, #16
 801f1d6:	d401      	bmi.n	801f1dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f1d8:	42b4      	cmp	r4, r6
 801f1da:	db07      	blt.n	801f1ec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f1dc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f1de:	3b01      	subs	r3, #1
 801f1e0:	4421      	add	r1, r4
 801f1e2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f1e4:	3002      	adds	r0, #2
 801f1e6:	4422      	add	r2, r4
 801f1e8:	e7ee      	b.n	801f1c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f1ea:	d017      	beq.n	801f21c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f1ec:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f1ee:	1e5c      	subs	r4, r3, #1
 801f1f0:	fb05 1504 	mla	r5, r5, r4, r1
 801f1f4:	142d      	asrs	r5, r5, #16
 801f1f6:	d409      	bmi.n	801f20c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f1f8:	42bd      	cmp	r5, r7
 801f1fa:	da07      	bge.n	801f20c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f1fc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f1fe:	fb05 2404 	mla	r4, r5, r4, r2
 801f202:	1424      	asrs	r4, r4, #16
 801f204:	d402      	bmi.n	801f20c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f206:	42b4      	cmp	r4, r6
 801f208:	f2c0 80b3 	blt.w	801f372 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f20c:	2600      	movs	r6, #0
 801f20e:	199c      	adds	r4, r3, r6
 801f210:	2c00      	cmp	r4, #0
 801f212:	dc3e      	bgt.n	801f292 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f218:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801f21c:	f1bb 0f00 	cmp.w	fp, #0
 801f220:	f340 810e 	ble.w	801f440 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 801f224:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f228:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f22c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f230:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f234:	eeb0 6a62 	vmov.f32	s12, s5
 801f238:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f23c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f240:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f244:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f248:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f24c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f250:	eeb0 6a43 	vmov.f32	s12, s6
 801f254:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f258:	ee12 2a90 	vmov	r2, s5
 801f25c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f262:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f266:	fb92 f3f3 	sdiv	r3, r2, r3
 801f26a:	ee13 2a10 	vmov	r2, s6
 801f26e:	9311      	str	r3, [sp, #68]	@ 0x44
 801f270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f272:	f1bb 0b01 	subs.w	fp, fp, #1
 801f276:	fb92 f3f3 	sdiv	r3, r2, r3
 801f27a:	9a03      	ldr	r2, [sp, #12]
 801f27c:	9312      	str	r3, [sp, #72]	@ 0x48
 801f27e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f282:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f284:	eeb0 3a67 	vmov.f32	s6, s15
 801f288:	bf08      	it	eq
 801f28a:	4613      	moveq	r3, r2
 801f28c:	eef0 2a47 	vmov.f32	s5, s14
 801f290:	e789      	b.n	801f1a6 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f292:	140f      	asrs	r7, r1, #16
 801f294:	d418      	bmi.n	801f2c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f296:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801f29a:	42bd      	cmp	r5, r7
 801f29c:	dd14      	ble.n	801f2c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f29e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f2a2:	d411      	bmi.n	801f2c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f2a4:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801f2a8:	4564      	cmp	r4, ip
 801f2aa:	dd0d      	ble.n	801f2c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f2ac:	b22d      	sxth	r5, r5
 801f2ae:	fb0c 7505 	mla	r5, ip, r5, r7
 801f2b2:	9c01      	ldr	r4, [sp, #4]
 801f2b4:	5d64      	ldrb	r4, [r4, r5]
 801f2b6:	2cff      	cmp	r4, #255	@ 0xff
 801f2b8:	d10c      	bne.n	801f2d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801f2ba:	9c00      	ldr	r4, [sp, #0]
 801f2bc:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 801f2c0:	f06f 0401 	mvn.w	r4, #1
 801f2c4:	4374      	muls	r4, r6
 801f2c6:	5305      	strh	r5, [r0, r4]
 801f2c8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f2ca:	3e01      	subs	r6, #1
 801f2cc:	4421      	add	r1, r4
 801f2ce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f2d0:	4422      	add	r2, r4
 801f2d2:	e79c      	b.n	801f20e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f2d4:	2c00      	cmp	r4, #0
 801f2d6:	d0f7      	beq.n	801f2c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f2d8:	9f00      	ldr	r7, [sp, #0]
 801f2da:	fa1f fc84 	uxth.w	ip, r4
 801f2de:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 801f2e2:	f06f 0501 	mvn.w	r5, #1
 801f2e6:	43e4      	mvns	r4, r4
 801f2e8:	4375      	muls	r5, r6
 801f2ea:	9502      	str	r5, [sp, #8]
 801f2ec:	5b45      	ldrh	r5, [r0, r5]
 801f2ee:	b2e4      	uxtb	r4, r4
 801f2f0:	122f      	asrs	r7, r5, #8
 801f2f2:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f2f6:	fb17 f704 	smulbb	r7, r7, r4
 801f2fa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f2fe:	00ed      	lsls	r5, r5, #3
 801f300:	b2ed      	uxtb	r5, r5
 801f302:	ea4f 2e29 	mov.w	lr, r9, asr #8
 801f306:	fb15 f504 	smulbb	r5, r5, r4
 801f30a:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f30e:	fb0e 7e0c 	mla	lr, lr, ip, r7
 801f312:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f316:	ea4f 07e9 	mov.w	r7, r9, asr #3
 801f31a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801f31e:	fb1a fa04 	smulbb	sl, sl, r4
 801f322:	fa5f f989 	uxtb.w	r9, r9
 801f326:	fb09 550c 	mla	r5, r9, ip, r5
 801f32a:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f32e:	fb07 a70c 	mla	r7, r7, ip, sl
 801f332:	fa1f fe8e 	uxth.w	lr, lr
 801f336:	b2ad      	uxth	r5, r5
 801f338:	f10e 0401 	add.w	r4, lr, #1
 801f33c:	f105 0a01 	add.w	sl, r5, #1
 801f340:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 801f344:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f348:	b2bf      	uxth	r7, r7
 801f34a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f34e:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801f352:	ea4a 0e0e 	orr.w	lr, sl, lr
 801f356:	f107 0a01 	add.w	sl, r7, #1
 801f35a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801f35e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f362:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f366:	9c02      	ldr	r4, [sp, #8]
 801f368:	ea4e 0e0a 	orr.w	lr, lr, sl
 801f36c:	f820 e004 	strh.w	lr, [r0, r4]
 801f370:	e7aa      	b.n	801f2c8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801f372:	f04f 0900 	mov.w	r9, #0
 801f376:	eba3 0409 	sub.w	r4, r3, r9
 801f37a:	2c00      	cmp	r4, #0
 801f37c:	f77f af4a 	ble.w	801f214 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f380:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801f384:	1414      	asrs	r4, r2, #16
 801f386:	140d      	asrs	r5, r1, #16
 801f388:	fb06 5504 	mla	r5, r6, r4, r5
 801f38c:	9c01      	ldr	r4, [sp, #4]
 801f38e:	5d64      	ldrb	r4, [r4, r5]
 801f390:	2cff      	cmp	r4, #255	@ 0xff
 801f392:	d10b      	bne.n	801f3ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801f394:	9c00      	ldr	r4, [sp, #0]
 801f396:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f39a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801f39e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801f3a0:	f109 0901 	add.w	r9, r9, #1
 801f3a4:	4421      	add	r1, r4
 801f3a6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f3a8:	4422      	add	r2, r4
 801f3aa:	e7e4      	b.n	801f376 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801f3ac:	2c00      	cmp	r4, #0
 801f3ae:	d0f6      	beq.n	801f39e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f3b0:	b2a7      	uxth	r7, r4
 801f3b2:	43e4      	mvns	r4, r4
 801f3b4:	9e00      	ldr	r6, [sp, #0]
 801f3b6:	b2e4      	uxtb	r4, r4
 801f3b8:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801f3bc:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 801f3c0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801f3c4:	122e      	asrs	r6, r5, #8
 801f3c6:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 801f3ca:	fb16 f604 	smulbb	r6, r6, r4
 801f3ce:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f3d2:	00ed      	lsls	r5, r5, #3
 801f3d4:	b2ed      	uxtb	r5, r5
 801f3d6:	fb15 f504 	smulbb	r5, r5, r4
 801f3da:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f3de:	fb0c 6c07 	mla	ip, ip, r7, r6
 801f3e2:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801f3e6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801f3ea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801f3ee:	fb1a fa04 	smulbb	sl, sl, r4
 801f3f2:	fa5f fe8e 	uxtb.w	lr, lr
 801f3f6:	fb0e 5507 	mla	r5, lr, r7, r5
 801f3fa:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801f3fe:	fb06 a607 	mla	r6, r6, r7, sl
 801f402:	fa1f fc8c 	uxth.w	ip, ip
 801f406:	b2ad      	uxth	r5, r5
 801f408:	f10c 0401 	add.w	r4, ip, #1
 801f40c:	f105 0a01 	add.w	sl, r5, #1
 801f410:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801f414:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801f418:	b2b6      	uxth	r6, r6
 801f41a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801f41e:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f422:	ea4a 0c0c 	orr.w	ip, sl, ip
 801f426:	f106 0a01 	add.w	sl, r6, #1
 801f42a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801f42e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801f432:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801f436:	ea4c 0c0a 	orr.w	ip, ip, sl
 801f43a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801f43e:	e7ae      	b.n	801f39e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f440:	b005      	add	sp, #20
 801f442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f446 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f446:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f44a:	b085      	sub	sp, #20
 801f44c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801f44e:	9100      	str	r1, [sp, #0]
 801f450:	9203      	str	r2, [sp, #12]
 801f452:	6841      	ldr	r1, [r0, #4]
 801f454:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801f458:	f8dd e058 	ldr.w	lr, [sp, #88]	@ 0x58
 801f45c:	9201      	str	r2, [sp, #4]
 801f45e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f462:	fb01 2404 	mla	r4, r1, r4, r2
 801f466:	6802      	ldr	r2, [r0, #0]
 801f468:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f46c:	f8de 2000 	ldr.w	r2, [lr]
 801f470:	9202      	str	r2, [sp, #8]
 801f472:	9a01      	ldr	r2, [sp, #4]
 801f474:	43d6      	mvns	r6, r2
 801f476:	b2f6      	uxtb	r6, r6
 801f478:	9a00      	ldr	r2, [sp, #0]
 801f47a:	2a00      	cmp	r2, #0
 801f47c:	dc03      	bgt.n	801f486 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801f47e:	9a03      	ldr	r2, [sp, #12]
 801f480:	2a00      	cmp	r2, #0
 801f482:	f340 8124 	ble.w	801f6ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f486:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f488:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801f48c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f490:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f492:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 801f496:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	dd0e      	ble.n	801f4bc <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f49e:	1408      	asrs	r0, r1, #16
 801f4a0:	d405      	bmi.n	801f4ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f4a2:	4560      	cmp	r0, ip
 801f4a4:	da03      	bge.n	801f4ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f4a6:	1410      	asrs	r0, r2, #16
 801f4a8:	d401      	bmi.n	801f4ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801f4aa:	42b8      	cmp	r0, r7
 801f4ac:	db07      	blt.n	801f4be <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f4ae:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f4b0:	3b01      	subs	r3, #1
 801f4b2:	4401      	add	r1, r0
 801f4b4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f4b6:	3402      	adds	r4, #2
 801f4b8:	4402      	add	r2, r0
 801f4ba:	e7ee      	b.n	801f49a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801f4bc:	d06e      	beq.n	801f59c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f4be:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801f4c0:	1e58      	subs	r0, r3, #1
 801f4c2:	fb05 1500 	mla	r5, r5, r0, r1
 801f4c6:	142d      	asrs	r5, r5, #16
 801f4c8:	d45c      	bmi.n	801f584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f4ca:	4565      	cmp	r5, ip
 801f4cc:	da5a      	bge.n	801f584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f4ce:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801f4d0:	fb05 2000 	mla	r0, r5, r0, r2
 801f4d4:	1400      	asrs	r0, r0, #16
 801f4d6:	d455      	bmi.n	801f584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f4d8:	42b8      	cmp	r0, r7
 801f4da:	da53      	bge.n	801f584 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f4dc:	4699      	mov	r9, r3
 801f4de:	46a2      	mov	sl, r4
 801f4e0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 801f4e4:	f1b9 0f00 	cmp.w	r9, #0
 801f4e8:	dd54      	ble.n	801f594 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801f4ea:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 801f4ee:	140d      	asrs	r5, r1, #16
 801f4f0:	1410      	asrs	r0, r2, #16
 801f4f2:	fb07 5000 	mla	r0, r7, r0, r5
 801f4f6:	9d02      	ldr	r5, [sp, #8]
 801f4f8:	f109 39ff 	add.w	r9, r9, #4294967295
 801f4fc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 801f500:	f8ba 5000 	ldrh.w	r5, [sl]
 801f504:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f508:	122f      	asrs	r7, r5, #8
 801f50a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f50e:	fb17 f706 	smulbb	r7, r7, r6
 801f512:	ea4f 08e5 	mov.w	r8, r5, asr #3
 801f516:	00ed      	lsls	r5, r5, #3
 801f518:	f008 08fc 	and.w	r8, r8, #252	@ 0xfc
 801f51c:	b2ed      	uxtb	r5, r5
 801f51e:	fb18 f806 	smulbb	r8, r8, r6
 801f522:	fb15 f506 	smulbb	r5, r5, r6
 801f526:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f52a:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801f52e:	10c7      	asrs	r7, r0, #3
 801f530:	00c0      	lsls	r0, r0, #3
 801f532:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f536:	b2c0      	uxtb	r0, r0
 801f538:	fb07 870b 	mla	r7, r7, fp, r8
 801f53c:	fb00 500b 	mla	r0, r0, fp, r5
 801f540:	fa1f fc8c 	uxth.w	ip, ip
 801f544:	b280      	uxth	r0, r0
 801f546:	b2bf      	uxth	r7, r7
 801f548:	f10c 0501 	add.w	r5, ip, #1
 801f54c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f550:	f107 0801 	add.w	r8, r7, #1
 801f554:	1c45      	adds	r5, r0, #1
 801f556:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f55a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801f55e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f560:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f564:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f568:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801f56c:	ea45 0c0c 	orr.w	ip, r5, ip
 801f570:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 801f574:	4401      	add	r1, r0
 801f576:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f578:	ea4c 0c08 	orr.w	ip, ip, r8
 801f57c:	f82a cb02 	strh.w	ip, [sl], #2
 801f580:	4402      	add	r2, r0
 801f582:	e7af      	b.n	801f4e4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801f584:	f04f 0800 	mov.w	r8, #0
 801f588:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801f58c:	eb03 0008 	add.w	r0, r3, r8
 801f590:	2800      	cmp	r0, #0
 801f592:	dc41      	bgt.n	801f618 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f594:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f598:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f59c:	9b00      	ldr	r3, [sp, #0]
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	f340 8095 	ble.w	801f6ce <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801f5a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f5a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f5b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5b8:	eef0 6a62 	vmov.f32	s13, s5
 801f5bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f5d0:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801f5d4:	eef0 6a43 	vmov.f32	s13, s6
 801f5d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f5dc:	ee12 2a90 	vmov	r2, s5
 801f5e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f5e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f5ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5ee:	ee13 2a10 	vmov	r2, s6
 801f5f2:	9311      	str	r3, [sp, #68]	@ 0x44
 801f5f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f5f6:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801f5fa:	fb92 f3f3 	sdiv	r3, r2, r3
 801f5fe:	9312      	str	r3, [sp, #72]	@ 0x48
 801f600:	9b00      	ldr	r3, [sp, #0]
 801f602:	9a03      	ldr	r2, [sp, #12]
 801f604:	3b01      	subs	r3, #1
 801f606:	9300      	str	r3, [sp, #0]
 801f608:	eeb0 3a67 	vmov.f32	s6, s15
 801f60c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f60e:	eef0 2a47 	vmov.f32	s5, s14
 801f612:	bf08      	it	eq
 801f614:	4613      	moveq	r3, r2
 801f616:	e72f      	b.n	801f478 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f618:	140f      	asrs	r7, r1, #16
 801f61a:	d451      	bmi.n	801f6c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f61c:	f8de 5008 	ldr.w	r5, [lr, #8]
 801f620:	42bd      	cmp	r5, r7
 801f622:	dd4d      	ble.n	801f6c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f624:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f628:	d44a      	bmi.n	801f6c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f62a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801f62e:	4560      	cmp	r0, ip
 801f630:	dd46      	ble.n	801f6c0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f632:	b22d      	sxth	r5, r5
 801f634:	fb0c 7505 	mla	r5, ip, r5, r7
 801f638:	9802      	ldr	r0, [sp, #8]
 801f63a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801f63e:	f06f 0501 	mvn.w	r5, #1
 801f642:	fb05 fb08 	mul.w	fp, r5, r8
 801f646:	f834 500b 	ldrh.w	r5, [r4, fp]
 801f64a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801f64e:	122f      	asrs	r7, r5, #8
 801f650:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801f654:	fb17 f706 	smulbb	r7, r7, r6
 801f658:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801f65c:	00ed      	lsls	r5, r5, #3
 801f65e:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 801f662:	b2ed      	uxtb	r5, r5
 801f664:	fb19 f906 	smulbb	r9, r9, r6
 801f668:	fb15 f506 	smulbb	r5, r5, r6
 801f66c:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801f670:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801f674:	10c7      	asrs	r7, r0, #3
 801f676:	00c0      	lsls	r0, r0, #3
 801f678:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801f67c:	b2c0      	uxtb	r0, r0
 801f67e:	fb07 970a 	mla	r7, r7, sl, r9
 801f682:	fb00 500a 	mla	r0, r0, sl, r5
 801f686:	fa1f fc8c 	uxth.w	ip, ip
 801f68a:	b2bf      	uxth	r7, r7
 801f68c:	b280      	uxth	r0, r0
 801f68e:	f10c 0501 	add.w	r5, ip, #1
 801f692:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801f696:	f107 0901 	add.w	r9, r7, #1
 801f69a:	1c45      	adds	r5, r0, #1
 801f69c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801f6a0:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801f6a4:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801f6a8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801f6ac:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f6b0:	ea45 0c0c 	orr.w	ip, r5, ip
 801f6b4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801f6b8:	ea4c 0c09 	orr.w	ip, ip, r9
 801f6bc:	f824 c00b 	strh.w	ip, [r4, fp]
 801f6c0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801f6c2:	f108 38ff 	add.w	r8, r8, #4294967295
 801f6c6:	4401      	add	r1, r0
 801f6c8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801f6ca:	4402      	add	r2, r0
 801f6cc:	e75e      	b.n	801f58c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801f6ce:	b005      	add	sp, #20
 801f6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f6d4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f6d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6dc:	b085      	sub	sp, #20
 801f6de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801f6e0:	4693      	mov	fp, r2
 801f6e2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801f6e6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	@ 0x44
 801f6ea:	6870      	ldr	r0, [r6, #4]
 801f6ec:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 801f6ee:	fb00 2404 	mla	r4, r0, r4, r2
 801f6f2:	6832      	ldr	r2, [r6, #0]
 801f6f4:	9101      	str	r1, [sp, #4]
 801f6f6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801f6fa:	682a      	ldr	r2, [r5, #0]
 801f6fc:	9202      	str	r2, [sp, #8]
 801f6fe:	9a01      	ldr	r2, [sp, #4]
 801f700:	2a00      	cmp	r2, #0
 801f702:	dc03      	bgt.n	801f70c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f704:	f1bb 0f00 	cmp.w	fp, #0
 801f708:	f340 809a 	ble.w	801f840 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f70c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801f70e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801f712:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f716:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f718:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 801f71c:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801f720:	2b00      	cmp	r3, #0
 801f722:	dd0c      	ble.n	801f73e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801f724:	1406      	asrs	r6, r0, #16
 801f726:	d405      	bmi.n	801f734 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f728:	454e      	cmp	r6, r9
 801f72a:	da03      	bge.n	801f734 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f72c:	1416      	asrs	r6, r2, #16
 801f72e:	d401      	bmi.n	801f734 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801f730:	4546      	cmp	r6, r8
 801f732:	db05      	blt.n	801f740 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801f734:	4470      	add	r0, lr
 801f736:	4462      	add	r2, ip
 801f738:	3b01      	subs	r3, #1
 801f73a:	3402      	adds	r4, #2
 801f73c:	e7f0      	b.n	801f720 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f73e:	d00f      	beq.n	801f760 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f740:	1e5e      	subs	r6, r3, #1
 801f742:	fb0e 0706 	mla	r7, lr, r6, r0
 801f746:	143f      	asrs	r7, r7, #16
 801f748:	d541      	bpl.n	801f7ce <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f74a:	4698      	mov	r8, r3
 801f74c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801f750:	9603      	str	r6, [sp, #12]
 801f752:	f1b8 0f00 	cmp.w	r8, #0
 801f756:	dc56      	bgt.n	801f806 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f758:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f75c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801f760:	9b01      	ldr	r3, [sp, #4]
 801f762:	2b00      	cmp	r3, #0
 801f764:	dd6c      	ble.n	801f840 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801f766:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f76a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f76e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f772:	eeb0 6a62 	vmov.f32	s12, s5
 801f776:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f77a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f77e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f782:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f786:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f78a:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801f78e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f792:	eeb0 6a43 	vmov.f32	s12, s6
 801f796:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f79a:	ee12 2a90 	vmov	r2, s5
 801f79e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7a4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7a8:	fb92 fef3 	sdiv	lr, r2, r3
 801f7ac:	ee13 2a10 	vmov	r2, s6
 801f7b0:	fb92 fcf3 	sdiv	ip, r2, r3
 801f7b4:	9b01      	ldr	r3, [sp, #4]
 801f7b6:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801f7ba:	3b01      	subs	r3, #1
 801f7bc:	9301      	str	r3, [sp, #4]
 801f7be:	eeb0 3a67 	vmov.f32	s6, s15
 801f7c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7c4:	eef0 2a47 	vmov.f32	s5, s14
 801f7c8:	bf08      	it	eq
 801f7ca:	465b      	moveq	r3, fp
 801f7cc:	e797      	b.n	801f6fe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f7ce:	454f      	cmp	r7, r9
 801f7d0:	dabb      	bge.n	801f74a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f7d2:	fb0c 2606 	mla	r6, ip, r6, r2
 801f7d6:	1436      	asrs	r6, r6, #16
 801f7d8:	d4b7      	bmi.n	801f74a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f7da:	4546      	cmp	r6, r8
 801f7dc:	dab5      	bge.n	801f74a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f7de:	461e      	mov	r6, r3
 801f7e0:	46a0      	mov	r8, r4
 801f7e2:	2e00      	cmp	r6, #0
 801f7e4:	ddb8      	ble.n	801f758 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f7e6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801f7ea:	1417      	asrs	r7, r2, #16
 801f7ec:	ea4f 4920 	mov.w	r9, r0, asr #16
 801f7f0:	fb0a 9707 	mla	r7, sl, r7, r9
 801f7f4:	9902      	ldr	r1, [sp, #8]
 801f7f6:	4470      	add	r0, lr
 801f7f8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 801f7fc:	4462      	add	r2, ip
 801f7fe:	f828 7b02 	strh.w	r7, [r8], #2
 801f802:	3e01      	subs	r6, #1
 801f804:	e7ed      	b.n	801f7e2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 801f806:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f80a:	d414      	bmi.n	801f836 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f80c:	68ae      	ldr	r6, [r5, #8]
 801f80e:	454e      	cmp	r6, r9
 801f810:	dd11      	ble.n	801f836 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f812:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f816:	d40e      	bmi.n	801f836 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f818:	68ef      	ldr	r7, [r5, #12]
 801f81a:	4557      	cmp	r7, sl
 801f81c:	dd0b      	ble.n	801f836 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 801f81e:	f06f 0101 	mvn.w	r1, #1
 801f822:	b236      	sxth	r6, r6
 801f824:	fb0a 9606 	mla	r6, sl, r6, r9
 801f828:	9f02      	ldr	r7, [sp, #8]
 801f82a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801f82e:	fb01 f608 	mul.w	r6, r1, r8
 801f832:	9903      	ldr	r1, [sp, #12]
 801f834:	538f      	strh	r7, [r1, r6]
 801f836:	4470      	add	r0, lr
 801f838:	4462      	add	r2, ip
 801f83a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f83e:	e788      	b.n	801f752 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f840:	b005      	add	sp, #20
 801f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f846 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f84a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f84e:	b087      	sub	sp, #28
 801f850:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f852:	468b      	mov	fp, r1
 801f854:	9203      	str	r2, [sp, #12]
 801f856:	6841      	ldr	r1, [r0, #4]
 801f858:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801f85c:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801f860:	9204      	str	r2, [sp, #16]
 801f862:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801f866:	fb01 2505 	mla	r5, r1, r5, r2
 801f86a:	6802      	ldr	r2, [r0, #0]
 801f86c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 801f870:	f8d9 2000 	ldr.w	r2, [r9]
 801f874:	9201      	str	r2, [sp, #4]
 801f876:	f1bb 0f00 	cmp.w	fp, #0
 801f87a:	dc03      	bgt.n	801f884 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f87c:	9a03      	ldr	r2, [sp, #12]
 801f87e:	2a00      	cmp	r2, #0
 801f880:	f340 8159 	ble.w	801fb36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f884:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801f886:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801f88a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801f88e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801f890:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801f894:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801f898:	2b00      	cmp	r3, #0
 801f89a:	dd0e      	ble.n	801f8ba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f89c:	1402      	asrs	r2, r0, #16
 801f89e:	d405      	bmi.n	801f8ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f8a0:	42ba      	cmp	r2, r7
 801f8a2:	da03      	bge.n	801f8ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f8a4:	140a      	asrs	r2, r1, #16
 801f8a6:	d401      	bmi.n	801f8ac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f8a8:	42b2      	cmp	r2, r6
 801f8aa:	db07      	blt.n	801f8bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f8ac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f8ae:	3b01      	subs	r3, #1
 801f8b0:	4410      	add	r0, r2
 801f8b2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f8b4:	3502      	adds	r5, #2
 801f8b6:	4411      	add	r1, r2
 801f8b8:	e7ee      	b.n	801f898 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f8ba:	d017      	beq.n	801f8ec <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801f8bc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f8be:	1e5a      	subs	r2, r3, #1
 801f8c0:	fb04 0402 	mla	r4, r4, r2, r0
 801f8c4:	1424      	asrs	r4, r4, #16
 801f8c6:	d409      	bmi.n	801f8dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8c8:	42bc      	cmp	r4, r7
 801f8ca:	da07      	bge.n	801f8dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8cc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f8ce:	fb04 1202 	mla	r2, r4, r2, r1
 801f8d2:	1412      	asrs	r2, r2, #16
 801f8d4:	d402      	bmi.n	801f8dc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f8d6:	42b2      	cmp	r2, r6
 801f8d8:	f2c0 80bf 	blt.w	801fa5a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801f8dc:	2700      	movs	r7, #0
 801f8de:	19da      	adds	r2, r3, r7
 801f8e0:	2a00      	cmp	r2, #0
 801f8e2:	dc3e      	bgt.n	801f962 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801f8e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f8e8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801f8ec:	f1bb 0f00 	cmp.w	fp, #0
 801f8f0:	f340 8121 	ble.w	801fb36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801f8f4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f8f8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f8fc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f900:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f904:	eeb0 6a62 	vmov.f32	s12, s5
 801f908:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f90c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f910:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f914:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f918:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f91c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801f920:	eeb0 6a43 	vmov.f32	s12, s6
 801f924:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f928:	ee12 2a90 	vmov	r2, s5
 801f92c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f930:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f932:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f936:	fb92 f3f3 	sdiv	r3, r2, r3
 801f93a:	ee13 2a10 	vmov	r2, s6
 801f93e:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f940:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f942:	f1bb 0b01 	subs.w	fp, fp, #1
 801f946:	fb92 f3f3 	sdiv	r3, r2, r3
 801f94a:	9a03      	ldr	r2, [sp, #12]
 801f94c:	9314      	str	r3, [sp, #80]	@ 0x50
 801f94e:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801f952:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f954:	eeb0 3a67 	vmov.f32	s6, s15
 801f958:	bf08      	it	eq
 801f95a:	4613      	moveq	r3, r2
 801f95c:	eef0 2a47 	vmov.f32	s5, s14
 801f960:	e789      	b.n	801f876 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f962:	1406      	asrs	r6, r0, #16
 801f964:	d42d      	bmi.n	801f9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f966:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801f96a:	42b4      	cmp	r4, r6
 801f96c:	dd29      	ble.n	801f9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f96e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 801f972:	d426      	bmi.n	801f9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f974:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801f978:	4562      	cmp	r2, ip
 801f97a:	dd22      	ble.n	801f9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f97c:	b224      	sxth	r4, r4
 801f97e:	fb0c 6404 	mla	r4, ip, r4, r6
 801f982:	9a01      	ldr	r2, [sp, #4]
 801f984:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 801f988:	0e22      	lsrs	r2, r4, #24
 801f98a:	d01a      	beq.n	801f9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801f98c:	9e04      	ldr	r6, [sp, #16]
 801f98e:	4372      	muls	r2, r6
 801f990:	1c56      	adds	r6, r2, #1
 801f992:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801f996:	1212      	asrs	r2, r2, #8
 801f998:	0a26      	lsrs	r6, r4, #8
 801f99a:	2aff      	cmp	r2, #255	@ 0xff
 801f99c:	9605      	str	r6, [sp, #20]
 801f99e:	d116      	bne.n	801f9ce <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801f9a0:	f06f 0201 	mvn.w	r2, #1
 801f9a4:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801f9a8:	fb02 fc07 	mul.w	ip, r2, r7
 801f9ac:	0962      	lsrs	r2, r4, #5
 801f9ae:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801f9b2:	f026 0607 	bic.w	r6, r6, #7
 801f9b6:	4316      	orrs	r6, r2
 801f9b8:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801f9bc:	4326      	orrs	r6, r4
 801f9be:	f825 600c 	strh.w	r6, [r5, ip]
 801f9c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f9c4:	3f01      	subs	r7, #1
 801f9c6:	4410      	add	r0, r2
 801f9c8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f9ca:	4411      	add	r1, r2
 801f9cc:	e787      	b.n	801f8de <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f9ce:	f06f 0601 	mvn.w	r6, #1
 801f9d2:	fa1f fa82 	uxth.w	sl, r2
 801f9d6:	43d2      	mvns	r2, r2
 801f9d8:	437e      	muls	r6, r7
 801f9da:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 801f9de:	f835 8006 	ldrh.w	r8, [r5, r6]
 801f9e2:	fb1c fc0a 	smulbb	ip, ip, sl
 801f9e6:	b2e4      	uxtb	r4, r4
 801f9e8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801f9ec:	fb14 f40a 	smulbb	r4, r4, sl
 801f9f0:	b2d2      	uxtb	r2, r2
 801f9f2:	9602      	str	r6, [sp, #8]
 801f9f4:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801f9f8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801f9fc:	fb0e ce02 	mla	lr, lr, r2, ip
 801fa00:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801fa04:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fa08:	fb16 f60a 	smulbb	r6, r6, sl
 801fa0c:	fa5f f888 	uxtb.w	r8, r8
 801fa10:	fb08 4402 	mla	r4, r8, r2, r4
 801fa14:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 801fa18:	fb0c 6c02 	mla	ip, ip, r2, r6
 801fa1c:	fa1f fe8e 	uxth.w	lr, lr
 801fa20:	b2a4      	uxth	r4, r4
 801fa22:	f10e 0201 	add.w	r2, lr, #1
 801fa26:	1c66      	adds	r6, r4, #1
 801fa28:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801fa2c:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fa30:	fa1f fc8c 	uxth.w	ip, ip
 801fa34:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fa38:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 801fa3c:	ea46 0e0e 	orr.w	lr, r6, lr
 801fa40:	f10c 0601 	add.w	r6, ip, #1
 801fa44:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801fa48:	0976      	lsrs	r6, r6, #5
 801fa4a:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801fa4e:	9a02      	ldr	r2, [sp, #8]
 801fa50:	ea4e 0e06 	orr.w	lr, lr, r6
 801fa54:	f825 e002 	strh.w	lr, [r5, r2]
 801fa58:	e7b3      	b.n	801f9c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801fa5a:	f04f 0800 	mov.w	r8, #0
 801fa5e:	eba3 0208 	sub.w	r2, r3, r8
 801fa62:	2a00      	cmp	r2, #0
 801fa64:	f77f af3e 	ble.w	801f8e4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801fa68:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801fa6c:	1404      	asrs	r4, r0, #16
 801fa6e:	140a      	asrs	r2, r1, #16
 801fa70:	fb06 4202 	mla	r2, r6, r2, r4
 801fa74:	9c01      	ldr	r4, [sp, #4]
 801fa76:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801fa7a:	0e22      	lsrs	r2, r4, #24
 801fa7c:	d016      	beq.n	801faac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801fa7e:	9e04      	ldr	r6, [sp, #16]
 801fa80:	4372      	muls	r2, r6
 801fa82:	1c56      	adds	r6, r2, #1
 801fa84:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801fa88:	1212      	asrs	r2, r2, #8
 801fa8a:	2aff      	cmp	r2, #255	@ 0xff
 801fa8c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 801fa90:	d113      	bne.n	801faba <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801fa92:	0962      	lsrs	r2, r4, #5
 801fa94:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801fa98:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801fa9c:	f026 0607 	bic.w	r6, r6, #7
 801faa0:	4316      	orrs	r6, r2
 801faa2:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801faa6:	4326      	orrs	r6, r4
 801faa8:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801faac:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801faae:	f108 0801 	add.w	r8, r8, #1
 801fab2:	4410      	add	r0, r2
 801fab4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fab6:	4411      	add	r1, r2
 801fab8:	e7d1      	b.n	801fa5e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801faba:	fa1f fa82 	uxth.w	sl, r2
 801fabe:	43d2      	mvns	r2, r2
 801fac0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801fac4:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801fac8:	fb17 f70a 	smulbb	r7, r7, sl
 801facc:	b2e4      	uxtb	r4, r4
 801face:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fad2:	fb14 f40a 	smulbb	r4, r4, sl
 801fad6:	b2d2      	uxtb	r2, r2
 801fad8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fadc:	fb0c 7c02 	mla	ip, ip, r2, r7
 801fae0:	b2f6      	uxtb	r6, r6
 801fae2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fae6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801faea:	fb16 f60a 	smulbb	r6, r6, sl
 801faee:	fa5f fe8e 	uxtb.w	lr, lr
 801faf2:	fb0e 4402 	mla	r4, lr, r2, r4
 801faf6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fafa:	fb07 6702 	mla	r7, r7, r2, r6
 801fafe:	fa1f fc8c 	uxth.w	ip, ip
 801fb02:	b2a4      	uxth	r4, r4
 801fb04:	f10c 0201 	add.w	r2, ip, #1
 801fb08:	1c66      	adds	r6, r4, #1
 801fb0a:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801fb0e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801fb12:	b2bf      	uxth	r7, r7
 801fb14:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801fb18:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fb1c:	ea46 0c0c 	orr.w	ip, r6, ip
 801fb20:	1c7e      	adds	r6, r7, #1
 801fb22:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801fb26:	0976      	lsrs	r6, r6, #5
 801fb28:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801fb2c:	ea4c 0c06 	orr.w	ip, ip, r6
 801fb30:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 801fb34:	e7ba      	b.n	801faac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801fb36:	b007      	add	sp, #28
 801fb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fb3c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fb3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb44:	b085      	sub	sp, #20
 801fb46:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801fb48:	468b      	mov	fp, r1
 801fb4a:	6841      	ldr	r1, [r0, #4]
 801fb4c:	9203      	str	r2, [sp, #12]
 801fb4e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801fb52:	fb01 2404 	mla	r4, r1, r4, r2
 801fb56:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801fb5a:	6802      	ldr	r2, [r0, #0]
 801fb5c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fb60:	f8d8 2000 	ldr.w	r2, [r8]
 801fb64:	9201      	str	r2, [sp, #4]
 801fb66:	f1bb 0f00 	cmp.w	fp, #0
 801fb6a:	dc03      	bgt.n	801fb74 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fb6c:	9a03      	ldr	r2, [sp, #12]
 801fb6e:	2a00      	cmp	r2, #0
 801fb70:	f340 814f 	ble.w	801fe12 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fb74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801fb76:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801fb7a:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fb7e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fb80:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 801fb84:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	dd0e      	ble.n	801fbaa <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801fb8c:	1408      	asrs	r0, r1, #16
 801fb8e:	d405      	bmi.n	801fb9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fb90:	42b8      	cmp	r0, r7
 801fb92:	da03      	bge.n	801fb9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fb94:	1410      	asrs	r0, r2, #16
 801fb96:	d401      	bmi.n	801fb9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801fb98:	42b0      	cmp	r0, r6
 801fb9a:	db07      	blt.n	801fbac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fb9c:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fb9e:	3b01      	subs	r3, #1
 801fba0:	4401      	add	r1, r0
 801fba2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fba4:	3402      	adds	r4, #2
 801fba6:	4402      	add	r2, r0
 801fba8:	e7ee      	b.n	801fb88 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801fbaa:	d017      	beq.n	801fbdc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801fbac:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801fbae:	1e58      	subs	r0, r3, #1
 801fbb0:	fb05 1500 	mla	r5, r5, r0, r1
 801fbb4:	142d      	asrs	r5, r5, #16
 801fbb6:	d409      	bmi.n	801fbcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fbb8:	42bd      	cmp	r5, r7
 801fbba:	da07      	bge.n	801fbcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fbbc:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801fbbe:	fb05 2000 	mla	r0, r5, r0, r2
 801fbc2:	1400      	asrs	r0, r0, #16
 801fbc4:	d402      	bmi.n	801fbcc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801fbc6:	42b0      	cmp	r0, r6
 801fbc8:	f2c0 80ba 	blt.w	801fd40 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801fbcc:	2600      	movs	r6, #0
 801fbce:	1998      	adds	r0, r3, r6
 801fbd0:	2800      	cmp	r0, #0
 801fbd2:	dc3e      	bgt.n	801fc52 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801fbd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fbd8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fbdc:	f1bb 0f00 	cmp.w	fp, #0
 801fbe0:	f340 8117 	ble.w	801fe12 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 801fbe4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fbe8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fbec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fbf0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fbf4:	eeb0 6a62 	vmov.f32	s12, s5
 801fbf8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fbfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc00:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fc0c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801fc10:	eeb0 6a43 	vmov.f32	s12, s6
 801fc14:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc18:	ee12 2a90 	vmov	r2, s5
 801fc1c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fc20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc22:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fc26:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc2a:	ee13 2a10 	vmov	r2, s6
 801fc2e:	9311      	str	r3, [sp, #68]	@ 0x44
 801fc30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc32:	f1bb 0b01 	subs.w	fp, fp, #1
 801fc36:	fb92 f3f3 	sdiv	r3, r2, r3
 801fc3a:	9a03      	ldr	r2, [sp, #12]
 801fc3c:	9312      	str	r3, [sp, #72]	@ 0x48
 801fc3e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801fc42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fc44:	eeb0 3a67 	vmov.f32	s6, s15
 801fc48:	bf08      	it	eq
 801fc4a:	4613      	moveq	r3, r2
 801fc4c:	eef0 2a47 	vmov.f32	s5, s14
 801fc50:	e789      	b.n	801fb66 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fc52:	140f      	asrs	r7, r1, #16
 801fc54:	d424      	bmi.n	801fca0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fc56:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801fc5a:	42bd      	cmp	r5, r7
 801fc5c:	dd20      	ble.n	801fca0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fc5e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801fc62:	d41d      	bmi.n	801fca0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fc64:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801fc68:	4560      	cmp	r0, ip
 801fc6a:	dd19      	ble.n	801fca0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fc6c:	b22d      	sxth	r5, r5
 801fc6e:	fb0c 7505 	mla	r5, ip, r5, r7
 801fc72:	9801      	ldr	r0, [sp, #4]
 801fc74:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801fc78:	0e07      	lsrs	r7, r0, #24
 801fc7a:	2fff      	cmp	r7, #255	@ 0xff
 801fc7c:	d116      	bne.n	801fcac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801fc7e:	f06f 0501 	mvn.w	r5, #1
 801fc82:	fb05 f706 	mul.w	r7, r5, r6
 801fc86:	f2a5 75fe 	subw	r5, r5, #2046	@ 0x7fe
 801fc8a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801fc8e:	0945      	lsrs	r5, r0, #5
 801fc90:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801fc94:	ea4c 0505 	orr.w	r5, ip, r5
 801fc98:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801fc9c:	4305      	orrs	r5, r0
 801fc9e:	53e5      	strh	r5, [r4, r7]
 801fca0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fca2:	3e01      	subs	r6, #1
 801fca4:	4401      	add	r1, r0
 801fca6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fca8:	4402      	add	r2, r0
 801fcaa:	e790      	b.n	801fbce <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801fcac:	b2fd      	uxtb	r5, r7
 801fcae:	2f00      	cmp	r7, #0
 801fcb0:	d0f6      	beq.n	801fca0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fcb2:	f06f 0701 	mvn.w	r7, #1
 801fcb6:	fa1f f985 	uxth.w	r9, r5
 801fcba:	43ed      	mvns	r5, r5
 801fcbc:	4377      	muls	r7, r6
 801fcbe:	f834 e007 	ldrh.w	lr, [r4, r7]
 801fcc2:	9702      	str	r7, [sp, #8]
 801fcc4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801fcc8:	fb17 f709 	smulbb	r7, r7, r9
 801fccc:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801fcd0:	b2c0      	uxtb	r0, r0
 801fcd2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801fcd6:	fb10 f009 	smulbb	r0, r0, r9
 801fcda:	b2ed      	uxtb	r5, r5
 801fcdc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 801fce0:	fb0c 7c05 	mla	ip, ip, r5, r7
 801fce4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 801fce8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801fcec:	fb1a fa09 	smulbb	sl, sl, r9
 801fcf0:	fa5f fe8e 	uxtb.w	lr, lr
 801fcf4:	fb0e 0005 	mla	r0, lr, r5, r0
 801fcf8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 801fcfc:	fb07 a705 	mla	r7, r7, r5, sl
 801fd00:	b280      	uxth	r0, r0
 801fd02:	fa1f fc8c 	uxth.w	ip, ip
 801fd06:	f100 0a01 	add.w	sl, r0, #1
 801fd0a:	f10c 0501 	add.w	r5, ip, #1
 801fd0e:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801fd12:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801fd16:	b2bf      	uxth	r7, r7
 801fd18:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fd1c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 801fd20:	ea4a 0c0c 	orr.w	ip, sl, ip
 801fd24:	f107 0a01 	add.w	sl, r7, #1
 801fd28:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801fd2c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fd30:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fd34:	9802      	ldr	r0, [sp, #8]
 801fd36:	ea4c 0c0a 	orr.w	ip, ip, sl
 801fd3a:	f824 c000 	strh.w	ip, [r4, r0]
 801fd3e:	e7af      	b.n	801fca0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801fd40:	f04f 0e00 	mov.w	lr, #0
 801fd44:	eba3 000e 	sub.w	r0, r3, lr
 801fd48:	2800      	cmp	r0, #0
 801fd4a:	f77f af43 	ble.w	801fbd4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801fd4e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 801fd52:	140d      	asrs	r5, r1, #16
 801fd54:	1410      	asrs	r0, r2, #16
 801fd56:	fb06 5000 	mla	r0, r6, r0, r5
 801fd5a:	9d01      	ldr	r5, [sp, #4]
 801fd5c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 801fd60:	0e2e      	lsrs	r6, r5, #24
 801fd62:	2eff      	cmp	r6, #255	@ 0xff
 801fd64:	d112      	bne.n	801fd8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fd66:	482c      	ldr	r0, [pc, #176]	@ (801fe18 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 801fd68:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801fd6c:	0968      	lsrs	r0, r5, #5
 801fd6e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 801fd72:	4330      	orrs	r0, r6
 801fd74:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801fd78:	4328      	orrs	r0, r5
 801fd7a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801fd7e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fd80:	f10e 0e01 	add.w	lr, lr, #1
 801fd84:	4401      	add	r1, r0
 801fd86:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801fd88:	4402      	add	r2, r0
 801fd8a:	e7db      	b.n	801fd44 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fd8c:	b2f0      	uxtb	r0, r6
 801fd8e:	2e00      	cmp	r6, #0
 801fd90:	d0f5      	beq.n	801fd7e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fd92:	fa1f f980 	uxth.w	r9, r0
 801fd96:	43c0      	mvns	r0, r0
 801fd98:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801fd9c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801fda0:	fb16 f609 	smulbb	r6, r6, r9
 801fda4:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801fda8:	b2ed      	uxtb	r5, r5
 801fdaa:	ea4f 272c 	mov.w	r7, ip, asr #8
 801fdae:	fb15 f509 	smulbb	r5, r5, r9
 801fdb2:	b2c0      	uxtb	r0, r0
 801fdb4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 801fdb8:	fb07 6700 	mla	r7, r7, r0, r6
 801fdbc:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801fdc0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801fdc4:	fb1a fa09 	smulbb	sl, sl, r9
 801fdc8:	fa5f fc8c 	uxtb.w	ip, ip
 801fdcc:	fb0c 5500 	mla	r5, ip, r0, r5
 801fdd0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 801fdd4:	fb06 a600 	mla	r6, r6, r0, sl
 801fdd8:	b2bf      	uxth	r7, r7
 801fdda:	b2ad      	uxth	r5, r5
 801fddc:	1c78      	adds	r0, r7, #1
 801fdde:	f105 0a01 	add.w	sl, r5, #1
 801fde2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 801fde6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801fdea:	b2b6      	uxth	r6, r6
 801fdec:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801fdf0:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 801fdf4:	ea4a 0707 	orr.w	r7, sl, r7
 801fdf8:	f106 0a01 	add.w	sl, r6, #1
 801fdfc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801fe00:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801fe04:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 801fe08:	ea47 070a 	orr.w	r7, r7, sl
 801fe0c:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 801fe10:	e7b5      	b.n	801fd7e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801fe12:	b005      	add	sp, #20
 801fe14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fe18:	fffff800 	.word	0xfffff800

0801fe1c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fe20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe24:	b087      	sub	sp, #28
 801fe26:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801fe28:	468b      	mov	fp, r1
 801fe2a:	9203      	str	r2, [sp, #12]
 801fe2c:	6841      	ldr	r1, [r0, #4]
 801fe2e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801fe32:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 801fe36:	9204      	str	r2, [sp, #16]
 801fe38:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 801fe3c:	fb01 2404 	mla	r4, r1, r4, r2
 801fe40:	6802      	ldr	r2, [r0, #0]
 801fe42:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801fe46:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801fe4a:	3201      	adds	r2, #1
 801fe4c:	f022 0201 	bic.w	r2, r2, #1
 801fe50:	9200      	str	r2, [sp, #0]
 801fe52:	f8d9 2000 	ldr.w	r2, [r9]
 801fe56:	9201      	str	r2, [sp, #4]
 801fe58:	f1bb 0f00 	cmp.w	fp, #0
 801fe5c:	dc03      	bgt.n	801fe66 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801fe5e:	9a03      	ldr	r2, [sp, #12]
 801fe60:	2a00      	cmp	r2, #0
 801fe62:	f340 816a 	ble.w	802013a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fe66:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801fe68:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801fe6c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801fe70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801fe72:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 801fe76:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	dd0e      	ble.n	801fe9c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801fe7e:	1402      	asrs	r2, r0, #16
 801fe80:	d405      	bmi.n	801fe8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe82:	42ba      	cmp	r2, r7
 801fe84:	da03      	bge.n	801fe8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe86:	140a      	asrs	r2, r1, #16
 801fe88:	d401      	bmi.n	801fe8e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe8a:	42b2      	cmp	r2, r6
 801fe8c:	db07      	blt.n	801fe9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801fe8e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801fe90:	3b01      	subs	r3, #1
 801fe92:	4410      	add	r0, r2
 801fe94:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801fe96:	3402      	adds	r4, #2
 801fe98:	4411      	add	r1, r2
 801fe9a:	e7ee      	b.n	801fe7a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801fe9c:	d017      	beq.n	801fece <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801fe9e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801fea0:	1e5a      	subs	r2, r3, #1
 801fea2:	fb05 0502 	mla	r5, r5, r2, r0
 801fea6:	142d      	asrs	r5, r5, #16
 801fea8:	d409      	bmi.n	801febe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801feaa:	42bd      	cmp	r5, r7
 801feac:	da07      	bge.n	801febe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801feae:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801feb0:	fb05 1202 	mla	r2, r5, r2, r1
 801feb4:	1412      	asrs	r2, r2, #16
 801feb6:	d402      	bmi.n	801febe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801feb8:	42b2      	cmp	r2, r6
 801feba:	f2c0 80c8 	blt.w	802004e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801febe:	2700      	movs	r7, #0
 801fec0:	19da      	adds	r2, r3, r7
 801fec2:	2a00      	cmp	r2, #0
 801fec4:	dc3e      	bgt.n	801ff44 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801fec6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801feca:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801fece:	f1bb 0f00 	cmp.w	fp, #0
 801fed2:	f340 8132 	ble.w	802013a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fed6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801feda:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fede:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fee2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fee6:	eeb0 6a62 	vmov.f32	s12, s5
 801feea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801feee:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fef2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fef6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fefa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fefe:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801ff02:	eeb0 6a43 	vmov.f32	s12, s6
 801ff06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff0a:	ee12 2a90 	vmov	r2, s5
 801ff0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff12:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ff14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff18:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff1c:	ee13 2a10 	vmov	r2, s6
 801ff20:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ff22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ff24:	f1bb 0b01 	subs.w	fp, fp, #1
 801ff28:	fb92 f3f3 	sdiv	r3, r2, r3
 801ff2c:	9a03      	ldr	r2, [sp, #12]
 801ff2e:	9314      	str	r3, [sp, #80]	@ 0x50
 801ff30:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801ff34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ff36:	eeb0 3a67 	vmov.f32	s6, s15
 801ff3a:	bf08      	it	eq
 801ff3c:	4613      	moveq	r3, r2
 801ff3e:	eef0 2a47 	vmov.f32	s5, s14
 801ff42:	e789      	b.n	801fe58 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ff44:	1405      	asrs	r5, r0, #16
 801ff46:	d436      	bmi.n	801ffb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ff48:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801ff4c:	42aa      	cmp	r2, r5
 801ff4e:	dd32      	ble.n	801ffb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ff50:	140e      	asrs	r6, r1, #16
 801ff52:	d430      	bmi.n	801ffb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ff54:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801ff58:	42b2      	cmp	r2, r6
 801ff5a:	dd2c      	ble.n	801ffb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ff5c:	9a00      	ldr	r2, [sp, #0]
 801ff5e:	fb06 5502 	mla	r5, r6, r2, r5
 801ff62:	9e01      	ldr	r6, [sp, #4]
 801ff64:	086a      	lsrs	r2, r5, #1
 801ff66:	5cb2      	ldrb	r2, [r6, r2]
 801ff68:	07ee      	lsls	r6, r5, #31
 801ff6a:	bf54      	ite	pl
 801ff6c:	f002 020f 	andpl.w	r2, r2, #15
 801ff70:	1112      	asrmi	r2, r2, #4
 801ff72:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ff76:	b2d2      	uxtb	r2, r2
 801ff78:	b1ea      	cbz	r2, 801ffb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801ff7a:	9d04      	ldr	r5, [sp, #16]
 801ff7c:	436a      	muls	r2, r5
 801ff7e:	1c55      	adds	r5, r2, #1
 801ff80:	eb05 2222 	add.w	r2, r5, r2, asr #8
 801ff84:	4d6e      	ldr	r5, [pc, #440]	@ (8020140 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801ff86:	1212      	asrs	r2, r2, #8
 801ff88:	682d      	ldr	r5, [r5, #0]
 801ff8a:	2aff      	cmp	r2, #255	@ 0xff
 801ff8c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 801ff90:	9605      	str	r6, [sp, #20]
 801ff92:	d116      	bne.n	801ffc2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801ff94:	f06f 0201 	mvn.w	r2, #1
 801ff98:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 801ff9c:	fb02 fc07 	mul.w	ip, r2, r7
 801ffa0:	096a      	lsrs	r2, r5, #5
 801ffa2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801ffa6:	f026 0607 	bic.w	r6, r6, #7
 801ffaa:	4316      	orrs	r6, r2
 801ffac:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801ffb0:	432e      	orrs	r6, r5
 801ffb2:	f824 600c 	strh.w	r6, [r4, ip]
 801ffb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ffb8:	3f01      	subs	r7, #1
 801ffba:	4410      	add	r0, r2
 801ffbc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801ffbe:	4411      	add	r1, r2
 801ffc0:	e77e      	b.n	801fec0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ffc2:	f06f 0601 	mvn.w	r6, #1
 801ffc6:	fa1f fa82 	uxth.w	sl, r2
 801ffca:	43d2      	mvns	r2, r2
 801ffcc:	437e      	muls	r6, r7
 801ffce:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 801ffd2:	f834 8006 	ldrh.w	r8, [r4, r6]
 801ffd6:	fb1c fc0a 	smulbb	ip, ip, sl
 801ffda:	b2ed      	uxtb	r5, r5
 801ffdc:	ea4f 2e28 	mov.w	lr, r8, asr #8
 801ffe0:	fb15 f50a 	smulbb	r5, r5, sl
 801ffe4:	b2d2      	uxtb	r2, r2
 801ffe6:	9602      	str	r6, [sp, #8]
 801ffe8:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 801ffec:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801fff0:	fb0e ce02 	mla	lr, lr, r2, ip
 801fff4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 801fff8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801fffc:	fb16 f60a 	smulbb	r6, r6, sl
 8020000:	fa5f f888 	uxtb.w	r8, r8
 8020004:	fb08 5502 	mla	r5, r8, r2, r5
 8020008:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 802000c:	fb0c 6c02 	mla	ip, ip, r2, r6
 8020010:	fa1f fe8e 	uxth.w	lr, lr
 8020014:	b2ad      	uxth	r5, r5
 8020016:	f10e 0201 	add.w	r2, lr, #1
 802001a:	1c6e      	adds	r6, r5, #1
 802001c:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8020020:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8020024:	fa1f fc8c 	uxth.w	ip, ip
 8020028:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 802002c:	f40e 4e78 	and.w	lr, lr, #63488	@ 0xf800
 8020030:	ea46 0e0e 	orr.w	lr, r6, lr
 8020034:	f10c 0601 	add.w	r6, ip, #1
 8020038:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 802003c:	0976      	lsrs	r6, r6, #5
 802003e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8020042:	9a02      	ldr	r2, [sp, #8]
 8020044:	ea4e 0e06 	orr.w	lr, lr, r6
 8020048:	f824 e002 	strh.w	lr, [r4, r2]
 802004c:	e7b3      	b.n	801ffb6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802004e:	f04f 0800 	mov.w	r8, #0
 8020052:	eba3 0208 	sub.w	r2, r3, r8
 8020056:	2a00      	cmp	r2, #0
 8020058:	f77f af35 	ble.w	801fec6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 802005c:	9e00      	ldr	r6, [sp, #0]
 802005e:	1402      	asrs	r2, r0, #16
 8020060:	140d      	asrs	r5, r1, #16
 8020062:	fb06 2505 	mla	r5, r6, r5, r2
 8020066:	9e01      	ldr	r6, [sp, #4]
 8020068:	086a      	lsrs	r2, r5, #1
 802006a:	5cb2      	ldrb	r2, [r6, r2]
 802006c:	07ed      	lsls	r5, r5, #31
 802006e:	bf54      	ite	pl
 8020070:	f002 020f 	andpl.w	r2, r2, #15
 8020074:	1112      	asrmi	r2, r2, #4
 8020076:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802007a:	b2d2      	uxtb	r2, r2
 802007c:	b1c2      	cbz	r2, 80200b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802007e:	9d04      	ldr	r5, [sp, #16]
 8020080:	436a      	muls	r2, r5
 8020082:	1c55      	adds	r5, r2, #1
 8020084:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8020088:	4d2d      	ldr	r5, [pc, #180]	@ (8020140 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 802008a:	1212      	asrs	r2, r2, #8
 802008c:	682e      	ldr	r6, [r5, #0]
 802008e:	2aff      	cmp	r2, #255	@ 0xff
 8020090:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8020094:	d113      	bne.n	80200be <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8020096:	0972      	lsrs	r2, r6, #5
 8020098:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 802009c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80200a0:	f025 0507 	bic.w	r5, r5, #7
 80200a4:	4315      	orrs	r5, r2
 80200a6:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80200aa:	4335      	orrs	r5, r6
 80200ac:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 80200b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80200b2:	f108 0801 	add.w	r8, r8, #1
 80200b6:	4410      	add	r0, r2
 80200b8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80200ba:	4411      	add	r1, r2
 80200bc:	e7c9      	b.n	8020052 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80200be:	fa1f fa82 	uxth.w	sl, r2
 80200c2:	43d2      	mvns	r2, r2
 80200c4:	f3c6 4707 	ubfx	r7, r6, #16, #8
 80200c8:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 80200cc:	fb17 f70a 	smulbb	r7, r7, sl
 80200d0:	b2f6      	uxtb	r6, r6
 80200d2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80200d6:	fb16 f60a 	smulbb	r6, r6, sl
 80200da:	b2d2      	uxtb	r2, r2
 80200dc:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80200e0:	fb0c 7c02 	mla	ip, ip, r2, r7
 80200e4:	b2ed      	uxtb	r5, r5
 80200e6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80200ea:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80200ee:	fb15 f50a 	smulbb	r5, r5, sl
 80200f2:	fa5f fe8e 	uxtb.w	lr, lr
 80200f6:	fb0e 6602 	mla	r6, lr, r2, r6
 80200fa:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80200fe:	fb07 5702 	mla	r7, r7, r2, r5
 8020102:	fa1f fc8c 	uxth.w	ip, ip
 8020106:	b2b6      	uxth	r6, r6
 8020108:	f10c 0201 	add.w	r2, ip, #1
 802010c:	1c75      	adds	r5, r6, #1
 802010e:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8020112:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8020116:	b2bf      	uxth	r7, r7
 8020118:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 802011c:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8020120:	ea45 0c0c 	orr.w	ip, r5, ip
 8020124:	1c7d      	adds	r5, r7, #1
 8020126:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 802012a:	096d      	lsrs	r5, r5, #5
 802012c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8020130:	ea4c 0c05 	orr.w	ip, ip, r5
 8020134:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8020138:	e7ba      	b.n	80200b0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 802013a:	b007      	add	sp, #28
 802013c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020140:	20012114 	.word	0x20012114

08020144 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020144:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802014c:	b087      	sub	sp, #28
 802014e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020150:	9101      	str	r1, [sp, #4]
 8020152:	6841      	ldr	r1, [r0, #4]
 8020154:	9205      	str	r2, [sp, #20]
 8020156:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	@ 0x58
 802015a:	fb01 2404 	mla	r4, r1, r4, r2
 802015e:	f8dd b060 	ldr.w	fp, [sp, #96]	@ 0x60
 8020162:	6802      	ldr	r2, [r0, #0]
 8020164:	f8df 82f0 	ldr.w	r8, [pc, #752]	@ 8020458 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8020168:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 802016c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020170:	3201      	adds	r2, #1
 8020172:	f022 0201 	bic.w	r2, r2, #1
 8020176:	9202      	str	r2, [sp, #8]
 8020178:	f8db 2000 	ldr.w	r2, [fp]
 802017c:	9203      	str	r2, [sp, #12]
 802017e:	9a01      	ldr	r2, [sp, #4]
 8020180:	2a00      	cmp	r2, #0
 8020182:	dc03      	bgt.n	802018c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020184:	9a05      	ldr	r2, [sp, #20]
 8020186:	2a00      	cmp	r2, #0
 8020188:	f340 8162 	ble.w	8020450 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 802018c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802018e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020192:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8020196:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8020198:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802019c:	f502 4100 	add.w	r1, r2, #32768	@ 0x8000
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	dd0e      	ble.n	80201c2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80201a4:	1402      	asrs	r2, r0, #16
 80201a6:	d405      	bmi.n	80201b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80201a8:	42ba      	cmp	r2, r7
 80201aa:	da03      	bge.n	80201b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80201ac:	140a      	asrs	r2, r1, #16
 80201ae:	d401      	bmi.n	80201b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80201b0:	42b2      	cmp	r2, r6
 80201b2:	db07      	blt.n	80201c4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80201b4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80201b6:	3b01      	subs	r3, #1
 80201b8:	4410      	add	r0, r2
 80201ba:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80201bc:	3402      	adds	r4, #2
 80201be:	4411      	add	r1, r2
 80201c0:	e7ee      	b.n	80201a0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80201c2:	d017      	beq.n	80201f4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80201c4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80201c6:	1e5a      	subs	r2, r3, #1
 80201c8:	fb05 0502 	mla	r5, r5, r2, r0
 80201cc:	142d      	asrs	r5, r5, #16
 80201ce:	d409      	bmi.n	80201e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80201d0:	42bd      	cmp	r5, r7
 80201d2:	da07      	bge.n	80201e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80201d4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80201d6:	fb05 1202 	mla	r2, r5, r2, r1
 80201da:	1412      	asrs	r2, r2, #16
 80201dc:	d402      	bmi.n	80201e4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80201de:	42b2      	cmp	r2, r6
 80201e0:	f2c0 80c3 	blt.w	802036a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80201e4:	2500      	movs	r5, #0
 80201e6:	195a      	adds	r2, r3, r5
 80201e8:	2a00      	cmp	r2, #0
 80201ea:	dc3f      	bgt.n	802026c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80201ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80201f0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80201f4:	9b01      	ldr	r3, [sp, #4]
 80201f6:	2b00      	cmp	r3, #0
 80201f8:	f340 812a 	ble.w	8020450 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80201fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020200:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020204:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020208:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802020c:	eeb0 6a62 	vmov.f32	s12, s5
 8020210:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020214:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020218:	ee61 7a27 	vmul.f32	s15, s2, s15
 802021c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020220:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020224:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8020228:	eeb0 6a43 	vmov.f32	s12, s6
 802022c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020230:	ee12 2a90 	vmov	r2, s5
 8020234:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020238:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802023a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802023e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020242:	ee13 2a10 	vmov	r2, s6
 8020246:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020248:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802024a:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 802024e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020252:	9314      	str	r3, [sp, #80]	@ 0x50
 8020254:	9b01      	ldr	r3, [sp, #4]
 8020256:	9a05      	ldr	r2, [sp, #20]
 8020258:	3b01      	subs	r3, #1
 802025a:	9301      	str	r3, [sp, #4]
 802025c:	eeb0 3a67 	vmov.f32	s6, s15
 8020260:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020262:	eef0 2a47 	vmov.f32	s5, s14
 8020266:	bf08      	it	eq
 8020268:	4613      	moveq	r3, r2
 802026a:	e788      	b.n	802017e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802026c:	1406      	asrs	r6, r0, #16
 802026e:	d42c      	bmi.n	80202ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020270:	f8db 2008 	ldr.w	r2, [fp, #8]
 8020274:	42b2      	cmp	r2, r6
 8020276:	dd28      	ble.n	80202ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020278:	140f      	asrs	r7, r1, #16
 802027a:	d426      	bmi.n	80202ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802027c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8020280:	42ba      	cmp	r2, r7
 8020282:	dd22      	ble.n	80202ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020284:	9a02      	ldr	r2, [sp, #8]
 8020286:	fb07 6602 	mla	r6, r7, r2, r6
 802028a:	9f03      	ldr	r7, [sp, #12]
 802028c:	0872      	lsrs	r2, r6, #1
 802028e:	5cba      	ldrb	r2, [r7, r2]
 8020290:	07f6      	lsls	r6, r6, #31
 8020292:	bf54      	ite	pl
 8020294:	f002 020f 	andpl.w	r2, r2, #15
 8020298:	1112      	asrmi	r2, r2, #4
 802029a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802029e:	b2d2      	uxtb	r2, r2
 80202a0:	2aff      	cmp	r2, #255	@ 0xff
 80202a2:	d118      	bne.n	80202d6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80202a4:	f06f 0601 	mvn.w	r6, #1
 80202a8:	f8d8 2000 	ldr.w	r2, [r8]
 80202ac:	fb06 f705 	mul.w	r7, r6, r5
 80202b0:	f2a6 76fe 	subw	r6, r6, #2046	@ 0x7fe
 80202b4:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 80202b8:	0956      	lsrs	r6, r2, #5
 80202ba:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 80202be:	ea4c 0606 	orr.w	r6, ip, r6
 80202c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80202c6:	4316      	orrs	r6, r2
 80202c8:	53e6      	strh	r6, [r4, r7]
 80202ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80202cc:	3d01      	subs	r5, #1
 80202ce:	4410      	add	r0, r2
 80202d0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80202d2:	4411      	add	r1, r2
 80202d4:	e787      	b.n	80201e6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80202d6:	2a00      	cmp	r2, #0
 80202d8:	d0f7      	beq.n	80202ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80202da:	f06f 0601 	mvn.w	r6, #1
 80202de:	fa1f f982 	uxth.w	r9, r2
 80202e2:	43d2      	mvns	r2, r2
 80202e4:	436e      	muls	r6, r5
 80202e6:	f8d8 c000 	ldr.w	ip, [r8]
 80202ea:	f834 e006 	ldrh.w	lr, [r4, r6]
 80202ee:	9604      	str	r6, [sp, #16]
 80202f0:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80202f4:	fb16 f609 	smulbb	r6, r6, r9
 80202f8:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80202fc:	fa5f fc8c 	uxtb.w	ip, ip
 8020300:	ea4f 272e 	mov.w	r7, lr, asr #8
 8020304:	fb1c fc09 	smulbb	ip, ip, r9
 8020308:	b2d2      	uxtb	r2, r2
 802030a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802030e:	fb07 6702 	mla	r7, r7, r2, r6
 8020312:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8020316:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802031a:	fb1a fa09 	smulbb	sl, sl, r9
 802031e:	fa5f fe8e 	uxtb.w	lr, lr
 8020322:	fb0e cc02 	mla	ip, lr, r2, ip
 8020326:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802032a:	fb06 a602 	mla	r6, r6, r2, sl
 802032e:	b2bf      	uxth	r7, r7
 8020330:	fa1f fc8c 	uxth.w	ip, ip
 8020334:	1c7a      	adds	r2, r7, #1
 8020336:	f10c 0a01 	add.w	sl, ip, #1
 802033a:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802033e:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8020342:	b2b6      	uxth	r6, r6
 8020344:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8020348:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 802034c:	ea4a 0707 	orr.w	r7, sl, r7
 8020350:	f106 0a01 	add.w	sl, r6, #1
 8020354:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8020358:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802035c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020360:	9a04      	ldr	r2, [sp, #16]
 8020362:	ea47 070a 	orr.w	r7, r7, sl
 8020366:	52a7      	strh	r7, [r4, r2]
 8020368:	e7af      	b.n	80202ca <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802036a:	f04f 0e00 	mov.w	lr, #0
 802036e:	eba3 020e 	sub.w	r2, r3, lr
 8020372:	2a00      	cmp	r2, #0
 8020374:	f77f af3a 	ble.w	80201ec <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8020378:	9e02      	ldr	r6, [sp, #8]
 802037a:	1402      	asrs	r2, r0, #16
 802037c:	140d      	asrs	r5, r1, #16
 802037e:	fb06 2505 	mla	r5, r6, r5, r2
 8020382:	9e03      	ldr	r6, [sp, #12]
 8020384:	086a      	lsrs	r2, r5, #1
 8020386:	5cb2      	ldrb	r2, [r6, r2]
 8020388:	07ed      	lsls	r5, r5, #31
 802038a:	bf54      	ite	pl
 802038c:	f002 020f 	andpl.w	r2, r2, #15
 8020390:	1112      	asrmi	r2, r2, #4
 8020392:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8020396:	b2d2      	uxtb	r2, r2
 8020398:	2aff      	cmp	r2, #255	@ 0xff
 802039a:	d115      	bne.n	80203c8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 802039c:	f8d8 5000 	ldr.w	r5, [r8]
 80203a0:	f6a2 02ff 	subw	r2, r2, #2303	@ 0x8ff
 80203a4:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 80203a8:	096a      	lsrs	r2, r5, #5
 80203aa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80203ae:	4332      	orrs	r2, r6
 80203b0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80203b4:	432a      	orrs	r2, r5
 80203b6:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 80203ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80203bc:	f10e 0e01 	add.w	lr, lr, #1
 80203c0:	4410      	add	r0, r2
 80203c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80203c4:	4411      	add	r1, r2
 80203c6:	e7d2      	b.n	802036e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 80203c8:	2a00      	cmp	r2, #0
 80203ca:	d0f6      	beq.n	80203ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80203cc:	fa1f f982 	uxth.w	r9, r2
 80203d0:	43d2      	mvns	r2, r2
 80203d2:	f8d8 7000 	ldr.w	r7, [r8]
 80203d6:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 80203da:	f3c7 4507 	ubfx	r5, r7, #16, #8
 80203de:	fb15 f509 	smulbb	r5, r5, r9
 80203e2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80203e6:	b2ff      	uxtb	r7, r7
 80203e8:	ea4f 262c 	mov.w	r6, ip, asr #8
 80203ec:	fb17 f709 	smulbb	r7, r7, r9
 80203f0:	b2d2      	uxtb	r2, r2
 80203f2:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80203f6:	fb06 5602 	mla	r6, r6, r2, r5
 80203fa:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80203fe:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8020402:	fb1a fa09 	smulbb	sl, sl, r9
 8020406:	fa5f fc8c 	uxtb.w	ip, ip
 802040a:	fb0c 7702 	mla	r7, ip, r2, r7
 802040e:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8020412:	fb05 a502 	mla	r5, r5, r2, sl
 8020416:	b2b6      	uxth	r6, r6
 8020418:	b2bf      	uxth	r7, r7
 802041a:	1c72      	adds	r2, r6, #1
 802041c:	f107 0a01 	add.w	sl, r7, #1
 8020420:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8020424:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8020428:	b2ad      	uxth	r5, r5
 802042a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 802042e:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8020432:	ea4a 0606 	orr.w	r6, sl, r6
 8020436:	f105 0a01 	add.w	sl, r5, #1
 802043a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 802043e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8020442:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8020446:	ea46 060a 	orr.w	r6, r6, sl
 802044a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 802044e:	e7b4      	b.n	80203ba <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020450:	b007      	add	sp, #28
 8020452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020456:	bf00      	nop
 8020458:	20012114 	.word	0x20012114

0802045c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID1Ev>:
 802045c:	4770      	bx	lr

0802045e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D1Ev>:
 802045e:	4770      	bx	lr

08020460 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED1Ev>:
 8020460:	4770      	bx	lr

08020462 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8020462:	4770      	bx	lr

08020464 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020464:	4770      	bx	lr

08020466 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020466:	4770      	bx	lr

08020468 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020468:	4770      	bx	lr

0802046a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 802046a:	4770      	bx	lr

0802046c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 802046c:	4770      	bx	lr

0802046e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802046e:	4770      	bx	lr

08020470 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020470:	4770      	bx	lr

08020472 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020472:	4770      	bx	lr

08020474 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020474:	4770      	bx	lr

08020476 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020476:	4770      	bx	lr

08020478 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020478:	4770      	bx	lr

0802047a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 802047a:	4770      	bx	lr

0802047c <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 802047c:	4770      	bx	lr

0802047e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802047e:	4770      	bx	lr

08020480 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020480:	4770      	bx	lr

08020482 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020482:	4770      	bx	lr

08020484 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020484:	4770      	bx	lr

08020486 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020486:	4770      	bx	lr

08020488 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020488:	4770      	bx	lr

0802048a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 802048a:	4770      	bx	lr

0802048c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 802048c:	4770      	bx	lr

0802048e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 802048e:	4770      	bx	lr

08020490 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020490:	4770      	bx	lr

08020492 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020492:	4770      	bx	lr

08020494 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020494:	4770      	bx	lr

08020496 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020496:	4770      	bx	lr

08020498 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020498:	4770      	bx	lr

0802049a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 802049a:	4770      	bx	lr

0802049c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 802049c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204a0:	b088      	sub	sp, #32
 80204a2:	ac08      	add	r4, sp, #32
 80204a4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80204a8:	4606      	mov	r6, r0
 80204aa:	4620      	mov	r0, r4
 80204ac:	4688      	mov	r8, r1
 80204ae:	4691      	mov	r9, r2
 80204b0:	f7fd fc32 	bl	801dd18 <_ZNK8touchgfx6Bitmap7getDataEv>
 80204b4:	6833      	ldr	r3, [r6, #0]
 80204b6:	4605      	mov	r5, r0
 80204b8:	4620      	mov	r0, r4
 80204ba:	699f      	ldr	r7, [r3, #24]
 80204bc:	f7fd fb3a 	bl	801db34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80204c0:	4682      	mov	sl, r0
 80204c2:	4620      	mov	r0, r4
 80204c4:	f7fd fb6a 	bl	801db9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 80204c8:	9500      	str	r5, [sp, #0]
 80204ca:	e9cd a001 	strd	sl, r0, [sp, #4]
 80204ce:	464b      	mov	r3, r9
 80204d0:	a806      	add	r0, sp, #24
 80204d2:	4642      	mov	r2, r8
 80204d4:	4631      	mov	r1, r6
 80204d6:	47b8      	blx	r7
 80204d8:	4628      	mov	r0, r5
 80204da:	b008      	add	sp, #32
 80204dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080204e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 80204e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80204e4:	2300      	movs	r3, #0
 80204e6:	9300      	str	r3, [sp, #0]
 80204e8:	4b3d      	ldr	r3, [pc, #244]	@ (80205e0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80204ea:	781b      	ldrb	r3, [r3, #0]
 80204ec:	2b00      	cmp	r3, #0
 80204ee:	d137      	bne.n	8020560 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 80204f0:	4a3c      	ldr	r2, [pc, #240]	@ (80205e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80204f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80204f6:	f8ad 2004 	strh.w	r2, [sp, #4]
 80204fa:	2b00      	cmp	r3, #0
 80204fc:	d132      	bne.n	8020564 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80204fe:	4b3a      	ldr	r3, [pc, #232]	@ (80205e8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020504:	6808      	ldr	r0, [r1, #0]
 8020506:	6849      	ldr	r1, [r1, #4]
 8020508:	f8ad 3006 	strh.w	r3, [sp, #6]
 802050c:	ac02      	add	r4, sp, #8
 802050e:	ab02      	add	r3, sp, #8
 8020510:	c303      	stmia	r3!, {r0, r1}
 8020512:	4669      	mov	r1, sp
 8020514:	4620      	mov	r0, r4
 8020516:	f7fa f8a3 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802051a:	4668      	mov	r0, sp
 802051c:	f7fa f878 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020520:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020524:	f8bd 2000 	ldrh.w	r2, [sp]
 8020528:	4d30      	ldr	r5, [pc, #192]	@ (80205ec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 802052a:	4413      	add	r3, r2
 802052c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020530:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020534:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020538:	6828      	ldr	r0, [r5, #0]
 802053a:	4413      	add	r3, r2
 802053c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020540:	6803      	ldr	r3, [r0, #0]
 8020542:	462f      	mov	r7, r5
 8020544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020546:	4798      	blx	r3
 8020548:	f010 0f01 	tst.w	r0, #1
 802054c:	d00c      	beq.n	8020568 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 802054e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020552:	6828      	ldr	r0, [r5, #0]
 8020554:	6803      	ldr	r3, [r0, #0]
 8020556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8020558:	4798      	blx	r3
 802055a:	b004      	add	sp, #16
 802055c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020560:	4a21      	ldr	r2, [pc, #132]	@ (80205e8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020562:	e7c6      	b.n	80204f2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020564:	4b1f      	ldr	r3, [pc, #124]	@ (80205e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020566:	e7cb      	b.n	8020500 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020568:	6838      	ldr	r0, [r7, #0]
 802056a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 802056e:	6803      	ldr	r3, [r0, #0]
 8020570:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8020574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020576:	4798      	blx	r3
 8020578:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 802057c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8020580:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8020584:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8020588:	fb16 3602 	smlabb	r6, r6, r2, r3
 802058c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8020590:	6838      	ldr	r0, [r7, #0]
 8020592:	6803      	ldr	r3, [r0, #0]
 8020594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020596:	4798      	blx	r3
 8020598:	4a12      	ldr	r2, [pc, #72]	@ (80205e4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 802059a:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 802059e:	4691      	mov	r9, r2
 80205a0:	8813      	ldrh	r3, [r2, #0]
 80205a2:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80205a6:	435d      	muls	r5, r3
 80205a8:	fb03 1404 	mla	r4, r3, r4, r1
 80205ac:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80205b0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80205b4:	6838      	ldr	r0, [r7, #0]
 80205b6:	42ac      	cmp	r4, r5
 80205b8:	6803      	ldr	r3, [r0, #0]
 80205ba:	d20e      	bcs.n	80205da <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 80205bc:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 80205c0:	4632      	mov	r2, r6
 80205c2:	4643      	mov	r3, r8
 80205c4:	4621      	mov	r1, r4
 80205c6:	47d0      	blx	sl
 80205c8:	f8b9 3000 	ldrh.w	r3, [r9]
 80205cc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80205d0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80205d4:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80205d8:	e7ec      	b.n	80205b4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 80205da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80205dc:	4798      	blx	r3
 80205de:	e7bc      	b.n	802055a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 80205e0:	200120fc 	.word	0x200120fc
 80205e4:	200120fe 	.word	0x200120fe
 80205e8:	20012100 	.word	0x20012100
 80205ec:	20012104 	.word	0x20012104

080205f0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80205f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205f4:	b08b      	sub	sp, #44	@ 0x2c
 80205f6:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 80205fa:	460f      	mov	r7, r1
 80205fc:	4616      	mov	r6, r2
 80205fe:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8020602:	f1bb 0f00 	cmp.w	fp, #0
 8020606:	d04a      	beq.n	802069e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8020608:	6810      	ldr	r0, [r2, #0]
 802060a:	6851      	ldr	r1, [r2, #4]
 802060c:	ad06      	add	r5, sp, #24
 802060e:	c503      	stmia	r5!, {r0, r1}
 8020610:	6818      	ldr	r0, [r3, #0]
 8020612:	6859      	ldr	r1, [r3, #4]
 8020614:	ad08      	add	r5, sp, #32
 8020616:	c503      	stmia	r5!, {r0, r1}
 8020618:	a806      	add	r0, sp, #24
 802061a:	f7f9 fff9 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802061e:	4631      	mov	r1, r6
 8020620:	a808      	add	r0, sp, #32
 8020622:	f7fa f81d 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020626:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 802062a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 802062e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8020632:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8020636:	fb16 2103 	smlabb	r1, r6, r3, r2
 802063a:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 802063e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8020642:	4f60      	ldr	r7, [pc, #384]	@ (80207c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8020644:	440a      	add	r2, r1
 8020646:	f8ad 2020 	strh.w	r2, [sp, #32]
 802064a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802064e:	6838      	ldr	r0, [r7, #0]
 8020650:	4413      	add	r3, r2
 8020652:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8020656:	6803      	ldr	r3, [r0, #0]
 8020658:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 802065c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802065e:	4798      	blx	r3
 8020660:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8020664:	46b9      	mov	r9, r7
 8020666:	d11d      	bne.n	80206a4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020668:	b9fc      	cbnz	r4, 80206aa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 802066a:	f010 0f01 	tst.w	r0, #1
 802066e:	d01c      	beq.n	80206aa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8020670:	2700      	movs	r7, #0
 8020672:	f8d9 0000 	ldr.w	r0, [r9]
 8020676:	b2ad      	uxth	r5, r5
 8020678:	6801      	ldr	r1, [r0, #0]
 802067a:	e9cd 4704 	strd	r4, r7, [sp, #16]
 802067e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8020682:	f8cd b00c 	str.w	fp, [sp, #12]
 8020686:	9402      	str	r4, [sp, #8]
 8020688:	fa1f f488 	uxth.w	r4, r8
 802068c:	9501      	str	r5, [sp, #4]
 802068e:	9400      	str	r4, [sp, #0]
 8020690:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8020692:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8020696:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802069a:	4631      	mov	r1, r6
 802069c:	47a0      	blx	r4
 802069e:	b00b      	add	sp, #44	@ 0x2c
 80206a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80206a4:	f010 0f04 	tst.w	r0, #4
 80206a8:	e7e1      	b.n	802066e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 80206aa:	f8d9 0000 	ldr.w	r0, [r9]
 80206ae:	ea4f 0748 	mov.w	r7, r8, lsl #1
 80206b2:	6803      	ldr	r3, [r0, #0]
 80206b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80206b6:	4798      	blx	r3
 80206b8:	4b43      	ldr	r3, [pc, #268]	@ (80207c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 80206ba:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80206be:	881a      	ldrh	r2, [r3, #0]
 80206c0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80206c4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 80206c8:	fb02 1404 	mla	r4, r2, r4, r1
 80206cc:	469a      	mov	sl, r3
 80206ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80206d2:	fb05 f502 	mul.w	r5, r5, r2
 80206d6:	d059      	beq.n	802078c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 80206d8:	469e      	mov	lr, r3
 80206da:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 80206de:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 80206e2:	fa1f f28b 	uxth.w	r2, fp
 80206e6:	fa1f f989 	uxth.w	r9, r9
 80206ea:	42ac      	cmp	r4, r5
 80206ec:	d264      	bcs.n	80207b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 80206ee:	eb04 0a07 	add.w	sl, r4, r7
 80206f2:	4554      	cmp	r4, sl
 80206f4:	d23d      	bcs.n	8020772 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 80206f6:	8821      	ldrh	r1, [r4, #0]
 80206f8:	f836 3b02 	ldrh.w	r3, [r6], #2
 80206fc:	1208      	asrs	r0, r1, #8
 80206fe:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8020702:	fb10 f009 	smulbb	r0, r0, r9
 8020706:	ea4f 0be1 	mov.w	fp, r1, asr #3
 802070a:	00c9      	lsls	r1, r1, #3
 802070c:	b2c9      	uxtb	r1, r1
 802070e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8020712:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8020716:	fb11 f109 	smulbb	r1, r1, r9
 802071a:	fb1b fb09 	smulbb	fp, fp, r9
 802071e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8020722:	fb0c 0c02 	mla	ip, ip, r2, r0
 8020726:	10d8      	asrs	r0, r3, #3
 8020728:	00db      	lsls	r3, r3, #3
 802072a:	b2db      	uxtb	r3, r3
 802072c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8020730:	fb03 1302 	mla	r3, r3, r2, r1
 8020734:	fb00 b002 	mla	r0, r0, r2, fp
 8020738:	fa1f fc8c 	uxth.w	ip, ip
 802073c:	f10c 0b01 	add.w	fp, ip, #1
 8020740:	b29b      	uxth	r3, r3
 8020742:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8020746:	b280      	uxth	r0, r0
 8020748:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 802074c:	f103 0c01 	add.w	ip, r3, #1
 8020750:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8020754:	1c43      	adds	r3, r0, #1
 8020756:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802075a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802075e:	0940      	lsrs	r0, r0, #5
 8020760:	ea4c 0c0b 	orr.w	ip, ip, fp
 8020764:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8020768:	ea4c 0c00 	orr.w	ip, ip, r0
 802076c:	f824 cb02 	strh.w	ip, [r4], #2
 8020770:	e7bf      	b.n	80206f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8020772:	f8be 3000 	ldrh.w	r3, [lr]
 8020776:	eba3 0308 	sub.w	r3, r3, r8
 802077a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802077e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020782:	eba3 0308 	sub.w	r3, r3, r8
 8020786:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 802078a:	e7ae      	b.n	80206ea <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 802078c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8020790:	f8d9 0000 	ldr.w	r0, [r9]
 8020794:	42ac      	cmp	r4, r5
 8020796:	6803      	ldr	r3, [r0, #0]
 8020798:	d20e      	bcs.n	80207b8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 802079a:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 802079e:	4632      	mov	r2, r6
 80207a0:	463b      	mov	r3, r7
 80207a2:	4621      	mov	r1, r4
 80207a4:	47c0      	blx	r8
 80207a6:	f8ba 3000 	ldrh.w	r3, [sl]
 80207aa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80207ae:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80207b2:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 80207b6:	e7eb      	b.n	8020790 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 80207b8:	4b02      	ldr	r3, [pc, #8]	@ (80207c4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80207ba:	6818      	ldr	r0, [r3, #0]
 80207bc:	6803      	ldr	r3, [r0, #0]
 80207be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80207c0:	4798      	blx	r3
 80207c2:	e76c      	b.n	802069e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 80207c4:	20012104 	.word	0x20012104
 80207c8:	200120fe 	.word	0x200120fe

080207cc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 80207cc:	b510      	push	{r4, lr}
 80207ce:	4604      	mov	r4, r0
 80207d0:	2104      	movs	r1, #4
 80207d2:	f00b ff56 	bl	802c682 <_ZdlPvj>
 80207d6:	4620      	mov	r0, r4
 80207d8:	bd10      	pop	{r4, pc}

080207da <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLED0Ev>:
 80207da:	b510      	push	{r4, lr}
 80207dc:	4604      	mov	r4, r0
 80207de:	2104      	movs	r1, #4
 80207e0:	f00b ff4f 	bl	802c682 <_ZdlPvj>
 80207e4:	4620      	mov	r0, r4
 80207e6:	bd10      	pop	{r4, pc}

080207e8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW9D0Ev>:
 80207e8:	b510      	push	{r4, lr}
 80207ea:	4604      	mov	r4, r0
 80207ec:	f640 0144 	movw	r1, #2116	@ 0x844
 80207f0:	f00b ff47 	bl	802c682 <_ZdlPvj>
 80207f4:	4620      	mov	r0, r4
 80207f6:	bd10      	pop	{r4, pc}

080207f8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOID0Ev>:
 80207f8:	b510      	push	{r4, lr}
 80207fa:	4604      	mov	r4, r0
 80207fc:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8020800:	f00b ff3f 	bl	802c682 <_ZdlPvj>
 8020804:	4620      	mov	r0, r4
 8020806:	bd10      	pop	{r4, pc}

08020808 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020808:	b510      	push	{r4, lr}
 802080a:	4604      	mov	r4, r0
 802080c:	2104      	movs	r1, #4
 802080e:	f00b ff38 	bl	802c682 <_ZdlPvj>
 8020812:	4620      	mov	r0, r4
 8020814:	bd10      	pop	{r4, pc}

08020816 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020816:	b510      	push	{r4, lr}
 8020818:	4604      	mov	r4, r0
 802081a:	2104      	movs	r1, #4
 802081c:	f00b ff31 	bl	802c682 <_ZdlPvj>
 8020820:	4620      	mov	r0, r4
 8020822:	bd10      	pop	{r4, pc}

08020824 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020824:	b510      	push	{r4, lr}
 8020826:	4604      	mov	r4, r0
 8020828:	2104      	movs	r1, #4
 802082a:	f00b ff2a 	bl	802c682 <_ZdlPvj>
 802082e:	4620      	mov	r0, r4
 8020830:	bd10      	pop	{r4, pc}

08020832 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020832:	b510      	push	{r4, lr}
 8020834:	4604      	mov	r4, r0
 8020836:	2104      	movs	r1, #4
 8020838:	f00b ff23 	bl	802c682 <_ZdlPvj>
 802083c:	4620      	mov	r0, r4
 802083e:	bd10      	pop	{r4, pc}

08020840 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020840:	b510      	push	{r4, lr}
 8020842:	4604      	mov	r4, r0
 8020844:	2104      	movs	r1, #4
 8020846:	f00b ff1c 	bl	802c682 <_ZdlPvj>
 802084a:	4620      	mov	r0, r4
 802084c:	bd10      	pop	{r4, pc}

0802084e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802084e:	b510      	push	{r4, lr}
 8020850:	4604      	mov	r4, r0
 8020852:	2104      	movs	r1, #4
 8020854:	f00b ff15 	bl	802c682 <_ZdlPvj>
 8020858:	4620      	mov	r0, r4
 802085a:	bd10      	pop	{r4, pc}

0802085c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 802085c:	b510      	push	{r4, lr}
 802085e:	4604      	mov	r4, r0
 8020860:	2104      	movs	r1, #4
 8020862:	f00b ff0e 	bl	802c682 <_ZdlPvj>
 8020866:	4620      	mov	r0, r4
 8020868:	bd10      	pop	{r4, pc}

0802086a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 802086a:	b510      	push	{r4, lr}
 802086c:	4604      	mov	r4, r0
 802086e:	2104      	movs	r1, #4
 8020870:	f00b ff07 	bl	802c682 <_ZdlPvj>
 8020874:	4620      	mov	r0, r4
 8020876:	bd10      	pop	{r4, pc}

08020878 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020878:	b510      	push	{r4, lr}
 802087a:	4604      	mov	r4, r0
 802087c:	2104      	movs	r1, #4
 802087e:	f00b ff00 	bl	802c682 <_ZdlPvj>
 8020882:	4620      	mov	r0, r4
 8020884:	bd10      	pop	{r4, pc}

08020886 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020886:	b510      	push	{r4, lr}
 8020888:	4604      	mov	r4, r0
 802088a:	2104      	movs	r1, #4
 802088c:	f00b fef9 	bl	802c682 <_ZdlPvj>
 8020890:	4620      	mov	r0, r4
 8020892:	bd10      	pop	{r4, pc}

08020894 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020894:	b510      	push	{r4, lr}
 8020896:	4604      	mov	r4, r0
 8020898:	2104      	movs	r1, #4
 802089a:	f00b fef2 	bl	802c682 <_ZdlPvj>
 802089e:	4620      	mov	r0, r4
 80208a0:	bd10      	pop	{r4, pc}

080208a2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80208a2:	b510      	push	{r4, lr}
 80208a4:	4604      	mov	r4, r0
 80208a6:	2104      	movs	r1, #4
 80208a8:	f00b feeb 	bl	802c682 <_ZdlPvj>
 80208ac:	4620      	mov	r0, r4
 80208ae:	bd10      	pop	{r4, pc}

080208b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80208b0:	b510      	push	{r4, lr}
 80208b2:	4604      	mov	r4, r0
 80208b4:	2104      	movs	r1, #4
 80208b6:	f00b fee4 	bl	802c682 <_ZdlPvj>
 80208ba:	4620      	mov	r0, r4
 80208bc:	bd10      	pop	{r4, pc}

080208be <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 80208be:	b510      	push	{r4, lr}
 80208c0:	4604      	mov	r4, r0
 80208c2:	2104      	movs	r1, #4
 80208c4:	f00b fedd 	bl	802c682 <_ZdlPvj>
 80208c8:	4620      	mov	r0, r4
 80208ca:	bd10      	pop	{r4, pc}

080208cc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80208cc:	b510      	push	{r4, lr}
 80208ce:	4604      	mov	r4, r0
 80208d0:	2104      	movs	r1, #4
 80208d2:	f00b fed6 	bl	802c682 <_ZdlPvj>
 80208d6:	4620      	mov	r0, r4
 80208d8:	bd10      	pop	{r4, pc}

080208da <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80208da:	b510      	push	{r4, lr}
 80208dc:	4604      	mov	r4, r0
 80208de:	2104      	movs	r1, #4
 80208e0:	f00b fecf 	bl	802c682 <_ZdlPvj>
 80208e4:	4620      	mov	r0, r4
 80208e6:	bd10      	pop	{r4, pc}

080208e8 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 80208e8:	b510      	push	{r4, lr}
 80208ea:	4604      	mov	r4, r0
 80208ec:	2104      	movs	r1, #4
 80208ee:	f00b fec8 	bl	802c682 <_ZdlPvj>
 80208f2:	4620      	mov	r0, r4
 80208f4:	bd10      	pop	{r4, pc}

080208f6 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 80208f6:	b510      	push	{r4, lr}
 80208f8:	4604      	mov	r4, r0
 80208fa:	2104      	movs	r1, #4
 80208fc:	f00b fec1 	bl	802c682 <_ZdlPvj>
 8020900:	4620      	mov	r0, r4
 8020902:	bd10      	pop	{r4, pc}

08020904 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020904:	b510      	push	{r4, lr}
 8020906:	4604      	mov	r4, r0
 8020908:	2104      	movs	r1, #4
 802090a:	f00b feba 	bl	802c682 <_ZdlPvj>
 802090e:	4620      	mov	r0, r4
 8020910:	bd10      	pop	{r4, pc}

08020912 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020912:	b510      	push	{r4, lr}
 8020914:	4604      	mov	r4, r0
 8020916:	2104      	movs	r1, #4
 8020918:	f00b feb3 	bl	802c682 <_ZdlPvj>
 802091c:	4620      	mov	r0, r4
 802091e:	bd10      	pop	{r4, pc}

08020920 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020920:	b510      	push	{r4, lr}
 8020922:	4604      	mov	r4, r0
 8020924:	2104      	movs	r1, #4
 8020926:	f00b feac 	bl	802c682 <_ZdlPvj>
 802092a:	4620      	mov	r0, r4
 802092c:	bd10      	pop	{r4, pc}

0802092e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 802092e:	b510      	push	{r4, lr}
 8020930:	4604      	mov	r4, r0
 8020932:	2104      	movs	r1, #4
 8020934:	f00b fea5 	bl	802c682 <_ZdlPvj>
 8020938:	4620      	mov	r0, r4
 802093a:	bd10      	pop	{r4, pc}

0802093c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 802093c:	b510      	push	{r4, lr}
 802093e:	4604      	mov	r4, r0
 8020940:	2104      	movs	r1, #4
 8020942:	f00b fe9e 	bl	802c682 <_ZdlPvj>
 8020946:	4620      	mov	r0, r4
 8020948:	bd10      	pop	{r4, pc}

0802094a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 802094a:	b510      	push	{r4, lr}
 802094c:	4604      	mov	r4, r0
 802094e:	2104      	movs	r1, #4
 8020950:	f00b fe97 	bl	802c682 <_ZdlPvj>
 8020954:	4620      	mov	r0, r4
 8020956:	bd10      	pop	{r4, pc}

08020958 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8020958:	b510      	push	{r4, lr}
 802095a:	4604      	mov	r4, r0
 802095c:	2104      	movs	r1, #4
 802095e:	f00b fe90 	bl	802c682 <_ZdlPvj>
 8020962:	4620      	mov	r0, r4
 8020964:	bd10      	pop	{r4, pc}

08020966 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8020966:	b510      	push	{r4, lr}
 8020968:	4604      	mov	r4, r0
 802096a:	2104      	movs	r1, #4
 802096c:	f00b fe89 	bl	802c682 <_ZdlPvj>
 8020970:	4620      	mov	r0, r4
 8020972:	bd10      	pop	{r4, pc}

08020974 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8020974:	b510      	push	{r4, lr}
 8020976:	4604      	mov	r4, r0
 8020978:	2104      	movs	r1, #4
 802097a:	f00b fe82 	bl	802c682 <_ZdlPvj>
 802097e:	4620      	mov	r0, r4
 8020980:	bd10      	pop	{r4, pc}

08020982 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8020982:	b510      	push	{r4, lr}
 8020984:	4604      	mov	r4, r0
 8020986:	2104      	movs	r1, #4
 8020988:	f00b fe7b 	bl	802c682 <_ZdlPvj>
 802098c:	4620      	mov	r0, r4
 802098e:	bd10      	pop	{r4, pc}

08020990 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8020990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020994:	b08f      	sub	sp, #60	@ 0x3c
 8020996:	4616      	mov	r6, r2
 8020998:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 802099c:	4682      	mov	sl, r0
 802099e:	460d      	mov	r5, r1
 80209a0:	9205      	str	r2, [sp, #20]
 80209a2:	2a00      	cmp	r2, #0
 80209a4:	f000 82b7 	beq.w	8020f16 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x586>
 80209a8:	6830      	ldr	r0, [r6, #0]
 80209aa:	6871      	ldr	r1, [r6, #4]
 80209ac:	ac0a      	add	r4, sp, #40	@ 0x28
 80209ae:	c403      	stmia	r4!, {r0, r1}
 80209b0:	6818      	ldr	r0, [r3, #0]
 80209b2:	6859      	ldr	r1, [r3, #4]
 80209b4:	ac0c      	add	r4, sp, #48	@ 0x30
 80209b6:	c403      	stmia	r4!, {r0, r1}
 80209b8:	a80a      	add	r0, sp, #40	@ 0x28
 80209ba:	f7f9 fe29 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80209be:	4631      	mov	r1, r6
 80209c0:	a80c      	add	r0, sp, #48	@ 0x30
 80209c2:	f7f9 fe4d 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80209c6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80209ca:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80209ce:	bfdd      	ittte	le
 80209d0:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80209d4:	b293      	uxthle	r3, r2
 80209d6:	fb91 f3f3 	sdivle	r3, r1, r3
 80209da:	2301      	movgt	r3, #1
 80209dc:	9300      	str	r3, [sp, #0]
 80209de:	f105 0308 	add.w	r3, r5, #8
 80209e2:	9900      	ldr	r1, [sp, #0]
 80209e4:	9306      	str	r3, [sp, #24]
 80209e6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 80209ea:	440b      	add	r3, r1
 80209ec:	3b01      	subs	r3, #1
 80209ee:	fb93 f3f1 	sdiv	r3, r3, r1
 80209f2:	9906      	ldr	r1, [sp, #24]
 80209f4:	3b01      	subs	r3, #1
 80209f6:	b29b      	uxth	r3, r3
 80209f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80209fc:	9307      	str	r3, [sp, #28]
 80209fe:	9900      	ldr	r1, [sp, #0]
 8020a00:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8020a04:	fb93 f0f1 	sdiv	r0, r3, r1
 8020a08:	b284      	uxth	r4, r0
 8020a0a:	9402      	str	r4, [sp, #8]
 8020a0c:	9d02      	ldr	r5, [sp, #8]
 8020a0e:	9c00      	ldr	r4, [sp, #0]
 8020a10:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8020a14:	fb05 3414 	mls	r4, r5, r4, r3
 8020a18:	fb14 f402 	smulbb	r4, r4, r2
 8020a1c:	440c      	add	r4, r1
 8020a1e:	b2a4      	uxth	r4, r4
 8020a20:	2d00      	cmp	r5, #0
 8020a22:	d06c      	beq.n	8020afe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16e>
 8020a24:	9806      	ldr	r0, [sp, #24]
 8020a26:	1e6a      	subs	r2, r5, #1
 8020a28:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 8020a2c:	9a07      	ldr	r2, [sp, #28]
 8020a2e:	ba36      	rev	r6, r6
 8020a30:	4416      	add	r6, r2
 8020a32:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8020a36:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	@ 0x36
 8020a3a:	4411      	add	r1, r2
 8020a3c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8020a40:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8020a44:	4413      	add	r3, r2
 8020a46:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8020a4a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8020a4e:	f8df 9320 	ldr.w	r9, [pc, #800]	@ 8020d70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>
 8020a52:	9301      	str	r3, [sp, #4]
 8020a54:	4bc4      	ldr	r3, [pc, #784]	@ (8020d68 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3d8>)
 8020a56:	6818      	ldr	r0, [r3, #0]
 8020a58:	6803      	ldr	r3, [r0, #0]
 8020a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020a5c:	4798      	blx	r3
 8020a5e:	4bc3      	ldr	r3, [pc, #780]	@ (8020d6c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3dc>)
 8020a60:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8020a64:	881b      	ldrh	r3, [r3, #0]
 8020a66:	f9bd 8032 	ldrsh.w	r8, [sp, #50]	@ 0x32
 8020a6a:	fb03 2808 	mla	r8, r3, r8, r2
 8020a6e:	436b      	muls	r3, r5
 8020a70:	eb00 0848 	add.w	r8, r0, r8, lsl #1
 8020a74:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8020a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a7a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8020a7e:	2500      	movs	r5, #0
 8020a80:	fb94 f3f3 	sdiv	r3, r4, r3
 8020a84:	9304      	str	r3, [sp, #16]
 8020a86:	f10a 0304 	add.w	r3, sl, #4
 8020a8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8020a8e:	4629      	mov	r1, r5
 8020a90:	4618      	mov	r0, r3
 8020a92:	9308      	str	r3, [sp, #32]
 8020a94:	f00c f829 	bl	802caea <memset>
 8020a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a9a:	4543      	cmp	r3, r8
 8020a9c:	f240 8236 	bls.w	8020f0c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x57c>
 8020aa0:	2203      	movs	r2, #3
 8020aa2:	2107      	movs	r1, #7
 8020aa4:	200b      	movs	r0, #11
 8020aa6:	2c00      	cmp	r4, #0
 8020aa8:	f000 8131 	beq.w	8020d0e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x37e>
 8020aac:	7833      	ldrb	r3, [r6, #0]
 8020aae:	b2db      	uxtb	r3, r3
 8020ab0:	2bfe      	cmp	r3, #254	@ 0xfe
 8020ab2:	d126      	bne.n	8020b02 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x172>
 8020ab4:	f896 e001 	ldrb.w	lr, [r6, #1]
 8020ab8:	f896 c002 	ldrb.w	ip, [r6, #2]
 8020abc:	fa5f fe8e 	uxtb.w	lr, lr
 8020ac0:	f896 b003 	ldrb.w	fp, [r6, #3]
 8020ac4:	fa5f fc8c 	uxtb.w	ip, ip
 8020ac8:	f36e 0507 	bfi	r5, lr, #0, #8
 8020acc:	f36c 250f 	bfi	r5, ip, #8, #8
 8020ad0:	fa5f fb8b 	uxtb.w	fp, fp
 8020ad4:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8020ad8:	fb12 cc0b 	smlabb	ip, r2, fp, ip
 8020adc:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8020ae0:	f36b 4517 	bfi	r5, fp, #16, #8
 8020ae4:	0e2b      	lsrs	r3, r5, #24
 8020ae6:	fb10 c303 	smlabb	r3, r0, r3, ip
 8020aea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020aee:	3c01      	subs	r4, #1
 8020af0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020af4:	1d37      	adds	r7, r6, #4
 8020af6:	b2a4      	uxth	r4, r4
 8020af8:	605d      	str	r5, [r3, #4]
 8020afa:	463e      	mov	r6, r7
 8020afc:	e7d3      	b.n	8020aa6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x116>
 8020afe:	9e07      	ldr	r6, [sp, #28]
 8020b00:	e797      	b.n	8020a32 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa2>
 8020b02:	2bff      	cmp	r3, #255	@ 0xff
 8020b04:	d127      	bne.n	8020b56 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1c6>
 8020b06:	f896 c001 	ldrb.w	ip, [r6, #1]
 8020b0a:	78b3      	ldrb	r3, [r6, #2]
 8020b0c:	fa5f fc8c 	uxtb.w	ip, ip
 8020b10:	f896 e003 	ldrb.w	lr, [r6, #3]
 8020b14:	b2db      	uxtb	r3, r3
 8020b16:	f36c 0507 	bfi	r5, ip, #0, #8
 8020b1a:	f363 250f 	bfi	r5, r3, #8, #8
 8020b1e:	fa5f fe8e 	uxtb.w	lr, lr
 8020b22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8020b26:	fb12 330e 	smlabb	r3, r2, lr, r3
 8020b2a:	fb11 330c 	smlabb	r3, r1, ip, r3
 8020b2e:	f896 b004 	ldrb.w	fp, [r6, #4]
 8020b32:	f36e 4517 	bfi	r5, lr, #16, #8
 8020b36:	fa5f fb8b 	uxtb.w	fp, fp
 8020b3a:	f36b 651f 	bfi	r5, fp, #24, #8
 8020b3e:	fb10 3b0b 	smlabb	fp, r0, fp, r3
 8020b42:	f00b 0b3f 	and.w	fp, fp, #63	@ 0x3f
 8020b46:	3c01      	subs	r4, #1
 8020b48:	eb0a 0b8b 	add.w	fp, sl, fp, lsl #2
 8020b4c:	1d77      	adds	r7, r6, #5
 8020b4e:	b2a4      	uxth	r4, r4
 8020b50:	f8cb 5004 	str.w	r5, [fp, #4]
 8020b54:	e7d1      	b.n	8020afa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8020b56:	ea5f 1ca3 	movs.w	ip, r3, asr #6
 8020b5a:	f106 0701 	add.w	r7, r6, #1
 8020b5e:	d107      	bne.n	8020b70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e0>
 8020b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020b64:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020b68:	685d      	ldr	r5, [r3, #4]
 8020b6a:	3c01      	subs	r4, #1
 8020b6c:	b2a4      	uxth	r4, r4
 8020b6e:	e7c4      	b.n	8020afa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8020b70:	f1bc 0f01 	cmp.w	ip, #1
 8020b74:	d12c      	bne.n	8020bd0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x240>
 8020b76:	f003 0e03 	and.w	lr, r3, #3
 8020b7a:	f1ae 0e02 	sub.w	lr, lr, #2
 8020b7e:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
 8020b82:	fa5f fe8e 	uxtb.w	lr, lr
 8020b86:	f003 0c0c 	and.w	ip, r3, #12
 8020b8a:	f36e 0507 	bfi	r5, lr, #0, #8
 8020b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8020b92:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 8020b96:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8020b9a:	f36c 250f 	bfi	r5, ip, #8, #8
 8020b9e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020ba2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020ba6:	3b02      	subs	r3, #2
 8020ba8:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8020bac:	b2db      	uxtb	r3, r3
 8020bae:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 8020bb2:	fb12 cc03 	smlabb	ip, r2, r3, ip
 8020bb6:	fb11 cc0e 	smlabb	ip, r1, lr, ip
 8020bba:	f363 4517 	bfi	r5, r3, #16, #8
 8020bbe:	0e2e      	lsrs	r6, r5, #24
 8020bc0:	fb10 c606 	smlabb	r6, r0, r6, ip
 8020bc4:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8020bc8:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8020bcc:	6075      	str	r5, [r6, #4]
 8020bce:	e7cc      	b.n	8020b6a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1da>
 8020bd0:	f1bc 0f02 	cmp.w	ip, #2
 8020bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020bd8:	d12a      	bne.n	8020c30 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2a0>
 8020bda:	1cb7      	adds	r7, r6, #2
 8020bdc:	7876      	ldrb	r6, [r6, #1]
 8020bde:	3b20      	subs	r3, #32
 8020be0:	b2f6      	uxtb	r6, r6
 8020be2:	f006 0c0f 	and.w	ip, r6, #15
 8020be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8020bea:	449c      	add	ip, r3
 8020bec:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8020bf0:	fa5f fc8c 	uxtb.w	ip, ip
 8020bf4:	f36c 0507 	bfi	r5, ip, #0, #8
 8020bf8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8020bfc:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
 8020c00:	fa5f fe8e 	uxtb.w	lr, lr
 8020c04:	1136      	asrs	r6, r6, #4
 8020c06:	f36e 250f 	bfi	r5, lr, #8, #8
 8020c0a:	3e08      	subs	r6, #8
 8020c0c:	4433      	add	r3, r6
 8020c0e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020c12:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8020c16:	b2db      	uxtb	r3, r3
 8020c18:	eb0e 0e8e 	add.w	lr, lr, lr, lsl #2
 8020c1c:	fb12 ee03 	smlabb	lr, r2, r3, lr
 8020c20:	fb11 ee0c 	smlabb	lr, r1, ip, lr
 8020c24:	f363 4517 	bfi	r5, r3, #16, #8
 8020c28:	0e2e      	lsrs	r6, r5, #24
 8020c2a:	fb10 e606 	smlabb	r6, r0, r6, lr
 8020c2e:	e7c9      	b.n	8020bc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x234>
 8020c30:	1c5e      	adds	r6, r3, #1
 8020c32:	42a6      	cmp	r6, r4
 8020c34:	dd4e      	ble.n	8020cd4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x344>
 8020c36:	1b36      	subs	r6, r6, r4
 8020c38:	2e00      	cmp	r6, #0
 8020c3a:	dc4e      	bgt.n	8020cda <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x34a>
 8020c3c:	2400      	movs	r4, #0
 8020c3e:	f8dd b004 	ldr.w	fp, [sp, #4]
 8020c42:	f1bb 0f00 	cmp.w	fp, #0
 8020c46:	f340 8122 	ble.w	8020e8e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fe>
 8020c4a:	1c7b      	adds	r3, r7, #1
 8020c4c:	9303      	str	r3, [sp, #12]
 8020c4e:	783b      	ldrb	r3, [r7, #0]
 8020c50:	b2db      	uxtb	r3, r3
 8020c52:	2bfe      	cmp	r3, #254	@ 0xfe
 8020c54:	d160      	bne.n	8020d18 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x388>
 8020c56:	1d3b      	adds	r3, r7, #4
 8020c58:	9303      	str	r3, [sp, #12]
 8020c5a:	2303      	movs	r3, #3
 8020c5c:	7879      	ldrb	r1, [r7, #1]
 8020c5e:	78ba      	ldrb	r2, [r7, #2]
 8020c60:	b2c9      	uxtb	r1, r1
 8020c62:	78f8      	ldrb	r0, [r7, #3]
 8020c64:	f361 0507 	bfi	r5, r1, #0, #8
 8020c68:	b2d2      	uxtb	r2, r2
 8020c6a:	f362 250f 	bfi	r5, r2, #8, #8
 8020c6e:	b2c0      	uxtb	r0, r0
 8020c70:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020c74:	fb13 2200 	smlabb	r2, r3, r0, r2
 8020c78:	2307      	movs	r3, #7
 8020c7a:	fb13 2101 	smlabb	r1, r3, r1, r2
 8020c7e:	230b      	movs	r3, #11
 8020c80:	f360 4517 	bfi	r5, r0, #16, #8
 8020c84:	0e2e      	lsrs	r6, r5, #24
 8020c86:	fb13 1306 	smlabb	r3, r3, r6, r1
 8020c8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020c8e:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020c92:	605d      	str	r5, [r3, #4]
 8020c94:	2601      	movs	r6, #1
 8020c96:	4637      	mov	r7, r6
 8020c98:	0e2b      	lsrs	r3, r5, #24
 8020c9a:	ebab 0b07 	sub.w	fp, fp, r7
 8020c9e:	eba6 0607 	sub.w	r6, r6, r7
 8020ca2:	f040 80d3 	bne.w	8020e4c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4bc>
 8020ca6:	b18c      	cbz	r4, 8020ccc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x33c>
 8020ca8:	4648      	mov	r0, r9
 8020caa:	00a1      	lsls	r1, r4, #2
 8020cac:	f7f3 fcc1 	bl	8014632 <_ZN8touchgfx5paint9flushLineEPmi>
 8020cb0:	9b05      	ldr	r3, [sp, #20]
 8020cb2:	4622      	mov	r2, r4
 8020cb4:	4649      	mov	r1, r9
 8020cb6:	4640      	mov	r0, r8
 8020cb8:	f7f3 fe10 	bl	80148dc <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8020cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8020d70 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e0>)
 8020cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8020d74 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e4>)
 8020cc0:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8020cc4:	4599      	cmp	r9, r3
 8020cc6:	bf08      	it	eq
 8020cc8:	4613      	moveq	r3, r2
 8020cca:	4699      	mov	r9, r3
 8020ccc:	eb08 0847 	add.w	r8, r8, r7, lsl #1
 8020cd0:	2400      	movs	r4, #0
 8020cd2:	e0da      	b.n	8020e8a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4fa>
 8020cd4:	1ba6      	subs	r6, r4, r6
 8020cd6:	b2b4      	uxth	r4, r6
 8020cd8:	e70f      	b.n	8020afa <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x16a>
 8020cda:	9b01      	ldr	r3, [sp, #4]
 8020cdc:	9a01      	ldr	r2, [sp, #4]
 8020cde:	42b3      	cmp	r3, r6
 8020ce0:	bfa8      	it	ge
 8020ce2:	4633      	movge	r3, r6
 8020ce4:	0e2c      	lsrs	r4, r5, #24
 8020ce6:	eba2 0b03 	sub.w	fp, r2, r3
 8020cea:	eba6 0603 	sub.w	r6, r6, r3
 8020cee:	d00b      	beq.n	8020d08 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x378>
 8020cf0:	461a      	mov	r2, r3
 8020cf2:	f1a9 0104 	sub.w	r1, r9, #4
 8020cf6:	2a00      	cmp	r2, #0
 8020cf8:	dc02      	bgt.n	8020d00 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x370>
 8020cfa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8020cfe:	e7a0      	b.n	8020c42 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8020d00:	f841 5f04 	str.w	r5, [r1, #4]!
 8020d04:	3a01      	subs	r2, #1
 8020d06:	e7f6      	b.n	8020cf6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x366>
 8020d08:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8020d0c:	e799      	b.n	8020c42 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8020d0e:	4637      	mov	r7, r6
 8020d10:	f8dd b004 	ldr.w	fp, [sp, #4]
 8020d14:	4626      	mov	r6, r4
 8020d16:	e794      	b.n	8020c42 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8020d18:	2bff      	cmp	r3, #255	@ 0xff
 8020d1a:	d11d      	bne.n	8020d58 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3c8>
 8020d1c:	1d7b      	adds	r3, r7, #5
 8020d1e:	7878      	ldrb	r0, [r7, #1]
 8020d20:	9303      	str	r3, [sp, #12]
 8020d22:	78ba      	ldrb	r2, [r7, #2]
 8020d24:	78fe      	ldrb	r6, [r7, #3]
 8020d26:	793b      	ldrb	r3, [r7, #4]
 8020d28:	b2c0      	uxtb	r0, r0
 8020d2a:	b2d9      	uxtb	r1, r3
 8020d2c:	2303      	movs	r3, #3
 8020d2e:	f360 0507 	bfi	r5, r0, #0, #8
 8020d32:	b2d2      	uxtb	r2, r2
 8020d34:	f362 250f 	bfi	r5, r2, #8, #8
 8020d38:	b2f6      	uxtb	r6, r6
 8020d3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020d3e:	fb13 2206 	smlabb	r2, r3, r6, r2
 8020d42:	2307      	movs	r3, #7
 8020d44:	fb13 2000 	smlabb	r0, r3, r0, r2
 8020d48:	230b      	movs	r3, #11
 8020d4a:	f366 4517 	bfi	r5, r6, #16, #8
 8020d4e:	f361 651f 	bfi	r5, r1, #24, #8
 8020d52:	fb13 0301 	smlabb	r3, r3, r1, r0
 8020d56:	e798      	b.n	8020c8a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2fa>
 8020d58:	119e      	asrs	r6, r3, #6
 8020d5a:	d10d      	bne.n	8020d78 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 8020d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020d60:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8020d64:	685d      	ldr	r5, [r3, #4]
 8020d66:	e795      	b.n	8020c94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8020d68:	20012104 	.word	0x20012104
 8020d6c:	200120fe 	.word	0x200120fe
 8020d70:	20000120 	.word	0x20000120
 8020d74:	20000220 	.word	0x20000220
 8020d78:	2e01      	cmp	r6, #1
 8020d7a:	ea4f 6115 	mov.w	r1, r5, lsr #24
 8020d7e:	d12b      	bne.n	8020dd8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x448>
 8020d80:	f003 0003 	and.w	r0, r3, #3
 8020d84:	3802      	subs	r0, #2
 8020d86:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8020d8a:	b2c0      	uxtb	r0, r0
 8020d8c:	f003 020c 	and.w	r2, r3, #12
 8020d90:	f360 0507 	bfi	r5, r0, #0, #8
 8020d94:	3a08      	subs	r2, #8
 8020d96:	eb02 2215 	add.w	r2, r2, r5, lsr #8
 8020d9a:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8020d9e:	f362 250f 	bfi	r5, r2, #8, #8
 8020da2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8020da6:	1e9f      	subs	r7, r3, #2
 8020da8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8020dac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8020db0:	2703      	movs	r7, #3
 8020db2:	b2db      	uxtb	r3, r3
 8020db4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8020db8:	fb17 2203 	smlabb	r2, r7, r3, r2
 8020dbc:	2707      	movs	r7, #7
 8020dbe:	f363 4517 	bfi	r5, r3, #16, #8
 8020dc2:	230b      	movs	r3, #11
 8020dc4:	fb17 2000 	smlabb	r0, r7, r0, r2
 8020dc8:	fb13 0101 	smlabb	r1, r3, r1, r0
 8020dcc:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8020dd0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8020dd4:	604d      	str	r5, [r1, #4]
 8020dd6:	e75e      	b.n	8020c96 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8020dd8:	2e02      	cmp	r6, #2
 8020dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020dde:	d12f      	bne.n	8020e40 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4b0>
 8020de0:	7878      	ldrb	r0, [r7, #1]
 8020de2:	1cba      	adds	r2, r7, #2
 8020de4:	b2c0      	uxtb	r0, r0
 8020de6:	9203      	str	r2, [sp, #12]
 8020de8:	f000 020f 	and.w	r2, r0, #15
 8020dec:	3b20      	subs	r3, #32
 8020dee:	3a08      	subs	r2, #8
 8020df0:	441a      	add	r2, r3
 8020df2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8020df6:	b2d2      	uxtb	r2, r2
 8020df8:	f362 0507 	bfi	r5, r2, #0, #8
 8020dfc:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8020e00:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8020e04:	b2f6      	uxtb	r6, r6
 8020e06:	1100      	asrs	r0, r0, #4
 8020e08:	f366 250f 	bfi	r5, r6, #8, #8
 8020e0c:	3808      	subs	r0, #8
 8020e0e:	4403      	add	r3, r0
 8020e10:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8020e14:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8020e18:	2003      	movs	r0, #3
 8020e1a:	b2db      	uxtb	r3, r3
 8020e1c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8020e20:	fb10 6603 	smlabb	r6, r0, r3, r6
 8020e24:	2007      	movs	r0, #7
 8020e26:	f363 4517 	bfi	r5, r3, #16, #8
 8020e2a:	230b      	movs	r3, #11
 8020e2c:	fb10 6202 	smlabb	r2, r0, r2, r6
 8020e30:	fb13 2101 	smlabb	r1, r3, r1, r2
 8020e34:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8020e38:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8020e3c:	604d      	str	r5, [r1, #4]
 8020e3e:	e729      	b.n	8020c94 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x304>
 8020e40:	1c5e      	adds	r6, r3, #1
 8020e42:	45b3      	cmp	fp, r6
 8020e44:	465f      	mov	r7, fp
 8020e46:	bfa8      	it	ge
 8020e48:	4637      	movge	r7, r6
 8020e4a:	e725      	b.n	8020c98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x308>
 8020e4c:	193b      	adds	r3, r7, r4
 8020e4e:	2b40      	cmp	r3, #64	@ 0x40
 8020e50:	dd13      	ble.n	8020e7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ea>
 8020e52:	4648      	mov	r0, r9
 8020e54:	00a1      	lsls	r1, r4, #2
 8020e56:	f7f3 fbec 	bl	8014632 <_ZN8touchgfx5paint9flushLineEPmi>
 8020e5a:	4622      	mov	r2, r4
 8020e5c:	4640      	mov	r0, r8
 8020e5e:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8020e62:	2400      	movs	r4, #0
 8020e64:	4649      	mov	r1, r9
 8020e66:	9b05      	ldr	r3, [sp, #20]
 8020e68:	f7f3 fd38 	bl	80148dc <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8020e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8020f1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>)
 8020e6e:	4599      	cmp	r9, r3
 8020e70:	bf0c      	ite	eq
 8020e72:	f8df 90b4 	ldreq.w	r9, [pc, #180]	@ 8020f28 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x598>
 8020e76:	f8df 90a4 	ldrne.w	r9, [pc, #164]	@ 8020f1c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x58c>
 8020e7a:	463b      	mov	r3, r7
 8020e7c:	eb09 0284 	add.w	r2, r9, r4, lsl #2
 8020e80:	3b01      	subs	r3, #1
 8020e82:	f842 5b04 	str.w	r5, [r2], #4
 8020e86:	d1fb      	bne.n	8020e80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f0>
 8020e88:	443c      	add	r4, r7
 8020e8a:	9f03      	ldr	r7, [sp, #12]
 8020e8c:	e6d9      	b.n	8020c42 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2b2>
 8020e8e:	b15c      	cbz	r4, 8020ea8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x518>
 8020e90:	00a1      	lsls	r1, r4, #2
 8020e92:	4648      	mov	r0, r9
 8020e94:	f7f3 fbcd 	bl	8014632 <_ZN8touchgfx5paint9flushLineEPmi>
 8020e98:	4640      	mov	r0, r8
 8020e9a:	9b05      	ldr	r3, [sp, #20]
 8020e9c:	4622      	mov	r2, r4
 8020e9e:	4649      	mov	r1, r9
 8020ea0:	f7f3 fd1c 	bl	80148dc <_ZN8touchgfx5paint6rgb56516lineFromARGB8888EPtPKmjh>
 8020ea4:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8020ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8020f20 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x590>)
 8020eaa:	9a01      	ldr	r2, [sp, #4]
 8020eac:	881b      	ldrh	r3, [r3, #0]
 8020eae:	1a9b      	subs	r3, r3, r2
 8020eb0:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8020eb4:	9b04      	ldr	r3, [sp, #16]
 8020eb6:	3301      	adds	r3, #1
 8020eb8:	9304      	str	r3, [sp, #16]
 8020eba:	9a04      	ldr	r2, [sp, #16]
 8020ebc:	9b00      	ldr	r3, [sp, #0]
 8020ebe:	4293      	cmp	r3, r2
 8020ec0:	d11d      	bne.n	8020efe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x56e>
 8020ec2:	2500      	movs	r5, #0
 8020ec4:	9b02      	ldr	r3, [sp, #8]
 8020ec6:	9a02      	ldr	r2, [sp, #8]
 8020ec8:	f103 0b01 	add.w	fp, r3, #1
 8020ecc:	9b06      	ldr	r3, [sp, #24]
 8020ece:	f8bd 4030 	ldrh.w	r4, [sp, #48]	@ 0x30
 8020ed2:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8020ed6:	f8bd 6028 	ldrh.w	r6, [sp, #40]	@ 0x28
 8020eda:	9b07      	ldr	r3, [sp, #28]
 8020edc:	ba3f      	rev	r7, r7
 8020ede:	1ba4      	subs	r4, r4, r6
 8020ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8020ee4:	4629      	mov	r1, r5
 8020ee6:	9808      	ldr	r0, [sp, #32]
 8020ee8:	441f      	add	r7, r3
 8020eea:	b2a4      	uxth	r4, r4
 8020eec:	f00b fdfd 	bl	802caea <memset>
 8020ef0:	f8cd b008 	str.w	fp, [sp, #8]
 8020ef4:	9504      	str	r5, [sp, #16]
 8020ef6:	f7f3 fb95 	bl	8014624 <_ZN8touchgfx5paint8tearDownEv>
 8020efa:	463e      	mov	r6, r7
 8020efc:	e5cc      	b.n	8020a98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x108>
 8020efe:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8020f02:	9b01      	ldr	r3, [sp, #4]
 8020f04:	1ae4      	subs	r4, r4, r3
 8020f06:	1ba4      	subs	r4, r4, r6
 8020f08:	b2a4      	uxth	r4, r4
 8020f0a:	e7f4      	b.n	8020ef6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x566>
 8020f0c:	4b05      	ldr	r3, [pc, #20]	@ (8020f24 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x594>)
 8020f0e:	6818      	ldr	r0, [r3, #0]
 8020f10:	6803      	ldr	r3, [r0, #0]
 8020f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020f14:	4798      	blx	r3
 8020f16:	b00f      	add	sp, #60	@ 0x3c
 8020f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f1c:	20000120 	.word	0x20000120
 8020f20:	200120fe 	.word	0x200120fe
 8020f24:	20012104 	.word	0x20012104
 8020f28:	20000220 	.word	0x20000220

08020f2c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8020f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f30:	b08f      	sub	sp, #60	@ 0x3c
 8020f32:	9205      	str	r2, [sp, #20]
 8020f34:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8020f38:	461c      	mov	r4, r3
 8020f3a:	9100      	str	r1, [sp, #0]
 8020f3c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020f3e:	9201      	str	r2, [sp, #4]
 8020f40:	2a00      	cmp	r2, #0
 8020f42:	f000 8116 	beq.w	8021172 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x246>
 8020f46:	6820      	ldr	r0, [r4, #0]
 8020f48:	6861      	ldr	r1, [r4, #4]
 8020f4a:	aa0a      	add	r2, sp, #40	@ 0x28
 8020f4c:	c203      	stmia	r2!, {r0, r1}
 8020f4e:	6818      	ldr	r0, [r3, #0]
 8020f50:	6859      	ldr	r1, [r3, #4]
 8020f52:	aa0c      	add	r2, sp, #48	@ 0x30
 8020f54:	c203      	stmia	r2!, {r0, r1}
 8020f56:	a80a      	add	r0, sp, #40	@ 0x28
 8020f58:	f7f9 fb5a 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020f5c:	4621      	mov	r1, r4
 8020f5e:	a80c      	add	r0, sp, #48	@ 0x30
 8020f60:	f7f9 fb7e 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020f64:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8020f68:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8020f6c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020f70:	bfdd      	ittte	le
 8020f72:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8020f76:	b2b3      	uxthle	r3, r6
 8020f78:	fb92 f3f3 	sdivle	r3, r2, r3
 8020f7c:	2301      	movgt	r3, #1
 8020f7e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020f82:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8020f86:	fb92 f1f3 	sdiv	r1, r2, r3
 8020f8a:	fa1f fc81 	uxth.w	ip, r1
 8020f8e:	4661      	mov	r1, ip
 8020f90:	fb0c 2413 	mls	r4, ip, r3, r2
 8020f94:	fb14 f406 	smulbb	r4, r4, r6
 8020f98:	441d      	add	r5, r3
 8020f9a:	3d01      	subs	r5, #1
 8020f9c:	4404      	add	r4, r0
 8020f9e:	fb95 f5f3 	sdiv	r5, r5, r3
 8020fa2:	b2a4      	uxth	r4, r4
 8020fa4:	b131      	cbz	r1, 8020fb4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x88>
 8020fa6:	9b05      	ldr	r3, [sp, #20]
 8020fa8:	9900      	ldr	r1, [sp, #0]
 8020faa:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8020fae:	ba1b      	rev	r3, r3
 8020fb0:	4419      	add	r1, r3
 8020fb2:	9100      	str	r1, [sp, #0]
 8020fb4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8020fb8:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8020fbc:	4418      	add	r0, r3
 8020fbe:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020fc2:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8020fc6:	441a      	add	r2, r3
 8020fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8021178 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 8020fca:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8020fce:	6818      	ldr	r0, [r3, #0]
 8020fd0:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8020fd4:	6803      	ldr	r3, [r0, #0]
 8020fd6:	b2ad      	uxth	r5, r5
 8020fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020fda:	4798      	blx	r3
 8020fdc:	4967      	ldr	r1, [pc, #412]	@ (802117c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x250>)
 8020fde:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8020fe2:	880b      	ldrh	r3, [r1, #0]
 8020fe4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8020fe8:	00ad      	lsls	r5, r5, #2
 8020fea:	fb03 c202 	mla	r2, r3, r2, ip
 8020fee:	4373      	muls	r3, r6
 8020ff0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8020ff4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8020ff8:	9306      	str	r3, [sp, #24]
 8020ffa:	1d2b      	adds	r3, r5, #4
 8020ffc:	9307      	str	r3, [sp, #28]
 8020ffe:	9b01      	ldr	r3, [sp, #4]
 8021000:	2c00      	cmp	r4, #0
 8021002:	f1c3 02ff 	rsb	r2, r3, #255	@ 0xff
 8021006:	bf0c      	ite	eq
 8021008:	46c6      	moveq	lr, r8
 802100a:	f04f 0e00 	movne.w	lr, #0
 802100e:	2300      	movs	r3, #0
 8021010:	9109      	str	r1, [sp, #36]	@ 0x24
 8021012:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8021016:	b292      	uxth	r2, r2
 8021018:	fa1f fe8e 	uxth.w	lr, lr
 802101c:	9302      	str	r3, [sp, #8]
 802101e:	9103      	str	r1, [sp, #12]
 8021020:	9204      	str	r2, [sp, #16]
 8021022:	9a06      	ldr	r2, [sp, #24]
 8021024:	4282      	cmp	r2, r0
 8021026:	f240 809f 	bls.w	8021168 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x23c>
 802102a:	b963      	cbnz	r3, 8021046 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 802102c:	9b00      	ldr	r3, [sp, #0]
 802102e:	781a      	ldrb	r2, [r3, #0]
 8021030:	0993      	lsrs	r3, r2, #6
 8021032:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021036:	9202      	str	r2, [sp, #8]
 8021038:	1e5a      	subs	r2, r3, #1
 802103a:	2a02      	cmp	r2, #2
 802103c:	d815      	bhi.n	802106a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 802103e:	9a00      	ldr	r2, [sp, #0]
 8021040:	b29b      	uxth	r3, r3
 8021042:	3201      	adds	r2, #1
 8021044:	9200      	str	r2, [sp, #0]
 8021046:	b1b4      	cbz	r4, 8021076 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x14a>
 8021048:	429c      	cmp	r4, r3
 802104a:	bf99      	ittee	ls
 802104c:	1b1c      	subls	r4, r3, r4
 802104e:	fa1f fa84 	uxthls.w	sl, r4
 8021052:	4671      	movhi	r1, lr
 8021054:	f04f 0a00 	movhi.w	sl, #0
 8021058:	bf93      	iteet	ls
 802105a:	2400      	movls	r4, #0
 802105c:	1ae4      	subhi	r4, r4, r3
 802105e:	b2a4      	uxthhi	r4, r4
 8021060:	fa1f f188 	uxthls.w	r1, r8
 8021064:	4653      	mov	r3, sl
 8021066:	468e      	mov	lr, r1
 8021068:	e7db      	b.n	8021022 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xf6>
 802106a:	9a00      	ldr	r2, [sp, #0]
 802106c:	9b00      	ldr	r3, [sp, #0]
 802106e:	3202      	adds	r2, #2
 8021070:	785b      	ldrb	r3, [r3, #1]
 8021072:	9200      	str	r2, [sp, #0]
 8021074:	e7e7      	b.n	8021046 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x11a>
 8021076:	2202      	movs	r2, #2
 8021078:	4615      	mov	r5, r2
 802107a:	4573      	cmp	r3, lr
 802107c:	bf2c      	ite	cs
 802107e:	46f1      	movcs	r9, lr
 8021080:	4699      	movcc	r9, r3
 8021082:	9907      	ldr	r1, [sp, #28]
 8021084:	9a02      	ldr	r2, [sp, #8]
 8021086:	bf28      	it	cs
 8021088:	eba3 0a0e 	subcs.w	sl, r3, lr
 802108c:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021090:	9905      	ldr	r1, [sp, #20]
 8021092:	bf28      	it	cs
 8021094:	fa1f fa8a 	uxthcs.w	sl, sl
 8021098:	f831 c002 	ldrh.w	ip, [r1, r2]
 802109c:	9a01      	ldr	r2, [sp, #4]
 802109e:	bf37      	itett	cc
 80210a0:	ebae 0103 	subcc.w	r1, lr, r3
 80210a4:	4621      	movcs	r1, r4
 80210a6:	b289      	uxthcc	r1, r1
 80210a8:	46a2      	movcc	sl, r4
 80210aa:	2aff      	cmp	r2, #255	@ 0xff
 80210ac:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80210b0:	d105      	bne.n	80210be <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x192>
 80210b2:	4481      	add	r9, r0
 80210b4:	4581      	cmp	r9, r0
 80210b6:	d045      	beq.n	8021144 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 80210b8:	f820 cb02 	strh.w	ip, [r0], #2
 80210bc:	e7fa      	b.n	80210b4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x188>
 80210be:	9d03      	ldr	r5, [sp, #12]
 80210c0:	ea4f 222c 	mov.w	r2, ip, asr #8
 80210c4:	ea4f 0bec 	mov.w	fp, ip, asr #3
 80210c8:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80210cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80210d0:	436a      	muls	r2, r5
 80210d2:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 80210d6:	fa5f fc8c 	uxtb.w	ip, ip
 80210da:	fb0b fb05 	mul.w	fp, fp, r5
 80210de:	fb0c fc05 	mul.w	ip, ip, r5
 80210e2:	9208      	str	r2, [sp, #32]
 80210e4:	4481      	add	r9, r0
 80210e6:	4581      	cmp	r9, r0
 80210e8:	d02c      	beq.n	8021144 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x218>
 80210ea:	8802      	ldrh	r2, [r0, #0]
 80210ec:	9d04      	ldr	r5, [sp, #16]
 80210ee:	1216      	asrs	r6, r2, #8
 80210f0:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80210f4:	fb16 f605 	smulbb	r6, r6, r5
 80210f8:	9d08      	ldr	r5, [sp, #32]
 80210fa:	9f04      	ldr	r7, [sp, #16]
 80210fc:	442e      	add	r6, r5
 80210fe:	10d5      	asrs	r5, r2, #3
 8021100:	00d2      	lsls	r2, r2, #3
 8021102:	b2d2      	uxtb	r2, r2
 8021104:	fb12 f207 	smulbb	r2, r2, r7
 8021108:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802110c:	fb15 f507 	smulbb	r5, r5, r7
 8021110:	b2b6      	uxth	r6, r6
 8021112:	4462      	add	r2, ip
 8021114:	b292      	uxth	r2, r2
 8021116:	1c77      	adds	r7, r6, #1
 8021118:	eb07 2616 	add.w	r6, r7, r6, lsr #8
 802111c:	1c57      	adds	r7, r2, #1
 802111e:	445d      	add	r5, fp
 8021120:	eb07 2212 	add.w	r2, r7, r2, lsr #8
 8021124:	b2ad      	uxth	r5, r5
 8021126:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802112a:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 802112e:	4316      	orrs	r6, r2
 8021130:	1c6a      	adds	r2, r5, #1
 8021132:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8021136:	096d      	lsrs	r5, r5, #5
 8021138:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802113c:	432e      	orrs	r6, r5
 802113e:	f820 6b02 	strh.w	r6, [r0], #2
 8021142:	e7d0      	b.n	80210e6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ba>
 8021144:	4573      	cmp	r3, lr
 8021146:	d38d      	bcc.n	8021064 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8021148:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 802114c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802114e:	fa1f f188 	uxth.w	r1, r8
 8021152:	1a64      	subs	r4, r4, r1
 8021154:	881b      	ldrh	r3, [r3, #0]
 8021156:	b2a4      	uxth	r4, r4
 8021158:	2c00      	cmp	r4, #0
 802115a:	eba3 0308 	sub.w	r3, r3, r8
 802115e:	bf18      	it	ne
 8021160:	2100      	movne	r1, #0
 8021162:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021166:	e77d      	b.n	8021064 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x138>
 8021168:	4b03      	ldr	r3, [pc, #12]	@ (8021178 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>)
 802116a:	6818      	ldr	r0, [r3, #0]
 802116c:	6803      	ldr	r3, [r0, #0]
 802116e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021170:	4798      	blx	r3
 8021172:	b00f      	add	sp, #60	@ 0x3c
 8021174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021178:	20012104 	.word	0x20012104
 802117c:	200120fe 	.word	0x200120fe

08021180 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8021180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021184:	b09f      	sub	sp, #124	@ 0x7c
 8021186:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 802118a:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 802118e:	461d      	mov	r5, r3
 8021190:	4604      	mov	r4, r0
 8021192:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021194:	9209      	str	r2, [sp, #36]	@ 0x24
 8021196:	2a00      	cmp	r2, #0
 8021198:	f000 81e9 	beq.w	802156e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ee>
 802119c:	6828      	ldr	r0, [r5, #0]
 802119e:	6869      	ldr	r1, [r5, #4]
 80211a0:	aa1a      	add	r2, sp, #104	@ 0x68
 80211a2:	c203      	stmia	r2!, {r0, r1}
 80211a4:	6818      	ldr	r0, [r3, #0]
 80211a6:	6859      	ldr	r1, [r3, #4]
 80211a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80211aa:	c203      	stmia	r2!, {r0, r1}
 80211ac:	a81a      	add	r0, sp, #104	@ 0x68
 80211ae:	f7f9 fa2f 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211b2:	4629      	mov	r1, r5
 80211b4:	a81c      	add	r0, sp, #112	@ 0x70
 80211b6:	f7f9 fa53 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211ba:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80211be:	f9bd 806e 	ldrsh.w	r8, [sp, #110]	@ 0x6e
 80211c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80211c6:	bfdd      	ittte	le
 80211c8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80211cc:	b29a      	uxthle	r2, r3
 80211ce:	fb91 f2f2 	sdivle	r2, r1, r2
 80211d2:	2201      	movgt	r2, #1
 80211d4:	9202      	str	r2, [sp, #8]
 80211d6:	9802      	ldr	r0, [sp, #8]
 80211d8:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 80211dc:	9902      	ldr	r1, [sp, #8]
 80211de:	fb92 f0f0 	sdiv	r0, r2, r0
 80211e2:	b280      	uxth	r0, r0
 80211e4:	9010      	str	r0, [sp, #64]	@ 0x40
 80211e6:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80211e8:	9802      	ldr	r0, [sp, #8]
 80211ea:	4488      	add	r8, r1
 80211ec:	fb05 2510 	mls	r5, r5, r0, r2
 80211f0:	fb15 f503 	smulbb	r5, r5, r3
 80211f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80211f8:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80211fc:	fb98 f8f1 	sdiv	r8, r8, r1
 8021200:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 8021204:	f9bd 6076 	ldrsh.w	r6, [sp, #118]	@ 0x76
 8021208:	440d      	add	r5, r1
 802120a:	4419      	add	r1, r3
 802120c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 8021210:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 8021214:	441a      	add	r2, r3
 8021216:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 802121a:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 802121e:	9304      	str	r3, [sp, #16]
 8021220:	4b93      	ldr	r3, [pc, #588]	@ (8021470 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f0>)
 8021222:	f108 0801 	add.w	r8, r8, #1
 8021226:	6818      	ldr	r0, [r3, #0]
 8021228:	fa1f f888 	uxth.w	r8, r8
 802122c:	6803      	ldr	r3, [r0, #0]
 802122e:	b2ad      	uxth	r5, r5
 8021230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021232:	4798      	blx	r3
 8021234:	4b8f      	ldr	r3, [pc, #572]	@ (8021474 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f4>)
 8021236:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 802123a:	881a      	ldrh	r2, [r3, #0]
 802123c:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8021240:	4356      	muls	r6, r2
 8021242:	fb02 7101 	mla	r1, r2, r1, r7
 8021246:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 802124a:	eb00 0246 	add.w	r2, r0, r6, lsl #1
 802124e:	920a      	str	r2, [sp, #40]	@ 0x28
 8021250:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8021252:	2d00      	cmp	r5, #0
 8021254:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 8021258:	f108 0204 	add.w	r2, r8, #4
 802125c:	9211      	str	r2, [sp, #68]	@ 0x44
 802125e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021260:	f04f 0100 	mov.w	r1, #0
 8021264:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8021268:	9215      	str	r2, [sp, #84]	@ 0x54
 802126a:	9a04      	ldr	r2, [sp, #16]
 802126c:	bf18      	it	ne
 802126e:	2200      	movne	r2, #0
 8021270:	9318      	str	r3, [sp, #96]	@ 0x60
 8021272:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8021276:	b292      	uxth	r2, r2
 8021278:	930f      	str	r3, [sp, #60]	@ 0x3c
 802127a:	4b7f      	ldr	r3, [pc, #508]	@ (8021478 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2f8>)
 802127c:	910d      	str	r1, [sp, #52]	@ 0x34
 802127e:	1b1b      	subs	r3, r3, r4
 8021280:	9319      	str	r3, [sp, #100]	@ 0x64
 8021282:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8021284:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021286:	fa11 f383 	uxtah	r3, r1, r3
 802128a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802128c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021290:	3304      	adds	r3, #4
 8021292:	9306      	str	r3, [sp, #24]
 8021294:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021296:	4283      	cmp	r3, r0
 8021298:	f240 8164 	bls.w	8021564 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3e4>
 802129c:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80212a0:	f04f 0a01 	mov.w	sl, #1
 80212a4:	fbb5 f3f3 	udiv	r3, r5, r3
 80212a8:	9902      	ldr	r1, [sp, #8]
 80212aa:	9e06      	ldr	r6, [sp, #24]
 80212ac:	1acb      	subs	r3, r1, r3
 80212ae:	b29b      	uxth	r3, r3
 80212b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80212b2:	9b06      	ldr	r3, [sp, #24]
 80212b4:	7836      	ldrb	r6, [r6, #0]
 80212b6:	7859      	ldrb	r1, [r3, #1]
 80212b8:	789b      	ldrb	r3, [r3, #2]
 80212ba:	9612      	str	r6, [sp, #72]	@ 0x48
 80212bc:	021b      	lsls	r3, r3, #8
 80212be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80212c2:	9906      	ldr	r1, [sp, #24]
 80212c4:	3601      	adds	r6, #1
 80212c6:	78c9      	ldrb	r1, [r1, #3]
 80212c8:	9605      	str	r6, [sp, #20]
 80212ca:	430b      	orrs	r3, r1
 80212cc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80212ce:	46d3      	mov	fp, sl
 80212d0:	4419      	add	r1, r3
 80212d2:	1c4e      	adds	r6, r1, #1
 80212d4:	9603      	str	r6, [sp, #12]
 80212d6:	7849      	ldrb	r1, [r1, #1]
 80212d8:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80212da:	0209      	lsls	r1, r1, #8
 80212dc:	5cf3      	ldrb	r3, [r6, r3]
 80212de:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 80212e2:	4319      	orrs	r1, r3
 80212e4:	b28b      	uxth	r3, r1
 80212e6:	930c      	str	r3, [sp, #48]	@ 0x30
 80212e8:	2300      	movs	r3, #0
 80212ea:	4657      	mov	r7, sl
 80212ec:	9307      	str	r3, [sp, #28]
 80212ee:	469c      	mov	ip, r3
 80212f0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 80212f4:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 80212f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80212fa:	2d00      	cmp	r5, #0
 80212fc:	d07e      	beq.n	80213fc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x27c>
 80212fe:	42af      	cmp	r7, r5
 8021300:	d26e      	bcs.n	80213e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x260>
 8021302:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021304:	1bed      	subs	r5, r5, r7
 8021306:	4283      	cmp	r3, r0
 8021308:	b2ad      	uxth	r5, r5
 802130a:	9201      	str	r2, [sp, #4]
 802130c:	d802      	bhi.n	8021314 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x194>
 802130e:	e073      	b.n	80213f8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x278>
 8021310:	2b00      	cmp	r3, #0
 8021312:	d15f      	bne.n	80213d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x254>
 8021314:	9b03      	ldr	r3, [sp, #12]
 8021316:	f1cb 0207 	rsb	r2, fp, #7
 802131a:	785b      	ldrb	r3, [r3, #1]
 802131c:	4093      	lsls	r3, r2
 802131e:	005b      	lsls	r3, r3, #1
 8021320:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8021324:	9b03      	ldr	r3, [sp, #12]
 8021326:	781b      	ldrb	r3, [r3, #0]
 8021328:	fa43 f30b 	asr.w	r3, r3, fp
 802132c:	b2db      	uxtb	r3, r3
 802132e:	4313      	orrs	r3, r2
 8021330:	f10b 0201 	add.w	r2, fp, #1
 8021334:	fa5f fb82 	uxtb.w	fp, r2
 8021338:	9a03      	ldr	r2, [sp, #12]
 802133a:	f1bb 0f08 	cmp.w	fp, #8
 802133e:	bf15      	itete	ne
 8021340:	3201      	addne	r2, #1
 8021342:	3202      	addeq	r2, #2
 8021344:	9203      	strne	r2, [sp, #12]
 8021346:	9203      	streq	r2, [sp, #12]
 8021348:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 802134a:	b29f      	uxth	r7, r3
 802134c:	bf08      	it	eq
 802134e:	f04f 0b00 	moveq.w	fp, #0
 8021352:	42ba      	cmp	r2, r7
 8021354:	d309      	bcc.n	802136a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ea>
 8021356:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 802135a:	2301      	movs	r3, #1
 802135c:	9a05      	ldr	r2, [sp, #20]
 802135e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8021362:	d30e      	bcc.n	8021382 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x202>
 8021364:	469a      	mov	sl, r3
 8021366:	2600      	movs	r6, #0
 8021368:	e035      	b.n	80213d6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x256>
 802136a:	9b05      	ldr	r3, [sp, #20]
 802136c:	429f      	cmp	r7, r3
 802136e:	d318      	bcc.n	80213a2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x222>
 8021370:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8021374:	eb04 030a 	add.w	r3, r4, sl
 8021378:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 802137c:	f10a 0301 	add.w	r3, sl, #1
 8021380:	b29b      	uxth	r3, r3
 8021382:	9a05      	ldr	r2, [sp, #20]
 8021384:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8021388:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 802138c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802138e:	7116      	strb	r6, [r2, #4]
 8021390:	f10a 0601 	add.w	r6, sl, #1
 8021394:	80d1      	strh	r1, [r2, #6]
 8021396:	7156      	strb	r6, [r2, #5]
 8021398:	9a05      	ldr	r2, [sp, #20]
 802139a:	3201      	adds	r2, #1
 802139c:	b292      	uxth	r2, r2
 802139e:	9205      	str	r2, [sp, #20]
 80213a0:	e7e0      	b.n	8021364 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e4>
 80213a2:	463a      	mov	r2, r7
 80213a4:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 80213a8:	795b      	ldrb	r3, [r3, #5]
 80213aa:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80213ae:	4426      	add	r6, r4
 80213b0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80213b2:	eb01 0c06 	add.w	ip, r1, r6
 80213b6:	f1bc 0f00 	cmp.w	ip, #0
 80213ba:	dd07      	ble.n	80213cc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x24c>
 80213bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80213c0:	f892 c004 	ldrb.w	ip, [r2, #4]
 80213c4:	f806 cd01 	strb.w	ip, [r6, #-1]!
 80213c8:	88d2      	ldrh	r2, [r2, #6]
 80213ca:	e7f1      	b.n	80213b0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x230>
 80213cc:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80213d0:	b29b      	uxth	r3, r3
 80213d2:	e7c3      	b.n	802135c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1dc>
 80213d4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80213d6:	970c      	str	r7, [sp, #48]	@ 0x30
 80213d8:	9a01      	ldr	r2, [sp, #4]
 80213da:	46b4      	mov	ip, r6
 80213dc:	461f      	mov	r7, r3
 80213de:	e78c      	b.n	80212fa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x17a>
 80213e0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80213e4:	1b7b      	subs	r3, r7, r5
 80213e6:	eb0c 0605 	add.w	r6, ip, r5
 80213ea:	b29b      	uxth	r3, r3
 80213ec:	9201      	str	r2, [sp, #4]
 80213ee:	b2b6      	uxth	r6, r6
 80213f0:	2500      	movs	r5, #0
 80213f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80213f4:	4282      	cmp	r2, r0
 80213f6:	d88b      	bhi.n	8021310 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x190>
 80213f8:	9a01      	ldr	r2, [sp, #4]
 80213fa:	e74b      	b.n	8021294 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x114>
 80213fc:	4297      	cmp	r7, r2
 80213fe:	d331      	bcc.n	8021464 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2e4>
 8021400:	1abb      	subs	r3, r7, r2
 8021402:	b29b      	uxth	r3, r3
 8021404:	9208      	str	r2, [sp, #32]
 8021406:	9501      	str	r5, [sp, #4]
 8021408:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802140a:	29ff      	cmp	r1, #255	@ 0xff
 802140c:	9908      	ldr	r1, [sp, #32]
 802140e:	eb0c 0601 	add.w	r6, ip, r1
 8021412:	d133      	bne.n	802147c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2fc>
 8021414:	f1a0 0e02 	sub.w	lr, r0, #2
 8021418:	b2b6      	uxth	r6, r6
 802141a:	45b4      	cmp	ip, r6
 802141c:	f040 808a 	bne.w	8021534 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3b4>
 8021420:	9908      	ldr	r1, [sp, #32]
 8021422:	4297      	cmp	r7, r2
 8021424:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021428:	d3e2      	bcc.n	80213f0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x270>
 802142a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802142c:	9904      	ldr	r1, [sp, #16]
 802142e:	8812      	ldrh	r2, [r2, #0]
 8021430:	1a52      	subs	r2, r2, r1
 8021432:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021436:	9a07      	ldr	r2, [sp, #28]
 8021438:	9916      	ldr	r1, [sp, #88]	@ 0x58
 802143a:	3201      	adds	r2, #1
 802143c:	428a      	cmp	r2, r1
 802143e:	9207      	str	r2, [sp, #28]
 8021440:	f040 8085 	bne.w	802154e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3ce>
 8021444:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8021448:	f8bd 7068 	ldrh.w	r7, [sp, #104]	@ 0x68
 802144c:	9b04      	ldr	r3, [sp, #16]
 802144e:	1bed      	subs	r5, r5, r7
 8021450:	b2ad      	uxth	r5, r5
 8021452:	2d00      	cmp	r5, #0
 8021454:	bf0c      	ite	eq
 8021456:	461a      	moveq	r2, r3
 8021458:	2200      	movne	r2, #0
 802145a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802145c:	b292      	uxth	r2, r2
 802145e:	3301      	adds	r3, #1
 8021460:	930d      	str	r3, [sp, #52]	@ 0x34
 8021462:	e70e      	b.n	8021282 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x102>
 8021464:	1bd1      	subs	r1, r2, r7
 8021466:	b28b      	uxth	r3, r1
 8021468:	9301      	str	r3, [sp, #4]
 802146a:	9708      	str	r7, [sp, #32]
 802146c:	462b      	mov	r3, r5
 802146e:	e7cb      	b.n	8021408 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x288>
 8021470:	20012104 	.word	0x20012104
 8021474:	200120fe 	.word	0x200120fe
 8021478:	fffff7fb 	.word	0xfffff7fb
 802147c:	b2b6      	uxth	r6, r6
 802147e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8021480:	45b4      	cmp	ip, r6
 8021482:	d0cd      	beq.n	8021420 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x2a0>
 8021484:	f10c 0101 	add.w	r1, ip, #1
 8021488:	44a4      	add	ip, r4
 802148a:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802148e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8021490:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021492:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8021496:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021498:	ea4f 2825 	mov.w	r8, r5, asr #8
 802149c:	f8b1 c000 	ldrh.w	ip, [r1]
 80214a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80214a2:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 80214a6:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80214aa:	fb1e fe01 	smulbb	lr, lr, r1
 80214ae:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80214b0:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80214b4:	fb08 e801 	mla	r8, r8, r1, lr
 80214b8:	ea4f 09ec 	mov.w	r9, ip, asr #3
 80214bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80214be:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80214c2:	fb19 f901 	smulbb	r9, r9, r1
 80214c6:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 80214ca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80214cc:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80214d0:	fb0e 9e01 	mla	lr, lr, r1, r9
 80214d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80214d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80214da:	fa5f fc8c 	uxtb.w	ip, ip
 80214de:	fb1c fc01 	smulbb	ip, ip, r1
 80214e2:	00ed      	lsls	r5, r5, #3
 80214e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80214e6:	b2ed      	uxtb	r5, r5
 80214e8:	fb05 c501 	mla	r5, r5, r1, ip
 80214ec:	fa1f f888 	uxth.w	r8, r8
 80214f0:	fa1f fe8e 	uxth.w	lr, lr
 80214f4:	b2ad      	uxth	r5, r5
 80214f6:	f108 0c01 	add.w	ip, r8, #1
 80214fa:	eb0c 2818 	add.w	r8, ip, r8, lsr #8
 80214fe:	f10e 0901 	add.w	r9, lr, #1
 8021502:	f105 0c01 	add.w	ip, r5, #1
 8021506:	eb0c 2c15 	add.w	ip, ip, r5, lsr #8
 802150a:	eb09 291e 	add.w	r9, r9, lr, lsr #8
 802150e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8021512:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8021516:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802151a:	ea4c 0808 	orr.w	r8, ip, r8
 802151e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8021520:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8021524:	ea48 0809 	orr.w	r8, r8, r9
 8021528:	f821 8b02 	strh.w	r8, [r1], #2
 802152c:	910b      	str	r1, [sp, #44]	@ 0x2c
 802152e:	f8bd c05c 	ldrh.w	ip, [sp, #92]	@ 0x5c
 8021532:	e7a5      	b.n	8021480 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x300>
 8021534:	f10c 0801 	add.w	r8, ip, #1
 8021538:	44a4      	add	ip, r4
 802153a:	f89c 5804 	ldrb.w	r5, [ip, #2052]	@ 0x804
 802153e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8021540:	fa1f fc88 	uxth.w	ip, r8
 8021544:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
 8021548:	f82e 5f02 	strh.w	r5, [lr, #2]!
 802154c:	e765      	b.n	802141a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x29a>
 802154e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021552:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8021556:	1aad      	subs	r5, r5, r2
 8021558:	b2ad      	uxth	r5, r5
 802155a:	2d00      	cmp	r5, #0
 802155c:	bf18      	it	ne
 802155e:	2200      	movne	r2, #0
 8021560:	9201      	str	r2, [sp, #4]
 8021562:	e746      	b.n	80213f2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x272>
 8021564:	4b03      	ldr	r3, [pc, #12]	@ (8021574 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x3f4>)
 8021566:	6818      	ldr	r0, [r3, #0]
 8021568:	6803      	ldr	r3, [r0, #0]
 802156a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802156c:	4798      	blx	r3
 802156e:	b01f      	add	sp, #124	@ 0x7c
 8021570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021574:	20012104 	.word	0x20012104

08021578 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h>:
 8021578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802157c:	b093      	sub	sp, #76	@ 0x4c
 802157e:	4616      	mov	r6, r2
 8021580:	f89d 2070 	ldrb.w	r2, [sp, #112]	@ 0x70
 8021584:	9003      	str	r0, [sp, #12]
 8021586:	460d      	mov	r5, r1
 8021588:	9201      	str	r2, [sp, #4]
 802158a:	2a00      	cmp	r2, #0
 802158c:	f000 8304 	beq.w	8021b98 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x620>
 8021590:	6830      	ldr	r0, [r6, #0]
 8021592:	6871      	ldr	r1, [r6, #4]
 8021594:	ac0e      	add	r4, sp, #56	@ 0x38
 8021596:	c403      	stmia	r4!, {r0, r1}
 8021598:	6818      	ldr	r0, [r3, #0]
 802159a:	6859      	ldr	r1, [r3, #4]
 802159c:	ac10      	add	r4, sp, #64	@ 0x40
 802159e:	c403      	stmia	r4!, {r0, r1}
 80215a0:	a80e      	add	r0, sp, #56	@ 0x38
 80215a2:	f7f9 f835 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80215a6:	4631      	mov	r1, r6
 80215a8:	a810      	add	r0, sp, #64	@ 0x40
 80215aa:	f7f9 f859 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80215ae:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80215b2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80215b6:	bfdd      	ittte	le
 80215b8:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80215bc:	b293      	uxthle	r3, r2
 80215be:	fb91 f3f3 	sdivle	r3, r1, r3
 80215c2:	2301      	movgt	r3, #1
 80215c4:	9304      	str	r3, [sp, #16]
 80215c6:	f105 0308 	add.w	r3, r5, #8
 80215ca:	9904      	ldr	r1, [sp, #16]
 80215cc:	9308      	str	r3, [sp, #32]
 80215ce:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80215d2:	440b      	add	r3, r1
 80215d4:	3b01      	subs	r3, #1
 80215d6:	fb93 f3f1 	sdiv	r3, r3, r1
 80215da:	9908      	ldr	r1, [sp, #32]
 80215dc:	3b01      	subs	r3, #1
 80215de:	b29b      	uxth	r3, r3
 80215e0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80215e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80215e6:	9904      	ldr	r1, [sp, #16]
 80215e8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80215ec:	fb93 f0f1 	sdiv	r0, r3, r1
 80215f0:	b284      	uxth	r4, r0
 80215f2:	9405      	str	r4, [sp, #20]
 80215f4:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80215f8:	fb05 3914 	mls	r9, r5, r4, r3
 80215fc:	fb19 f902 	smulbb	r9, r9, r2
 8021600:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8021604:	4489      	add	r9, r1
 8021606:	fa1f f989 	uxth.w	r9, r9
 802160a:	2d00      	cmp	r5, #0
 802160c:	d05d      	beq.n	80216ca <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x152>
 802160e:	9808      	ldr	r0, [sp, #32]
 8021610:	1e6a      	subs	r2, r5, #1
 8021612:	f850 a022 	ldr.w	sl, [r0, r2, lsl #2]
 8021616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021618:	fa9a fa8a 	rev.w	sl, sl
 802161c:	4492      	add	sl, r2
 802161e:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8021622:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8021626:	4411      	add	r1, r2
 8021628:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802162c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8021630:	4413      	add	r3, r2
 8021632:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8021636:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 802163a:	f04f 0600 	mov.w	r6, #0
 802163e:	9302      	str	r3, [sp, #8]
 8021640:	4bca      	ldr	r3, [pc, #808]	@ (802196c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f4>)
 8021642:	6818      	ldr	r0, [r3, #0]
 8021644:	6803      	ldr	r3, [r0, #0]
 8021646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021648:	4798      	blx	r3
 802164a:	4bc9      	ldr	r3, [pc, #804]	@ (8021970 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3f8>)
 802164c:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8021650:	881b      	ldrh	r3, [r3, #0]
 8021652:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8021656:	2100      	movs	r1, #0
 8021658:	fb03 2404 	mla	r4, r3, r4, r2
 802165c:	436b      	muls	r3, r5
 802165e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8021662:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021666:	930d      	str	r3, [sp, #52]	@ 0x34
 8021668:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 802166c:	2280      	movs	r2, #128	@ 0x80
 802166e:	fb99 f3f3 	sdiv	r3, r9, r3
 8021672:	9306      	str	r3, [sp, #24]
 8021674:	9b01      	ldr	r3, [sp, #4]
 8021676:	43db      	mvns	r3, r3
 8021678:	b2db      	uxtb	r3, r3
 802167a:	930a      	str	r3, [sp, #40]	@ 0x28
 802167c:	9b03      	ldr	r3, [sp, #12]
 802167e:	3304      	adds	r3, #4
 8021680:	4618      	mov	r0, r3
 8021682:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021684:	f00b fa31 	bl	802caea <memset>
 8021688:	4bba      	ldr	r3, [pc, #744]	@ (8021974 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3fc>)
 802168a:	9300      	str	r3, [sp, #0]
 802168c:	2300      	movs	r3, #0
 802168e:	9307      	str	r3, [sp, #28]
 8021690:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021692:	42a3      	cmp	r3, r4
 8021694:	f240 827b 	bls.w	8021b8e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x616>
 8021698:	f04f 0e07 	mov.w	lr, #7
 802169c:	f1b9 0f00 	cmp.w	r9, #0
 80216a0:	f000 8159 	beq.w	8021956 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3de>
 80216a4:	f89a 5000 	ldrb.w	r5, [sl]
 80216a8:	f10a 0701 	add.w	r7, sl, #1
 80216ac:	b2ed      	uxtb	r5, r5
 80216ae:	11aa      	asrs	r2, r5, #6
 80216b0:	d10e      	bne.n	80216d0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x158>
 80216b2:	9b03      	ldr	r3, [sp, #12]
 80216b4:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 80216b8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80216bc:	88ae      	ldrh	r6, [r5, #4]
 80216be:	f109 39ff 	add.w	r9, r9, #4294967295
 80216c2:	fa1f f989 	uxth.w	r9, r9
 80216c6:	46ba      	mov	sl, r7
 80216c8:	e7e8      	b.n	802169c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x124>
 80216ca:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80216ce:	e7a6      	b.n	802161e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0xa6>
 80216d0:	2a01      	cmp	r2, #1
 80216d2:	d129      	bne.n	8021728 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1b0>
 80216d4:	2103      	movs	r1, #3
 80216d6:	f3c6 0304 	ubfx	r3, r6, #0, #5
 80216da:	f005 0203 	and.w	r2, r5, #3
 80216de:	3b02      	subs	r3, #2
 80216e0:	4413      	add	r3, r2
 80216e2:	f003 031f 	and.w	r3, r3, #31
 80216e6:	f3c5 0281 	ubfx	r2, r5, #2, #2
 80216ea:	f363 0604 	bfi	r6, r3, #0, #5
 80216ee:	3a02      	subs	r2, #2
 80216f0:	eb02 1256 	add.w	r2, r2, r6, lsr #5
 80216f4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80216f8:	f3c5 1501 	ubfx	r5, r5, #4, #2
 80216fc:	f362 164a 	bfi	r6, r2, #5, #6
 8021700:	3d02      	subs	r5, #2
 8021702:	eb05 25d6 	add.w	r5, r5, r6, lsr #11
 8021706:	f005 051f 	and.w	r5, r5, #31
 802170a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 802170e:	fb11 2205 	smlabb	r2, r1, r5, r2
 8021712:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8021716:	9a03      	ldr	r2, [sp, #12]
 8021718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 802171c:	f365 26cf 	bfi	r6, r5, #11, #5
 8021720:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021724:	809e      	strh	r6, [r3, #4]
 8021726:	e7ca      	b.n	80216be <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x146>
 8021728:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
 802172c:	2a02      	cmp	r2, #2
 802172e:	b2ab      	uxth	r3, r5
 8021730:	d136      	bne.n	80217a0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x228>
 8021732:	2101      	movs	r1, #1
 8021734:	fb12 1205 	smlabb	r2, r2, r5, r1
 8021738:	4492      	add	sl, r2
 802173a:	463a      	mov	r2, r7
 802173c:	4552      	cmp	r2, sl
 802173e:	d01c      	beq.n	802177a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x202>
 8021740:	4694      	mov	ip, r2
 8021742:	f04f 0b03 	mov.w	fp, #3
 8021746:	f81c 1b02 	ldrb.w	r1, [ip], #2
 802174a:	7852      	ldrb	r2, [r2, #1]
 802174c:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8021750:	f3c1 1045 	ubfx	r0, r1, #5, #6
 8021754:	ea4f 28d1 	mov.w	r8, r1, lsr #11
 8021758:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802175c:	fb1b 0008 	smlabb	r0, fp, r8, r0
 8021760:	f001 021f 	and.w	r2, r1, #31
 8021764:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8021768:	9a03      	ldr	r2, [sp, #12]
 802176a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802176e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8021772:	460e      	mov	r6, r1
 8021774:	8081      	strh	r1, [r0, #4]
 8021776:	4662      	mov	r2, ip
 8021778:	e7e0      	b.n	802173c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x1c4>
 802177a:	4599      	cmp	r9, r3
 802177c:	d20b      	bcs.n	8021796 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21e>
 802177e:	eba5 0509 	sub.w	r5, r5, r9
 8021782:	2d00      	cmp	r5, #0
 8021784:	eb07 0749 	add.w	r7, r7, r9, lsl #1
 8021788:	f300 8209 	bgt.w	8021b9e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x626>
 802178c:	2301      	movs	r3, #1
 802178e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8021792:	9307      	str	r3, [sp, #28]
 8021794:	e00c      	b.n	80217b0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8021796:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 802179a:	eba9 0903 	sub.w	r9, r9, r3
 802179e:	e790      	b.n	80216c2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x14a>
 80217a0:	4599      	cmp	r9, r3
 80217a2:	d2fa      	bcs.n	802179a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x222>
 80217a4:	eba5 0509 	sub.w	r5, r5, r9
 80217a8:	2d00      	cmp	r5, #0
 80217aa:	dc1d      	bgt.n	80217e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x270>
 80217ac:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80217b0:	f04f 0b00 	mov.w	fp, #0
 80217b4:	f1b8 0f00 	cmp.w	r8, #0
 80217b8:	f340 81a1 	ble.w	8021afe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x586>
 80217bc:	783b      	ldrb	r3, [r7, #0]
 80217be:	f107 0a01 	add.w	sl, r7, #1
 80217c2:	b2db      	uxtb	r3, r3
 80217c4:	119a      	asrs	r2, r3, #6
 80217c6:	f040 80d7 	bne.w	8021978 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x400>
 80217ca:	9a03      	ldr	r2, [sp, #12]
 80217cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80217d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80217d4:	889e      	ldrh	r6, [r3, #4]
 80217d6:	9b01      	ldr	r3, [sp, #4]
 80217d8:	2bff      	cmp	r3, #255	@ 0xff
 80217da:	f040 81e9 	bne.w	8021bb0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x638>
 80217de:	8026      	strh	r6, [r4, #0]
 80217e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80217e4:	3402      	adds	r4, #2
 80217e6:	e0be      	b.n	8021966 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 80217e8:	9b02      	ldr	r3, [sp, #8]
 80217ea:	9a02      	ldr	r2, [sp, #8]
 80217ec:	42ab      	cmp	r3, r5
 80217ee:	bfa8      	it	ge
 80217f0:	462b      	movge	r3, r5
 80217f2:	eba2 0803 	sub.w	r8, r2, r3
 80217f6:	9a07      	ldr	r2, [sp, #28]
 80217f8:	1aed      	subs	r5, r5, r3
 80217fa:	2a00      	cmp	r2, #0
 80217fc:	d05a      	beq.n	80218b4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x33c>
 80217fe:	9a01      	ldr	r2, [sp, #4]
 8021800:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8021804:	2aff      	cmp	r2, #255	@ 0xff
 8021806:	d049      	beq.n	802189c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 8021808:	f8bd e004 	ldrh.w	lr, [sp, #4]
 802180c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	@ 0x28
 8021810:	42a3      	cmp	r3, r4
 8021812:	f240 80a5 	bls.w	8021960 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 8021816:	46bc      	mov	ip, r7
 8021818:	8820      	ldrh	r0, [r4, #0]
 802181a:	f81c 2b02 	ldrb.w	r2, [ip], #2
 802181e:	7879      	ldrb	r1, [r7, #1]
 8021820:	ea4f 2a20 	mov.w	sl, r0, asr #8
 8021824:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8021828:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 802182c:	b212      	sxth	r2, r2
 802182e:	fb1a fa09 	smulbb	sl, sl, r9
 8021832:	b291      	uxth	r1, r2
 8021834:	120f      	asrs	r7, r1, #8
 8021836:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802183a:	fb07 a70e 	mla	r7, r7, lr, sl
 802183e:	ea4f 0ae0 	mov.w	sl, r0, asr #3
 8021842:	00c0      	lsls	r0, r0, #3
 8021844:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8021848:	b2c0      	uxtb	r0, r0
 802184a:	fb1a fa09 	smulbb	sl, sl, r9
 802184e:	fb10 f009 	smulbb	r0, r0, r9
 8021852:	10c9      	asrs	r1, r1, #3
 8021854:	00d2      	lsls	r2, r2, #3
 8021856:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802185a:	b2d2      	uxtb	r2, r2
 802185c:	fb01 a10e 	mla	r1, r1, lr, sl
 8021860:	fb02 020e 	mla	r2, r2, lr, r0
 8021864:	b2bf      	uxth	r7, r7
 8021866:	b289      	uxth	r1, r1
 8021868:	b292      	uxth	r2, r2
 802186a:	1c78      	adds	r0, r7, #1
 802186c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8021870:	f101 0a01 	add.w	sl, r1, #1
 8021874:	1c50      	adds	r0, r2, #1
 8021876:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802187a:	eb0a 2a11 	add.w	sl, sl, r1, lsr #8
 802187e:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8021882:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021886:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802188a:	4307      	orrs	r7, r0
 802188c:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8021890:	ea47 070a 	orr.w	r7, r7, sl
 8021894:	f824 7b02 	strh.w	r7, [r4], #2
 8021898:	4667      	mov	r7, ip
 802189a:	e7b9      	b.n	8021810 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x298>
 802189c:	42a3      	cmp	r3, r4
 802189e:	d95f      	bls.n	8021960 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3e8>
 80218a0:	463a      	mov	r2, r7
 80218a2:	f812 1b02 	ldrb.w	r1, [r2], #2
 80218a6:	7878      	ldrb	r0, [r7, #1]
 80218a8:	4617      	mov	r7, r2
 80218aa:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80218ae:	f824 1b02 	strh.w	r1, [r4], #2
 80218b2:	e7f3      	b.n	802189c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x324>
 80218b4:	9901      	ldr	r1, [sp, #4]
 80218b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80218ba:	29ff      	cmp	r1, #255	@ 0xff
 80218bc:	b2b2      	uxth	r2, r6
 80218be:	d044      	beq.n	802194a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 80218c0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80218c4:	ea4f 2922 	mov.w	r9, r2, asr #8
 80218c8:	4608      	mov	r0, r1
 80218ca:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 80218ce:	f009 09f8 	and.w	r9, r9, #248	@ 0xf8
 80218d2:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 80218d6:	fb09 f901 	mul.w	r9, r9, r1
 80218da:	fb0e fe01 	mul.w	lr, lr, r1
 80218de:	00d1      	lsls	r1, r2, #3
 80218e0:	b2c9      	uxtb	r1, r1
 80218e2:	4341      	muls	r1, r0
 80218e4:	f8bd a028 	ldrh.w	sl, [sp, #40]	@ 0x28
 80218e8:	429c      	cmp	r4, r3
 80218ea:	f4bf af61 	bcs.w	80217b0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 80218ee:	8822      	ldrh	r2, [r4, #0]
 80218f0:	1210      	asrs	r0, r2, #8
 80218f2:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 80218f6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80218fa:	00d2      	lsls	r2, r2, #3
 80218fc:	fb00 900a 	mla	r0, r0, sl, r9
 8021900:	b2d2      	uxtb	r2, r2
 8021902:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8021906:	fb02 120a 	mla	r2, r2, sl, r1
 802190a:	fb0c ec0a 	mla	ip, ip, sl, lr
 802190e:	b280      	uxth	r0, r0
 8021910:	b292      	uxth	r2, r2
 8021912:	f100 0b01 	add.w	fp, r0, #1
 8021916:	fa1f fc8c 	uxth.w	ip, ip
 802191a:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802191e:	1c50      	adds	r0, r2, #1
 8021920:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021924:	f10c 0201 	add.w	r2, ip, #1
 8021928:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 802192c:	f40b 4b78 	and.w	fp, fp, #63488	@ 0xf800
 8021930:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8021934:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8021938:	ea40 0b0b 	orr.w	fp, r0, fp
 802193c:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8021940:	ea4b 0b0c 	orr.w	fp, fp, ip
 8021944:	f824 bb02 	strh.w	fp, [r4], #2
 8021948:	e7ce      	b.n	80218e8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x370>
 802194a:	429c      	cmp	r4, r3
 802194c:	f4bf af30 	bcs.w	80217b0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8021950:	f824 2b02 	strh.w	r2, [r4], #2
 8021954:	e7f9      	b.n	802194a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3d2>
 8021956:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802195a:	4657      	mov	r7, sl
 802195c:	464d      	mov	r5, r9
 802195e:	e727      	b.n	80217b0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x238>
 8021960:	2300      	movs	r3, #0
 8021962:	e716      	b.n	8021792 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x21a>
 8021964:	44bb      	add	fp, r7
 8021966:	4657      	mov	r7, sl
 8021968:	e724      	b.n	80217b4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x23c>
 802196a:	bf00      	nop
 802196c:	20012104 	.word	0x20012104
 8021970:	200120fe 	.word	0x200120fe
 8021974:	20000120 	.word	0x20000120
 8021978:	2a01      	cmp	r2, #1
 802197a:	d12a      	bne.n	80219d2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x45a>
 802197c:	f3c6 0104 	ubfx	r1, r6, #0, #5
 8021980:	f003 0203 	and.w	r2, r3, #3
 8021984:	3902      	subs	r1, #2
 8021986:	4411      	add	r1, r2
 8021988:	f001 011f 	and.w	r1, r1, #31
 802198c:	f3c3 0081 	ubfx	r0, r3, #2, #2
 8021990:	f361 0604 	bfi	r6, r1, #0, #5
 8021994:	3802      	subs	r0, #2
 8021996:	eb00 1056 	add.w	r0, r0, r6, lsr #5
 802199a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 802199e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80219a2:	f360 164a 	bfi	r6, r0, #5, #6
 80219a6:	3b02      	subs	r3, #2
 80219a8:	eb03 22d6 	add.w	r2, r3, r6, lsr #11
 80219ac:	f002 031f 	and.w	r3, r2, #31
 80219b0:	2203      	movs	r2, #3
 80219b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80219b6:	f363 26cf 	bfi	r6, r3, #11, #5
 80219ba:	fb12 0303 	smlabb	r3, r2, r3, r0
 80219be:	2207      	movs	r2, #7
 80219c0:	fb12 3301 	smlabb	r3, r2, r1, r3
 80219c4:	9a03      	ldr	r2, [sp, #12]
 80219c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80219ca:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80219ce:	809e      	strh	r6, [r3, #4]
 80219d0:	e701      	b.n	80217d6 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x25e>
 80219d2:	f003 053f 	and.w	r5, r3, #63	@ 0x3f
 80219d6:	45a8      	cmp	r8, r5
 80219d8:	4647      	mov	r7, r8
 80219da:	bfa8      	it	ge
 80219dc:	462f      	movge	r7, r5
 80219de:	2a02      	cmp	r2, #2
 80219e0:	d154      	bne.n	8021a8c <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x514>
 80219e2:	9b01      	ldr	r3, [sp, #4]
 80219e4:	2bff      	cmp	r3, #255	@ 0xff
 80219e6:	d01a      	beq.n	8021a1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 80219e8:	eb0b 0307 	add.w	r3, fp, r7
 80219ec:	2b40      	cmp	r3, #64	@ 0x40
 80219ee:	dd16      	ble.n	8021a1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4a6>
 80219f0:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80219f4:	4649      	mov	r1, r9
 80219f6:	9800      	ldr	r0, [sp, #0]
 80219f8:	f7f2 fe1b 	bl	8014632 <_ZN8touchgfx5paint9flushLineEPmi>
 80219fc:	465a      	mov	r2, fp
 80219fe:	9b01      	ldr	r3, [sp, #4]
 8021a00:	4620      	mov	r0, r4
 8021a02:	9900      	ldr	r1, [sp, #0]
 8021a04:	f7f2 fec2 	bl	801478c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8021a08:	9b00      	ldr	r3, [sp, #0]
 8021a0a:	f04f 0b00 	mov.w	fp, #0
 8021a0e:	461a      	mov	r2, r3
 8021a10:	4b6b      	ldr	r3, [pc, #428]	@ (8021bc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8021a12:	444c      	add	r4, r9
 8021a14:	429a      	cmp	r2, r3
 8021a16:	bf0c      	ite	eq
 8021a18:	4b6a      	ldreq	r3, [pc, #424]	@ (8021bc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8021a1a:	4b69      	ldrne	r3, [pc, #420]	@ (8021bc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8021a1c:	9300      	str	r3, [sp, #0]
 8021a1e:	4652      	mov	r2, sl
 8021a20:	2100      	movs	r1, #0
 8021a22:	42a9      	cmp	r1, r5
 8021a24:	da2c      	bge.n	8021a80 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x508>
 8021a26:	4694      	mov	ip, r2
 8021a28:	f04f 0903 	mov.w	r9, #3
 8021a2c:	f81c 3b02 	ldrb.w	r3, [ip], #2
 8021a30:	7852      	ldrb	r2, [r2, #1]
 8021a32:	42b9      	cmp	r1, r7
 8021a34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021a38:	f3c3 1045 	ubfx	r0, r3, #5, #6
 8021a3c:	ea4f 2ed3 	mov.w	lr, r3, lsr #11
 8021a40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8021a44:	fb19 000e 	smlabb	r0, r9, lr, r0
 8021a48:	f04f 0e07 	mov.w	lr, #7
 8021a4c:	f003 021f 	and.w	r2, r3, #31
 8021a50:	fb1e 0002 	smlabb	r0, lr, r2, r0
 8021a54:	9a03      	ldr	r2, [sp, #12]
 8021a56:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8021a5a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8021a5e:	461e      	mov	r6, r3
 8021a60:	8083      	strh	r3, [r0, #4]
 8021a62:	da0a      	bge.n	8021a7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x502>
 8021a64:	9a01      	ldr	r2, [sp, #4]
 8021a66:	2aff      	cmp	r2, #255	@ 0xff
 8021a68:	bf15      	itete	ne
 8021a6a:	9a00      	ldrne	r2, [sp, #0]
 8021a6c:	8023      	strheq	r3, [r4, #0]
 8021a6e:	f822 301b 	strhne.w	r3, [r2, fp, lsl #1]
 8021a72:	3402      	addeq	r4, #2
 8021a74:	bf18      	it	ne
 8021a76:	f10b 0b01 	addne.w	fp, fp, #1
 8021a7a:	3101      	adds	r1, #1
 8021a7c:	4662      	mov	r2, ip
 8021a7e:	e7d0      	b.n	8021a22 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x4aa>
 8021a80:	eb0a 0a45 	add.w	sl, sl, r5, lsl #1
 8021a84:	eba8 0807 	sub.w	r8, r8, r7
 8021a88:	1bed      	subs	r5, r5, r7
 8021a8a:	e76c      	b.n	8021966 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8021a8c:	9b01      	ldr	r3, [sp, #4]
 8021a8e:	eba8 0807 	sub.w	r8, r8, r7
 8021a92:	2bff      	cmp	r3, #255	@ 0xff
 8021a94:	eba5 0507 	sub.w	r5, r5, r7
 8021a98:	fa1f f986 	uxth.w	r9, r6
 8021a9c:	d027      	beq.n	8021aee <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x576>
 8021a9e:	eb0b 0307 	add.w	r3, fp, r7
 8021aa2:	2b40      	cmp	r3, #64	@ 0x40
 8021aa4:	dd18      	ble.n	8021ad8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x560>
 8021aa6:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8021aaa:	4619      	mov	r1, r3
 8021aac:	9800      	ldr	r0, [sp, #0]
 8021aae:	930c      	str	r3, [sp, #48]	@ 0x30
 8021ab0:	f7f2 fdbf 	bl	8014632 <_ZN8touchgfx5paint9flushLineEPmi>
 8021ab4:	465a      	mov	r2, fp
 8021ab6:	9b01      	ldr	r3, [sp, #4]
 8021ab8:	4620      	mov	r0, r4
 8021aba:	9900      	ldr	r1, [sp, #0]
 8021abc:	f7f2 fe66 	bl	801478c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8021ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021ac2:	f04f 0b00 	mov.w	fp, #0
 8021ac6:	441c      	add	r4, r3
 8021ac8:	9b00      	ldr	r3, [sp, #0]
 8021aca:	461a      	mov	r2, r3
 8021acc:	4b3c      	ldr	r3, [pc, #240]	@ (8021bc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8021ace:	429a      	cmp	r2, r3
 8021ad0:	bf0c      	ite	eq
 8021ad2:	4b3c      	ldreq	r3, [pc, #240]	@ (8021bc4 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x64c>)
 8021ad4:	4b3a      	ldrne	r3, [pc, #232]	@ (8021bc0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x648>)
 8021ad6:	9300      	str	r3, [sp, #0]
 8021ad8:	9b00      	ldr	r3, [sp, #0]
 8021ada:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8021ade:	463b      	mov	r3, r7
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	f43f af3f 	beq.w	8021964 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ec>
 8021ae6:	f822 9b02 	strh.w	r9, [r2], #2
 8021aea:	3b01      	subs	r3, #1
 8021aec:	e7f8      	b.n	8021ae0 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x568>
 8021aee:	eb04 0747 	add.w	r7, r4, r7, lsl #1
 8021af2:	42a7      	cmp	r7, r4
 8021af4:	f67f af37 	bls.w	8021966 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x3ee>
 8021af8:	f824 9b02 	strh.w	r9, [r4], #2
 8021afc:	e7f9      	b.n	8021af2 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x57a>
 8021afe:	f1bb 0f00 	cmp.w	fp, #0
 8021b02:	d00c      	beq.n	8021b1e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5a6>
 8021b04:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8021b08:	4641      	mov	r1, r8
 8021b0a:	9800      	ldr	r0, [sp, #0]
 8021b0c:	f7f2 fd91 	bl	8014632 <_ZN8touchgfx5paint9flushLineEPmi>
 8021b10:	4620      	mov	r0, r4
 8021b12:	9b01      	ldr	r3, [sp, #4]
 8021b14:	465a      	mov	r2, fp
 8021b16:	9900      	ldr	r1, [sp, #0]
 8021b18:	f7f2 fe38 	bl	801478c <_ZN8touchgfx5paint6rgb56514lineFromRGB565EPtPKtjh>
 8021b1c:	4444      	add	r4, r8
 8021b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8021bc8 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x650>)
 8021b20:	9a02      	ldr	r2, [sp, #8]
 8021b22:	881b      	ldrh	r3, [r3, #0]
 8021b24:	1a9b      	subs	r3, r3, r2
 8021b26:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021b2a:	9b06      	ldr	r3, [sp, #24]
 8021b2c:	3301      	adds	r3, #1
 8021b2e:	9306      	str	r3, [sp, #24]
 8021b30:	9a06      	ldr	r2, [sp, #24]
 8021b32:	9b04      	ldr	r3, [sp, #16]
 8021b34:	4293      	cmp	r3, r2
 8021b36:	d120      	bne.n	8021b7a <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x602>
 8021b38:	9b05      	ldr	r3, [sp, #20]
 8021b3a:	9a05      	ldr	r2, [sp, #20]
 8021b3c:	f103 0801 	add.w	r8, r3, #1
 8021b40:	9b08      	ldr	r3, [sp, #32]
 8021b42:	2100      	movs	r1, #0
 8021b44:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8021b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b4a:	ba3f      	rev	r7, r7
 8021b4c:	2280      	movs	r2, #128	@ 0x80
 8021b4e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8021b50:	441f      	add	r7, r3
 8021b52:	f8bd 9040 	ldrh.w	r9, [sp, #64]	@ 0x40
 8021b56:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8021b5a:	f00a ffc6 	bl	802caea <memset>
 8021b5e:	2300      	movs	r3, #0
 8021b60:	f04f 0600 	mov.w	r6, #0
 8021b64:	eba9 0905 	sub.w	r9, r9, r5
 8021b68:	fa1f f989 	uxth.w	r9, r9
 8021b6c:	f8cd 8014 	str.w	r8, [sp, #20]
 8021b70:	9306      	str	r3, [sp, #24]
 8021b72:	f7f2 fd57 	bl	8014624 <_ZN8touchgfx5paint8tearDownEv>
 8021b76:	46ba      	mov	sl, r7
 8021b78:	e58a      	b.n	8021690 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x118>
 8021b7a:	f8bd 903c 	ldrh.w	r9, [sp, #60]	@ 0x3c
 8021b7e:	9b02      	ldr	r3, [sp, #8]
 8021b80:	eba9 0903 	sub.w	r9, r9, r3
 8021b84:	eba9 0505 	sub.w	r5, r9, r5
 8021b88:	fa1f f985 	uxth.w	r9, r5
 8021b8c:	e7f1      	b.n	8021b72 <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x5fa>
 8021b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8021bcc <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x654>)
 8021b90:	6818      	ldr	r0, [r3, #0]
 8021b92:	6803      	ldr	r3, [r0, #0]
 8021b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021b96:	4798      	blx	r3
 8021b98:	b013      	add	sp, #76	@ 0x4c
 8021b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b9e:	9b02      	ldr	r3, [sp, #8]
 8021ba0:	9a02      	ldr	r2, [sp, #8]
 8021ba2:	42ab      	cmp	r3, r5
 8021ba4:	bfa8      	it	ge
 8021ba6:	462b      	movge	r3, r5
 8021ba8:	eba2 0803 	sub.w	r8, r2, r3
 8021bac:	1aed      	subs	r5, r5, r3
 8021bae:	e626      	b.n	80217fe <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x286>
 8021bb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8021bb4:	fa1f f986 	uxth.w	r9, r6
 8021bb8:	2500      	movs	r5, #0
 8021bba:	2701      	movs	r7, #1
 8021bbc:	e76f      	b.n	8021a9e <_ZN8touchgfx8LCD16bpp19DecompressorRGB_QOI14blitCopyRGB565EPKhRKNS_4RectES6_h+0x526>
 8021bbe:	bf00      	nop
 8021bc0:	20000120 	.word	0x20000120
 8021bc4:	20000220 	.word	0x20000220
 8021bc8:	200120fe 	.word	0x200120fe
 8021bcc:	20012104 	.word	0x20012104

08021bd0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8021bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bd4:	b08f      	sub	sp, #60	@ 0x3c
 8021bd6:	9203      	str	r2, [sp, #12]
 8021bd8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8021bdc:	461c      	mov	r4, r3
 8021bde:	460f      	mov	r7, r1
 8021be0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021be2:	9202      	str	r2, [sp, #8]
 8021be4:	2a00      	cmp	r2, #0
 8021be6:	f000 812a 	beq.w	8021e3e <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26e>
 8021bea:	6820      	ldr	r0, [r4, #0]
 8021bec:	6861      	ldr	r1, [r4, #4]
 8021bee:	aa0a      	add	r2, sp, #40	@ 0x28
 8021bf0:	c203      	stmia	r2!, {r0, r1}
 8021bf2:	6818      	ldr	r0, [r3, #0]
 8021bf4:	6859      	ldr	r1, [r3, #4]
 8021bf6:	aa0c      	add	r2, sp, #48	@ 0x30
 8021bf8:	c203      	stmia	r2!, {r0, r1}
 8021bfa:	a80a      	add	r0, sp, #40	@ 0x28
 8021bfc:	f7f8 fd08 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c00:	4621      	mov	r1, r4
 8021c02:	a80c      	add	r0, sp, #48	@ 0x30
 8021c04:	f7f8 fd2c 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021c08:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8021c0c:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8021c10:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021c14:	bfdd      	ittte	le
 8021c16:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021c1a:	b2b3      	uxthle	r3, r6
 8021c1c:	fb92 f3f3 	sdivle	r3, r2, r3
 8021c20:	2301      	movgt	r3, #1
 8021c22:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8021c26:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8021c2a:	fb92 f1f3 	sdiv	r1, r2, r3
 8021c2e:	fa1f fc81 	uxth.w	ip, r1
 8021c32:	4661      	mov	r1, ip
 8021c34:	fb0c 2413 	mls	r4, ip, r3, r2
 8021c38:	fb14 f406 	smulbb	r4, r4, r6
 8021c3c:	441d      	add	r5, r3
 8021c3e:	3d01      	subs	r5, #1
 8021c40:	4404      	add	r4, r0
 8021c42:	fb95 f5f3 	sdiv	r5, r5, r3
 8021c46:	b2a4      	uxth	r4, r4
 8021c48:	b121      	cbz	r1, 8021c54 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x84>
 8021c4a:	9b03      	ldr	r3, [sp, #12]
 8021c4c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021c50:	ba1b      	rev	r3, r3
 8021c52:	441f      	add	r7, r3
 8021c54:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021c58:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8021c5c:	4418      	add	r0, r3
 8021c5e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8021c62:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8021c66:	441a      	add	r2, r3
 8021c68:	4b76      	ldr	r3, [pc, #472]	@ (8021e44 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021c6a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8021c6e:	6818      	ldr	r0, [r3, #0]
 8021c70:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8021c74:	6803      	ldr	r3, [r0, #0]
 8021c76:	b2ad      	uxth	r5, r5
 8021c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021c7a:	4798      	blx	r3
 8021c7c:	4a72      	ldr	r2, [pc, #456]	@ (8021e48 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x278>)
 8021c7e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8021c82:	8813      	ldrh	r3, [r2, #0]
 8021c84:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8021c88:	00ad      	lsls	r5, r5, #2
 8021c8a:	fb03 c101 	mla	r1, r3, r1, ip
 8021c8e:	4373      	muls	r3, r6
 8021c90:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8021c94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021c98:	2c00      	cmp	r4, #0
 8021c9a:	9304      	str	r3, [sp, #16]
 8021c9c:	f105 0304 	add.w	r3, r5, #4
 8021ca0:	9305      	str	r3, [sp, #20]
 8021ca2:	bf0c      	ite	eq
 8021ca4:	46c8      	moveq	r8, r9
 8021ca6:	f04f 0800 	movne.w	r8, #0
 8021caa:	2300      	movs	r3, #0
 8021cac:	fa1f f888 	uxth.w	r8, r8
 8021cb0:	9301      	str	r3, [sp, #4]
 8021cb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8021cb4:	9a04      	ldr	r2, [sp, #16]
 8021cb6:	4282      	cmp	r2, r0
 8021cb8:	f240 80bc 	bls.w	8021e34 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x264>
 8021cbc:	b95b      	cbnz	r3, 8021cd6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x106>
 8021cbe:	783a      	ldrb	r2, [r7, #0]
 8021cc0:	0993      	lsrs	r3, r2, #6
 8021cc2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021cc6:	9201      	str	r2, [sp, #4]
 8021cc8:	1e5a      	subs	r2, r3, #1
 8021cca:	2a02      	cmp	r2, #2
 8021ccc:	bf8d      	iteet	hi
 8021cce:	787b      	ldrbhi	r3, [r7, #1]
 8021cd0:	3701      	addls	r7, #1
 8021cd2:	b29b      	uxthls	r3, r3
 8021cd4:	3702      	addhi	r7, #2
 8021cd6:	b184      	cbz	r4, 8021cfa <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 8021cd8:	429c      	cmp	r4, r3
 8021cda:	bf99      	ittee	ls
 8021cdc:	1b1c      	subls	r4, r3, r4
 8021cde:	fa1f fa84 	uxthls.w	sl, r4
 8021ce2:	46c4      	movhi	ip, r8
 8021ce4:	f04f 0a00 	movhi.w	sl, #0
 8021ce8:	bf93      	iteet	ls
 8021cea:	2400      	movls	r4, #0
 8021cec:	1ae4      	subhi	r4, r4, r3
 8021cee:	b2a4      	uxthhi	r4, r4
 8021cf0:	fa1f fc89 	uxthls.w	ip, r9
 8021cf4:	4653      	mov	r3, sl
 8021cf6:	46e0      	mov	r8, ip
 8021cf8:	e7dc      	b.n	8021cb4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xe4>
 8021cfa:	2204      	movs	r2, #4
 8021cfc:	4615      	mov	r5, r2
 8021cfe:	4543      	cmp	r3, r8
 8021d00:	bf2c      	ite	cs
 8021d02:	46c6      	movcs	lr, r8
 8021d04:	469e      	movcc	lr, r3
 8021d06:	9905      	ldr	r1, [sp, #20]
 8021d08:	9a01      	ldr	r2, [sp, #4]
 8021d0a:	bf28      	it	cs
 8021d0c:	eba3 0a08 	subcs.w	sl, r3, r8
 8021d10:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021d14:	9903      	ldr	r1, [sp, #12]
 8021d16:	bf38      	it	cc
 8021d18:	eba8 0c03 	subcc.w	ip, r8, r3
 8021d1c:	588a      	ldr	r2, [r1, r2]
 8021d1e:	bf28      	it	cs
 8021d20:	fa1f fa8a 	uxthcs.w	sl, sl
 8021d24:	ea4f 6112 	mov.w	r1, r2, lsr #24
 8021d28:	bf2e      	itee	cs
 8021d2a:	46a4      	movcs	ip, r4
 8021d2c:	fa1f fc8c 	uxthcc.w	ip, ip
 8021d30:	46a2      	movcc	sl, r4
 8021d32:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8021d36:	2900      	cmp	r1, #0
 8021d38:	d066      	beq.n	8021e08 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 8021d3a:	29ff      	cmp	r1, #255	@ 0xff
 8021d3c:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8021d40:	d114      	bne.n	8021d6c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021d42:	9d02      	ldr	r5, [sp, #8]
 8021d44:	2dff      	cmp	r5, #255	@ 0xff
 8021d46:	d111      	bne.n	8021d6c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x19c>
 8021d48:	0951      	lsrs	r1, r2, #5
 8021d4a:	f426 66ff 	bic.w	r6, r6, #2040	@ 0x7f8
 8021d4e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8021d52:	f026 0607 	bic.w	r6, r6, #7
 8021d56:	430e      	orrs	r6, r1
 8021d58:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021d5c:	4316      	orrs	r6, r2
 8021d5e:	b2b6      	uxth	r6, r6
 8021d60:	4486      	add	lr, r0
 8021d62:	4586      	cmp	lr, r0
 8021d64:	d051      	beq.n	8021e0a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8021d66:	f820 6b02 	strh.w	r6, [r0], #2
 8021d6a:	e7fa      	b.n	8021d62 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x192>
 8021d6c:	9d02      	ldr	r5, [sp, #8]
 8021d6e:	b2f6      	uxtb	r6, r6
 8021d70:	4369      	muls	r1, r5
 8021d72:	1c4d      	adds	r5, r1, #1
 8021d74:	eb05 2521 	add.w	r5, r5, r1, asr #8
 8021d78:	122d      	asrs	r5, r5, #8
 8021d7a:	ea6f 0b05 	mvn.w	fp, r5
 8021d7e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021d82:	b2ad      	uxth	r5, r5
 8021d84:	b2d2      	uxtb	r2, r2
 8021d86:	fb11 f105 	smulbb	r1, r1, r5
 8021d8a:	fb16 f605 	smulbb	r6, r6, r5
 8021d8e:	fb12 f205 	smulbb	r2, r2, r5
 8021d92:	b289      	uxth	r1, r1
 8021d94:	b2b6      	uxth	r6, r6
 8021d96:	b292      	uxth	r2, r2
 8021d98:	9106      	str	r1, [sp, #24]
 8021d9a:	9607      	str	r6, [sp, #28]
 8021d9c:	9208      	str	r2, [sp, #32]
 8021d9e:	4486      	add	lr, r0
 8021da0:	fa5f fb8b 	uxtb.w	fp, fp
 8021da4:	4586      	cmp	lr, r0
 8021da6:	d030      	beq.n	8021e0a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8021da8:	8802      	ldrh	r2, [r0, #0]
 8021daa:	9906      	ldr	r1, [sp, #24]
 8021dac:	1216      	asrs	r6, r2, #8
 8021dae:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8021db2:	10d5      	asrs	r5, r2, #3
 8021db4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8021db8:	fb06 160b 	mla	r6, r6, fp, r1
 8021dbc:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8021dc0:	9907      	ldr	r1, [sp, #28]
 8021dc2:	00d2      	lsls	r2, r2, #3
 8021dc4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8021dc8:	fb05 150b 	mla	r5, r5, fp, r1
 8021dcc:	b2d2      	uxtb	r2, r2
 8021dce:	9908      	ldr	r1, [sp, #32]
 8021dd0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021dd4:	fb02 120b 	mla	r2, r2, fp, r1
 8021dd8:	b2b6      	uxth	r6, r6
 8021dda:	b292      	uxth	r2, r2
 8021ddc:	1c71      	adds	r1, r6, #1
 8021dde:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8021de2:	1c51      	adds	r1, r2, #1
 8021de4:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021de8:	b2ad      	uxth	r5, r5
 8021dea:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8021dee:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8021df2:	4316      	orrs	r6, r2
 8021df4:	1c6a      	adds	r2, r5, #1
 8021df6:	eb02 2515 	add.w	r5, r2, r5, lsr #8
 8021dfa:	096d      	lsrs	r5, r5, #5
 8021dfc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8021e00:	432e      	orrs	r6, r5
 8021e02:	f820 6b02 	strh.w	r6, [r0], #2
 8021e06:	e7cd      	b.n	8021da4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d4>
 8021e08:	4470      	add	r0, lr
 8021e0a:	4543      	cmp	r3, r8
 8021e0c:	f4ff af72 	bcc.w	8021cf4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021e10:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8021e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e16:	fa1f fc89 	uxth.w	ip, r9
 8021e1a:	eba4 040c 	sub.w	r4, r4, ip
 8021e1e:	881b      	ldrh	r3, [r3, #0]
 8021e20:	b2a4      	uxth	r4, r4
 8021e22:	2c00      	cmp	r4, #0
 8021e24:	eba3 0309 	sub.w	r3, r3, r9
 8021e28:	bf18      	it	ne
 8021e2a:	f04f 0c00 	movne.w	ip, #0
 8021e2e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021e32:	e75f      	b.n	8021cf4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8021e34:	4b03      	ldr	r3, [pc, #12]	@ (8021e44 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x274>)
 8021e36:	6818      	ldr	r0, [r3, #0]
 8021e38:	6803      	ldr	r3, [r0, #0]
 8021e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021e3c:	4798      	blx	r3
 8021e3e:	b00f      	add	sp, #60	@ 0x3c
 8021e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e44:	20012104 	.word	0x20012104
 8021e48:	200120fe 	.word	0x200120fe

08021e4c <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8021e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e50:	b093      	sub	sp, #76	@ 0x4c
 8021e52:	9205      	str	r2, [sp, #20]
 8021e54:	f89d 2074 	ldrb.w	r2, [sp, #116]	@ 0x74
 8021e58:	461c      	mov	r4, r3
 8021e5a:	9101      	str	r1, [sp, #4]
 8021e5c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021e5e:	9202      	str	r2, [sp, #8]
 8021e60:	2a00      	cmp	r2, #0
 8021e62:	f000 812d 	beq.w	80220c0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 8021e66:	6820      	ldr	r0, [r4, #0]
 8021e68:	6861      	ldr	r1, [r4, #4]
 8021e6a:	aa0e      	add	r2, sp, #56	@ 0x38
 8021e6c:	c203      	stmia	r2!, {r0, r1}
 8021e6e:	6818      	ldr	r0, [r3, #0]
 8021e70:	6859      	ldr	r1, [r3, #4]
 8021e72:	aa10      	add	r2, sp, #64	@ 0x40
 8021e74:	c203      	stmia	r2!, {r0, r1}
 8021e76:	a80e      	add	r0, sp, #56	@ 0x38
 8021e78:	f7f8 fbca 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021e7c:	4621      	mov	r1, r4
 8021e7e:	a810      	add	r0, sp, #64	@ 0x40
 8021e80:	f7f8 fbee 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021e84:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8021e88:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8021e8c:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8021e90:	bfdd      	ittte	le
 8021e92:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8021e96:	b2b3      	uxthle	r3, r6
 8021e98:	fb92 f3f3 	sdivle	r3, r2, r3
 8021e9c:	2301      	movgt	r3, #1
 8021e9e:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8021ea2:	f8bd 0040 	ldrh.w	r0, [sp, #64]	@ 0x40
 8021ea6:	fb92 f1f3 	sdiv	r1, r2, r3
 8021eaa:	fa1f fc81 	uxth.w	ip, r1
 8021eae:	4661      	mov	r1, ip
 8021eb0:	fb0c 2413 	mls	r4, ip, r3, r2
 8021eb4:	fb14 f406 	smulbb	r4, r4, r6
 8021eb8:	441d      	add	r5, r3
 8021eba:	3d01      	subs	r5, #1
 8021ebc:	4404      	add	r4, r0
 8021ebe:	fb95 f5f3 	sdiv	r5, r5, r3
 8021ec2:	b2a4      	uxth	r4, r4
 8021ec4:	b131      	cbz	r1, 8021ed4 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x88>
 8021ec6:	9b05      	ldr	r3, [sp, #20]
 8021ec8:	9901      	ldr	r1, [sp, #4]
 8021eca:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8021ece:	ba1b      	rev	r3, r3
 8021ed0:	4419      	add	r1, r3
 8021ed2:	9101      	str	r1, [sp, #4]
 8021ed4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8021ed8:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8021edc:	4418      	add	r0, r3
 8021ede:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8021ee2:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8021ee6:	441a      	add	r2, r3
 8021ee8:	4b77      	ldr	r3, [pc, #476]	@ (80220c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 8021eea:	f8ad 2042 	strh.w	r2, [sp, #66]	@ 0x42
 8021eee:	6818      	ldr	r0, [r3, #0]
 8021ef0:	f9bd 6046 	ldrsh.w	r6, [sp, #70]	@ 0x46
 8021ef4:	6803      	ldr	r3, [r0, #0]
 8021ef6:	b2ad      	uxth	r5, r5
 8021ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021efa:	4798      	blx	r3
 8021efc:	4973      	ldr	r1, [pc, #460]	@ (80220cc <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x280>)
 8021efe:	f9bd c040 	ldrsh.w	ip, [sp, #64]	@ 0x40
 8021f02:	880b      	ldrh	r3, [r1, #0]
 8021f04:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 8021f08:	00ad      	lsls	r5, r5, #2
 8021f0a:	fb03 c202 	mla	r2, r3, r2, ip
 8021f0e:	4373      	muls	r3, r6
 8021f10:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021f14:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8021f18:	9308      	str	r3, [sp, #32]
 8021f1a:	1d2b      	adds	r3, r5, #4
 8021f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f1e:	9b02      	ldr	r3, [sp, #8]
 8021f20:	2c00      	cmp	r4, #0
 8021f22:	ea6f 0203 	mvn.w	r2, r3
 8021f26:	bf0c      	ite	eq
 8021f28:	46dc      	moveq	ip, fp
 8021f2a:	f04f 0c00 	movne.w	ip, #0
 8021f2e:	2300      	movs	r3, #0
 8021f30:	910d      	str	r1, [sp, #52]	@ 0x34
 8021f32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8021f36:	b2d2      	uxtb	r2, r2
 8021f38:	fa1f fc8c 	uxth.w	ip, ip
 8021f3c:	9303      	str	r3, [sp, #12]
 8021f3e:	9106      	str	r1, [sp, #24]
 8021f40:	9207      	str	r2, [sp, #28]
 8021f42:	9a08      	ldr	r2, [sp, #32]
 8021f44:	4282      	cmp	r2, r0
 8021f46:	f240 80b6 	bls.w	80220b6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8021f4a:	b963      	cbnz	r3, 8021f66 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021f4c:	9b01      	ldr	r3, [sp, #4]
 8021f4e:	781a      	ldrb	r2, [r3, #0]
 8021f50:	0993      	lsrs	r3, r2, #6
 8021f52:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8021f56:	9203      	str	r2, [sp, #12]
 8021f58:	1e5a      	subs	r2, r3, #1
 8021f5a:	2a02      	cmp	r2, #2
 8021f5c:	d815      	bhi.n	8021f8a <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13e>
 8021f5e:	9a01      	ldr	r2, [sp, #4]
 8021f60:	b29b      	uxth	r3, r3
 8021f62:	3201      	adds	r2, #1
 8021f64:	9201      	str	r2, [sp, #4]
 8021f66:	b1b4      	cbz	r4, 8021f96 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14a>
 8021f68:	429c      	cmp	r4, r3
 8021f6a:	bf99      	ittee	ls
 8021f6c:	1b1c      	subls	r4, r3, r4
 8021f6e:	fa1f f884 	uxthls.w	r8, r4
 8021f72:	4666      	movhi	r6, ip
 8021f74:	f04f 0800 	movhi.w	r8, #0
 8021f78:	bf93      	iteet	ls
 8021f7a:	2400      	movls	r4, #0
 8021f7c:	1ae4      	subhi	r4, r4, r3
 8021f7e:	b2a4      	uxthhi	r4, r4
 8021f80:	fa1f f68b 	uxthls.w	r6, fp
 8021f84:	4643      	mov	r3, r8
 8021f86:	46b4      	mov	ip, r6
 8021f88:	e7db      	b.n	8021f42 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8021f8a:	9a01      	ldr	r2, [sp, #4]
 8021f8c:	9b01      	ldr	r3, [sp, #4]
 8021f8e:	3202      	adds	r2, #2
 8021f90:	785b      	ldrb	r3, [r3, #1]
 8021f92:	9201      	str	r2, [sp, #4]
 8021f94:	e7e7      	b.n	8021f66 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8021f96:	2203      	movs	r2, #3
 8021f98:	4615      	mov	r5, r2
 8021f9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021f9c:	9a03      	ldr	r2, [sp, #12]
 8021f9e:	4563      	cmp	r3, ip
 8021fa0:	fb15 1202 	smlabb	r2, r5, r2, r1
 8021fa4:	9905      	ldr	r1, [sp, #20]
 8021fa6:	bf28      	it	cs
 8021fa8:	eba3 080c 	subcs.w	r8, r3, ip
 8021fac:	eb01 0502 	add.w	r5, r1, r2
 8021fb0:	9902      	ldr	r1, [sp, #8]
 8021fb2:	bf31      	iteee	cc
 8021fb4:	ebac 0603 	subcc.w	r6, ip, r3
 8021fb8:	fa1f f888 	uxthcs.w	r8, r8
 8021fbc:	46e1      	movcs	r9, ip
 8021fbe:	4626      	movcs	r6, r4
 8021fc0:	bf3e      	ittt	cc
 8021fc2:	b2b6      	uxthcc	r6, r6
 8021fc4:	4699      	movcc	r9, r3
 8021fc6:	46a0      	movcc	r8, r4
 8021fc8:	29ff      	cmp	r1, #255	@ 0xff
 8021fca:	d04a      	beq.n	8022062 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x216>
 8021fcc:	46ca      	mov	sl, r9
 8021fce:	9f06      	ldr	r7, [sp, #24]
 8021fd0:	78a9      	ldrb	r1, [r5, #2]
 8021fd2:	9004      	str	r0, [sp, #16]
 8021fd4:	4379      	muls	r1, r7
 8021fd6:	910a      	str	r1, [sp, #40]	@ 0x28
 8021fd8:	7869      	ldrb	r1, [r5, #1]
 8021fda:	4379      	muls	r1, r7
 8021fdc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8021fde:	9905      	ldr	r1, [sp, #20]
 8021fe0:	5c8a      	ldrb	r2, [r1, r2]
 8021fe2:	437a      	muls	r2, r7
 8021fe4:	920c      	str	r2, [sp, #48]	@ 0x30
 8021fe6:	f1ba 0f00 	cmp.w	sl, #0
 8021fea:	d03d      	beq.n	8022068 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21c>
 8021fec:	9f07      	ldr	r7, [sp, #28]
 8021fee:	9a04      	ldr	r2, [sp, #16]
 8021ff0:	46be      	mov	lr, r7
 8021ff2:	8812      	ldrh	r2, [r2, #0]
 8021ff4:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8021ff6:	1215      	asrs	r5, r2, #8
 8021ff8:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8021ffc:	10d1      	asrs	r1, r2, #3
 8021ffe:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8022002:	fb05 750e 	mla	r5, r5, lr, r7
 8022006:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802200a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 802200c:	00d2      	lsls	r2, r2, #3
 802200e:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022012:	fb01 710e 	mla	r1, r1, lr, r7
 8022016:	b2d2      	uxtb	r2, r2
 8022018:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802201a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802201e:	fb02 720e 	mla	r2, r2, lr, r7
 8022022:	b2ad      	uxth	r5, r5
 8022024:	b292      	uxth	r2, r2
 8022026:	f105 0e01 	add.w	lr, r5, #1
 802202a:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 802202e:	f102 0e01 	add.w	lr, r2, #1
 8022032:	eb0e 2212 	add.w	r2, lr, r2, lsr #8
 8022036:	b289      	uxth	r1, r1
 8022038:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 802203c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8022040:	4315      	orrs	r5, r2
 8022042:	1c4a      	adds	r2, r1, #1
 8022044:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8022048:	0949      	lsrs	r1, r1, #5
 802204a:	9a04      	ldr	r2, [sp, #16]
 802204c:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8022050:	430d      	orrs	r5, r1
 8022052:	f822 5b02 	strh.w	r5, [r2], #2
 8022056:	f10a 3aff 	add.w	sl, sl, #4294967295
 802205a:	9204      	str	r2, [sp, #16]
 802205c:	fa1f fa8a 	uxth.w	sl, sl
 8022060:	e7c1      	b.n	8021fe6 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19a>
 8022062:	4649      	mov	r1, r9
 8022064:	4686      	mov	lr, r0
 8022066:	b999      	cbnz	r1, 8022090 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x244>
 8022068:	4563      	cmp	r3, ip
 802206a:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 802206e:	d389      	bcc.n	8021f84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8022070:	f8bd 403c 	ldrh.w	r4, [sp, #60]	@ 0x3c
 8022074:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8022076:	fa1f f68b 	uxth.w	r6, fp
 802207a:	1ba4      	subs	r4, r4, r6
 802207c:	881b      	ldrh	r3, [r3, #0]
 802207e:	b2a4      	uxth	r4, r4
 8022080:	2c00      	cmp	r4, #0
 8022082:	eba3 030b 	sub.w	r3, r3, fp
 8022086:	bf18      	it	ne
 8022088:	2600      	movne	r6, #0
 802208a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802208e:	e779      	b.n	8021f84 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x138>
 8022090:	78aa      	ldrb	r2, [r5, #2]
 8022092:	4f0f      	ldr	r7, [pc, #60]	@ (80220d0 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x284>)
 8022094:	3901      	subs	r1, #1
 8022096:	ea07 2a02 	and.w	sl, r7, r2, lsl #8
 802209a:	786a      	ldrb	r2, [r5, #1]
 802209c:	b289      	uxth	r1, r1
 802209e:	00d2      	lsls	r2, r2, #3
 80220a0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80220a4:	ea4a 0202 	orr.w	r2, sl, r2
 80220a8:	f895 a000 	ldrb.w	sl, [r5]
 80220ac:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
 80220b0:	f82e 2b02 	strh.w	r2, [lr], #2
 80220b4:	e7d7      	b.n	8022066 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x21a>
 80220b6:	4b04      	ldr	r3, [pc, #16]	@ (80220c8 <_ZN8touchgfx8LCD16bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>)
 80220b8:	6818      	ldr	r0, [r3, #0]
 80220ba:	6803      	ldr	r3, [r0, #0]
 80220bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80220be:	4798      	blx	r3
 80220c0:	b013      	add	sp, #76	@ 0x4c
 80220c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220c6:	bf00      	nop
 80220c8:	20012104 	.word	0x20012104
 80220cc:	200120fe 	.word	0x200120fe
 80220d0:	fffff800 	.word	0xfffff800

080220d4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80220d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220d8:	b09d      	sub	sp, #116	@ 0x74
 80220da:	e9cd 1211 	strd	r1, r2, [sp, #68]	@ 0x44
 80220de:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 80220e2:	461c      	mov	r4, r3
 80220e4:	4683      	mov	fp, r0
 80220e6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80220e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80220ea:	2a00      	cmp	r2, #0
 80220ec:	f000 81e1 	beq.w	80224b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3de>
 80220f0:	6820      	ldr	r0, [r4, #0]
 80220f2:	6861      	ldr	r1, [r4, #4]
 80220f4:	aa18      	add	r2, sp, #96	@ 0x60
 80220f6:	c203      	stmia	r2!, {r0, r1}
 80220f8:	6818      	ldr	r0, [r3, #0]
 80220fa:	6859      	ldr	r1, [r3, #4]
 80220fc:	aa1a      	add	r2, sp, #104	@ 0x68
 80220fe:	c203      	stmia	r2!, {r0, r1}
 8022100:	a818      	add	r0, sp, #96	@ 0x60
 8022102:	f7f8 fa85 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022106:	4621      	mov	r1, r4
 8022108:	a81a      	add	r0, sp, #104	@ 0x68
 802210a:	f7f8 faa9 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802210e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8022112:	f9bd 4066 	ldrsh.w	r4, [sp, #102]	@ 0x66
 8022116:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 802211a:	bfdd      	ittte	le
 802211c:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022120:	b29a      	uxthle	r2, r3
 8022122:	fb91 f2f2 	sdivle	r2, r1, r2
 8022126:	2201      	movgt	r2, #1
 8022128:	9202      	str	r2, [sp, #8]
 802212a:	9802      	ldr	r0, [sp, #8]
 802212c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8022130:	9902      	ldr	r1, [sp, #8]
 8022132:	fb92 f0f0 	sdiv	r0, r2, r0
 8022136:	b280      	uxth	r0, r0
 8022138:	900f      	str	r0, [sp, #60]	@ 0x3c
 802213a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802213c:	9802      	ldr	r0, [sp, #8]
 802213e:	440c      	add	r4, r1
 8022140:	fb05 2510 	mls	r5, r5, r0, r2
 8022144:	fb15 f503 	smulbb	r5, r5, r3
 8022148:	3c01      	subs	r4, #1
 802214a:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 802214e:	fb94 f4f1 	sdiv	r4, r4, r1
 8022152:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8022156:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 802215a:	440d      	add	r5, r1
 802215c:	4419      	add	r1, r3
 802215e:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8022162:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8022166:	441a      	add	r2, r3
 8022168:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 802216c:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8022170:	9306      	str	r3, [sp, #24]
 8022172:	4bb3      	ldr	r3, [pc, #716]	@ (8022440 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8022174:	3401      	adds	r4, #1
 8022176:	6818      	ldr	r0, [r3, #0]
 8022178:	b2a4      	uxth	r4, r4
 802217a:	6803      	ldr	r3, [r0, #0]
 802217c:	00a4      	lsls	r4, r4, #2
 802217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022180:	4798      	blx	r3
 8022182:	4bb0      	ldr	r3, [pc, #704]	@ (8022444 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>)
 8022184:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8022188:	881a      	ldrh	r2, [r3, #0]
 802218a:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	@ 0x68
 802218e:	4356      	muls	r6, r2
 8022190:	fb02 7101 	mla	r1, r2, r1, r7
 8022194:	eb00 0841 	add.w	r8, r0, r1, lsl #1
 8022198:	eb08 0246 	add.w	r2, r8, r6, lsl #1
 802219c:	920a      	str	r2, [sp, #40]	@ 0x28
 802219e:	1d22      	adds	r2, r4, #4
 80221a0:	b2ad      	uxth	r5, r5
 80221a2:	9213      	str	r2, [sp, #76]	@ 0x4c
 80221a4:	9a06      	ldr	r2, [sp, #24]
 80221a6:	2d00      	cmp	r5, #0
 80221a8:	bf0c      	ite	eq
 80221aa:	4611      	moveq	r1, r2
 80221ac:	2100      	movne	r1, #0
 80221ae:	2200      	movs	r2, #0
 80221b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80221b2:	4ba5      	ldr	r3, [pc, #660]	@ (8022448 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x374>)
 80221b4:	b289      	uxth	r1, r1
 80221b6:	eba3 030b 	sub.w	r3, r3, fp
 80221ba:	920d      	str	r2, [sp, #52]	@ 0x34
 80221bc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80221be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80221c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80221c2:	fa12 f383 	uxtah	r3, r2, r3
 80221c6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80221c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80221cc:	3304      	adds	r3, #4
 80221ce:	9308      	str	r3, [sp, #32]
 80221d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80221d2:	4543      	cmp	r3, r8
 80221d4:	f240 8168 	bls.w	80224a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d4>
 80221d8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 80221dc:	9a02      	ldr	r2, [sp, #8]
 80221de:	fbb5 f3f3 	udiv	r3, r5, r3
 80221e2:	1ad3      	subs	r3, r2, r3
 80221e4:	b29b      	uxth	r3, r3
 80221e6:	9314      	str	r3, [sp, #80]	@ 0x50
 80221e8:	9b08      	ldr	r3, [sp, #32]
 80221ea:	9808      	ldr	r0, [sp, #32]
 80221ec:	785a      	ldrb	r2, [r3, #1]
 80221ee:	789b      	ldrb	r3, [r3, #2]
 80221f0:	7800      	ldrb	r0, [r0, #0]
 80221f2:	021b      	lsls	r3, r3, #8
 80221f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80221f8:	9a08      	ldr	r2, [sp, #32]
 80221fa:	9010      	str	r0, [sp, #64]	@ 0x40
 80221fc:	78d2      	ldrb	r2, [r2, #3]
 80221fe:	3001      	adds	r0, #1
 8022200:	4313      	orrs	r3, r2
 8022202:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8022204:	9007      	str	r0, [sp, #28]
 8022206:	441a      	add	r2, r3
 8022208:	1c50      	adds	r0, r2, #1
 802220a:	9005      	str	r0, [sp, #20]
 802220c:	7852      	ldrb	r2, [r2, #1]
 802220e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8022210:	0212      	lsls	r2, r2, #8
 8022212:	5cc3      	ldrb	r3, [r0, r3]
 8022214:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022218:	431a      	orrs	r2, r3
 802221a:	b293      	uxth	r3, r2
 802221c:	930b      	str	r3, [sp, #44]	@ 0x2c
 802221e:	2300      	movs	r3, #0
 8022220:	9309      	str	r3, [sp, #36]	@ 0x24
 8022222:	2301      	movs	r3, #1
 8022224:	9301      	str	r3, [sp, #4]
 8022226:	9304      	str	r3, [sp, #16]
 8022228:	2300      	movs	r3, #0
 802222a:	f04f 0e01 	mov.w	lr, #1
 802222e:	f88b 2804 	strb.w	r2, [fp, #2052]	@ 0x804
 8022232:	9303      	str	r3, [sp, #12]
 8022234:	2d00      	cmp	r5, #0
 8022236:	d07c      	beq.n	8022332 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8022238:	45ae      	cmp	lr, r5
 802223a:	d26b      	bcs.n	8022314 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x240>
 802223c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802223e:	eba5 050e 	sub.w	r5, r5, lr
 8022242:	4543      	cmp	r3, r8
 8022244:	b2ad      	uxth	r5, r5
 8022246:	460c      	mov	r4, r1
 8022248:	d802      	bhi.n	8022250 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>
 802224a:	e070      	b.n	802232e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25a>
 802224c:	2b00      	cmp	r3, #0
 802224e:	d15c      	bne.n	802230a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x236>
 8022250:	9b05      	ldr	r3, [sp, #20]
 8022252:	9a04      	ldr	r2, [sp, #16]
 8022254:	785b      	ldrb	r3, [r3, #1]
 8022256:	f1c2 0207 	rsb	r2, r2, #7
 802225a:	4093      	lsls	r3, r2
 802225c:	005b      	lsls	r3, r3, #1
 802225e:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022262:	9b05      	ldr	r3, [sp, #20]
 8022264:	9904      	ldr	r1, [sp, #16]
 8022266:	781b      	ldrb	r3, [r3, #0]
 8022268:	410b      	asrs	r3, r1
 802226a:	3101      	adds	r1, #1
 802226c:	b2c9      	uxtb	r1, r1
 802226e:	2908      	cmp	r1, #8
 8022270:	9104      	str	r1, [sp, #16]
 8022272:	9905      	ldr	r1, [sp, #20]
 8022274:	b2db      	uxtb	r3, r3
 8022276:	bf03      	ittte	eq
 8022278:	3102      	addeq	r1, #2
 802227a:	9105      	streq	r1, [sp, #20]
 802227c:	2100      	moveq	r1, #0
 802227e:	3101      	addne	r1, #1
 8022280:	bf14      	ite	ne
 8022282:	9105      	strne	r1, [sp, #20]
 8022284:	9104      	streq	r1, [sp, #16]
 8022286:	4313      	orrs	r3, r2
 8022288:	9910      	ldr	r1, [sp, #64]	@ 0x40
 802228a:	b29a      	uxth	r2, r3
 802228c:	4291      	cmp	r1, r2
 802228e:	d30a      	bcc.n	80222a6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8022290:	f88b 3804 	strb.w	r3, [fp, #2052]	@ 0x804
 8022294:	2301      	movs	r3, #1
 8022296:	9907      	ldr	r1, [sp, #28]
 8022298:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802229c:	d30f      	bcc.n	80222be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ea>
 802229e:	2100      	movs	r1, #0
 80222a0:	9301      	str	r3, [sp, #4]
 80222a2:	9103      	str	r1, [sp, #12]
 80222a4:	e032      	b.n	802230c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x238>
 80222a6:	9b07      	ldr	r3, [sp, #28]
 80222a8:	429a      	cmp	r2, r3
 80222aa:	d318      	bcc.n	80222de <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80222ac:	9b01      	ldr	r3, [sp, #4]
 80222ae:	f89b 1804 	ldrb.w	r1, [fp, #2052]	@ 0x804
 80222b2:	445b      	add	r3, fp
 80222b4:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80222b8:	9b01      	ldr	r3, [sp, #4]
 80222ba:	3301      	adds	r3, #1
 80222bc:	b29b      	uxth	r3, r3
 80222be:	9907      	ldr	r1, [sp, #28]
 80222c0:	f89b 0804 	ldrb.w	r0, [fp, #2052]	@ 0x804
 80222c4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80222c8:	7108      	strb	r0, [r1, #4]
 80222ca:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80222cc:	80c8      	strh	r0, [r1, #6]
 80222ce:	9801      	ldr	r0, [sp, #4]
 80222d0:	3001      	adds	r0, #1
 80222d2:	7148      	strb	r0, [r1, #5]
 80222d4:	9907      	ldr	r1, [sp, #28]
 80222d6:	3101      	adds	r1, #1
 80222d8:	b289      	uxth	r1, r1
 80222da:	9107      	str	r1, [sp, #28]
 80222dc:	e7df      	b.n	802229e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ca>
 80222de:	4611      	mov	r1, r2
 80222e0:	eb0b 0382 	add.w	r3, fp, r2, lsl #2
 80222e4:	795b      	ldrb	r3, [r3, #5]
 80222e6:	f603 0004 	addw	r0, r3, #2052	@ 0x804
 80222ea:	4458      	add	r0, fp
 80222ec:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80222ee:	4406      	add	r6, r0
 80222f0:	2e00      	cmp	r6, #0
 80222f2:	dd06      	ble.n	8022302 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x22e>
 80222f4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
 80222f8:	790e      	ldrb	r6, [r1, #4]
 80222fa:	f800 6d01 	strb.w	r6, [r0, #-1]!
 80222fe:	88c9      	ldrh	r1, [r1, #6]
 8022300:	e7f4      	b.n	80222ec <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x218>
 8022302:	f88b 1804 	strb.w	r1, [fp, #2052]	@ 0x804
 8022306:	b29b      	uxth	r3, r3
 8022308:	e7c5      	b.n	8022296 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c2>
 802230a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802230c:	4621      	mov	r1, r4
 802230e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022310:	469e      	mov	lr, r3
 8022312:	e78f      	b.n	8022234 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x160>
 8022314:	9a03      	ldr	r2, [sp, #12]
 8022316:	ebae 0305 	sub.w	r3, lr, r5
 802231a:	442a      	add	r2, r5
 802231c:	b292      	uxth	r2, r2
 802231e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8022322:	b29b      	uxth	r3, r3
 8022324:	9203      	str	r2, [sp, #12]
 8022326:	2500      	movs	r5, #0
 8022328:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802232a:	4542      	cmp	r2, r8
 802232c:	d88e      	bhi.n	802224c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x178>
 802232e:	4621      	mov	r1, r4
 8022330:	e74e      	b.n	80221d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 8022332:	458e      	cmp	lr, r1
 8022334:	bf2c      	ite	cs
 8022336:	462c      	movcs	r4, r5
 8022338:	462b      	movcc	r3, r5
 802233a:	f04f 0900 	mov.w	r9, #0
 802233e:	bf29      	itett	cs
 8022340:	ebae 0301 	subcs.w	r3, lr, r1
 8022344:	eba1 040e 	subcc.w	r4, r1, lr
 8022348:	b29b      	uxthcs	r3, r3
 802234a:	910c      	strcs	r1, [sp, #48]	@ 0x30
 802234c:	bf3c      	itt	cc
 802234e:	b2a4      	uxthcc	r4, r4
 8022350:	f8cd e030 	strcc.w	lr, [sp, #48]	@ 0x30
 8022354:	9a03      	ldr	r2, [sp, #12]
 8022356:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8022358:	444a      	add	r2, r9
 802235a:	4548      	cmp	r0, r9
 802235c:	b292      	uxth	r2, r2
 802235e:	d075      	beq.n	802244c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x378>
 8022360:	2004      	movs	r0, #4
 8022362:	4605      	mov	r5, r0
 8022364:	445a      	add	r2, fp
 8022366:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8022368:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 802236c:	fb15 0202 	smlabb	r2, r5, r2, r0
 8022370:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8022372:	5880      	ldr	r0, [r0, r2]
 8022374:	ea5f 6a10 	movs.w	sl, r0, lsr #24
 8022378:	d014      	beq.n	80223a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 802237a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802237e:	ea4f 2510 	mov.w	r5, r0, lsr #8
 8022382:	d112      	bne.n	80223aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 8022384:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8022386:	2aff      	cmp	r2, #255	@ 0xff
 8022388:	d10f      	bne.n	80223aa <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d6>
 802238a:	0942      	lsrs	r2, r0, #5
 802238c:	f425 65ff 	bic.w	r5, r5, #2040	@ 0x7f8
 8022390:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8022394:	f025 0507 	bic.w	r5, r5, #7
 8022398:	4315      	orrs	r5, r2
 802239a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 802239e:	4305      	orrs	r5, r0
 80223a0:	f828 5019 	strh.w	r5, [r8, r9, lsl #1]
 80223a4:	f109 0901 	add.w	r9, r9, #1
 80223a8:	e7d4      	b.n	8022354 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x280>
 80223aa:	f838 c019 	ldrh.w	ip, [r8, r9, lsl #1]
 80223ae:	b2ed      	uxtb	r5, r5
 80223b0:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80223b4:	f006 02fc 	and.w	r2, r6, #252	@ 0xfc
 80223b8:	9215      	str	r2, [sp, #84]	@ 0x54
 80223ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80223bc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80223c0:	fb02 fa0a 	mul.w	sl, r2, sl
 80223c4:	f10a 0201 	add.w	r2, sl, #1
 80223c8:	eb02 222a 	add.w	r2, r2, sl, asr #8
 80223cc:	1212      	asrs	r2, r2, #8
 80223ce:	fa1f fa82 	uxth.w	sl, r2
 80223d2:	43d2      	mvns	r2, r2
 80223d4:	b2c0      	uxtb	r0, r0
 80223d6:	fb16 f60a 	smulbb	r6, r6, sl
 80223da:	fb10 f00a 	smulbb	r0, r0, sl
 80223de:	ea4f 272c 	mov.w	r7, ip, asr #8
 80223e2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80223e6:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80223ea:	fa5f fc8c 	uxtb.w	ip, ip
 80223ee:	b2d2      	uxtb	r2, r2
 80223f0:	fb15 f50a 	smulbb	r5, r5, sl
 80223f4:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80223f8:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80223fc:	fb07 6702 	mla	r7, r7, r2, r6
 8022400:	fb0c 0002 	mla	r0, ip, r2, r0
 8022404:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8022406:	b2bf      	uxth	r7, r7
 8022408:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802240c:	fb06 5602 	mla	r6, r6, r2, r5
 8022410:	b280      	uxth	r0, r0
 8022412:	1c7a      	adds	r2, r7, #1
 8022414:	1c45      	adds	r5, r0, #1
 8022416:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 802241a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 802241e:	b2b6      	uxth	r6, r6
 8022420:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8022424:	f407 4778 	and.w	r7, r7, #63488	@ 0xf800
 8022428:	432f      	orrs	r7, r5
 802242a:	1c75      	adds	r5, r6, #1
 802242c:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8022430:	096d      	lsrs	r5, r5, #5
 8022432:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022436:	432f      	orrs	r7, r5
 8022438:	f828 7019 	strh.w	r7, [r8, r9, lsl #1]
 802243c:	e7b2      	b.n	80223a4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2d0>
 802243e:	bf00      	nop
 8022440:	20012104 	.word	0x20012104
 8022444:	200120fe 	.word	0x200120fe
 8022448:	fffff7fb 	.word	0xfffff7fb
 802244c:	9203      	str	r2, [sp, #12]
 802244e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8022450:	458e      	cmp	lr, r1
 8022452:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8022456:	f4ff af66 	bcc.w	8022326 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x252>
 802245a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802245c:	9906      	ldr	r1, [sp, #24]
 802245e:	8812      	ldrh	r2, [r2, #0]
 8022460:	1a52      	subs	r2, r2, r1
 8022462:	eb08 0842 	add.w	r8, r8, r2, lsl #1
 8022466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022468:	9914      	ldr	r1, [sp, #80]	@ 0x50
 802246a:	3201      	adds	r2, #1
 802246c:	428a      	cmp	r2, r1
 802246e:	9209      	str	r2, [sp, #36]	@ 0x24
 8022470:	d110      	bne.n	8022494 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3c0>
 8022472:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 8022476:	f8bd 9060 	ldrh.w	r9, [sp, #96]	@ 0x60
 802247a:	9b06      	ldr	r3, [sp, #24]
 802247c:	eba5 0509 	sub.w	r5, r5, r9
 8022480:	b2ad      	uxth	r5, r5
 8022482:	2d00      	cmp	r5, #0
 8022484:	bf0c      	ite	eq
 8022486:	4619      	moveq	r1, r3
 8022488:	2100      	movne	r1, #0
 802248a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802248c:	b289      	uxth	r1, r1
 802248e:	3301      	adds	r3, #1
 8022490:	930d      	str	r3, [sp, #52]	@ 0x34
 8022492:	e694      	b.n	80221be <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8022494:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8022498:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 802249c:	1b2d      	subs	r5, r5, r4
 802249e:	b2ad      	uxth	r5, r5
 80224a0:	2d00      	cmp	r5, #0
 80224a2:	bf18      	it	ne
 80224a4:	2400      	movne	r4, #0
 80224a6:	e73f      	b.n	8022328 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x254>
 80224a8:	4b03      	ldr	r3, [pc, #12]	@ (80224b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e4>)
 80224aa:	6818      	ldr	r0, [r3, #0]
 80224ac:	6803      	ldr	r3, [r0, #0]
 80224ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80224b0:	4798      	blx	r3
 80224b2:	b01d      	add	sp, #116	@ 0x74
 80224b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224b8:	20012104 	.word	0x20012104

080224bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80224bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224c0:	b09f      	sub	sp, #124	@ 0x7c
 80224c2:	e9cd 1213 	strd	r1, r2, [sp, #76]	@ 0x4c
 80224c6:	f89d 20a4 	ldrb.w	r2, [sp, #164]	@ 0xa4
 80224ca:	461d      	mov	r5, r3
 80224cc:	4604      	mov	r4, r0
 80224ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80224d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80224d2:	2a00      	cmp	r2, #0
 80224d4:	f000 81fc 	beq.w	80228d0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x414>
 80224d8:	6828      	ldr	r0, [r5, #0]
 80224da:	6869      	ldr	r1, [r5, #4]
 80224dc:	aa1a      	add	r2, sp, #104	@ 0x68
 80224de:	c203      	stmia	r2!, {r0, r1}
 80224e0:	6818      	ldr	r0, [r3, #0]
 80224e2:	6859      	ldr	r1, [r3, #4]
 80224e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80224e6:	c203      	stmia	r2!, {r0, r1}
 80224e8:	a81a      	add	r0, sp, #104	@ 0x68
 80224ea:	f7f8 f891 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80224ee:	4629      	mov	r1, r5
 80224f0:	a81c      	add	r0, sp, #112	@ 0x70
 80224f2:	f7f8 f8b5 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80224f6:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80224fa:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 80224fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8022502:	bfdd      	ittte	le
 8022504:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8022508:	b29a      	uxthle	r2, r3
 802250a:	fb91 f2f2 	sdivle	r2, r1, r2
 802250e:	2201      	movgt	r2, #1
 8022510:	9201      	str	r2, [sp, #4]
 8022512:	9801      	ldr	r0, [sp, #4]
 8022514:	f9bd 2072 	ldrsh.w	r2, [sp, #114]	@ 0x72
 8022518:	9901      	ldr	r1, [sp, #4]
 802251a:	fb92 f0f0 	sdiv	r0, r2, r0
 802251e:	b280      	uxth	r0, r0
 8022520:	9010      	str	r0, [sp, #64]	@ 0x40
 8022522:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8022524:	9801      	ldr	r0, [sp, #4]
 8022526:	440e      	add	r6, r1
 8022528:	fb05 2510 	mls	r5, r5, r0, r2
 802252c:	fb15 f503 	smulbb	r5, r5, r3
 8022530:	3e01      	subs	r6, #1
 8022532:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 8022536:	fb96 f6f1 	sdiv	r6, r6, r1
 802253a:	f8bd 1070 	ldrh.w	r1, [sp, #112]	@ 0x70
 802253e:	f9bd 7076 	ldrsh.w	r7, [sp, #118]	@ 0x76
 8022542:	440d      	add	r5, r1
 8022544:	4419      	add	r1, r3
 8022546:	f8bd 306a 	ldrh.w	r3, [sp, #106]	@ 0x6a
 802254a:	f8ad 1070 	strh.w	r1, [sp, #112]	@ 0x70
 802254e:	441a      	add	r2, r3
 8022550:	f9bd 3074 	ldrsh.w	r3, [sp, #116]	@ 0x74
 8022554:	f8ad 2072 	strh.w	r2, [sp, #114]	@ 0x72
 8022558:	9304      	str	r3, [sp, #16]
 802255a:	4b96      	ldr	r3, [pc, #600]	@ (80227b4 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2f8>)
 802255c:	3601      	adds	r6, #1
 802255e:	6818      	ldr	r0, [r3, #0]
 8022560:	b2b6      	uxth	r6, r6
 8022562:	6803      	ldr	r3, [r0, #0]
 8022564:	b2ad      	uxth	r5, r5
 8022566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022568:	4798      	blx	r3
 802256a:	4b93      	ldr	r3, [pc, #588]	@ (80227b8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2fc>)
 802256c:	f9bd 1072 	ldrsh.w	r1, [sp, #114]	@ 0x72
 8022570:	881a      	ldrh	r2, [r3, #0]
 8022572:	f9bd c070 	ldrsh.w	ip, [sp, #112]	@ 0x70
 8022576:	4357      	muls	r7, r2
 8022578:	fb02 c101 	mla	r1, r2, r1, ip
 802257c:	eb00 0b41 	add.w	fp, r0, r1, lsl #1
 8022580:	eb0b 0247 	add.w	r2, fp, r7, lsl #1
 8022584:	920b      	str	r2, [sp, #44]	@ 0x2c
 8022586:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8022588:	2d00      	cmp	r5, #0
 802258a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802258e:	f106 0204 	add.w	r2, r6, #4
 8022592:	9206      	str	r2, [sp, #24]
 8022594:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8022596:	bf18      	it	ne
 8022598:	2100      	movne	r1, #0
 802259a:	ea6f 0202 	mvn.w	r2, r2
 802259e:	b2d2      	uxtb	r2, r2
 80225a0:	9215      	str	r2, [sp, #84]	@ 0x54
 80225a2:	9a04      	ldr	r2, [sp, #16]
 80225a4:	9318      	str	r3, [sp, #96]	@ 0x60
 80225a6:	bf08      	it	eq
 80225a8:	4611      	moveq	r1, r2
 80225aa:	2200      	movs	r2, #0
 80225ac:	4b83      	ldr	r3, [pc, #524]	@ (80227bc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x300>)
 80225ae:	b289      	uxth	r1, r1
 80225b0:	1b1b      	subs	r3, r3, r4
 80225b2:	920d      	str	r2, [sp, #52]	@ 0x34
 80225b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80225b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80225b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80225ba:	fa12 f383 	uxtah	r3, r2, r3
 80225be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80225c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80225c4:	3304      	adds	r3, #4
 80225c6:	9307      	str	r3, [sp, #28]
 80225c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80225ca:	455b      	cmp	r3, fp
 80225cc:	f240 817b 	bls.w	80228c6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x40a>
 80225d0:	f8bd 306c 	ldrh.w	r3, [sp, #108]	@ 0x6c
 80225d4:	f04f 0801 	mov.w	r8, #1
 80225d8:	fbb5 f3f3 	udiv	r3, r5, r3
 80225dc:	9a01      	ldr	r2, [sp, #4]
 80225de:	9807      	ldr	r0, [sp, #28]
 80225e0:	1ad3      	subs	r3, r2, r3
 80225e2:	b29b      	uxth	r3, r3
 80225e4:	9316      	str	r3, [sp, #88]	@ 0x58
 80225e6:	9b07      	ldr	r3, [sp, #28]
 80225e8:	7800      	ldrb	r0, [r0, #0]
 80225ea:	785a      	ldrb	r2, [r3, #1]
 80225ec:	789b      	ldrb	r3, [r3, #2]
 80225ee:	9011      	str	r0, [sp, #68]	@ 0x44
 80225f0:	021b      	lsls	r3, r3, #8
 80225f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80225f6:	9a07      	ldr	r2, [sp, #28]
 80225f8:	3001      	adds	r0, #1
 80225fa:	78d2      	ldrb	r2, [r2, #3]
 80225fc:	9005      	str	r0, [sp, #20]
 80225fe:	4313      	orrs	r3, r2
 8022600:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8022602:	46c4      	mov	ip, r8
 8022604:	441a      	add	r2, r3
 8022606:	1c50      	adds	r0, r2, #1
 8022608:	9003      	str	r0, [sp, #12]
 802260a:	7852      	ldrb	r2, [r2, #1]
 802260c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 802260e:	0212      	lsls	r2, r2, #8
 8022610:	5cc3      	ldrb	r3, [r0, r3]
 8022612:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8022616:	431a      	orrs	r2, r3
 8022618:	b293      	uxth	r3, r2
 802261a:	930c      	str	r3, [sp, #48]	@ 0x30
 802261c:	2300      	movs	r3, #0
 802261e:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8022622:	9308      	str	r3, [sp, #32]
 8022624:	461a      	mov	r2, r3
 8022626:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802262a:	f8cd 8008 	str.w	r8, [sp, #8]
 802262e:	930e      	str	r3, [sp, #56]	@ 0x38
 8022630:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8022634:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022636:	2d00      	cmp	r5, #0
 8022638:	d07c      	beq.n	8022734 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 802263a:	45ac      	cmp	ip, r5
 802263c:	d26c      	bcs.n	8022718 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 802263e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022640:	eba5 050c 	sub.w	r5, r5, ip
 8022644:	455b      	cmp	r3, fp
 8022646:	b2ad      	uxth	r5, r5
 8022648:	4608      	mov	r0, r1
 802264a:	d802      	bhi.n	8022652 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 802264c:	e070      	b.n	8022730 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>
 802264e:	2b00      	cmp	r3, #0
 8022650:	d15c      	bne.n	802270c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 8022652:	9b03      	ldr	r3, [sp, #12]
 8022654:	9a02      	ldr	r2, [sp, #8]
 8022656:	785b      	ldrb	r3, [r3, #1]
 8022658:	f1c2 0207 	rsb	r2, r2, #7
 802265c:	4093      	lsls	r3, r2
 802265e:	005b      	lsls	r3, r3, #1
 8022660:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8022664:	9b03      	ldr	r3, [sp, #12]
 8022666:	9902      	ldr	r1, [sp, #8]
 8022668:	781b      	ldrb	r3, [r3, #0]
 802266a:	410b      	asrs	r3, r1
 802266c:	3101      	adds	r1, #1
 802266e:	b2c9      	uxtb	r1, r1
 8022670:	2908      	cmp	r1, #8
 8022672:	9102      	str	r1, [sp, #8]
 8022674:	9903      	ldr	r1, [sp, #12]
 8022676:	b2db      	uxtb	r3, r3
 8022678:	bf03      	ittte	eq
 802267a:	3102      	addeq	r1, #2
 802267c:	9103      	streq	r1, [sp, #12]
 802267e:	2100      	moveq	r1, #0
 8022680:	3101      	addne	r1, #1
 8022682:	bf14      	ite	ne
 8022684:	9103      	strne	r1, [sp, #12]
 8022686:	9102      	streq	r1, [sp, #8]
 8022688:	4313      	orrs	r3, r2
 802268a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 802268c:	b29a      	uxth	r2, r3
 802268e:	4291      	cmp	r1, r2
 8022690:	d30a      	bcc.n	80226a8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8022692:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8022696:	2301      	movs	r3, #1
 8022698:	9905      	ldr	r1, [sp, #20]
 802269a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 802269e:	d30f      	bcc.n	80226c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x204>
 80226a0:	2100      	movs	r1, #0
 80226a2:	4698      	mov	r8, r3
 80226a4:	9100      	str	r1, [sp, #0]
 80226a6:	e032      	b.n	802270e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 80226a8:	9b05      	ldr	r3, [sp, #20]
 80226aa:	429a      	cmp	r2, r3
 80226ac:	d318      	bcc.n	80226e0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x224>
 80226ae:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 80226b2:	eb04 0308 	add.w	r3, r4, r8
 80226b6:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 80226ba:	f108 0301 	add.w	r3, r8, #1
 80226be:	b29b      	uxth	r3, r3
 80226c0:	9905      	ldr	r1, [sp, #20]
 80226c2:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 80226c6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80226ca:	710e      	strb	r6, [r1, #4]
 80226cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80226ce:	80ce      	strh	r6, [r1, #6]
 80226d0:	f108 0601 	add.w	r6, r8, #1
 80226d4:	714e      	strb	r6, [r1, #5]
 80226d6:	9905      	ldr	r1, [sp, #20]
 80226d8:	3101      	adds	r1, #1
 80226da:	b289      	uxth	r1, r1
 80226dc:	9105      	str	r1, [sp, #20]
 80226de:	e7df      	b.n	80226a0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 80226e0:	4611      	mov	r1, r2
 80226e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80226e6:	795b      	ldrb	r3, [r3, #5]
 80226e8:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 80226ec:	4426      	add	r6, r4
 80226ee:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 80226f0:	4437      	add	r7, r6
 80226f2:	2f00      	cmp	r7, #0
 80226f4:	dd06      	ble.n	8022704 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 80226f6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80226fa:	790f      	ldrb	r7, [r1, #4]
 80226fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022700:	88c9      	ldrh	r1, [r1, #6]
 8022702:	e7f4      	b.n	80226ee <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x232>
 8022704:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8022708:	b29b      	uxth	r3, r3
 802270a:	e7c5      	b.n	8022698 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1dc>
 802270c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802270e:	920c      	str	r2, [sp, #48]	@ 0x30
 8022710:	4601      	mov	r1, r0
 8022712:	9a00      	ldr	r2, [sp, #0]
 8022714:	469c      	mov	ip, r3
 8022716:	e78e      	b.n	8022636 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8022718:	1957      	adds	r7, r2, r5
 802271a:	ebac 0305 	sub.w	r3, ip, r5
 802271e:	b2ba      	uxth	r2, r7
 8022720:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8022724:	b29b      	uxth	r3, r3
 8022726:	9200      	str	r2, [sp, #0]
 8022728:	2500      	movs	r5, #0
 802272a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802272c:	455a      	cmp	r2, fp
 802272e:	d88e      	bhi.n	802264e <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 8022730:	4601      	mov	r1, r0
 8022732:	e749      	b.n	80225c8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x10c>
 8022734:	458c      	cmp	ip, r1
 8022736:	bf2c      	ite	cs
 8022738:	4628      	movcs	r0, r5
 802273a:	462b      	movcc	r3, r5
 802273c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802273e:	bf27      	ittee	cs
 8022740:	ebac 0301 	subcs.w	r3, ip, r1
 8022744:	9109      	strcs	r1, [sp, #36]	@ 0x24
 8022746:	eba1 000c 	subcc.w	r0, r1, ip
 802274a:	f8cd c024 	strcc.w	ip, [sp, #36]	@ 0x24
 802274e:	bf2c      	ite	cs
 8022750:	b29b      	uxthcs	r3, r3
 8022752:	b280      	uxthcc	r0, r0
 8022754:	2dff      	cmp	r5, #255	@ 0xff
 8022756:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8022758:	eb02 0705 	add.w	r7, r2, r5
 802275c:	b2bd      	uxth	r5, r7
 802275e:	9500      	str	r5, [sp, #0]
 8022760:	d12e      	bne.n	80227c0 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>
 8022762:	465e      	mov	r6, fp
 8022764:	9d00      	ldr	r5, [sp, #0]
 8022766:	42aa      	cmp	r2, r5
 8022768:	f040 8083 	bne.w	8022872 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3b6>
 802276c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802276e:	458c      	cmp	ip, r1
 8022770:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022774:	d3d8      	bcc.n	8022728 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26c>
 8022776:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8022778:	9904      	ldr	r1, [sp, #16]
 802277a:	8812      	ldrh	r2, [r2, #0]
 802277c:	1a52      	subs	r2, r2, r1
 802277e:	eb0b 0b42 	add.w	fp, fp, r2, lsl #1
 8022782:	9a08      	ldr	r2, [sp, #32]
 8022784:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8022786:	3201      	adds	r2, #1
 8022788:	428a      	cmp	r2, r1
 802278a:	9208      	str	r2, [sp, #32]
 802278c:	f040 8091 	bne.w	80228b2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f6>
 8022790:	f8bd 5070 	ldrh.w	r5, [sp, #112]	@ 0x70
 8022794:	f8bd c068 	ldrh.w	ip, [sp, #104]	@ 0x68
 8022798:	9b04      	ldr	r3, [sp, #16]
 802279a:	eba5 050c 	sub.w	r5, r5, ip
 802279e:	b2ad      	uxth	r5, r5
 80227a0:	2d00      	cmp	r5, #0
 80227a2:	bf0c      	ite	eq
 80227a4:	4619      	moveq	r1, r3
 80227a6:	2100      	movne	r1, #0
 80227a8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80227aa:	b289      	uxth	r1, r1
 80227ac:	3301      	adds	r3, #1
 80227ae:	930d      	str	r3, [sp, #52]	@ 0x34
 80227b0:	e701      	b.n	80225b6 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xfa>
 80227b2:	bf00      	nop
 80227b4:	20012104 	.word	0x20012104
 80227b8:	200120fe 	.word	0x200120fe
 80227bc:	fffff7fb 	.word	0xfffff7fb
 80227c0:	46d9      	mov	r9, fp
 80227c2:	9d00      	ldr	r5, [sp, #0]
 80227c4:	42aa      	cmp	r2, r5
 80227c6:	d0d1      	beq.n	802276c <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b0>
 80227c8:	1c55      	adds	r5, r2, #1
 80227ca:	4422      	add	r2, r4
 80227cc:	f892 e804 	ldrb.w	lr, [r2, #2052]	@ 0x804
 80227d0:	9a06      	ldr	r2, [sp, #24]
 80227d2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80227d6:	4472      	add	r2, lr
 80227d8:	9212      	str	r2, [sp, #72]	@ 0x48
 80227da:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80227dc:	f8b9 2000 	ldrh.w	r2, [r9]
 80227e0:	f897 a002 	ldrb.w	sl, [r7, #2]
 80227e4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80227e6:	1216      	asrs	r6, r2, #8
 80227e8:	fb1a fa07 	smulbb	sl, sl, r7
 80227ec:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 80227f0:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80227f2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80227f6:	fb06 a607 	mla	r6, r6, r7, sl
 80227fa:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 80227fc:	9517      	str	r5, [sp, #92]	@ 0x5c
 80227fe:	f897 a001 	ldrb.w	sl, [r7, #1]
 8022802:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8022804:	10d5      	asrs	r5, r2, #3
 8022806:	fb1a fa07 	smulbb	sl, sl, r7
 802280a:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 802280e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8022810:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022814:	fb05 a507 	mla	r5, r5, r7, sl
 8022818:	9f06      	ldr	r7, [sp, #24]
 802281a:	00d2      	lsls	r2, r2, #3
 802281c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022820:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8022822:	b2d2      	uxtb	r2, r2
 8022824:	fb1e fe07 	smulbb	lr, lr, r7
 8022828:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 802282a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802282e:	fb02 e207 	mla	r2, r2, r7, lr
 8022832:	b2b6      	uxth	r6, r6
 8022834:	b292      	uxth	r2, r2
 8022836:	b2ad      	uxth	r5, r5
 8022838:	f106 0a01 	add.w	sl, r6, #1
 802283c:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8022840:	f102 0e01 	add.w	lr, r2, #1
 8022844:	f105 0a01 	add.w	sl, r5, #1
 8022848:	eb0e 2e12 	add.w	lr, lr, r2, lsr #8
 802284c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8022850:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8022854:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8022858:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 802285c:	ea4e 0606 	orr.w	r6, lr, r6
 8022860:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8022864:	ea46 060a 	orr.w	r6, r6, sl
 8022868:	f829 6b02 	strh.w	r6, [r9], #2
 802286c:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8022870:	e7a7      	b.n	80227c2 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x306>
 8022872:	f102 0e01 	add.w	lr, r2, #1
 8022876:	4422      	add	r2, r4
 8022878:	f892 5804 	ldrb.w	r5, [r2, #2052]	@ 0x804
 802287c:	9a06      	ldr	r2, [sp, #24]
 802287e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022882:	eb02 0a05 	add.w	sl, r2, r5
 8022886:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802288a:	4a13      	ldr	r2, [pc, #76]	@ (80228d8 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x41c>)
 802288c:	9f06      	ldr	r7, [sp, #24]
 802288e:	ea02 2909 	and.w	r9, r2, r9, lsl #8
 8022892:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022896:	00d2      	lsls	r2, r2, #3
 8022898:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802289c:	ea49 0202 	orr.w	r2, r9, r2
 80228a0:	f817 9005 	ldrb.w	r9, [r7, r5]
 80228a4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 80228a8:	f826 2b02 	strh.w	r2, [r6], #2
 80228ac:	fa1f f28e 	uxth.w	r2, lr
 80228b0:	e758      	b.n	8022764 <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>
 80228b2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80228b6:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 80228ba:	1a2d      	subs	r5, r5, r0
 80228bc:	b2ad      	uxth	r5, r5
 80228be:	2d00      	cmp	r5, #0
 80228c0:	bf18      	it	ne
 80228c2:	2000      	movne	r0, #0
 80228c4:	e731      	b.n	802272a <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26e>
 80228c6:	4b05      	ldr	r3, [pc, #20]	@ (80228dc <_ZN8touchgfx8LCD16bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x420>)
 80228c8:	6818      	ldr	r0, [r3, #0]
 80228ca:	6803      	ldr	r3, [r0, #0]
 80228cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80228ce:	4798      	blx	r3
 80228d0:	b01f      	add	sp, #124	@ 0x7c
 80228d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228d6:	bf00      	nop
 80228d8:	fffff800 	.word	0xfffff800
 80228dc:	20012104 	.word	0x20012104

080228e0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80228e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228e4:	469b      	mov	fp, r3
 80228e6:	4616      	mov	r6, r2
 80228e8:	b091      	sub	sp, #68	@ 0x44
 80228ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80228ee:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 80228f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80228f6:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 80228fa:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80228fe:	4604      	mov	r4, r0
 8022900:	460d      	mov	r5, r1
 8022902:	4640      	mov	r0, r8
 8022904:	4659      	mov	r1, fp
 8022906:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802290a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 802290e:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8022912:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8022916:	f7f2 fe4b 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 802291a:	4631      	mov	r1, r6
 802291c:	4640      	mov	r0, r8
 802291e:	f7f2 fe47 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 8022922:	4b74      	ldr	r3, [pc, #464]	@ (8022af4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8022924:	8818      	ldrh	r0, [r3, #0]
 8022926:	4b74      	ldr	r3, [pc, #464]	@ (8022af8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8022928:	b202      	sxth	r2, r0
 802292a:	8819      	ldrh	r1, [r3, #0]
 802292c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8022930:	b20e      	sxth	r6, r1
 8022932:	2b00      	cmp	r3, #0
 8022934:	da07      	bge.n	8022946 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8022936:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 802293a:	4463      	add	r3, ip
 802293c:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8022940:	2300      	movs	r3, #0
 8022942:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8022946:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 802294a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 802294e:	1ad2      	subs	r2, r2, r3
 8022950:	4594      	cmp	ip, r2
 8022952:	bfc4      	itt	gt
 8022954:	1ac2      	subgt	r2, r0, r3
 8022956:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 802295a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 802295e:	2a00      	cmp	r2, #0
 8022960:	da07      	bge.n	8022972 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8022962:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8022966:	4462      	add	r2, ip
 8022968:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 802296c:	2200      	movs	r2, #0
 802296e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8022972:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8022976:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 802297a:	eba6 060a 	sub.w	r6, r6, sl
 802297e:	42b2      	cmp	r2, r6
 8022980:	bfc4      	itt	gt
 8022982:	eba1 020a 	subgt.w	r2, r1, sl
 8022986:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 802298a:	4a5c      	ldr	r2, [pc, #368]	@ (8022afc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 802298c:	7812      	ldrb	r2, [r2, #0]
 802298e:	b9a2      	cbnz	r2, 80229ba <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8022990:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8022994:	4286      	cmp	r6, r0
 8022996:	4640      	mov	r0, r8
 8022998:	9303      	str	r3, [sp, #12]
 802299a:	bf14      	ite	ne
 802299c:	2600      	movne	r6, #0
 802299e:	2601      	moveq	r6, #1
 80229a0:	f7f2 fe49 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 80229a4:	9b03      	ldr	r3, [sp, #12]
 80229a6:	b160      	cbz	r0, 80229c2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 80229a8:	2300      	movs	r3, #0
 80229aa:	8023      	strh	r3, [r4, #0]
 80229ac:	8063      	strh	r3, [r4, #2]
 80229ae:	80a3      	strh	r3, [r4, #4]
 80229b0:	4620      	mov	r0, r4
 80229b2:	80e3      	strh	r3, [r4, #6]
 80229b4:	b011      	add	sp, #68	@ 0x44
 80229b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229ba:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 80229be:	428e      	cmp	r6, r1
 80229c0:	e7e9      	b.n	8022996 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 80229c2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 80229c6:	a90e      	add	r1, sp, #56	@ 0x38
 80229c8:	9205      	str	r2, [sp, #20]
 80229ca:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 80229ce:	900e      	str	r0, [sp, #56]	@ 0x38
 80229d0:	9206      	str	r2, [sp, #24]
 80229d2:	f8bb 2000 	ldrh.w	r2, [fp]
 80229d6:	a80c      	add	r0, sp, #48	@ 0x30
 80229d8:	1a9b      	subs	r3, r3, r2
 80229da:	b21b      	sxth	r3, r3
 80229dc:	9303      	str	r3, [sp, #12]
 80229de:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80229e2:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 80229e6:	ebaa 0a03 	sub.w	sl, sl, r3
 80229ea:	fa0f f38a 	sxth.w	r3, sl
 80229ee:	9304      	str	r3, [sp, #16]
 80229f0:	9b03      	ldr	r3, [sp, #12]
 80229f2:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 80229f6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 80229fa:	9b04      	ldr	r3, [sp, #16]
 80229fc:	f8df b104 	ldr.w	fp, [pc, #260]	@ 8022b04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8022a00:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8022a04:	9b05      	ldr	r3, [sp, #20]
 8022a06:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8022a0a:	9b06      	ldr	r3, [sp, #24]
 8022a0c:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8022a10:	f7f7 fe26 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022a14:	4640      	mov	r0, r8
 8022a16:	f7f7 fdfb 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a1a:	a80e      	add	r0, sp, #56	@ 0x38
 8022a1c:	f7f7 fdf8 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022a20:	4b37      	ldr	r3, [pc, #220]	@ (8022b00 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8022a22:	4628      	mov	r0, r5
 8022a24:	881b      	ldrh	r3, [r3, #0]
 8022a26:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8022a2a:	9307      	str	r3, [sp, #28]
 8022a2c:	682b      	ldr	r3, [r5, #0]
 8022a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a30:	4798      	blx	r3
 8022a32:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8022a36:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8022a3a:	4681      	mov	r9, r0
 8022a3c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8022a40:	f8db 0000 	ldr.w	r0, [fp]
 8022a44:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8022a46:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8022a4a:	6803      	ldr	r3, [r0, #0]
 8022a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8022a4e:	4798      	blx	r3
 8022a50:	4607      	mov	r7, r0
 8022a52:	f8db 0000 	ldr.w	r0, [fp]
 8022a56:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8022a5a:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8022a5e:	6803      	ldr	r3, [r0, #0]
 8022a60:	9109      	str	r1, [sp, #36]	@ 0x24
 8022a62:	9208      	str	r2, [sp, #32]
 8022a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022a66:	4798      	blx	r3
 8022a68:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8022a6c:	f010 0f01 	tst.w	r0, #1
 8022a70:	d012      	beq.n	8022a98 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8022a72:	f8db 0000 	ldr.w	r0, [fp]
 8022a76:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8022a7a:	6803      	ldr	r3, [r0, #0]
 8022a7c:	9200      	str	r2, [sp, #0]
 8022a7e:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8022a80:	e898 0006 	ldmia.w	r8, {r1, r2}
 8022a84:	462b      	mov	r3, r5
 8022a86:	47b0      	blx	r6
 8022a88:	9b03      	ldr	r3, [sp, #12]
 8022a8a:	8023      	strh	r3, [r4, #0]
 8022a8c:	9b04      	ldr	r3, [sp, #16]
 8022a8e:	8063      	strh	r3, [r4, #2]
 8022a90:	9b05      	ldr	r3, [sp, #20]
 8022a92:	80a3      	strh	r3, [r4, #4]
 8022a94:	9b06      	ldr	r3, [sp, #24]
 8022a96:	e78b      	b.n	80229b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8022a98:	fb09 f202 	mul.w	r2, r9, r2
 8022a9c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8022aa0:	440f      	add	r7, r1
 8022aa2:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 8022aa6:	b166      	cbz	r6, 8022ac2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8022aa8:	9a07      	ldr	r2, [sp, #28]
 8022aaa:	4592      	cmp	sl, r2
 8022aac:	d109      	bne.n	8022ac2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8022aae:	f8db 0000 	ldr.w	r0, [fp]
 8022ab2:	fb09 f303 	mul.w	r3, r9, r3
 8022ab6:	6802      	ldr	r2, [r0, #0]
 8022ab8:	4629      	mov	r1, r5
 8022aba:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8022abc:	463a      	mov	r2, r7
 8022abe:	47b0      	blx	r6
 8022ac0:	e7e2      	b.n	8022a88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8022ac2:	fb0a f303 	mul.w	r3, sl, r3
 8022ac6:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8022b04 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8022aca:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8022ace:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8022ad2:	4545      	cmp	r5, r8
 8022ad4:	d2d8      	bcs.n	8022a88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8022ad6:	f8db 0000 	ldr.w	r0, [fp]
 8022ada:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8022ade:	6802      	ldr	r2, [r0, #0]
 8022ae0:	4629      	mov	r1, r5
 8022ae2:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8022ae6:	005b      	lsls	r3, r3, #1
 8022ae8:	463a      	mov	r2, r7
 8022aea:	47d0      	blx	sl
 8022aec:	444f      	add	r7, r9
 8022aee:	4435      	add	r5, r6
 8022af0:	e7ef      	b.n	8022ad2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8022af2:	bf00      	nop
 8022af4:	200120f8 	.word	0x200120f8
 8022af8:	200120fa 	.word	0x200120fa
 8022afc:	200120fc 	.word	0x200120fc
 8022b00:	200120fe 	.word	0x200120fe
 8022b04:	20012104 	.word	0x20012104

08022b08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8022b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022b0a:	4606      	mov	r6, r0
 8022b0c:	b087      	sub	sp, #28
 8022b0e:	460c      	mov	r4, r1
 8022b10:	4617      	mov	r7, r2
 8022b12:	461d      	mov	r5, r3
 8022b14:	b333      	cbz	r3, 8022b64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022b16:	4608      	mov	r0, r1
 8022b18:	f7f2 fd8d 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022b1c:	bb10      	cbnz	r0, 8022b64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022b1e:	6820      	ldr	r0, [r4, #0]
 8022b20:	6861      	ldr	r1, [r4, #4]
 8022b22:	ab04      	add	r3, sp, #16
 8022b24:	4c1b      	ldr	r4, [pc, #108]	@ (8022b94 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8022b26:	c303      	stmia	r3!, {r0, r1}
 8022b28:	a804      	add	r0, sp, #16
 8022b2a:	f7f7 fd71 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022b2e:	6820      	ldr	r0, [r4, #0]
 8022b30:	6803      	ldr	r3, [r0, #0]
 8022b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022b34:	4798      	blx	r3
 8022b36:	2dff      	cmp	r5, #255	@ 0xff
 8022b38:	d016      	beq.n	8022b68 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8022b3a:	f010 0f08 	tst.w	r0, #8
 8022b3e:	6820      	ldr	r0, [r4, #0]
 8022b40:	d015      	beq.n	8022b6e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8022b42:	2400      	movs	r4, #0
 8022b44:	6801      	ldr	r1, [r0, #0]
 8022b46:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8022b4a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8022b4e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8022b52:	9401      	str	r4, [sp, #4]
 8022b54:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8022b58:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8022b5c:	9400      	str	r4, [sp, #0]
 8022b5e:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8022b60:	4639      	mov	r1, r7
 8022b62:	47a0      	blx	r4
 8022b64:	b007      	add	sp, #28
 8022b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b68:	f010 0f02 	tst.w	r0, #2
 8022b6c:	e7e7      	b.n	8022b3e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8022b6e:	6803      	ldr	r3, [r0, #0]
 8022b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022b72:	4798      	blx	r3
 8022b74:	4b08      	ldr	r3, [pc, #32]	@ (8022b98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8022b76:	4601      	mov	r1, r0
 8022b78:	881a      	ldrh	r2, [r3, #0]
 8022b7a:	e9cd 7500 	strd	r7, r5, [sp]
 8022b7e:	6833      	ldr	r3, [r6, #0]
 8022b80:	4630      	mov	r0, r6
 8022b82:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8022b84:	ab04      	add	r3, sp, #16
 8022b86:	47a8      	blx	r5
 8022b88:	6820      	ldr	r0, [r4, #0]
 8022b8a:	6803      	ldr	r3, [r0, #0]
 8022b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022b8e:	4798      	blx	r3
 8022b90:	e7e8      	b.n	8022b64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8022b92:	bf00      	nop
 8022b94:	20012104 	.word	0x20012104
 8022b98:	200120fe 	.word	0x200120fe

08022b9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8022b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ba0:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 8022ba4:	4688      	mov	r8, r1
 8022ba6:	4614      	mov	r4, r2
 8022ba8:	461d      	mov	r5, r3
 8022baa:	9e08      	ldr	r6, [sp, #32]
 8022bac:	2f00      	cmp	r7, #0
 8022bae:	f000 80a9 	beq.w	8022d04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022bb2:	4618      	mov	r0, r3
 8022bb4:	f7f2 fd3f 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8022bb8:	2800      	cmp	r0, #0
 8022bba:	f040 80a3 	bne.w	8022d04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022bbe:	f9b5 1000 	ldrsh.w	r1, [r5]
 8022bc2:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8022bc6:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8022bca:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8022bce:	fb04 1303 	mla	r3, r4, r3, r1
 8022bd2:	4365      	muls	r5, r4
 8022bd4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8022bd8:	2fff      	cmp	r7, #255	@ 0xff
 8022bda:	eba4 0200 	sub.w	r2, r4, r0
 8022bde:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 8022be2:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8022be6:	d04a      	beq.n	8022c7e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8022be8:	b2bc      	uxth	r4, r7
 8022bea:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8022bee:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 8022bf2:	fa5f f788 	uxtb.w	r7, r8
 8022bf6:	b2f3      	uxtb	r3, r6
 8022bf8:	fb0e fe04 	mul.w	lr, lr, r4
 8022bfc:	4367      	muls	r7, r4
 8022bfe:	4363      	muls	r3, r4
 8022c00:	0040      	lsls	r0, r0, #1
 8022c02:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8022c06:	fa1f fc8c 	uxth.w	ip, ip
 8022c0a:	42a9      	cmp	r1, r5
 8022c0c:	d27a      	bcs.n	8022d04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022c0e:	eb01 0900 	add.w	r9, r1, r0
 8022c12:	4549      	cmp	r1, r9
 8022c14:	d231      	bcs.n	8022c7a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8022c16:	880a      	ldrh	r2, [r1, #0]
 8022c18:	1214      	asrs	r4, r2, #8
 8022c1a:	10d6      	asrs	r6, r2, #3
 8022c1c:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8022c20:	00d2      	lsls	r2, r2, #3
 8022c22:	b2d2      	uxtb	r2, r2
 8022c24:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022c28:	fb14 f40c 	smulbb	r4, r4, ip
 8022c2c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022c30:	fb12 f20c 	smulbb	r2, r2, ip
 8022c34:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8022c38:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8022c3c:	4474      	add	r4, lr
 8022c3e:	fb16 f60c 	smulbb	r6, r6, ip
 8022c42:	b2a4      	uxth	r4, r4
 8022c44:	441a      	add	r2, r3
 8022c46:	b292      	uxth	r2, r2
 8022c48:	f104 0a01 	add.w	sl, r4, #1
 8022c4c:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8022c50:	f102 0a01 	add.w	sl, r2, #1
 8022c54:	443e      	add	r6, r7
 8022c56:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8022c5a:	b2b6      	uxth	r6, r6
 8022c5c:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8022c60:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8022c64:	4322      	orrs	r2, r4
 8022c66:	1c74      	adds	r4, r6, #1
 8022c68:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8022c6c:	0976      	lsrs	r6, r6, #5
 8022c6e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8022c72:	4332      	orrs	r2, r6
 8022c74:	f821 2b02 	strh.w	r2, [r1], #2
 8022c78:	e7cb      	b.n	8022c12 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8022c7a:	4441      	add	r1, r8
 8022c7c:	e7c5      	b.n	8022c0a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8022c7e:	4f22      	ldr	r7, [pc, #136]	@ (8022d08 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8022c80:	0973      	lsrs	r3, r6, #5
 8022c82:	ea08 0707 	and.w	r7, r8, r7
 8022c86:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022c8a:	433b      	orrs	r3, r7
 8022c8c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8022c90:	4333      	orrs	r3, r6
 8022c92:	07e7      	lsls	r7, r4, #31
 8022c94:	b29b      	uxth	r3, r3
 8022c96:	d50b      	bpl.n	8022cb0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8022c98:	0040      	lsls	r0, r0, #1
 8022c9a:	0052      	lsls	r2, r2, #1
 8022c9c:	42a9      	cmp	r1, r5
 8022c9e:	d231      	bcs.n	8022d04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022ca0:	180c      	adds	r4, r1, r0
 8022ca2:	42a1      	cmp	r1, r4
 8022ca4:	d202      	bcs.n	8022cac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 8022ca6:	f821 3b02 	strh.w	r3, [r1], #2
 8022caa:	e7fa      	b.n	8022ca2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8022cac:	4411      	add	r1, r2
 8022cae:	e7f5      	b.n	8022c9c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8022cb0:	078e      	lsls	r6, r1, #30
 8022cb2:	d008      	beq.n	8022cc6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 8022cb4:	460a      	mov	r2, r1
 8022cb6:	0066      	lsls	r6, r4, #1
 8022cb8:	42aa      	cmp	r2, r5
 8022cba:	d202      	bcs.n	8022cc2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8022cbc:	8013      	strh	r3, [r2, #0]
 8022cbe:	4432      	add	r2, r6
 8022cc0:	e7fa      	b.n	8022cb8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 8022cc2:	3102      	adds	r1, #2
 8022cc4:	3801      	subs	r0, #1
 8022cc6:	07c2      	lsls	r2, r0, #31
 8022cc8:	d50b      	bpl.n	8022ce2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8022cca:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8022cce:	3a01      	subs	r2, #1
 8022cd0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8022cd4:	0066      	lsls	r6, r4, #1
 8022cd6:	42aa      	cmp	r2, r5
 8022cd8:	d202      	bcs.n	8022ce0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8022cda:	8013      	strh	r3, [r2, #0]
 8022cdc:	4432      	add	r2, r6
 8022cde:	e7fa      	b.n	8022cd6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8022ce0:	3801      	subs	r0, #1
 8022ce2:	b178      	cbz	r0, 8022d04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022ce4:	1040      	asrs	r0, r0, #1
 8022ce6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8022cea:	0080      	lsls	r0, r0, #2
 8022cec:	0064      	lsls	r4, r4, #1
 8022cee:	42a9      	cmp	r1, r5
 8022cf0:	d208      	bcs.n	8022d04 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8022cf2:	460a      	mov	r2, r1
 8022cf4:	180e      	adds	r6, r1, r0
 8022cf6:	42b2      	cmp	r2, r6
 8022cf8:	d202      	bcs.n	8022d00 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8022cfa:	f842 3b04 	str.w	r3, [r2], #4
 8022cfe:	e7fa      	b.n	8022cf6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 8022d00:	4421      	add	r1, r4
 8022d02:	e7f4      	b.n	8022cee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8022d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d08:	00fff800 	.word	0x00fff800

08022d0c <_ZN8touchgfx8LCD16bppC1Ev>:
 8022d0c:	2200      	movs	r2, #0
 8022d0e:	4912      	ldr	r1, [pc, #72]	@ (8022d58 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 8022d10:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8022d14:	6001      	str	r1, [r0, #0]
 8022d16:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8022d1a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8022d1e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8022d22:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 8022d26:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8022d2a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8022d2e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8022d32:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 8022d36:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8022d3a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8022d3e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 8022d42:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 8022d46:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8022d4a:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8022d4e:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 8022d52:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 8022d56:	4770      	bx	lr
 8022d58:	0803084c 	.word	0x0803084c

08022d5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8022d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d60:	460d      	mov	r5, r1
 8022d62:	4604      	mov	r4, r0
 8022d64:	4699      	mov	r9, r3
 8022d66:	b08d      	sub	sp, #52	@ 0x34
 8022d68:	6808      	ldr	r0, [r1, #0]
 8022d6a:	6849      	ldr	r1, [r1, #4]
 8022d6c:	ab08      	add	r3, sp, #32
 8022d6e:	c303      	stmia	r3!, {r0, r1}
 8022d70:	6810      	ldr	r0, [r2, #0]
 8022d72:	6851      	ldr	r1, [r2, #4]
 8022d74:	ab0a      	add	r3, sp, #40	@ 0x28
 8022d76:	c303      	stmia	r3!, {r0, r1}
 8022d78:	a808      	add	r0, sp, #32
 8022d7a:	f7f7 fc49 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022d7e:	4629      	mov	r1, r5
 8022d80:	a80a      	add	r0, sp, #40	@ 0x28
 8022d82:	f7f7 fc6d 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022d86:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8022d8a:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8022d8e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8022d92:	4d63      	ldr	r5, [pc, #396]	@ (8022f20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022d94:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022d98:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022d9c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8022da0:	6828      	ldr	r0, [r5, #0]
 8022da2:	440a      	add	r2, r1
 8022da4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8022da8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8022dac:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8022db0:	4413      	add	r3, r2
 8022db2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8022db6:	6803      	ldr	r3, [r0, #0]
 8022db8:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8022dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022dbe:	4798      	blx	r3
 8022dc0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022dc4:	d119      	bne.n	8022dfa <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8022dc6:	f010 0f20 	tst.w	r0, #32
 8022dca:	6828      	ldr	r0, [r5, #0]
 8022dcc:	d018      	beq.n	8022e00 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8022dce:	2500      	movs	r5, #0
 8022dd0:	6801      	ldr	r1, [r0, #0]
 8022dd2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8022dd6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8022dda:	b2b6      	uxth	r6, r6
 8022ddc:	9502      	str	r5, [sp, #8]
 8022dde:	fa1f f588 	uxth.w	r5, r8
 8022de2:	9601      	str	r6, [sp, #4]
 8022de4:	9500      	str	r5, [sp, #0]
 8022de6:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8022de8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8022dec:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8022df0:	4621      	mov	r1, r4
 8022df2:	47a8      	blx	r5
 8022df4:	b00d      	add	sp, #52	@ 0x34
 8022df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dfa:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8022dfe:	e7e4      	b.n	8022dca <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8022e00:	6803      	ldr	r3, [r0, #0]
 8022e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022e04:	4798      	blx	r3
 8022e06:	4947      	ldr	r1, [pc, #284]	@ (8022f24 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 8022e08:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8022e0c:	468a      	mov	sl, r1
 8022e0e:	880b      	ldrh	r3, [r1, #0]
 8022e10:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 8022e14:	fb03 5202 	mla	r2, r3, r2, r5
 8022e18:	4373      	muls	r3, r6
 8022e1a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022e1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022e22:	9307      	str	r3, [sp, #28]
 8022e24:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8022e28:	9306      	str	r3, [sp, #24]
 8022e2a:	9b07      	ldr	r3, [sp, #28]
 8022e2c:	4298      	cmp	r0, r3
 8022e2e:	d270      	bcs.n	8022f12 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8022e30:	4621      	mov	r1, r4
 8022e32:	9b06      	ldr	r3, [sp, #24]
 8022e34:	eb00 0b03 	add.w	fp, r0, r3
 8022e38:	4558      	cmp	r0, fp
 8022e3a:	d25d      	bcs.n	8022ef8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8022e3c:	f851 4b04 	ldr.w	r4, [r1], #4
 8022e40:	0e23      	lsrs	r3, r4, #24
 8022e42:	d014      	beq.n	8022e6e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022e44:	2bff      	cmp	r3, #255	@ 0xff
 8022e46:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8022e4a:	d112      	bne.n	8022e72 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022e4c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8022e50:	d10f      	bne.n	8022e72 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8022e52:	0963      	lsrs	r3, r4, #5
 8022e54:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8022e58:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022e5c:	f02c 0c07 	bic.w	ip, ip, #7
 8022e60:	ea43 0c0c 	orr.w	ip, r3, ip
 8022e64:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8022e68:	ea4c 0404 	orr.w	r4, ip, r4
 8022e6c:	8004      	strh	r4, [r0, #0]
 8022e6e:	3002      	adds	r0, #2
 8022e70:	e7e2      	b.n	8022e38 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8022e72:	fb09 f303 	mul.w	r3, r9, r3
 8022e76:	1c5a      	adds	r2, r3, #1
 8022e78:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8022e7c:	1212      	asrs	r2, r2, #8
 8022e7e:	b293      	uxth	r3, r2
 8022e80:	43d2      	mvns	r2, r2
 8022e82:	8807      	ldrh	r7, [r0, #0]
 8022e84:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8022e88:	fb1e fe03 	smulbb	lr, lr, r3
 8022e8c:	123e      	asrs	r6, r7, #8
 8022e8e:	fa5f fc8c 	uxtb.w	ip, ip
 8022e92:	b2e4      	uxtb	r4, r4
 8022e94:	fb1c fc03 	smulbb	ip, ip, r3
 8022e98:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8022e9c:	fb14 f403 	smulbb	r4, r4, r3
 8022ea0:	b2d2      	uxtb	r2, r2
 8022ea2:	10fd      	asrs	r5, r7, #3
 8022ea4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8022ea8:	00ff      	lsls	r7, r7, #3
 8022eaa:	fb06 e602 	mla	r6, r6, r2, lr
 8022eae:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8022eb2:	b2ff      	uxtb	r7, r7
 8022eb4:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8022eb8:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8022ebc:	fb05 c502 	mla	r5, r5, r2, ip
 8022ec0:	fb07 4702 	mla	r7, r7, r2, r4
 8022ec4:	b2b6      	uxth	r6, r6
 8022ec6:	f106 0e01 	add.w	lr, r6, #1
 8022eca:	b2ad      	uxth	r5, r5
 8022ecc:	b2bf      	uxth	r7, r7
 8022ece:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 8022ed2:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 8022ed6:	f105 0c01 	add.w	ip, r5, #1
 8022eda:	1c7e      	adds	r6, r7, #1
 8022edc:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8022ee0:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8022ee4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8022ee8:	096d      	lsrs	r5, r5, #5
 8022eea:	ea46 060e 	orr.w	r6, r6, lr
 8022eee:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8022ef2:	432e      	orrs	r6, r5
 8022ef4:	8006      	strh	r6, [r0, #0]
 8022ef6:	e7ba      	b.n	8022e6e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8022ef8:	f8ba 3000 	ldrh.w	r3, [sl]
 8022efc:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 8022f00:	eba3 0308 	sub.w	r3, r3, r8
 8022f04:	eba4 0408 	sub.w	r4, r4, r8
 8022f08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8022f0c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8022f10:	e78b      	b.n	8022e2a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8022f12:	4b03      	ldr	r3, [pc, #12]	@ (8022f20 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8022f14:	6818      	ldr	r0, [r3, #0]
 8022f16:	6803      	ldr	r3, [r0, #0]
 8022f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022f1a:	4798      	blx	r3
 8022f1c:	e76a      	b.n	8022df4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8022f1e:	bf00      	nop
 8022f20:	20012104 	.word	0x20012104
 8022f24:	200120fe 	.word	0x200120fe

08022f28 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 8022f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022f2c:	b085      	sub	sp, #20
 8022f2e:	466d      	mov	r5, sp
 8022f30:	4616      	mov	r6, r2
 8022f32:	460c      	mov	r4, r1
 8022f34:	6810      	ldr	r0, [r2, #0]
 8022f36:	6851      	ldr	r1, [r2, #4]
 8022f38:	c503      	stmia	r5!, {r0, r1}
 8022f3a:	6818      	ldr	r0, [r3, #0]
 8022f3c:	6859      	ldr	r1, [r3, #4]
 8022f3e:	c503      	stmia	r5!, {r0, r1}
 8022f40:	4668      	mov	r0, sp
 8022f42:	f7f7 fb65 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8022f46:	4631      	mov	r1, r6
 8022f48:	a802      	add	r0, sp, #8
 8022f4a:	f7f7 fb89 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8022f4e:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8022f52:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8022f56:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8022f5a:	4d28      	ldr	r5, [pc, #160]	@ (8022ffc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8022f5c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8022f60:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8022f64:	f8bd 1000 	ldrh.w	r1, [sp]
 8022f68:	6828      	ldr	r0, [r5, #0]
 8022f6a:	440a      	add	r2, r1
 8022f6c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8022f70:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8022f74:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8022f78:	4413      	add	r3, r2
 8022f7a:	f8ad 300a 	strh.w	r3, [sp, #10]
 8022f7e:	6803      	ldr	r3, [r0, #0]
 8022f80:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8022f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022f86:	4798      	blx	r3
 8022f88:	4e1d      	ldr	r6, [pc, #116]	@ (8023000 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8022f8a:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8022f8e:	8833      	ldrh	r3, [r6, #0]
 8022f90:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8022f94:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8023004 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8022f98:	fb03 1202 	mla	r2, r3, r2, r1
 8022f9c:	fb08 f303 	mul.w	r3, r8, r3
 8022fa0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022fa4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8022fa8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8022fac:	4298      	cmp	r0, r3
 8022fae:	d21d      	bcs.n	8022fec <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8022fb0:	eb00 080c 	add.w	r8, r0, ip
 8022fb4:	4540      	cmp	r0, r8
 8022fb6:	d20f      	bcs.n	8022fd8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8022fb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8022fbc:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8022fc0:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 8022fc4:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8022fc8:	ea42 0209 	orr.w	r2, r2, r9
 8022fcc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8022fd0:	430a      	orrs	r2, r1
 8022fd2:	f820 2b02 	strh.w	r2, [r0], #2
 8022fd6:	e7ed      	b.n	8022fb4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8022fd8:	8832      	ldrh	r2, [r6, #0]
 8022fda:	1bd2      	subs	r2, r2, r7
 8022fdc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8022fe0:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8022fe4:	1bd2      	subs	r2, r2, r7
 8022fe6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8022fea:	e7df      	b.n	8022fac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8022fec:	6828      	ldr	r0, [r5, #0]
 8022fee:	6803      	ldr	r3, [r0, #0]
 8022ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8022ff2:	4798      	blx	r3
 8022ff4:	b005      	add	sp, #20
 8022ff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022ffa:	bf00      	nop
 8022ffc:	20012104 	.word	0x20012104
 8023000:	200120fe 	.word	0x200120fe
 8023004:	fffff800 	.word	0xfffff800

08023008 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 8023008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802300c:	460e      	mov	r6, r1
 802300e:	4604      	mov	r4, r0
 8023010:	461d      	mov	r5, r3
 8023012:	b08e      	sub	sp, #56	@ 0x38
 8023014:	6808      	ldr	r0, [r1, #0]
 8023016:	6849      	ldr	r1, [r1, #4]
 8023018:	ab0a      	add	r3, sp, #40	@ 0x28
 802301a:	c303      	stmia	r3!, {r0, r1}
 802301c:	6810      	ldr	r0, [r2, #0]
 802301e:	6851      	ldr	r1, [r2, #4]
 8023020:	ab0c      	add	r3, sp, #48	@ 0x30
 8023022:	c303      	stmia	r3!, {r0, r1}
 8023024:	a80a      	add	r0, sp, #40	@ 0x28
 8023026:	f7f7 faf3 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802302a:	4631      	mov	r1, r6
 802302c:	a80c      	add	r0, sp, #48	@ 0x30
 802302e:	f7f7 fb17 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023032:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8023036:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 802303a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 802303e:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 80231f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8023042:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023046:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802304a:	440c      	add	r4, r1
 802304c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8023050:	f8d8 0000 	ldr.w	r0, [r8]
 8023054:	440a      	add	r2, r1
 8023056:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802305a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 802305e:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8023062:	4413      	add	r3, r2
 8023064:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8023068:	6803      	ldr	r3, [r0, #0]
 802306a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 802306e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023070:	4798      	blx	r3
 8023072:	2dff      	cmp	r5, #255	@ 0xff
 8023074:	f8df 917c 	ldr.w	r9, [pc, #380]	@ 80231f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 8023078:	d124      	bne.n	80230c4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 802307a:	f010 0f01 	tst.w	r0, #1
 802307e:	f8d8 0000 	ldr.w	r0, [r8]
 8023082:	d022      	beq.n	80230ca <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 8023084:	2100      	movs	r1, #0
 8023086:	f04f 0e01 	mov.w	lr, #1
 802308a:	f8d0 c000 	ldr.w	ip, [r0]
 802308e:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8023092:	f8cd e018 	str.w	lr, [sp, #24]
 8023096:	f8b9 e000 	ldrh.w	lr, [r9]
 802309a:	b2b6      	uxth	r6, r6
 802309c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80230a0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80230a4:	b2bf      	uxth	r7, r7
 80230a6:	9102      	str	r1, [sp, #8]
 80230a8:	9503      	str	r5, [sp, #12]
 80230aa:	9601      	str	r6, [sp, #4]
 80230ac:	9700      	str	r7, [sp, #0]
 80230ae:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80230b2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80230b6:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 80230ba:	4621      	mov	r1, r4
 80230bc:	47a8      	blx	r5
 80230be:	b00e      	add	sp, #56	@ 0x38
 80230c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230c4:	f010 0f04 	tst.w	r0, #4
 80230c8:	e7d9      	b.n	802307e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80230ca:	6803      	ldr	r3, [r0, #0]
 80230cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80230ce:	4798      	blx	r3
 80230d0:	f8b9 3000 	ldrh.w	r3, [r9]
 80230d4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80230d8:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80230dc:	435e      	muls	r6, r3
 80230de:	fb03 1202 	mla	r2, r3, r2, r1
 80230e2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80230e6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80230ea:	ebac 0c07 	sub.w	ip, ip, r7
 80230ee:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80230f2:	2dff      	cmp	r5, #255	@ 0xff
 80230f4:	eba3 0707 	sub.w	r7, r3, r7
 80230f8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80230fc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023100:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8023104:	d049      	beq.n	802319a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 8023106:	43eb      	mvns	r3, r5
 8023108:	fa1f f985 	uxth.w	r9, r5
 802310c:	b2db      	uxtb	r3, r3
 802310e:	42b0      	cmp	r0, r6
 8023110:	d266      	bcs.n	80231e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8023112:	eb00 0a0e 	add.w	sl, r0, lr
 8023116:	4550      	cmp	r0, sl
 8023118:	4621      	mov	r1, r4
 802311a:	f104 0403 	add.w	r4, r4, #3
 802311e:	d25b      	bcs.n	80231d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8023120:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8023124:	8802      	ldrh	r2, [r0, #0]
 8023126:	fb11 f109 	smulbb	r1, r1, r9
 802312a:	ea4f 2822 	mov.w	r8, r2, asr #8
 802312e:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 8023132:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 8023136:	fb08 1803 	mla	r8, r8, r3, r1
 802313a:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 802313e:	10d5      	asrs	r5, r2, #3
 8023140:	fb11 f109 	smulbb	r1, r1, r9
 8023144:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8023148:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 802314c:	fb05 1503 	mla	r5, r5, r3, r1
 8023150:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8023154:	00d2      	lsls	r2, r2, #3
 8023156:	fb11 f109 	smulbb	r1, r1, r9
 802315a:	b2d2      	uxtb	r2, r2
 802315c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023160:	fb02 1203 	mla	r2, r2, r3, r1
 8023164:	fa1f f888 	uxth.w	r8, r8
 8023168:	b292      	uxth	r2, r2
 802316a:	f108 0101 	add.w	r1, r8, #1
 802316e:	b2ad      	uxth	r5, r5
 8023170:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8023174:	1c51      	adds	r1, r2, #1
 8023176:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802317a:	1c69      	adds	r1, r5, #1
 802317c:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8023180:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 8023184:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8023188:	096d      	lsrs	r5, r5, #5
 802318a:	ea42 0208 	orr.w	r2, r2, r8
 802318e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8023192:	432a      	orrs	r2, r5
 8023194:	f820 2b02 	strh.w	r2, [r0], #2
 8023198:	e7bd      	b.n	8023116 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 802319a:	4a14      	ldr	r2, [pc, #80]	@ (80231ec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 802319c:	42b0      	cmp	r0, r6
 802319e:	d21f      	bcs.n	80231e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80231a0:	eb00 050e 	add.w	r5, r0, lr
 80231a4:	42a8      	cmp	r0, r5
 80231a6:	4621      	mov	r1, r4
 80231a8:	f104 0403 	add.w	r4, r4, #3
 80231ac:	d210      	bcs.n	80231d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80231ae:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80231b2:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80231b6:	00db      	lsls	r3, r3, #3
 80231b8:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80231bc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80231c0:	430b      	orrs	r3, r1
 80231c2:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80231c6:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80231ca:	f820 3b02 	strh.w	r3, [r0], #2
 80231ce:	e7e9      	b.n	80231a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80231d0:	4438      	add	r0, r7
 80231d2:	eb01 040c 	add.w	r4, r1, ip
 80231d6:	e7e1      	b.n	802319c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80231d8:	4438      	add	r0, r7
 80231da:	eb01 040c 	add.w	r4, r1, ip
 80231de:	e796      	b.n	802310e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80231e0:	4b03      	ldr	r3, [pc, #12]	@ (80231f0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80231e2:	6818      	ldr	r0, [r3, #0]
 80231e4:	6803      	ldr	r3, [r0, #0]
 80231e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80231e8:	4798      	blx	r3
 80231ea:	e768      	b.n	80230be <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80231ec:	fffff800 	.word	0xfffff800
 80231f0:	20012104 	.word	0x20012104
 80231f4:	200120fe 	.word	0x200120fe

080231f8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80231f8:	b4f0      	push	{r4, r5, r6, r7}
 80231fa:	4616      	mov	r6, r2
 80231fc:	2e01      	cmp	r6, #1
 80231fe:	461c      	mov	r4, r3
 8023200:	460d      	mov	r5, r1
 8023202:	9a04      	ldr	r2, [sp, #16]
 8023204:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8023208:	f89d 7018 	ldrb.w	r7, [sp, #24]
 802320c:	d012      	beq.n	8023234 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802320e:	d303      	bcc.n	8023218 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8023210:	2e02      	cmp	r6, #2
 8023212:	d00a      	beq.n	802322a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8023214:	bcf0      	pop	{r4, r5, r6, r7}
 8023216:	4770      	bx	lr
 8023218:	6805      	ldr	r5, [r0, #0]
 802321a:	e9cd 3704 	strd	r3, r7, [sp, #16]
 802321e:	68ed      	ldr	r5, [r5, #12]
 8023220:	4613      	mov	r3, r2
 8023222:	46ac      	mov	ip, r5
 8023224:	4622      	mov	r2, r4
 8023226:	bcf0      	pop	{r4, r5, r6, r7}
 8023228:	4760      	bx	ip
 802322a:	4621      	mov	r1, r4
 802322c:	4628      	mov	r0, r5
 802322e:	bcf0      	pop	{r4, r5, r6, r7}
 8023230:	f7ff bd94 	b.w	8022d5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023234:	4621      	mov	r1, r4
 8023236:	4628      	mov	r0, r5
 8023238:	bcf0      	pop	{r4, r5, r6, r7}
 802323a:	f7ff bee5 	b.w	8023008 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08023240 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8023240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023244:	4616      	mov	r6, r2
 8023246:	4681      	mov	r9, r0
 8023248:	b093      	sub	sp, #76	@ 0x4c
 802324a:	6810      	ldr	r0, [r2, #0]
 802324c:	4688      	mov	r8, r1
 802324e:	6851      	ldr	r1, [r2, #4]
 8023250:	ac0e      	add	r4, sp, #56	@ 0x38
 8023252:	c403      	stmia	r4!, {r0, r1}
 8023254:	6818      	ldr	r0, [r3, #0]
 8023256:	6859      	ldr	r1, [r3, #4]
 8023258:	ac10      	add	r4, sp, #64	@ 0x40
 802325a:	c403      	stmia	r4!, {r0, r1}
 802325c:	a80e      	add	r0, sp, #56	@ 0x38
 802325e:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8023262:	f7f7 f9d5 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023266:	4631      	mov	r1, r6
 8023268:	a810      	add	r0, sp, #64	@ 0x40
 802326a:	f7f7 f9f9 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802326e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8023272:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8023276:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 802327a:	4e62      	ldr	r6, [pc, #392]	@ (8023404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 802327c:	fb11 2103 	smlabb	r1, r1, r3, r2
 8023280:	4489      	add	r9, r1
 8023282:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 8023286:	6830      	ldr	r0, [r6, #0]
 8023288:	440a      	add	r2, r1
 802328a:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 802328e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8023292:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 8023296:	4413      	add	r3, r2
 8023298:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 802329c:	6803      	ldr	r3, [r0, #0]
 802329e:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 80232a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80232a4:	4798      	blx	r3
 80232a6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80232aa:	4f57      	ldr	r7, [pc, #348]	@ (8023408 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80232ac:	6830      	ldr	r0, [r6, #0]
 80232ae:	d01d      	beq.n	80232ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80232b0:	2200      	movs	r2, #0
 80232b2:	6801      	ldr	r1, [r0, #0]
 80232b4:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80232b8:	220b      	movs	r2, #11
 80232ba:	9207      	str	r2, [sp, #28]
 80232bc:	883a      	ldrh	r2, [r7, #0]
 80232be:	b2a4      	uxth	r4, r4
 80232c0:	9206      	str	r2, [sp, #24]
 80232c2:	2201      	movs	r2, #1
 80232c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80232c8:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 80232cc:	b2ad      	uxth	r5, r5
 80232ce:	9203      	str	r2, [sp, #12]
 80232d0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80232d4:	9502      	str	r5, [sp, #8]
 80232d6:	9200      	str	r2, [sp, #0]
 80232d8:	9401      	str	r4, [sp, #4]
 80232da:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80232dc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80232e0:	4642      	mov	r2, r8
 80232e2:	4649      	mov	r1, r9
 80232e4:	47a0      	blx	r4
 80232e6:	b013      	add	sp, #76	@ 0x4c
 80232e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ec:	6803      	ldr	r3, [r0, #0]
 80232ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80232f0:	4798      	blx	r3
 80232f2:	f04f 0e04 	mov.w	lr, #4
 80232f6:	883b      	ldrh	r3, [r7, #0]
 80232f8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80232fc:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 8023300:	435d      	muls	r5, r3
 8023302:	fb03 1202 	mla	r2, r3, r2, r1
 8023306:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 802330a:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 802330e:	920c      	str	r2, [sp, #48]	@ 0x30
 8023310:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8023314:	1b12      	subs	r2, r2, r4
 8023316:	920d      	str	r2, [sp, #52]	@ 0x34
 8023318:	0062      	lsls	r2, r4, #1
 802331a:	1b1c      	subs	r4, r3, r4
 802331c:	0063      	lsls	r3, r4, #1
 802331e:	920a      	str	r2, [sp, #40]	@ 0x28
 8023320:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023322:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023324:	4298      	cmp	r0, r3
 8023326:	d266      	bcs.n	80233f6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 8023328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802332a:	eb00 0b03 	add.w	fp, r0, r3
 802332e:	4558      	cmp	r0, fp
 8023330:	d25c      	bcs.n	80233ec <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8023332:	f819 3b01 	ldrb.w	r3, [r9], #1
 8023336:	fb1e e303 	smlabb	r3, lr, r3, lr
 802333a:	f858 2003 	ldr.w	r2, [r8, r3]
 802333e:	0e11      	lsrs	r1, r2, #24
 8023340:	d012      	beq.n	8023368 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8023342:	29ff      	cmp	r1, #255	@ 0xff
 8023344:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8023348:	d110      	bne.n	802336c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 802334a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 802334e:	d10d      	bne.n	802336c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8023350:	0953      	lsrs	r3, r2, #5
 8023352:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 8023356:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802335a:	f027 0707 	bic.w	r7, r7, #7
 802335e:	431f      	orrs	r7, r3
 8023360:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023364:	433a      	orrs	r2, r7
 8023366:	8002      	strh	r2, [r0, #0]
 8023368:	3002      	adds	r0, #2
 802336a:	e7e0      	b.n	802332e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 802336c:	fb0a f101 	mul.w	r1, sl, r1
 8023370:	1c4b      	adds	r3, r1, #1
 8023372:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8023376:	121b      	asrs	r3, r3, #8
 8023378:	b299      	uxth	r1, r3
 802337a:	43db      	mvns	r3, r3
 802337c:	8806      	ldrh	r6, [r0, #0]
 802337e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8023382:	b2d2      	uxtb	r2, r2
 8023384:	fb1c fc01 	smulbb	ip, ip, r1
 8023388:	fb12 f201 	smulbb	r2, r2, r1
 802338c:	1235      	asrs	r5, r6, #8
 802338e:	10f4      	asrs	r4, r6, #3
 8023390:	00f6      	lsls	r6, r6, #3
 8023392:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023396:	b2f6      	uxtb	r6, r6
 8023398:	b2ff      	uxtb	r7, r7
 802339a:	b2db      	uxtb	r3, r3
 802339c:	fb17 f701 	smulbb	r7, r7, r1
 80233a0:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80233a4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80233a8:	fb05 c503 	mla	r5, r5, r3, ip
 80233ac:	fb06 2203 	mla	r2, r6, r3, r2
 80233b0:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80233b4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80233b8:	fb04 7403 	mla	r4, r4, r3, r7
 80233bc:	b2ad      	uxth	r5, r5
 80233be:	b292      	uxth	r2, r2
 80233c0:	f105 0c01 	add.w	ip, r5, #1
 80233c4:	1c57      	adds	r7, r2, #1
 80233c6:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80233ca:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80233ce:	b2a4      	uxth	r4, r4
 80233d0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80233d4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80233d8:	433d      	orrs	r5, r7
 80233da:	1c67      	adds	r7, r4, #1
 80233dc:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80233e0:	0964      	lsrs	r4, r4, #5
 80233e2:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80233e6:	4325      	orrs	r5, r4
 80233e8:	8005      	strh	r5, [r0, #0]
 80233ea:	e7bd      	b.n	8023368 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80233ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80233ee:	4418      	add	r0, r3
 80233f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80233f2:	4499      	add	r9, r3
 80233f4:	e795      	b.n	8023322 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80233f6:	4b03      	ldr	r3, [pc, #12]	@ (8023404 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80233f8:	6818      	ldr	r0, [r3, #0]
 80233fa:	6803      	ldr	r3, [r0, #0]
 80233fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80233fe:	4798      	blx	r3
 8023400:	e771      	b.n	80232e6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8023402:	bf00      	nop
 8023404:	20012104 	.word	0x20012104
 8023408:	200120fe 	.word	0x200120fe

0802340c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 802340c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023410:	b087      	sub	sp, #28
 8023412:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 8023416:	4680      	mov	r8, r0
 8023418:	460d      	mov	r5, r1
 802341a:	4614      	mov	r4, r2
 802341c:	2e00      	cmp	r6, #0
 802341e:	f000 80b9 	beq.w	8023594 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8023422:	6810      	ldr	r0, [r2, #0]
 8023424:	6851      	ldr	r1, [r2, #4]
 8023426:	af02      	add	r7, sp, #8
 8023428:	c703      	stmia	r7!, {r0, r1}
 802342a:	6818      	ldr	r0, [r3, #0]
 802342c:	6859      	ldr	r1, [r3, #4]
 802342e:	af04      	add	r7, sp, #16
 8023430:	c703      	stmia	r7!, {r0, r1}
 8023432:	a802      	add	r0, sp, #8
 8023434:	f7f7 f8ec 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8023438:	4621      	mov	r1, r4
 802343a:	a804      	add	r0, sp, #16
 802343c:	f7f7 f910 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8023440:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8023444:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023448:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 802344c:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8023450:	fb14 2103 	smlabb	r1, r4, r3, r2
 8023454:	eb08 0401 	add.w	r4, r8, r1
 8023458:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802345c:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8023460:	440a      	add	r2, r1
 8023462:	f8ad 2010 	strh.w	r2, [sp, #16]
 8023466:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 802346a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 802346e:	4413      	add	r3, r2
 8023470:	f8ad 3012 	strh.w	r3, [sp, #18]
 8023474:	4b49      	ldr	r3, [pc, #292]	@ (802359c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8023476:	6818      	ldr	r0, [r3, #0]
 8023478:	6803      	ldr	r3, [r0, #0]
 802347a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802347c:	4798      	blx	r3
 802347e:	4b48      	ldr	r3, [pc, #288]	@ (80235a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8023480:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8023484:	881a      	ldrh	r2, [r3, #0]
 8023486:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 802348a:	2eff      	cmp	r6, #255	@ 0xff
 802348c:	fb02 c101 	mla	r1, r2, r1, ip
 8023490:	fb02 f207 	mul.w	r2, r2, r7
 8023494:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8023498:	f105 0104 	add.w	r1, r5, #4
 802349c:	461d      	mov	r5, r3
 802349e:	d05a      	beq.n	8023556 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 80234a0:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 80234a4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80234a8:	b2b6      	uxth	r6, r6
 80234aa:	fa1f fe8e 	uxth.w	lr, lr
 80234ae:	9301      	str	r3, [sp, #4]
 80234b0:	4282      	cmp	r2, r0
 80234b2:	d96a      	bls.n	802358a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80234b4:	eb00 0b0a 	add.w	fp, r0, sl
 80234b8:	4583      	cmp	fp, r0
 80234ba:	d940      	bls.n	802353e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80234bc:	8805      	ldrh	r5, [r0, #0]
 80234be:	f814 3b01 	ldrb.w	r3, [r4], #1
 80234c2:	122f      	asrs	r7, r5, #8
 80234c4:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 80234c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80234cc:	fb17 f70e 	smulbb	r7, r7, lr
 80234d0:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80234d4:	00ed      	lsls	r5, r5, #3
 80234d6:	b2ed      	uxtb	r5, r5
 80234d8:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80234dc:	fb15 f50e 	smulbb	r5, r5, lr
 80234e0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 80234e4:	fb0c 7c06 	mla	ip, ip, r6, r7
 80234e8:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 80234ec:	10df      	asrs	r7, r3, #3
 80234ee:	00db      	lsls	r3, r3, #3
 80234f0:	fb19 f90e 	smulbb	r9, r9, lr
 80234f4:	b2db      	uxtb	r3, r3
 80234f6:	fb03 5306 	mla	r3, r3, r6, r5
 80234fa:	fa1f fc8c 	uxth.w	ip, ip
 80234fe:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8023502:	fb07 9706 	mla	r7, r7, r6, r9
 8023506:	f10c 0901 	add.w	r9, ip, #1
 802350a:	b29b      	uxth	r3, r3
 802350c:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8023510:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8023514:	f103 0c01 	add.w	ip, r3, #1
 8023518:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802351c:	b2bf      	uxth	r7, r7
 802351e:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023522:	ea4c 0c09 	orr.w	ip, ip, r9
 8023526:	f107 0901 	add.w	r9, r7, #1
 802352a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 802352e:	097f      	lsrs	r7, r7, #5
 8023530:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8023534:	ea4c 0c07 	orr.w	ip, ip, r7
 8023538:	f820 cb02 	strh.w	ip, [r0], #2
 802353c:	e7bc      	b.n	80234b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 802353e:	9b01      	ldr	r3, [sp, #4]
 8023540:	881b      	ldrh	r3, [r3, #0]
 8023542:	eba3 0308 	sub.w	r3, r3, r8
 8023546:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802354a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 802354e:	eba3 0308 	sub.w	r3, r3, r8
 8023552:	441c      	add	r4, r3
 8023554:	e7ac      	b.n	80234b0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8023556:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 802355a:	4282      	cmp	r2, r0
 802355c:	d915      	bls.n	802358a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 802355e:	eb00 060a 	add.w	r6, r0, sl
 8023562:	4286      	cmp	r6, r0
 8023564:	d906      	bls.n	8023574 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8023566:	f814 3b01 	ldrb.w	r3, [r4], #1
 802356a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 802356e:	f820 3b02 	strh.w	r3, [r0], #2
 8023572:	e7f6      	b.n	8023562 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8023574:	882b      	ldrh	r3, [r5, #0]
 8023576:	eba3 0308 	sub.w	r3, r3, r8
 802357a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802357e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8023582:	eba3 0308 	sub.w	r3, r3, r8
 8023586:	441c      	add	r4, r3
 8023588:	e7e7      	b.n	802355a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 802358a:	4b04      	ldr	r3, [pc, #16]	@ (802359c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 802358c:	6818      	ldr	r0, [r3, #0]
 802358e:	6803      	ldr	r3, [r0, #0]
 8023590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023592:	4798      	blx	r3
 8023594:	b007      	add	sp, #28
 8023596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802359a:	bf00      	nop
 802359c:	20012104 	.word	0x20012104
 80235a0:	200120fe 	.word	0x200120fe

080235a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80235a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235a8:	b091      	sub	sp, #68	@ 0x44
 80235aa:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 80235ae:	4680      	mov	r8, r0
 80235b0:	460f      	mov	r7, r1
 80235b2:	4614      	mov	r4, r2
 80235b4:	2d00      	cmp	r5, #0
 80235b6:	d051      	beq.n	802365c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80235b8:	6810      	ldr	r0, [r2, #0]
 80235ba:	6851      	ldr	r1, [r2, #4]
 80235bc:	ae0c      	add	r6, sp, #48	@ 0x30
 80235be:	c603      	stmia	r6!, {r0, r1}
 80235c0:	6818      	ldr	r0, [r3, #0]
 80235c2:	6859      	ldr	r1, [r3, #4]
 80235c4:	ae0e      	add	r6, sp, #56	@ 0x38
 80235c6:	c603      	stmia	r6!, {r0, r1}
 80235c8:	a80c      	add	r0, sp, #48	@ 0x30
 80235ca:	f7f7 f821 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80235ce:	4621      	mov	r1, r4
 80235d0:	a80e      	add	r0, sp, #56	@ 0x38
 80235d2:	f7f7 f845 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80235d6:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 80235da:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80235de:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80235e2:	f8df 91dc 	ldr.w	r9, [pc, #476]	@ 80237c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 80235e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80235ea:	eb08 0401 	add.w	r4, r8, r1
 80235ee:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80235f2:	f8d9 0000 	ldr.w	r0, [r9]
 80235f6:	440a      	add	r2, r1
 80235f8:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80235fc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8023600:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8023604:	4413      	add	r3, r2
 8023606:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 802360a:	6803      	ldr	r3, [r0, #0]
 802360c:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8023610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023612:	4798      	blx	r3
 8023614:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8023618:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80237c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 802361c:	f8d9 0000 	ldr.w	r0, [r9]
 8023620:	d01f      	beq.n	8023662 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8023622:	2200      	movs	r2, #0
 8023624:	6801      	ldr	r1, [r0, #0]
 8023626:	e9cd 2208 	strd	r2, r2, [sp, #32]
 802362a:	220b      	movs	r2, #11
 802362c:	9207      	str	r2, [sp, #28]
 802362e:	f8b8 2000 	ldrh.w	r2, [r8]
 8023632:	b2b6      	uxth	r6, r6
 8023634:	9206      	str	r2, [sp, #24]
 8023636:	2201      	movs	r2, #1
 8023638:	e9cd 5204 	strd	r5, r2, [sp, #16]
 802363c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8023640:	9601      	str	r6, [sp, #4]
 8023642:	9203      	str	r2, [sp, #12]
 8023644:	fa1f f28a 	uxth.w	r2, sl
 8023648:	9202      	str	r2, [sp, #8]
 802364a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 802364e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8023652:	9200      	str	r2, [sp, #0]
 8023654:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8023656:	463a      	mov	r2, r7
 8023658:	4621      	mov	r1, r4
 802365a:	47a8      	blx	r5
 802365c:	b011      	add	sp, #68	@ 0x44
 802365e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023662:	6803      	ldr	r3, [r0, #0]
 8023664:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8023668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802366a:	4798      	blx	r3
 802366c:	f8b8 2000 	ldrh.w	r2, [r8]
 8023670:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8023674:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8023678:	2dff      	cmp	r5, #255	@ 0xff
 802367a:	fb02 1303 	mla	r3, r2, r3, r1
 802367e:	fb0a fa02 	mul.w	sl, sl, r2
 8023682:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023686:	d062      	beq.n	802374e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8023688:	ea6f 0c05 	mvn.w	ip, r5
 802368c:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8023690:	930a      	str	r3, [sp, #40]	@ 0x28
 8023692:	b2ad      	uxth	r5, r5
 8023694:	fa5f fc8c 	uxtb.w	ip, ip
 8023698:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 802369c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802369e:	4298      	cmp	r0, r3
 80236a0:	f080 8085 	bcs.w	80237ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 80236a4:	eb00 0b09 	add.w	fp, r0, r9
 80236a8:	4558      	cmp	r0, fp
 80236aa:	d246      	bcs.n	802373a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 80236ac:	2303      	movs	r3, #3
 80236ae:	2204      	movs	r2, #4
 80236b0:	f814 eb01 	ldrb.w	lr, [r4], #1
 80236b4:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 80236b8:	eb07 0a0e 	add.w	sl, r7, lr
 80236bc:	f89a 8002 	ldrb.w	r8, [sl, #2]
 80236c0:	8803      	ldrh	r3, [r0, #0]
 80236c2:	fb18 f805 	smulbb	r8, r8, r5
 80236c6:	1219      	asrs	r1, r3, #8
 80236c8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 80236cc:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80236d0:	fb01 810c 	mla	r1, r1, ip, r8
 80236d4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80236d8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80236dc:	fb1e fe05 	smulbb	lr, lr, r5
 80236e0:	fb18 f805 	smulbb	r8, r8, r5
 80236e4:	10da      	asrs	r2, r3, #3
 80236e6:	00db      	lsls	r3, r3, #3
 80236e8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80236ec:	b2db      	uxtb	r3, r3
 80236ee:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80236f2:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80236f6:	fb02 820c 	mla	r2, r2, ip, r8
 80236fa:	fb03 e30c 	mla	r3, r3, ip, lr
 80236fe:	b289      	uxth	r1, r1
 8023700:	b292      	uxth	r2, r2
 8023702:	b29b      	uxth	r3, r3
 8023704:	f101 0801 	add.w	r8, r1, #1
 8023708:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 802370c:	f103 0e01 	add.w	lr, r3, #1
 8023710:	f102 0801 	add.w	r8, r2, #1
 8023714:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8023718:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 802371c:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8023720:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8023724:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8023728:	ea4e 0101 	orr.w	r1, lr, r1
 802372c:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8023730:	ea41 0108 	orr.w	r1, r1, r8
 8023734:	f820 1b02 	strh.w	r1, [r0], #2
 8023738:	e7b6      	b.n	80236a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 802373a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802373c:	881b      	ldrh	r3, [r3, #0]
 802373e:	1b9b      	subs	r3, r3, r6
 8023740:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023744:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8023748:	1b9b      	subs	r3, r3, r6
 802374a:	441c      	add	r4, r3
 802374c:	e7a6      	b.n	802369c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 802374e:	2203      	movs	r2, #3
 8023750:	2504      	movs	r5, #4
 8023752:	491a      	ldr	r1, [pc, #104]	@ (80237bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8023754:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8023758:	4550      	cmp	r0, sl
 802375a:	d228      	bcs.n	80237ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 802375c:	eb00 0c09 	add.w	ip, r0, r9
 8023760:	4560      	cmp	r0, ip
 8023762:	4623      	mov	r3, r4
 8023764:	d219      	bcs.n	802379a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8023766:	f893 e000 	ldrb.w	lr, [r3]
 802376a:	3401      	adds	r4, #1
 802376c:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8023770:	eb07 0b0e 	add.w	fp, r7, lr
 8023774:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8023778:	f89b b001 	ldrb.w	fp, [fp, #1]
 802377c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8023780:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8023784:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8023788:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 802378c:	ea43 030b 	orr.w	r3, r3, fp
 8023790:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8023794:	f820 3b02 	strh.w	r3, [r0], #2
 8023798:	e7e2      	b.n	8023760 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 802379a:	f8b8 3000 	ldrh.w	r3, [r8]
 802379e:	1b9b      	subs	r3, r3, r6
 80237a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80237a4:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80237a8:	1b9b      	subs	r3, r3, r6
 80237aa:	441c      	add	r4, r3
 80237ac:	e7d4      	b.n	8023758 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 80237ae:	4b04      	ldr	r3, [pc, #16]	@ (80237c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 80237b0:	6818      	ldr	r0, [r3, #0]
 80237b2:	6803      	ldr	r3, [r0, #0]
 80237b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80237b6:	4798      	blx	r3
 80237b8:	e750      	b.n	802365c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80237ba:	bf00      	nop
 80237bc:	fffff800 	.word	0xfffff800
 80237c0:	20012104 	.word	0x20012104
 80237c4:	200120fe 	.word	0x200120fe

080237c8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80237c8:	b4f0      	push	{r4, r5, r6, r7}
 80237ca:	460c      	mov	r4, r1
 80237cc:	4611      	mov	r1, r2
 80237ce:	780f      	ldrb	r7, [r1, #0]
 80237d0:	461a      	mov	r2, r3
 80237d2:	2f01      	cmp	r7, #1
 80237d4:	9b04      	ldr	r3, [sp, #16]
 80237d6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80237da:	784e      	ldrb	r6, [r1, #1]
 80237dc:	d038      	beq.n	8023850 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 80237de:	d31f      	bcc.n	8023820 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 80237e0:	2f02      	cmp	r7, #2
 80237e2:	d14d      	bne.n	8023880 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80237e4:	2e03      	cmp	r6, #3
 80237e6:	d84b      	bhi.n	8023880 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 80237e8:	e8df f006 	tbb	[pc, r6]
 80237ec:	17140702 	.word	0x17140702
 80237f0:	9504      	str	r5, [sp, #16]
 80237f2:	4620      	mov	r0, r4
 80237f4:	bcf0      	pop	{r4, r5, r6, r7}
 80237f6:	f7ff be09 	b.w	802340c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 80237fa:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80237fc:	2800      	cmp	r0, #0
 80237fe:	d03f      	beq.n	8023880 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8023800:	6806      	ldr	r6, [r0, #0]
 8023802:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023806:	68b5      	ldr	r5, [r6, #8]
 8023808:	4613      	mov	r3, r2
 802380a:	46ac      	mov	ip, r5
 802380c:	460a      	mov	r2, r1
 802380e:	4621      	mov	r1, r4
 8023810:	bcf0      	pop	{r4, r5, r6, r7}
 8023812:	4760      	bx	ip
 8023814:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8023818:	e7f0      	b.n	80237fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 802381a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 802381e:	e7ed      	b.n	80237fc <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8023820:	2e03      	cmp	r6, #3
 8023822:	d82d      	bhi.n	8023880 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8023824:	e8df f006 	tbb	[pc, r6]
 8023828:	110e0702 	.word	0x110e0702
 802382c:	9504      	str	r5, [sp, #16]
 802382e:	4620      	mov	r0, r4
 8023830:	bcf0      	pop	{r4, r5, r6, r7}
 8023832:	f7ff bd05 	b.w	8023240 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8023836:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8023838:	b310      	cbz	r0, 8023880 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802383a:	6806      	ldr	r6, [r0, #0]
 802383c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023840:	68f5      	ldr	r5, [r6, #12]
 8023842:	e7e1      	b.n	8023808 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8023844:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8023848:	e7f6      	b.n	8023838 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 802384a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 802384e:	e7f3      	b.n	8023838 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8023850:	2e03      	cmp	r6, #3
 8023852:	d815      	bhi.n	8023880 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8023854:	e8df f006 	tbb	[pc, r6]
 8023858:	110e0702 	.word	0x110e0702
 802385c:	9504      	str	r5, [sp, #16]
 802385e:	4620      	mov	r0, r4
 8023860:	bcf0      	pop	{r4, r5, r6, r7}
 8023862:	f7ff be9f 	b.w	80235a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8023866:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8023868:	b150      	cbz	r0, 8023880 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 802386a:	6806      	ldr	r6, [r0, #0]
 802386c:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8023870:	6935      	ldr	r5, [r6, #16]
 8023872:	e7c9      	b.n	8023808 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8023874:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8023878:	e7f6      	b.n	8023868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 802387a:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 802387e:	e7f3      	b.n	8023868 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8023880:	bcf0      	pop	{r4, r5, r6, r7}
 8023882:	4770      	bx	lr

08023884 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8023884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023888:	4617      	mov	r7, r2
 802388a:	4604      	mov	r4, r0
 802388c:	460e      	mov	r6, r1
 802388e:	b087      	sub	sp, #28
 8023890:	6810      	ldr	r0, [r2, #0]
 8023892:	6851      	ldr	r1, [r2, #4]
 8023894:	ad02      	add	r5, sp, #8
 8023896:	c503      	stmia	r5!, {r0, r1}
 8023898:	6818      	ldr	r0, [r3, #0]
 802389a:	6859      	ldr	r1, [r3, #4]
 802389c:	ad04      	add	r5, sp, #16
 802389e:	c503      	stmia	r5!, {r0, r1}
 80238a0:	a802      	add	r0, sp, #8
 80238a2:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 80238a6:	f7f6 feb3 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80238aa:	4639      	mov	r1, r7
 80238ac:	a804      	add	r0, sp, #16
 80238ae:	f7f6 fed7 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80238b2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80238b6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80238ba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80238be:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 80238c2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80238c6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 80238ca:	440e      	add	r6, r1
 80238cc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80238d0:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 80238d4:	440a      	add	r2, r1
 80238d6:	f8ad 2010 	strh.w	r2, [sp, #16]
 80238da:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80238de:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8023acc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 80238e2:	4413      	add	r3, r2
 80238e4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80238e8:	4b77      	ldr	r3, [pc, #476]	@ (8023ac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 80238ea:	6818      	ldr	r0, [r3, #0]
 80238ec:	6803      	ldr	r3, [r0, #0]
 80238ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80238f0:	4798      	blx	r3
 80238f2:	f8b9 b000 	ldrh.w	fp, [r9]
 80238f6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80238fa:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80238fe:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8023902:	fb0b 2303 	mla	r3, fp, r3, r2
 8023906:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 802390a:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802390e:	fb05 f50b 	mul.w	r5, r5, fp
 8023912:	9300      	str	r3, [sp, #0]
 8023914:	d069      	beq.n	80239ea <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8023916:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 802391a:	4558      	cmp	r0, fp
 802391c:	f080 80cc 	bcs.w	8023ab8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8023920:	4631      	mov	r1, r6
 8023922:	9b00      	ldr	r3, [sp, #0]
 8023924:	18c3      	adds	r3, r0, r3
 8023926:	9301      	str	r3, [sp, #4]
 8023928:	9b01      	ldr	r3, [sp, #4]
 802392a:	4298      	cmp	r0, r3
 802392c:	d24f      	bcs.n	80239ce <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 802392e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023932:	2a00      	cmp	r2, #0
 8023934:	d048      	beq.n	80239c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023936:	fb0a f202 	mul.w	r2, sl, r2
 802393a:	1c53      	adds	r3, r2, #1
 802393c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023940:	121b      	asrs	r3, r3, #8
 8023942:	d041      	beq.n	80239c8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8023944:	b29e      	uxth	r6, r3
 8023946:	43db      	mvns	r3, r3
 8023948:	8802      	ldrh	r2, [r0, #0]
 802394a:	b2db      	uxtb	r3, r3
 802394c:	1215      	asrs	r5, r2, #8
 802394e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8023952:	f8b4 c000 	ldrh.w	ip, [r4]
 8023956:	fb15 f503 	smulbb	r5, r5, r3
 802395a:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 802395e:	00d2      	lsls	r2, r2, #3
 8023960:	b2d2      	uxtb	r2, r2
 8023962:	ea4f 272c 	mov.w	r7, ip, asr #8
 8023966:	fb12 f203 	smulbb	r2, r2, r3
 802396a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 802396e:	fb07 5706 	mla	r7, r7, r6, r5
 8023972:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8023976:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802397a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802397e:	fb1e fe03 	smulbb	lr, lr, r3
 8023982:	fa5f fc8c 	uxtb.w	ip, ip
 8023986:	fb0c 2c06 	mla	ip, ip, r6, r2
 802398a:	b2bf      	uxth	r7, r7
 802398c:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8023990:	fb05 e506 	mla	r5, r5, r6, lr
 8023994:	f107 0e01 	add.w	lr, r7, #1
 8023998:	fa1f fc8c 	uxth.w	ip, ip
 802399c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80239a0:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 80239a4:	f10c 0701 	add.w	r7, ip, #1
 80239a8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80239ac:	b2ad      	uxth	r5, r5
 80239ae:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80239b2:	ea47 070e 	orr.w	r7, r7, lr
 80239b6:	f105 0e01 	add.w	lr, r5, #1
 80239ba:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 80239be:	096d      	lsrs	r5, r5, #5
 80239c0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80239c4:	432f      	orrs	r7, r5
 80239c6:	8007      	strh	r7, [r0, #0]
 80239c8:	3002      	adds	r0, #2
 80239ca:	3402      	adds	r4, #2
 80239cc:	e7ac      	b.n	8023928 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 80239ce:	f8b9 3000 	ldrh.w	r3, [r9]
 80239d2:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 80239d6:	eba3 0308 	sub.w	r3, r3, r8
 80239da:	eba6 0608 	sub.w	r6, r6, r8
 80239de:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 80239e2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80239e6:	440e      	add	r6, r1
 80239e8:	e797      	b.n	802391a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 80239ea:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80239ee:	42a8      	cmp	r0, r5
 80239f0:	d262      	bcs.n	8023ab8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 80239f2:	4631      	mov	r1, r6
 80239f4:	9b00      	ldr	r3, [sp, #0]
 80239f6:	eb00 0b03 	add.w	fp, r0, r3
 80239fa:	4558      	cmp	r0, fp
 80239fc:	d24e      	bcs.n	8023a9c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 80239fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023a02:	b12b      	cbz	r3, 8023a10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023a04:	2bff      	cmp	r3, #255	@ 0xff
 8023a06:	f8b4 e000 	ldrh.w	lr, [r4]
 8023a0a:	d104      	bne.n	8023a16 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8023a0c:	f8a0 e000 	strh.w	lr, [r0]
 8023a10:	3002      	adds	r0, #2
 8023a12:	3402      	adds	r4, #2
 8023a14:	e7f1      	b.n	80239fa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8023a16:	b29f      	uxth	r7, r3
 8023a18:	43db      	mvns	r3, r3
 8023a1a:	8802      	ldrh	r2, [r0, #0]
 8023a1c:	b2db      	uxtb	r3, r3
 8023a1e:	1216      	asrs	r6, r2, #8
 8023a20:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8023a24:	fb16 f603 	smulbb	r6, r6, r3
 8023a28:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8023a2c:	00d2      	lsls	r2, r2, #3
 8023a2e:	b2d2      	uxtb	r2, r2
 8023a30:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8023a34:	fb1a fa03 	smulbb	sl, sl, r3
 8023a38:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8023a3c:	fb12 f303 	smulbb	r3, r2, r3
 8023a40:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8023a44:	fb0c 6c07 	mla	ip, ip, r7, r6
 8023a48:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8023a4c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8023a50:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8023a54:	fa5f fe8e 	uxtb.w	lr, lr
 8023a58:	fb06 a607 	mla	r6, r6, r7, sl
 8023a5c:	fb0e 3307 	mla	r3, lr, r7, r3
 8023a60:	fa1f fc8c 	uxth.w	ip, ip
 8023a64:	f10c 0201 	add.w	r2, ip, #1
 8023a68:	b2b6      	uxth	r6, r6
 8023a6a:	b29b      	uxth	r3, r3
 8023a6c:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8023a70:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 8023a74:	f106 0a01 	add.w	sl, r6, #1
 8023a78:	f103 0c01 	add.w	ip, r3, #1
 8023a7c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8023a80:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8023a84:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8023a88:	0976      	lsrs	r6, r6, #5
 8023a8a:	ea4c 0c02 	orr.w	ip, ip, r2
 8023a8e:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 8023a92:	ea4c 0c06 	orr.w	ip, ip, r6
 8023a96:	f8a0 c000 	strh.w	ip, [r0]
 8023a9a:	e7b9      	b.n	8023a10 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8023a9c:	f8b9 3000 	ldrh.w	r3, [r9]
 8023aa0:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8023aa4:	eba3 0308 	sub.w	r3, r3, r8
 8023aa8:	eba6 0608 	sub.w	r6, r6, r8
 8023aac:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8023ab0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8023ab4:	440e      	add	r6, r1
 8023ab6:	e79a      	b.n	80239ee <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8023ab8:	4b03      	ldr	r3, [pc, #12]	@ (8023ac8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8023aba:	6818      	ldr	r0, [r3, #0]
 8023abc:	6803      	ldr	r3, [r0, #0]
 8023abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8023ac0:	4798      	blx	r3
 8023ac2:	b007      	add	sp, #28
 8023ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023ac8:	20012104 	.word	0x20012104
 8023acc:	200120fe 	.word	0x200120fe

08023ad0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8023ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ad4:	b089      	sub	sp, #36	@ 0x24
 8023ad6:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8023ada:	4607      	mov	r7, r0
 8023adc:	4688      	mov	r8, r1
 8023ade:	4692      	mov	sl, r2
 8023ae0:	4699      	mov	r9, r3
 8023ae2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8023ae4:	2e00      	cmp	r6, #0
 8023ae6:	d048      	beq.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023ae8:	4608      	mov	r0, r1
 8023aea:	f7fa f823 	bl	801db34 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8023aee:	4605      	mov	r5, r0
 8023af0:	4640      	mov	r0, r8
 8023af2:	f7fa f853 	bl	801db9c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8023af6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8023afa:	4640      	mov	r0, r8
 8023afc:	f8ad a008 	strh.w	sl, [sp, #8]
 8023b00:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023b04:	f8ad 900a 	strh.w	r9, [sp, #10]
 8023b08:	f7fa f906 	bl	801dd18 <_ZNK8touchgfx6Bitmap7getDataEv>
 8023b0c:	4605      	mov	r5, r0
 8023b0e:	4640      	mov	r0, r8
 8023b10:	f7fa f932 	bl	801dd78 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8023b14:	4682      	mov	sl, r0
 8023b16:	4640      	mov	r0, r8
 8023b18:	f7fa f982 	bl	801de20 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8023b1c:	2810      	cmp	r0, #16
 8023b1e:	d82c      	bhi.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023b20:	e8df f010 	tbh	[pc, r0, lsl #1]
 8023b24:	00ba00ca 	.word	0x00ba00ca
 8023b28:	002b0011 	.word	0x002b0011
 8023b2c:	002b002b 	.word	0x002b002b
 8023b30:	002b002b 	.word	0x002b002b
 8023b34:	002b002b 	.word	0x002b002b
 8023b38:	00c1002b 	.word	0x00c1002b
 8023b3c:	002b002b 	.word	0x002b002b
 8023b40:	002b0180 	.word	0x002b0180
 8023b44:	0173      	.short	0x0173
 8023b46:	4bbc      	ldr	r3, [pc, #752]	@ (8023e38 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8023b48:	6818      	ldr	r0, [r3, #0]
 8023b4a:	6803      	ldr	r3, [r0, #0]
 8023b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023b4e:	4798      	blx	r3
 8023b50:	2eff      	cmp	r6, #255	@ 0xff
 8023b52:	d101      	bne.n	8023b58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8023b54:	0683      	lsls	r3, r0, #26
 8023b56:	d506      	bpl.n	8023b66 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8023b58:	4633      	mov	r3, r6
 8023b5a:	4622      	mov	r2, r4
 8023b5c:	a902      	add	r1, sp, #8
 8023b5e:	4628      	mov	r0, r5
 8023b60:	f7ff f8fc 	bl	8022d5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023b64:	e009      	b.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023b66:	4640      	mov	r0, r8
 8023b68:	f7fa f89e 	bl	801dca8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023b6c:	b940      	cbnz	r0, 8023b80 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8023b6e:	4623      	mov	r3, r4
 8023b70:	aa02      	add	r2, sp, #8
 8023b72:	4629      	mov	r1, r5
 8023b74:	4638      	mov	r0, r7
 8023b76:	f7ff f9d7 	bl	8022f28 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023b7a:	b009      	add	sp, #36	@ 0x24
 8023b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b80:	f10d 0918 	add.w	r9, sp, #24
 8023b84:	4641      	mov	r1, r8
 8023b86:	4648      	mov	r0, r9
 8023b88:	f10d 0810 	add.w	r8, sp, #16
 8023b8c:	f7fa f83a 	bl	801dc04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023b90:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023b94:	e888 0003 	stmia.w	r8, {r0, r1}
 8023b98:	4640      	mov	r0, r8
 8023b9a:	4621      	mov	r1, r4
 8023b9c:	f7f1 fd08 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 8023ba0:	4640      	mov	r0, r8
 8023ba2:	f7f1 fd48 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8023ba6:	2800      	cmp	r0, #0
 8023ba8:	d1d6      	bne.n	8023b58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8023baa:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023bae:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023bb2:	4293      	cmp	r3, r2
 8023bb4:	dd12      	ble.n	8023bdc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 8023bb6:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023bba:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023bbe:	1a9b      	subs	r3, r3, r2
 8023bc0:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023bc4:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023bc8:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023bcc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023bd0:	464a      	mov	r2, r9
 8023bd2:	4633      	mov	r3, r6
 8023bd4:	a902      	add	r1, sp, #8
 8023bd6:	4628      	mov	r0, r5
 8023bd8:	f7ff f8c0 	bl	8022d5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023bdc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023be0:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023be4:	4293      	cmp	r3, r2
 8023be6:	dd12      	ble.n	8023c0e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8023be8:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023bec:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023bf0:	1a9b      	subs	r3, r3, r2
 8023bf2:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023bf6:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023bfa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023bfe:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023c02:	23ff      	movs	r3, #255	@ 0xff
 8023c04:	464a      	mov	r2, r9
 8023c06:	a902      	add	r1, sp, #8
 8023c08:	4628      	mov	r0, r5
 8023c0a:	f7ff f8a7 	bl	8022d5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023c0e:	4643      	mov	r3, r8
 8023c10:	aa02      	add	r2, sp, #8
 8023c12:	4629      	mov	r1, r5
 8023c14:	4638      	mov	r0, r7
 8023c16:	f7ff f987 	bl	8022f28 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8023c1a:	88a2      	ldrh	r2, [r4, #4]
 8023c1c:	8823      	ldrh	r3, [r4, #0]
 8023c1e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023c22:	4413      	add	r3, r2
 8023c24:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023c28:	b29b      	uxth	r3, r3
 8023c2a:	440a      	add	r2, r1
 8023c2c:	b292      	uxth	r2, r2
 8023c2e:	b211      	sxth	r1, r2
 8023c30:	b218      	sxth	r0, r3
 8023c32:	4288      	cmp	r0, r1
 8023c34:	dd12      	ble.n	8023c5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 8023c36:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023c3a:	1a9b      	subs	r3, r3, r2
 8023c3c:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8023c40:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023c44:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023c48:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023c4c:	23ff      	movs	r3, #255	@ 0xff
 8023c4e:	464a      	mov	r2, r9
 8023c50:	a902      	add	r1, sp, #8
 8023c52:	4628      	mov	r0, r5
 8023c54:	f8ad 601a 	strh.w	r6, [sp, #26]
 8023c58:	f7ff f880 	bl	8022d5c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8023c5c:	88e2      	ldrh	r2, [r4, #6]
 8023c5e:	8863      	ldrh	r3, [r4, #2]
 8023c60:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023c64:	4413      	add	r3, r2
 8023c66:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023c6a:	b29b      	uxth	r3, r3
 8023c6c:	440a      	add	r2, r1
 8023c6e:	b292      	uxth	r2, r2
 8023c70:	b211      	sxth	r1, r2
 8023c72:	b218      	sxth	r0, r3
 8023c74:	4288      	cmp	r0, r1
 8023c76:	dd80      	ble.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023c78:	f9b4 6000 	ldrsh.w	r6, [r4]
 8023c7c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023c80:	1a9b      	subs	r3, r3, r2
 8023c82:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023c86:	f8ad 6018 	strh.w	r6, [sp, #24]
 8023c8a:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023c8e:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023c92:	23ff      	movs	r3, #255	@ 0xff
 8023c94:	464a      	mov	r2, r9
 8023c96:	e761      	b.n	8023b5c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8023c98:	4633      	mov	r3, r6
 8023c9a:	4622      	mov	r2, r4
 8023c9c:	a902      	add	r1, sp, #8
 8023c9e:	4628      	mov	r0, r5
 8023ca0:	f7ff f9b2 	bl	8023008 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 8023ca4:	e769      	b.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023ca6:	e9cd 4600 	strd	r4, r6, [sp]
 8023caa:	ab02      	add	r3, sp, #8
 8023cac:	4652      	mov	r2, sl
 8023cae:	4629      	mov	r1, r5
 8023cb0:	4638      	mov	r0, r7
 8023cb2:	f7ff fd89 	bl	80237c8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8023cb6:	e760      	b.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023cb8:	4640      	mov	r0, r8
 8023cba:	f7f9 fff5 	bl	801dca8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8023cbe:	b948      	cbnz	r0, 8023cd4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8023cc0:	683b      	ldr	r3, [r7, #0]
 8023cc2:	e9cd 6000 	strd	r6, r0, [sp]
 8023cc6:	aa02      	add	r2, sp, #8
 8023cc8:	68de      	ldr	r6, [r3, #12]
 8023cca:	4629      	mov	r1, r5
 8023ccc:	4623      	mov	r3, r4
 8023cce:	4638      	mov	r0, r7
 8023cd0:	47b0      	blx	r6
 8023cd2:	e752      	b.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023cd4:	f10d 0918 	add.w	r9, sp, #24
 8023cd8:	4641      	mov	r1, r8
 8023cda:	4648      	mov	r0, r9
 8023cdc:	f10d 0810 	add.w	r8, sp, #16
 8023ce0:	f7f9 ff90 	bl	801dc04 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8023ce4:	e899 0003 	ldmia.w	r9, {r0, r1}
 8023ce8:	e888 0003 	stmia.w	r8, {r0, r1}
 8023cec:	4640      	mov	r0, r8
 8023cee:	4621      	mov	r1, r4
 8023cf0:	f7f1 fc5e 	bl	80155b0 <_ZN8touchgfx4RectaNERKS0_>
 8023cf4:	4640      	mov	r0, r8
 8023cf6:	f7f1 fc9e 	bl	8015636 <_ZNK8touchgfx4Rect7isEmptyEv>
 8023cfa:	b138      	cbz	r0, 8023d0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 8023cfc:	4623      	mov	r3, r4
 8023cfe:	9600      	str	r6, [sp, #0]
 8023d00:	aa02      	add	r2, sp, #8
 8023d02:	4651      	mov	r1, sl
 8023d04:	4628      	mov	r0, r5
 8023d06:	f7ff fdbd 	bl	8023884 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023d0a:	e736      	b.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023d0c:	683b      	ldr	r3, [r7, #0]
 8023d0e:	e9cd 6000 	strd	r6, r0, [sp]
 8023d12:	aa02      	add	r2, sp, #8
 8023d14:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 8023d18:	4629      	mov	r1, r5
 8023d1a:	4643      	mov	r3, r8
 8023d1c:	4638      	mov	r0, r7
 8023d1e:	47d8      	blx	fp
 8023d20:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8023d24:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8023d28:	4293      	cmp	r3, r2
 8023d2a:	dd13      	ble.n	8023d54 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 8023d2c:	f9b4 0000 	ldrsh.w	r0, [r4]
 8023d30:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8023d34:	1a9b      	subs	r3, r3, r2
 8023d36:	f8ad 0018 	strh.w	r0, [sp, #24]
 8023d3a:	f8ad 201a 	strh.w	r2, [sp, #26]
 8023d3e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8023d42:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023d46:	9600      	str	r6, [sp, #0]
 8023d48:	464b      	mov	r3, r9
 8023d4a:	aa02      	add	r2, sp, #8
 8023d4c:	4651      	mov	r1, sl
 8023d4e:	4628      	mov	r0, r5
 8023d50:	f7ff fd98 	bl	8023884 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023d54:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8023d58:	f9b4 2000 	ldrsh.w	r2, [r4]
 8023d5c:	4293      	cmp	r3, r2
 8023d5e:	dd13      	ble.n	8023d88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8023d60:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8023d64:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8023d68:	1a9b      	subs	r3, r3, r2
 8023d6a:	f8ad 2018 	strh.w	r2, [sp, #24]
 8023d6e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8023d72:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023d76:	f8ad 101e 	strh.w	r1, [sp, #30]
 8023d7a:	9600      	str	r6, [sp, #0]
 8023d7c:	464b      	mov	r3, r9
 8023d7e:	aa02      	add	r2, sp, #8
 8023d80:	4651      	mov	r1, sl
 8023d82:	4628      	mov	r0, r5
 8023d84:	f7ff fd7e 	bl	8023884 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023d88:	88a2      	ldrh	r2, [r4, #4]
 8023d8a:	8823      	ldrh	r3, [r4, #0]
 8023d8c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8023d90:	4413      	add	r3, r2
 8023d92:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8023d96:	b29b      	uxth	r3, r3
 8023d98:	440a      	add	r2, r1
 8023d9a:	b292      	uxth	r2, r2
 8023d9c:	b211      	sxth	r1, r2
 8023d9e:	b218      	sxth	r0, r3
 8023da0:	4288      	cmp	r0, r1
 8023da2:	dd13      	ble.n	8023dcc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 8023da4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8023da8:	1a9b      	subs	r3, r3, r2
 8023daa:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8023dae:	f8ad 1018 	strh.w	r1, [sp, #24]
 8023db2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8023db6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8023dba:	9600      	str	r6, [sp, #0]
 8023dbc:	464b      	mov	r3, r9
 8023dbe:	aa02      	add	r2, sp, #8
 8023dc0:	4651      	mov	r1, sl
 8023dc2:	4628      	mov	r0, r5
 8023dc4:	f8ad 701a 	strh.w	r7, [sp, #26]
 8023dc8:	f7ff fd5c 	bl	8023884 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8023dcc:	88e2      	ldrh	r2, [r4, #6]
 8023dce:	8863      	ldrh	r3, [r4, #2]
 8023dd0:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8023dd4:	4413      	add	r3, r2
 8023dd6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8023dda:	b29b      	uxth	r3, r3
 8023ddc:	440a      	add	r2, r1
 8023dde:	b292      	uxth	r2, r2
 8023de0:	b211      	sxth	r1, r2
 8023de2:	b218      	sxth	r0, r3
 8023de4:	4288      	cmp	r0, r1
 8023de6:	f77f aec8 	ble.w	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023dea:	f9b4 7000 	ldrsh.w	r7, [r4]
 8023dee:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8023df2:	1a9b      	subs	r3, r3, r2
 8023df4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023df8:	f8ad 7018 	strh.w	r7, [sp, #24]
 8023dfc:	f8ad 101a 	strh.w	r1, [sp, #26]
 8023e00:	f8ad 001c 	strh.w	r0, [sp, #28]
 8023e04:	9600      	str	r6, [sp, #0]
 8023e06:	464b      	mov	r3, r9
 8023e08:	e77a      	b.n	8023d00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 8023e0a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023e0e:	2800      	cmp	r0, #0
 8023e10:	f43f aeb3 	beq.w	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023e14:	6803      	ldr	r3, [r0, #0]
 8023e16:	9600      	str	r6, [sp, #0]
 8023e18:	68de      	ldr	r6, [r3, #12]
 8023e1a:	4623      	mov	r3, r4
 8023e1c:	aa02      	add	r2, sp, #8
 8023e1e:	4629      	mov	r1, r5
 8023e20:	47b0      	blx	r6
 8023e22:	e6aa      	b.n	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023e24:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023e28:	2800      	cmp	r0, #0
 8023e2a:	f43f aea6 	beq.w	8023b7a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8023e2e:	6803      	ldr	r3, [r0, #0]
 8023e30:	9600      	str	r6, [sp, #0]
 8023e32:	689e      	ldr	r6, [r3, #8]
 8023e34:	e7f1      	b.n	8023e1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 8023e36:	bf00      	nop
 8023e38:	20012104 	.word	0x20012104

08023e3c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8023e3c:	b180      	cbz	r0, 8023e60 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8023e3e:	2903      	cmp	r1, #3
 8023e40:	d81c      	bhi.n	8023e7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023e42:	e8df f001 	tbb	[pc, r1]
 8023e46:	1d02      	.short	0x1d02
 8023e48:	1f08      	.short	0x1f08
 8023e4a:	4b10      	ldr	r3, [pc, #64]	@ (8023e8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023e4c:	8818      	ldrh	r0, [r3, #0]
 8023e4e:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023e52:	4240      	negs	r0, r0
 8023e54:	4770      	bx	lr
 8023e56:	4b0d      	ldr	r3, [pc, #52]	@ (8023e8c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8023e58:	8818      	ldrh	r0, [r3, #0]
 8023e5a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023e5e:	4770      	bx	lr
 8023e60:	2903      	cmp	r1, #3
 8023e62:	d80b      	bhi.n	8023e7c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 8023e64:	a301      	add	r3, pc, #4	@ (adr r3, 8023e6c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 8023e66:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023e6a:	bf00      	nop
 8023e6c:	08023e81 	.word	0x08023e81
 8023e70:	08023e57 	.word	0x08023e57
 8023e74:	08023e85 	.word	0x08023e85
 8023e78:	08023e4b 	.word	0x08023e4b
 8023e7c:	2000      	movs	r0, #0
 8023e7e:	4770      	bx	lr
 8023e80:	2001      	movs	r0, #1
 8023e82:	4770      	bx	lr
 8023e84:	f04f 30ff 	mov.w	r0, #4294967295
 8023e88:	4770      	bx	lr
 8023e8a:	bf00      	nop
 8023e8c:	200120fe 	.word	0x200120fe

08023e90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8023e90:	b180      	cbz	r0, 8023eb4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 8023e92:	2903      	cmp	r1, #3
 8023e94:	d81c      	bhi.n	8023ed0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023e96:	e8df f001 	tbb	[pc, r1]
 8023e9a:	021d      	.short	0x021d
 8023e9c:	071f      	.short	0x071f
 8023e9e:	4b10      	ldr	r3, [pc, #64]	@ (8023ee0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023ea0:	8818      	ldrh	r0, [r3, #0]
 8023ea2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023ea6:	4770      	bx	lr
 8023ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8023ee0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8023eaa:	8818      	ldrh	r0, [r3, #0]
 8023eac:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8023eb0:	4240      	negs	r0, r0
 8023eb2:	4770      	bx	lr
 8023eb4:	2903      	cmp	r1, #3
 8023eb6:	d80b      	bhi.n	8023ed0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8023eb8:	a301      	add	r3, pc, #4	@ (adr r3, 8023ec0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8023eba:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8023ebe:	bf00      	nop
 8023ec0:	08023e9f 	.word	0x08023e9f
 8023ec4:	08023ed9 	.word	0x08023ed9
 8023ec8:	08023ea9 	.word	0x08023ea9
 8023ecc:	08023ed5 	.word	0x08023ed5
 8023ed0:	2000      	movs	r0, #0
 8023ed2:	4770      	bx	lr
 8023ed4:	2001      	movs	r0, #1
 8023ed6:	4770      	bx	lr
 8023ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8023edc:	4770      	bx	lr
 8023ede:	bf00      	nop
 8023ee0:	200120fe 	.word	0x200120fe

08023ee4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8023ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ee8:	b099      	sub	sp, #100	@ 0x64
 8023eea:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023eec:	a914      	add	r1, sp, #80	@ 0x50
 8023eee:	e881 000c 	stmia.w	r1, {r2, r3}
 8023ef2:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 8023ef6:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 8023efa:	f891 900d 	ldrb.w	r9, [r1, #13]
 8023efe:	9309      	str	r3, [sp, #36]	@ 0x24
 8023f00:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8023f04:	ea4f 1749 	mov.w	r7, r9, lsl #5
 8023f08:	9310      	str	r3, [sp, #64]	@ 0x40
 8023f0a:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 8023f0e:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 8023f12:	930c      	str	r3, [sp, #48]	@ 0x30
 8023f14:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 8023f18:	798f      	ldrb	r7, [r1, #6]
 8023f1a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 8023f1e:	431f      	orrs	r7, r3
 8023f20:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 8023f24:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 8023f28:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 8023f2c:	f000 8194 	beq.w	8024258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8023f30:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8023f34:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8023f38:	f891 9007 	ldrb.w	r9, [r1, #7]
 8023f3c:	ea59 0903 	orrs.w	r9, r9, r3
 8023f40:	f000 818a 	beq.w	8024258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8023f44:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8023f48:	b29b      	uxth	r3, r3
 8023f4a:	2d00      	cmp	r5, #0
 8023f4c:	f000 812f 	beq.w	80241ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 8023f50:	1aed      	subs	r5, r5, r3
 8023f52:	b2ad      	uxth	r5, r5
 8023f54:	042b      	lsls	r3, r5, #16
 8023f56:	d502      	bpl.n	8023f5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8023f58:	1b64      	subs	r4, r4, r5
 8023f5a:	2500      	movs	r5, #0
 8023f5c:	b224      	sxth	r4, r4
 8023f5e:	f9b2 1000 	ldrsh.w	r1, [r2]
 8023f62:	a814      	add	r0, sp, #80	@ 0x50
 8023f64:	428c      	cmp	r4, r1
 8023f66:	b28b      	uxth	r3, r1
 8023f68:	bfbf      	itttt	lt
 8023f6a:	18ed      	addlt	r5, r5, r3
 8023f6c:	1b2c      	sublt	r4, r5, r4
 8023f6e:	b2a5      	uxthlt	r5, r4
 8023f70:	460c      	movlt	r4, r1
 8023f72:	8891      	ldrh	r1, [r2, #4]
 8023f74:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 8023f78:	440b      	add	r3, r1
 8023f7a:	b21b      	sxth	r3, r3
 8023f7c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023f7e:	88d3      	ldrh	r3, [r2, #6]
 8023f80:	8852      	ldrh	r2, [r2, #2]
 8023f82:	4621      	mov	r1, r4
 8023f84:	4413      	add	r3, r2
 8023f86:	b21b      	sxth	r3, r3
 8023f88:	930d      	str	r3, [sp, #52]	@ 0x34
 8023f8a:	4bbd      	ldr	r3, [pc, #756]	@ (8024280 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8023f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023f8e:	f893 b000 	ldrb.w	fp, [r3]
 8023f92:	f10b 3cff 	add.w	ip, fp, #4294967295
 8023f96:	f1dc 0300 	rsbs	r3, ip, #0
 8023f9a:	eb43 030c 	adc.w	r3, r3, ip
 8023f9e:	930e      	str	r3, [sp, #56]	@ 0x38
 8023fa0:	4653      	mov	r3, sl
 8023fa2:	f7f6 f9aa 	bl	801a2fa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8023fa6:	4621      	mov	r1, r4
 8023fa8:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8023fac:	4653      	mov	r3, sl
 8023fae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023fb0:	a814      	add	r0, sp, #80	@ 0x50
 8023fb2:	f7f6 f9bf 	bl	801a334 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8023fb6:	a918      	add	r1, sp, #96	@ 0x60
 8023fb8:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8023fbc:	a817      	add	r0, sp, #92	@ 0x5c
 8023fbe:	f7f6 fae5 	bl	801a58c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8023fc2:	f1ba 0f00 	cmp.w	sl, #0
 8023fc6:	f040 80f5 	bne.w	80241b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 8023fca:	f1bb 0f01 	cmp.w	fp, #1
 8023fce:	f040 80f9 	bne.w	80241c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 8023fd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8023fd4:	2b00      	cmp	r3, #0
 8023fd6:	f040 8144 	bne.w	8024262 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 8023fda:	b2ba      	uxth	r2, r7
 8023fdc:	b905      	cbnz	r5, 8023fe0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8023fde:	b16e      	cbz	r6, 8023ffc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8023fe0:	4631      	mov	r1, r6
 8023fe2:	fb06 5302 	mla	r3, r6, r2, r5
 8023fe6:	fb08 f303 	mul.w	r3, r8, r3
 8023fea:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8023fec:	f003 0607 	and.w	r6, r3, #7
 8023ff0:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 8023ff4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8023ff6:	eba9 0301 	sub.w	r3, r9, r1
 8023ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8023ffc:	4651      	mov	r1, sl
 8023ffe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024000:	f7ff ff1c 	bl	8023e3c <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8024004:	4681      	mov	r9, r0
 8024006:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8024008:	f7ff ff42 	bl	8023e90 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802400c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802400e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8024010:	4683      	mov	fp, r0
 8024012:	eba3 0a01 	sub.w	sl, r3, r1
 8024016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024018:	459a      	cmp	sl, r3
 802401a:	bfa8      	it	ge
 802401c:	469a      	movge	sl, r3
 802401e:	f1ba 0f00 	cmp.w	sl, #0
 8024022:	f340 8119 	ble.w	8024258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 8024026:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024028:	1b64      	subs	r4, r4, r5
 802402a:	1b1c      	subs	r4, r3, r4
 802402c:	42bc      	cmp	r4, r7
 802402e:	bfd4      	ite	le
 8024030:	ebc5 0504 	rsble	r5, r5, r4
 8024034:	ebc5 0507 	rsbgt	r5, r5, r7
 8024038:	2d00      	cmp	r5, #0
 802403a:	f340 810d 	ble.w	8024258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 802403e:	1b52      	subs	r2, r2, r5
 8024040:	fb08 f302 	mul.w	r3, r8, r2
 8024044:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8024048:	2b00      	cmp	r3, #0
 802404a:	f040 8115 	bne.w	8024278 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 802404e:	4b8d      	ldr	r3, [pc, #564]	@ (8024284 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8024050:	6818      	ldr	r0, [r3, #0]
 8024052:	6803      	ldr	r3, [r0, #0]
 8024054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024056:	4798      	blx	r3
 8024058:	2301      	movs	r3, #1
 802405a:	fa03 f308 	lsl.w	r3, r3, r8
 802405e:	4a8a      	ldr	r2, [pc, #552]	@ (8024288 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8024060:	3b01      	subs	r3, #1
 8024062:	b2db      	uxtb	r3, r3
 8024064:	8811      	ldrh	r1, [r2, #0]
 8024066:	930e      	str	r3, [sp, #56]	@ 0x38
 8024068:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 802406c:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8024070:	fb01 2303 	mla	r3, r1, r3, r2
 8024074:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8024078:	930a      	str	r3, [sp, #40]	@ 0x28
 802407a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802407c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8024080:	9313      	str	r3, [sp, #76]	@ 0x4c
 8024082:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024084:	0a19      	lsrs	r1, r3, #8
 8024086:	b2cb      	uxtb	r3, r1
 8024088:	9312      	str	r3, [sp, #72]	@ 0x48
 802408a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802408c:	b2db      	uxtb	r3, r3
 802408e:	9311      	str	r3, [sp, #68]	@ 0x44
 8024090:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024092:	095a      	lsrs	r2, r3, #5
 8024094:	4b7d      	ldr	r3, [pc, #500]	@ (802428c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 8024096:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802409a:	400b      	ands	r3, r1
 802409c:	4313      	orrs	r3, r2
 802409e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80240a0:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80240a4:	4313      	orrs	r3, r2
 80240a6:	b29b      	uxth	r3, r3
 80240a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80240aa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80240ac:	781a      	ldrb	r2, [r3, #0]
 80240ae:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80240b2:	fb05 b919 	mls	r9, r5, r9, fp
 80240b6:	fb03 fb05 	mul.w	fp, r3, r5
 80240ba:	4132      	asrs	r2, r6
 80240bc:	b2d2      	uxtb	r2, r2
 80240be:	930d      	str	r3, [sp, #52]	@ 0x34
 80240c0:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 80240c4:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80240c8:	f0c0 80f3 	bcc.w	80242b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 80240cc:	46ae      	mov	lr, r5
 80240ce:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 80240d2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80240d6:	f0c0 80db 	bcc.w	8024290 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80240da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80240dc:	4013      	ands	r3, r2
 80240de:	d055      	beq.n	802418c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80240e0:	20ff      	movs	r0, #255	@ 0xff
 80240e2:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80240e4:	fb90 f1f1 	sdiv	r1, r0, r1
 80240e8:	434b      	muls	r3, r1
 80240ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80240ec:	dd03      	ble.n	80240f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80240ee:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80240f0:	4281      	cmp	r1, r0
 80240f2:	f000 80c3 	beq.w	802427c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 80240f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80240f8:	f8bc 4000 	ldrh.w	r4, [ip]
 80240fc:	fb11 f303 	smulbb	r3, r1, r3
 8024100:	b29b      	uxth	r3, r3
 8024102:	1c59      	adds	r1, r3, #1
 8024104:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024108:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802410c:	b29f      	uxth	r7, r3
 802410e:	43db      	mvns	r3, r3
 8024110:	b2db      	uxtb	r3, r3
 8024112:	9309      	str	r3, [sp, #36]	@ 0x24
 8024114:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024116:	1220      	asrs	r0, r4, #8
 8024118:	fb13 f907 	smulbb	r9, r3, r7
 802411c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8024120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024122:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8024126:	fb00 9003 	mla	r0, r0, r3, r9
 802412a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802412c:	10e1      	asrs	r1, r4, #3
 802412e:	fb13 f907 	smulbb	r9, r3, r7
 8024132:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024138:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802413c:	fb01 9103 	mla	r1, r1, r3, r9
 8024140:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024142:	00e4      	lsls	r4, r4, #3
 8024144:	fb13 f707 	smulbb	r7, r3, r7
 8024148:	b2e4      	uxtb	r4, r4
 802414a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802414c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8024150:	fb04 7403 	mla	r4, r4, r3, r7
 8024154:	b280      	uxth	r0, r0
 8024156:	b2a4      	uxth	r4, r4
 8024158:	1c43      	adds	r3, r0, #1
 802415a:	f104 0901 	add.w	r9, r4, #1
 802415e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024162:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 8024166:	b289      	uxth	r1, r1
 8024168:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 802416c:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8024170:	ea49 0000 	orr.w	r0, r9, r0
 8024174:	f101 0901 	add.w	r9, r1, #1
 8024178:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 802417c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8024180:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8024184:	ea40 0009 	orr.w	r0, r0, r9
 8024188:	f8ac 0000 	strh.w	r0, [ip]
 802418c:	4446      	add	r6, r8
 802418e:	b2b6      	uxth	r6, r6
 8024190:	2e07      	cmp	r6, #7
 8024192:	bf89      	itett	hi
 8024194:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 8024196:	fa42 f208 	asrls.w	r2, r2, r8
 802419a:	785a      	ldrbhi	r2, [r3, #1]
 802419c:	3301      	addhi	r3, #1
 802419e:	bf88      	it	hi
 80241a0:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 80241a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80241a4:	bf94      	ite	ls
 80241a6:	b2d2      	uxtbls	r2, r2
 80241a8:	2600      	movhi	r6, #0
 80241aa:	449c      	add	ip, r3
 80241ac:	e791      	b.n	80240d2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 80241ae:	441c      	add	r4, r3
 80241b0:	b224      	sxth	r4, r4
 80241b2:	e6d4      	b.n	8023f5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 80241b4:	f1ba 0f01 	cmp.w	sl, #1
 80241b8:	f47f af0b 	bne.w	8023fd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80241bc:	f1bb 0f01 	cmp.w	fp, #1
 80241c0:	f47f af07 	bne.w	8023fd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80241c4:	f8df b0bc 	ldr.w	fp, [pc, #188]	@ 8024284 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 80241c8:	f8db 0000 	ldr.w	r0, [fp]
 80241cc:	6803      	ldr	r3, [r0, #0]
 80241ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80241d0:	4798      	blx	r3
 80241d2:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 80241d6:	465a      	mov	r2, fp
 80241d8:	d006      	beq.n	80241e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 80241da:	f1b8 0f04 	cmp.w	r8, #4
 80241de:	d13e      	bne.n	802425e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 80241e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80241e2:	3300      	adds	r3, #0
 80241e4:	bf18      	it	ne
 80241e6:	2301      	movne	r3, #1
 80241e8:	0580      	lsls	r0, r0, #22
 80241ea:	d56b      	bpl.n	80242c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 80241ec:	f1b8 0f08 	cmp.w	r8, #8
 80241f0:	d168      	bne.n	80242c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 80241f2:	2b00      	cmp	r3, #0
 80241f4:	bf0c      	ite	eq
 80241f6:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80241fa:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80241fe:	2d00      	cmp	r5, #0
 8024200:	f47f aee7 	bne.w	8023fd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8024204:	2e00      	cmp	r6, #0
 8024206:	f47f aee4 	bne.w	8023fd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 802420a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 802420c:	19e3      	adds	r3, r4, r7
 802420e:	4283      	cmp	r3, r0
 8024210:	f73f aedf 	bgt.w	8023fd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8024214:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024216:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8024218:	444b      	add	r3, r9
 802421a:	4283      	cmp	r3, r0
 802421c:	f73f aed9 	bgt.w	8023fd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8024220:	2500      	movs	r5, #0
 8024222:	6810      	ldr	r0, [r2, #0]
 8024224:	b2bf      	uxth	r7, r7
 8024226:	6804      	ldr	r4, [r0, #0]
 8024228:	f1b8 0f08 	cmp.w	r8, #8
 802422c:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024230:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8024232:	bf1c      	itt	ne
 8024234:	3701      	addne	r7, #1
 8024236:	f027 0701 	bicne.w	r7, r7, #1
 802423a:	9104      	str	r1, [sp, #16]
 802423c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 802423e:	bf18      	it	ne
 8024240:	b2bf      	uxthne	r7, r7
 8024242:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8024246:	e9cd 7900 	strd	r7, r9, [sp]
 802424a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 802424e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 8024252:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8024254:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8024256:	47a0      	blx	r4
 8024258:	b019      	add	sp, #100	@ 0x64
 802425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802425e:	2300      	movs	r3, #0
 8024260:	e7c2      	b.n	80241e8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 8024262:	2208      	movs	r2, #8
 8024264:	fb92 f3f8 	sdiv	r3, r2, r8
 8024268:	1e5a      	subs	r2, r3, #1
 802426a:	443a      	add	r2, r7
 802426c:	fb92 f2f3 	sdiv	r2, r2, r3
 8024270:	fb12 f203 	smulbb	r2, r2, r3
 8024274:	b292      	uxth	r2, r2
 8024276:	e6b1      	b.n	8023fdc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8024278:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802427a:	e6ed      	b.n	8024058 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 802427c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 802427e:	e783      	b.n	8024188 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 8024280:	200120fc 	.word	0x200120fc
 8024284:	20012104 	.word	0x20012104
 8024288:	200120fe 	.word	0x200120fe
 802428c:	00fff800 	.word	0x00fff800
 8024290:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024292:	b153      	cbz	r3, 80242aa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 8024294:	441e      	add	r6, r3
 8024296:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8024298:	b2b6      	uxth	r6, r6
 802429a:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 802429e:	781a      	ldrb	r2, [r3, #0]
 80242a0:	f006 0607 	and.w	r6, r6, #7
 80242a4:	4132      	asrs	r2, r6
 80242a6:	9328      	str	r3, [sp, #160]	@ 0xa0
 80242a8:	b2d2      	uxtb	r2, r2
 80242aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80242ac:	445b      	add	r3, fp
 80242ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80242b0:	e708      	b.n	80240c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 80242b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80242b4:	2b00      	cmp	r3, #0
 80242b6:	d1cf      	bne.n	8024258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80242b8:	4b05      	ldr	r3, [pc, #20]	@ (80242d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 80242ba:	6818      	ldr	r0, [r3, #0]
 80242bc:	6803      	ldr	r3, [r0, #0]
 80242be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80242c0:	4798      	blx	r3
 80242c2:	e7c9      	b.n	8024258 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80242c4:	2b00      	cmp	r3, #0
 80242c6:	f43f ae84 	beq.w	8023fd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80242ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80242ce:	e796      	b.n	80241fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 80242d0:	20012104 	.word	0x20012104

080242d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 80242d4:	b538      	push	{r3, r4, r5, lr}
 80242d6:	4605      	mov	r5, r0
 80242d8:	4c13      	ldr	r4, [pc, #76]	@ (8024328 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 80242da:	e8d4 3f8f 	ldab	r3, [r4]
 80242de:	07da      	lsls	r2, r3, #31
 80242e0:	d40b      	bmi.n	80242fa <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 80242e2:	4620      	mov	r0, r4
 80242e4:	f008 f9cf 	bl	802c686 <__cxa_guard_acquire>
 80242e8:	b138      	cbz	r0, 80242fa <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 80242ea:	4620      	mov	r0, r4
 80242ec:	f008 f9d7 	bl	802c69e <__cxa_guard_release>
 80242f0:	4a0e      	ldr	r2, [pc, #56]	@ (802432c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 80242f2:	490f      	ldr	r1, [pc, #60]	@ (8024330 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 80242f4:	480f      	ldr	r0, [pc, #60]	@ (8024334 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 80242f6:	f008 f9bf 	bl	802c678 <__aeabi_atexit>
 80242fa:	4c0f      	ldr	r4, [pc, #60]	@ (8024338 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 80242fc:	e8d4 3f8f 	ldab	r3, [r4]
 8024300:	07db      	lsls	r3, r3, #31
 8024302:	d40b      	bmi.n	802431c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 8024304:	4620      	mov	r0, r4
 8024306:	f008 f9be 	bl	802c686 <__cxa_guard_acquire>
 802430a:	b138      	cbz	r0, 802431c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 802430c:	4620      	mov	r0, r4
 802430e:	f008 f9c6 	bl	802c69e <__cxa_guard_release>
 8024312:	4a06      	ldr	r2, [pc, #24]	@ (802432c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8024314:	4909      	ldr	r1, [pc, #36]	@ (802433c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 8024316:	480a      	ldr	r0, [pc, #40]	@ (8024340 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8024318:	f008 f9ae 	bl	802c678 <__aeabi_atexit>
 802431c:	4b05      	ldr	r3, [pc, #20]	@ (8024334 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 802431e:	616b      	str	r3, [r5, #20]
 8024320:	4b07      	ldr	r3, [pc, #28]	@ (8024340 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8024322:	61ab      	str	r3, [r5, #24]
 8024324:	bd38      	pop	{r3, r4, r5, pc}
 8024326:	bf00      	nop
 8024328:	200121e8 	.word	0x200121e8
 802432c:	20000000 	.word	0x20000000
 8024330:	08020497 	.word	0x08020497
 8024334:	20000074 	.word	0x20000074
 8024338:	200121ec 	.word	0x200121ec
 802433c:	08020495 	.word	0x08020495
 8024340:	20000078 	.word	0x20000078

08024344 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8024344:	b538      	push	{r3, r4, r5, lr}
 8024346:	4605      	mov	r5, r0
 8024348:	4c13      	ldr	r4, [pc, #76]	@ (8024398 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 802434a:	e8d4 3f8f 	ldab	r3, [r4]
 802434e:	07da      	lsls	r2, r3, #31
 8024350:	d40b      	bmi.n	802436a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 8024352:	4620      	mov	r0, r4
 8024354:	f008 f997 	bl	802c686 <__cxa_guard_acquire>
 8024358:	b138      	cbz	r0, 802436a <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 802435a:	4620      	mov	r0, r4
 802435c:	f008 f99f 	bl	802c69e <__cxa_guard_release>
 8024360:	4a0e      	ldr	r2, [pc, #56]	@ (802439c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8024362:	490f      	ldr	r1, [pc, #60]	@ (80243a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8024364:	480f      	ldr	r0, [pc, #60]	@ (80243a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8024366:	f008 f987 	bl	802c678 <__aeabi_atexit>
 802436a:	4c0f      	ldr	r4, [pc, #60]	@ (80243a8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 802436c:	e8d4 3f8f 	ldab	r3, [r4]
 8024370:	07db      	lsls	r3, r3, #31
 8024372:	d40b      	bmi.n	802438c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 8024374:	4620      	mov	r0, r4
 8024376:	f008 f986 	bl	802c686 <__cxa_guard_acquire>
 802437a:	b138      	cbz	r0, 802438c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 802437c:	4620      	mov	r0, r4
 802437e:	f008 f98e 	bl	802c69e <__cxa_guard_release>
 8024382:	4a06      	ldr	r2, [pc, #24]	@ (802439c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8024384:	4909      	ldr	r1, [pc, #36]	@ (80243ac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 8024386:	480a      	ldr	r0, [pc, #40]	@ (80243b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8024388:	f008 f976 	bl	802c678 <__aeabi_atexit>
 802438c:	4b05      	ldr	r3, [pc, #20]	@ (80243a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 802438e:	60eb      	str	r3, [r5, #12]
 8024390:	4b07      	ldr	r3, [pc, #28]	@ (80243b0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 8024392:	612b      	str	r3, [r5, #16]
 8024394:	bd38      	pop	{r3, r4, r5, pc}
 8024396:	bf00      	nop
 8024398:	200121c0 	.word	0x200121c0
 802439c:	20000000 	.word	0x20000000
 80243a0:	0802049b 	.word	0x0802049b
 80243a4:	2000004c 	.word	0x2000004c
 80243a8:	200121c4 	.word	0x200121c4
 80243ac:	08020499 	.word	0x08020499
 80243b0:	20000050 	.word	0x20000050

080243b4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 80243b4:	b510      	push	{r4, lr}
 80243b6:	4604      	mov	r4, r0
 80243b8:	f7ff ff8c 	bl	80242d4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80243bc:	4620      	mov	r0, r4
 80243be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80243c2:	f7ff bfbf 	b.w	8024344 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080243c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80243c8:	b538      	push	{r3, r4, r5, lr}
 80243ca:	4605      	mov	r5, r0
 80243cc:	4c13      	ldr	r4, [pc, #76]	@ (802441c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 80243ce:	e8d4 3f8f 	ldab	r3, [r4]
 80243d2:	07da      	lsls	r2, r3, #31
 80243d4:	d40b      	bmi.n	80243ee <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 80243d6:	4620      	mov	r0, r4
 80243d8:	f008 f955 	bl	802c686 <__cxa_guard_acquire>
 80243dc:	b138      	cbz	r0, 80243ee <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 80243de:	4620      	mov	r0, r4
 80243e0:	f008 f95d 	bl	802c69e <__cxa_guard_release>
 80243e4:	4a0e      	ldr	r2, [pc, #56]	@ (8024420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80243e6:	490f      	ldr	r1, [pc, #60]	@ (8024424 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80243e8:	480f      	ldr	r0, [pc, #60]	@ (8024428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80243ea:	f008 f945 	bl	802c678 <__aeabi_atexit>
 80243ee:	4c0f      	ldr	r4, [pc, #60]	@ (802442c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80243f0:	e8d4 3f8f 	ldab	r3, [r4]
 80243f4:	07db      	lsls	r3, r3, #31
 80243f6:	d40b      	bmi.n	8024410 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 80243f8:	4620      	mov	r0, r4
 80243fa:	f008 f944 	bl	802c686 <__cxa_guard_acquire>
 80243fe:	b138      	cbz	r0, 8024410 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 8024400:	4620      	mov	r0, r4
 8024402:	f008 f94c 	bl	802c69e <__cxa_guard_release>
 8024406:	4a06      	ldr	r2, [pc, #24]	@ (8024420 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8024408:	4909      	ldr	r1, [pc, #36]	@ (8024430 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 802440a:	480a      	ldr	r0, [pc, #40]	@ (8024434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 802440c:	f008 f934 	bl	802c678 <__aeabi_atexit>
 8024410:	4b05      	ldr	r3, [pc, #20]	@ (8024428 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8024412:	626b      	str	r3, [r5, #36]	@ 0x24
 8024414:	4b07      	ldr	r3, [pc, #28]	@ (8024434 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8024416:	62ab      	str	r3, [r5, #40]	@ 0x28
 8024418:	bd38      	pop	{r3, r4, r5, pc}
 802441a:	bf00      	nop
 802441c:	200121f0 	.word	0x200121f0
 8024420:	20000000 	.word	0x20000000
 8024424:	0802048f 	.word	0x0802048f
 8024428:	2000007c 	.word	0x2000007c
 802442c:	200121f4 	.word	0x200121f4
 8024430:	0802048d 	.word	0x0802048d
 8024434:	20000080 	.word	0x20000080

08024438 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8024438:	b538      	push	{r3, r4, r5, lr}
 802443a:	4605      	mov	r5, r0
 802443c:	4c13      	ldr	r4, [pc, #76]	@ (802448c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 802443e:	e8d4 3f8f 	ldab	r3, [r4]
 8024442:	07da      	lsls	r2, r3, #31
 8024444:	d40b      	bmi.n	802445e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 8024446:	4620      	mov	r0, r4
 8024448:	f008 f91d 	bl	802c686 <__cxa_guard_acquire>
 802444c:	b138      	cbz	r0, 802445e <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 802444e:	4620      	mov	r0, r4
 8024450:	f008 f925 	bl	802c69e <__cxa_guard_release>
 8024454:	4a0e      	ldr	r2, [pc, #56]	@ (8024490 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024456:	490f      	ldr	r1, [pc, #60]	@ (8024494 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8024458:	480f      	ldr	r0, [pc, #60]	@ (8024498 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 802445a:	f008 f90d 	bl	802c678 <__aeabi_atexit>
 802445e:	4c0f      	ldr	r4, [pc, #60]	@ (802449c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8024460:	e8d4 3f8f 	ldab	r3, [r4]
 8024464:	07db      	lsls	r3, r3, #31
 8024466:	d40b      	bmi.n	8024480 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 8024468:	4620      	mov	r0, r4
 802446a:	f008 f90c 	bl	802c686 <__cxa_guard_acquire>
 802446e:	b138      	cbz	r0, 8024480 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 8024470:	4620      	mov	r0, r4
 8024472:	f008 f914 	bl	802c69e <__cxa_guard_release>
 8024476:	4a06      	ldr	r2, [pc, #24]	@ (8024490 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8024478:	4909      	ldr	r1, [pc, #36]	@ (80244a0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802447a:	480a      	ldr	r0, [pc, #40]	@ (80244a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 802447c:	f008 f8fc 	bl	802c678 <__aeabi_atexit>
 8024480:	4b05      	ldr	r3, [pc, #20]	@ (8024498 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8024482:	61eb      	str	r3, [r5, #28]
 8024484:	4b07      	ldr	r3, [pc, #28]	@ (80244a4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8024486:	622b      	str	r3, [r5, #32]
 8024488:	bd38      	pop	{r3, r4, r5, pc}
 802448a:	bf00      	nop
 802448c:	200121c8 	.word	0x200121c8
 8024490:	20000000 	.word	0x20000000
 8024494:	08020493 	.word	0x08020493
 8024498:	20000054 	.word	0x20000054
 802449c:	200121cc 	.word	0x200121cc
 80244a0:	08020491 	.word	0x08020491
 80244a4:	20000058 	.word	0x20000058

080244a8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 80244a8:	b510      	push	{r4, lr}
 80244aa:	4604      	mov	r4, r0
 80244ac:	f7ff ff8c 	bl	80243c8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80244b0:	4620      	mov	r0, r4
 80244b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80244b6:	f7ff bfbf 	b.w	8024438 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080244bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80244bc:	b538      	push	{r3, r4, r5, lr}
 80244be:	4605      	mov	r5, r0
 80244c0:	4c13      	ldr	r4, [pc, #76]	@ (8024510 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 80244c2:	e8d4 3f8f 	ldab	r3, [r4]
 80244c6:	07da      	lsls	r2, r3, #31
 80244c8:	d40b      	bmi.n	80244e2 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 80244ca:	4620      	mov	r0, r4
 80244cc:	f008 f8db 	bl	802c686 <__cxa_guard_acquire>
 80244d0:	b138      	cbz	r0, 80244e2 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 80244d2:	4620      	mov	r0, r4
 80244d4:	f008 f8e3 	bl	802c69e <__cxa_guard_release>
 80244d8:	4a0e      	ldr	r2, [pc, #56]	@ (8024514 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80244da:	490f      	ldr	r1, [pc, #60]	@ (8024518 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80244dc:	480f      	ldr	r0, [pc, #60]	@ (802451c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80244de:	f008 f8cb 	bl	802c678 <__aeabi_atexit>
 80244e2:	4c0f      	ldr	r4, [pc, #60]	@ (8024520 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80244e4:	e8d4 3f8f 	ldab	r3, [r4]
 80244e8:	07db      	lsls	r3, r3, #31
 80244ea:	d40b      	bmi.n	8024504 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 80244ec:	4620      	mov	r0, r4
 80244ee:	f008 f8ca 	bl	802c686 <__cxa_guard_acquire>
 80244f2:	b138      	cbz	r0, 8024504 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 80244f4:	4620      	mov	r0, r4
 80244f6:	f008 f8d2 	bl	802c69e <__cxa_guard_release>
 80244fa:	4a06      	ldr	r2, [pc, #24]	@ (8024514 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80244fc:	4909      	ldr	r1, [pc, #36]	@ (8024524 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80244fe:	480a      	ldr	r0, [pc, #40]	@ (8024528 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8024500:	f008 f8ba 	bl	802c678 <__aeabi_atexit>
 8024504:	4b05      	ldr	r3, [pc, #20]	@ (802451c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8024506:	636b      	str	r3, [r5, #52]	@ 0x34
 8024508:	4b07      	ldr	r3, [pc, #28]	@ (8024528 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 802450a:	63ab      	str	r3, [r5, #56]	@ 0x38
 802450c:	bd38      	pop	{r3, r4, r5, pc}
 802450e:	bf00      	nop
 8024510:	20012200 	.word	0x20012200
 8024514:	20000000 	.word	0x20000000
 8024518:	08020487 	.word	0x08020487
 802451c:	2000008c 	.word	0x2000008c
 8024520:	20012204 	.word	0x20012204
 8024524:	08020485 	.word	0x08020485
 8024528:	20000090 	.word	0x20000090

0802452c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 802452c:	b538      	push	{r3, r4, r5, lr}
 802452e:	4605      	mov	r5, r0
 8024530:	4c13      	ldr	r4, [pc, #76]	@ (8024580 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 8024532:	e8d4 3f8f 	ldab	r3, [r4]
 8024536:	07da      	lsls	r2, r3, #31
 8024538:	d40b      	bmi.n	8024552 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 802453a:	4620      	mov	r0, r4
 802453c:	f008 f8a3 	bl	802c686 <__cxa_guard_acquire>
 8024540:	b138      	cbz	r0, 8024552 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 8024542:	4620      	mov	r0, r4
 8024544:	f008 f8ab 	bl	802c69e <__cxa_guard_release>
 8024548:	4a0e      	ldr	r2, [pc, #56]	@ (8024584 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802454a:	490f      	ldr	r1, [pc, #60]	@ (8024588 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 802454c:	480f      	ldr	r0, [pc, #60]	@ (802458c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 802454e:	f008 f893 	bl	802c678 <__aeabi_atexit>
 8024552:	4c0f      	ldr	r4, [pc, #60]	@ (8024590 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8024554:	e8d4 3f8f 	ldab	r3, [r4]
 8024558:	07db      	lsls	r3, r3, #31
 802455a:	d40b      	bmi.n	8024574 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 802455c:	4620      	mov	r0, r4
 802455e:	f008 f892 	bl	802c686 <__cxa_guard_acquire>
 8024562:	b138      	cbz	r0, 8024574 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 8024564:	4620      	mov	r0, r4
 8024566:	f008 f89a 	bl	802c69e <__cxa_guard_release>
 802456a:	4a06      	ldr	r2, [pc, #24]	@ (8024584 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 802456c:	4909      	ldr	r1, [pc, #36]	@ (8024594 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 802456e:	480a      	ldr	r0, [pc, #40]	@ (8024598 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8024570:	f008 f882 	bl	802c678 <__aeabi_atexit>
 8024574:	4b05      	ldr	r3, [pc, #20]	@ (802458c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8024576:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8024578:	4b07      	ldr	r3, [pc, #28]	@ (8024598 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 802457a:	632b      	str	r3, [r5, #48]	@ 0x30
 802457c:	bd38      	pop	{r3, r4, r5, pc}
 802457e:	bf00      	nop
 8024580:	200121d0 	.word	0x200121d0
 8024584:	20000000 	.word	0x20000000
 8024588:	0802048b 	.word	0x0802048b
 802458c:	2000005c 	.word	0x2000005c
 8024590:	200121d4 	.word	0x200121d4
 8024594:	08020489 	.word	0x08020489
 8024598:	20000060 	.word	0x20000060

0802459c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 802459c:	b510      	push	{r4, lr}
 802459e:	4604      	mov	r4, r0
 80245a0:	f7ff ff8c 	bl	80244bc <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80245a4:	4620      	mov	r0, r4
 80245a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80245aa:	f7ff bfbf 	b.w	802452c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080245b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80245b0:	b538      	push	{r3, r4, r5, lr}
 80245b2:	4605      	mov	r5, r0
 80245b4:	4c13      	ldr	r4, [pc, #76]	@ (8024604 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 80245b6:	e8d4 3f8f 	ldab	r3, [r4]
 80245ba:	07da      	lsls	r2, r3, #31
 80245bc:	d40b      	bmi.n	80245d6 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 80245be:	4620      	mov	r0, r4
 80245c0:	f008 f861 	bl	802c686 <__cxa_guard_acquire>
 80245c4:	b138      	cbz	r0, 80245d6 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 80245c6:	4620      	mov	r0, r4
 80245c8:	f008 f869 	bl	802c69e <__cxa_guard_release>
 80245cc:	4a0e      	ldr	r2, [pc, #56]	@ (8024608 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80245ce:	490f      	ldr	r1, [pc, #60]	@ (802460c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80245d0:	480f      	ldr	r0, [pc, #60]	@ (8024610 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80245d2:	f008 f851 	bl	802c678 <__aeabi_atexit>
 80245d6:	4c0f      	ldr	r4, [pc, #60]	@ (8024614 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80245d8:	e8d4 3f8f 	ldab	r3, [r4]
 80245dc:	07db      	lsls	r3, r3, #31
 80245de:	d40b      	bmi.n	80245f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 80245e0:	4620      	mov	r0, r4
 80245e2:	f008 f850 	bl	802c686 <__cxa_guard_acquire>
 80245e6:	b138      	cbz	r0, 80245f8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 80245e8:	4620      	mov	r0, r4
 80245ea:	f008 f858 	bl	802c69e <__cxa_guard_release>
 80245ee:	4a06      	ldr	r2, [pc, #24]	@ (8024608 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80245f0:	4909      	ldr	r1, [pc, #36]	@ (8024618 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80245f2:	480a      	ldr	r0, [pc, #40]	@ (802461c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80245f4:	f008 f840 	bl	802c678 <__aeabi_atexit>
 80245f8:	4b05      	ldr	r3, [pc, #20]	@ (8024610 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80245fa:	656b      	str	r3, [r5, #84]	@ 0x54
 80245fc:	4b07      	ldr	r3, [pc, #28]	@ (802461c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80245fe:	65ab      	str	r3, [r5, #88]	@ 0x58
 8024600:	bd38      	pop	{r3, r4, r5, pc}
 8024602:	bf00      	nop
 8024604:	20012208 	.word	0x20012208
 8024608:	20000000 	.word	0x20000000
 802460c:	08020477 	.word	0x08020477
 8024610:	20000094 	.word	0x20000094
 8024614:	2001220c 	.word	0x2001220c
 8024618:	08020475 	.word	0x08020475
 802461c:	20000098 	.word	0x20000098

08024620 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8024620:	b538      	push	{r3, r4, r5, lr}
 8024622:	4605      	mov	r5, r0
 8024624:	4c13      	ldr	r4, [pc, #76]	@ (8024674 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 8024626:	e8d4 3f8f 	ldab	r3, [r4]
 802462a:	07da      	lsls	r2, r3, #31
 802462c:	d40b      	bmi.n	8024646 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 802462e:	4620      	mov	r0, r4
 8024630:	f008 f829 	bl	802c686 <__cxa_guard_acquire>
 8024634:	b138      	cbz	r0, 8024646 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 8024636:	4620      	mov	r0, r4
 8024638:	f008 f831 	bl	802c69e <__cxa_guard_release>
 802463c:	4a0e      	ldr	r2, [pc, #56]	@ (8024678 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 802463e:	490f      	ldr	r1, [pc, #60]	@ (802467c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8024640:	480f      	ldr	r0, [pc, #60]	@ (8024680 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8024642:	f008 f819 	bl	802c678 <__aeabi_atexit>
 8024646:	4c0f      	ldr	r4, [pc, #60]	@ (8024684 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8024648:	e8d4 3f8f 	ldab	r3, [r4]
 802464c:	07db      	lsls	r3, r3, #31
 802464e:	d40b      	bmi.n	8024668 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8024650:	4620      	mov	r0, r4
 8024652:	f008 f818 	bl	802c686 <__cxa_guard_acquire>
 8024656:	b138      	cbz	r0, 8024668 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 8024658:	4620      	mov	r0, r4
 802465a:	f008 f820 	bl	802c69e <__cxa_guard_release>
 802465e:	4a06      	ldr	r2, [pc, #24]	@ (8024678 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8024660:	4909      	ldr	r1, [pc, #36]	@ (8024688 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 8024662:	480a      	ldr	r0, [pc, #40]	@ (802468c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8024664:	f008 f808 	bl	802c678 <__aeabi_atexit>
 8024668:	4b05      	ldr	r3, [pc, #20]	@ (8024680 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 802466a:	64eb      	str	r3, [r5, #76]	@ 0x4c
 802466c:	4b07      	ldr	r3, [pc, #28]	@ (802468c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 802466e:	652b      	str	r3, [r5, #80]	@ 0x50
 8024670:	bd38      	pop	{r3, r4, r5, pc}
 8024672:	bf00      	nop
 8024674:	20012210 	.word	0x20012210
 8024678:	20000000 	.word	0x20000000
 802467c:	0802047b 	.word	0x0802047b
 8024680:	2000009c 	.word	0x2000009c
 8024684:	20012214 	.word	0x20012214
 8024688:	08020479 	.word	0x08020479
 802468c:	200000a0 	.word	0x200000a0

08024690 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8024690:	b538      	push	{r3, r4, r5, lr}
 8024692:	4605      	mov	r5, r0
 8024694:	4c13      	ldr	r4, [pc, #76]	@ (80246e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 8024696:	e8d4 3f8f 	ldab	r3, [r4]
 802469a:	07da      	lsls	r2, r3, #31
 802469c:	d40b      	bmi.n	80246b6 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 802469e:	4620      	mov	r0, r4
 80246a0:	f007 fff1 	bl	802c686 <__cxa_guard_acquire>
 80246a4:	b138      	cbz	r0, 80246b6 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 80246a6:	4620      	mov	r0, r4
 80246a8:	f007 fff9 	bl	802c69e <__cxa_guard_release>
 80246ac:	4a0e      	ldr	r2, [pc, #56]	@ (80246e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80246ae:	490f      	ldr	r1, [pc, #60]	@ (80246ec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80246b0:	480f      	ldr	r0, [pc, #60]	@ (80246f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80246b2:	f007 ffe1 	bl	802c678 <__aeabi_atexit>
 80246b6:	4c0f      	ldr	r4, [pc, #60]	@ (80246f4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80246b8:	e8d4 3f8f 	ldab	r3, [r4]
 80246bc:	07db      	lsls	r3, r3, #31
 80246be:	d40b      	bmi.n	80246d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 80246c0:	4620      	mov	r0, r4
 80246c2:	f007 ffe0 	bl	802c686 <__cxa_guard_acquire>
 80246c6:	b138      	cbz	r0, 80246d8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 80246c8:	4620      	mov	r0, r4
 80246ca:	f007 ffe8 	bl	802c69e <__cxa_guard_release>
 80246ce:	4a06      	ldr	r2, [pc, #24]	@ (80246e8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80246d0:	4909      	ldr	r1, [pc, #36]	@ (80246f8 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80246d2:	480a      	ldr	r0, [pc, #40]	@ (80246fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80246d4:	f007 ffd0 	bl	802c678 <__aeabi_atexit>
 80246d8:	4b05      	ldr	r3, [pc, #20]	@ (80246f0 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80246da:	646b      	str	r3, [r5, #68]	@ 0x44
 80246dc:	4b07      	ldr	r3, [pc, #28]	@ (80246fc <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80246de:	64ab      	str	r3, [r5, #72]	@ 0x48
 80246e0:	bd38      	pop	{r3, r4, r5, pc}
 80246e2:	bf00      	nop
 80246e4:	200121d8 	.word	0x200121d8
 80246e8:	20000000 	.word	0x20000000
 80246ec:	0802047f 	.word	0x0802047f
 80246f0:	20000064 	.word	0x20000064
 80246f4:	200121dc 	.word	0x200121dc
 80246f8:	0802047d 	.word	0x0802047d
 80246fc:	20000068 	.word	0x20000068

08024700 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8024700:	b538      	push	{r3, r4, r5, lr}
 8024702:	4605      	mov	r5, r0
 8024704:	4c13      	ldr	r4, [pc, #76]	@ (8024754 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 8024706:	e8d4 3f8f 	ldab	r3, [r4]
 802470a:	07da      	lsls	r2, r3, #31
 802470c:	d40b      	bmi.n	8024726 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 802470e:	4620      	mov	r0, r4
 8024710:	f007 ffb9 	bl	802c686 <__cxa_guard_acquire>
 8024714:	b138      	cbz	r0, 8024726 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 8024716:	4620      	mov	r0, r4
 8024718:	f007 ffc1 	bl	802c69e <__cxa_guard_release>
 802471c:	4a0e      	ldr	r2, [pc, #56]	@ (8024758 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802471e:	490f      	ldr	r1, [pc, #60]	@ (802475c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8024720:	480f      	ldr	r0, [pc, #60]	@ (8024760 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 8024722:	f007 ffa9 	bl	802c678 <__aeabi_atexit>
 8024726:	4c0f      	ldr	r4, [pc, #60]	@ (8024764 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8024728:	e8d4 3f8f 	ldab	r3, [r4]
 802472c:	07db      	lsls	r3, r3, #31
 802472e:	d40b      	bmi.n	8024748 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8024730:	4620      	mov	r0, r4
 8024732:	f007 ffa8 	bl	802c686 <__cxa_guard_acquire>
 8024736:	b138      	cbz	r0, 8024748 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 8024738:	4620      	mov	r0, r4
 802473a:	f007 ffb0 	bl	802c69e <__cxa_guard_release>
 802473e:	4a06      	ldr	r2, [pc, #24]	@ (8024758 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 8024740:	4909      	ldr	r1, [pc, #36]	@ (8024768 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8024742:	480a      	ldr	r0, [pc, #40]	@ (802476c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 8024744:	f007 ff98 	bl	802c678 <__aeabi_atexit>
 8024748:	4b05      	ldr	r3, [pc, #20]	@ (8024760 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802474a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 802474c:	4b07      	ldr	r3, [pc, #28]	@ (802476c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802474e:	642b      	str	r3, [r5, #64]	@ 0x40
 8024750:	bd38      	pop	{r3, r4, r5, pc}
 8024752:	bf00      	nop
 8024754:	200121f8 	.word	0x200121f8
 8024758:	20000000 	.word	0x20000000
 802475c:	08020483 	.word	0x08020483
 8024760:	20000084 	.word	0x20000084
 8024764:	200121fc 	.word	0x200121fc
 8024768:	08020481 	.word	0x08020481
 802476c:	20000088 	.word	0x20000088

08024770 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 8024770:	b510      	push	{r4, lr}
 8024772:	4604      	mov	r4, r0
 8024774:	f7ff ff1c 	bl	80245b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8024778:	4620      	mov	r0, r4
 802477a:	f7ff ff89 	bl	8024690 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 802477e:	4620      	mov	r0, r4
 8024780:	f7ff ff4e 	bl	8024620 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8024784:	4620      	mov	r0, r4
 8024786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802478a:	f7ff bfb9 	b.w	8024700 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

08024790 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8024790:	b538      	push	{r3, r4, r5, lr}
 8024792:	4605      	mov	r5, r0
 8024794:	4c13      	ldr	r4, [pc, #76]	@ (80247e4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 8024796:	e8d4 3f8f 	ldab	r3, [r4]
 802479a:	07da      	lsls	r2, r3, #31
 802479c:	d40b      	bmi.n	80247b6 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 802479e:	4620      	mov	r0, r4
 80247a0:	f007 ff71 	bl	802c686 <__cxa_guard_acquire>
 80247a4:	b138      	cbz	r0, 80247b6 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 80247a6:	4620      	mov	r0, r4
 80247a8:	f007 ff79 	bl	802c69e <__cxa_guard_release>
 80247ac:	4a0e      	ldr	r2, [pc, #56]	@ (80247e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80247ae:	490f      	ldr	r1, [pc, #60]	@ (80247ec <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80247b0:	480f      	ldr	r0, [pc, #60]	@ (80247f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80247b2:	f007 ff61 	bl	802c678 <__aeabi_atexit>
 80247b6:	4c0f      	ldr	r4, [pc, #60]	@ (80247f4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80247b8:	e8d4 3f8f 	ldab	r3, [r4]
 80247bc:	07db      	lsls	r3, r3, #31
 80247be:	d40b      	bmi.n	80247d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 80247c0:	4620      	mov	r0, r4
 80247c2:	f007 ff60 	bl	802c686 <__cxa_guard_acquire>
 80247c6:	b138      	cbz	r0, 80247d8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 80247c8:	4620      	mov	r0, r4
 80247ca:	f007 ff68 	bl	802c69e <__cxa_guard_release>
 80247ce:	4a06      	ldr	r2, [pc, #24]	@ (80247e8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80247d0:	4909      	ldr	r1, [pc, #36]	@ (80247f8 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80247d2:	480a      	ldr	r0, [pc, #40]	@ (80247fc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80247d4:	f007 ff50 	bl	802c678 <__aeabi_atexit>
 80247d8:	4b05      	ldr	r3, [pc, #20]	@ (80247f0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80247da:	666b      	str	r3, [r5, #100]	@ 0x64
 80247dc:	4b07      	ldr	r3, [pc, #28]	@ (80247fc <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80247de:	66ab      	str	r3, [r5, #104]	@ 0x68
 80247e0:	bd38      	pop	{r3, r4, r5, pc}
 80247e2:	bf00      	nop
 80247e4:	200121e0 	.word	0x200121e0
 80247e8:	20000000 	.word	0x20000000
 80247ec:	0802046f 	.word	0x0802046f
 80247f0:	2000006c 	.word	0x2000006c
 80247f4:	200121e4 	.word	0x200121e4
 80247f8:	0802046d 	.word	0x0802046d
 80247fc:	20000070 	.word	0x20000070

08024800 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8024800:	b538      	push	{r3, r4, r5, lr}
 8024802:	4605      	mov	r5, r0
 8024804:	4c13      	ldr	r4, [pc, #76]	@ (8024854 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 8024806:	e8d4 3f8f 	ldab	r3, [r4]
 802480a:	07da      	lsls	r2, r3, #31
 802480c:	d40b      	bmi.n	8024826 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 802480e:	4620      	mov	r0, r4
 8024810:	f007 ff39 	bl	802c686 <__cxa_guard_acquire>
 8024814:	b138      	cbz	r0, 8024826 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 8024816:	4620      	mov	r0, r4
 8024818:	f007 ff41 	bl	802c69e <__cxa_guard_release>
 802481c:	4a0e      	ldr	r2, [pc, #56]	@ (8024858 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 802481e:	490f      	ldr	r1, [pc, #60]	@ (802485c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8024820:	480f      	ldr	r0, [pc, #60]	@ (8024860 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8024822:	f007 ff29 	bl	802c678 <__aeabi_atexit>
 8024826:	4c0f      	ldr	r4, [pc, #60]	@ (8024864 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8024828:	e8d4 3f8f 	ldab	r3, [r4]
 802482c:	07db      	lsls	r3, r3, #31
 802482e:	d40b      	bmi.n	8024848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8024830:	4620      	mov	r0, r4
 8024832:	f007 ff28 	bl	802c686 <__cxa_guard_acquire>
 8024836:	b138      	cbz	r0, 8024848 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 8024838:	4620      	mov	r0, r4
 802483a:	f007 ff30 	bl	802c69e <__cxa_guard_release>
 802483e:	4a06      	ldr	r2, [pc, #24]	@ (8024858 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8024840:	4909      	ldr	r1, [pc, #36]	@ (8024868 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8024842:	480a      	ldr	r0, [pc, #40]	@ (802486c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8024844:	f007 ff18 	bl	802c678 <__aeabi_atexit>
 8024848:	4b05      	ldr	r3, [pc, #20]	@ (8024860 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 802484a:	65eb      	str	r3, [r5, #92]	@ 0x5c
 802484c:	4b07      	ldr	r3, [pc, #28]	@ (802486c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 802484e:	662b      	str	r3, [r5, #96]	@ 0x60
 8024850:	bd38      	pop	{r3, r4, r5, pc}
 8024852:	bf00      	nop
 8024854:	200121b8 	.word	0x200121b8
 8024858:	20000000 	.word	0x20000000
 802485c:	08020473 	.word	0x08020473
 8024860:	20000044 	.word	0x20000044
 8024864:	200121bc 	.word	0x200121bc
 8024868:	08020471 	.word	0x08020471
 802486c:	20000048 	.word	0x20000048

08024870 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 8024870:	b510      	push	{r4, lr}
 8024872:	4604      	mov	r4, r0
 8024874:	f7ff ff8c 	bl	8024790 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8024878:	4620      	mov	r0, r4
 802487a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802487e:	f7ff bfbf 	b.w	8024800 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08024884 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8024884:	b538      	push	{r3, r4, r5, lr}
 8024886:	4605      	mov	r5, r0
 8024888:	4c13      	ldr	r4, [pc, #76]	@ (80248d8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 802488a:	e8d4 3f8f 	ldab	r3, [r4]
 802488e:	07da      	lsls	r2, r3, #31
 8024890:	d40b      	bmi.n	80248aa <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 8024892:	4620      	mov	r0, r4
 8024894:	f007 fef7 	bl	802c686 <__cxa_guard_acquire>
 8024898:	b138      	cbz	r0, 80248aa <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 802489a:	4620      	mov	r0, r4
 802489c:	f007 feff 	bl	802c69e <__cxa_guard_release>
 80248a0:	4a0e      	ldr	r2, [pc, #56]	@ (80248dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80248a2:	490f      	ldr	r1, [pc, #60]	@ (80248e0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80248a4:	480f      	ldr	r0, [pc, #60]	@ (80248e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80248a6:	f007 fee7 	bl	802c678 <__aeabi_atexit>
 80248aa:	4c0f      	ldr	r4, [pc, #60]	@ (80248e8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80248ac:	e8d4 3f8f 	ldab	r3, [r4]
 80248b0:	07db      	lsls	r3, r3, #31
 80248b2:	d40b      	bmi.n	80248cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 80248b4:	4620      	mov	r0, r4
 80248b6:	f007 fee6 	bl	802c686 <__cxa_guard_acquire>
 80248ba:	b138      	cbz	r0, 80248cc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 80248bc:	4620      	mov	r0, r4
 80248be:	f007 feee 	bl	802c69e <__cxa_guard_release>
 80248c2:	4a06      	ldr	r2, [pc, #24]	@ (80248dc <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80248c4:	4909      	ldr	r1, [pc, #36]	@ (80248ec <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80248c6:	480a      	ldr	r0, [pc, #40]	@ (80248f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80248c8:	f007 fed6 	bl	802c678 <__aeabi_atexit>
 80248cc:	4b05      	ldr	r3, [pc, #20]	@ (80248e4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80248ce:	676b      	str	r3, [r5, #116]	@ 0x74
 80248d0:	4b07      	ldr	r3, [pc, #28]	@ (80248f0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80248d2:	67ab      	str	r3, [r5, #120]	@ 0x78
 80248d4:	bd38      	pop	{r3, r4, r5, pc}
 80248d6:	bf00      	nop
 80248d8:	200121b0 	.word	0x200121b0
 80248dc:	20000000 	.word	0x20000000
 80248e0:	08020467 	.word	0x08020467
 80248e4:	2000003c 	.word	0x2000003c
 80248e8:	200121b4 	.word	0x200121b4
 80248ec:	08020465 	.word	0x08020465
 80248f0:	20000040 	.word	0x20000040

080248f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 80248f4:	b538      	push	{r3, r4, r5, lr}
 80248f6:	4605      	mov	r5, r0
 80248f8:	4c13      	ldr	r4, [pc, #76]	@ (8024948 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 80248fa:	e8d4 3f8f 	ldab	r3, [r4]
 80248fe:	07da      	lsls	r2, r3, #31
 8024900:	d40b      	bmi.n	802491a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 8024902:	4620      	mov	r0, r4
 8024904:	f007 febf 	bl	802c686 <__cxa_guard_acquire>
 8024908:	b138      	cbz	r0, 802491a <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 802490a:	4620      	mov	r0, r4
 802490c:	f007 fec7 	bl	802c69e <__cxa_guard_release>
 8024910:	4a0e      	ldr	r2, [pc, #56]	@ (802494c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024912:	490f      	ldr	r1, [pc, #60]	@ (8024950 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8024914:	480f      	ldr	r0, [pc, #60]	@ (8024954 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8024916:	f007 feaf 	bl	802c678 <__aeabi_atexit>
 802491a:	4c0f      	ldr	r4, [pc, #60]	@ (8024958 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802491c:	e8d4 3f8f 	ldab	r3, [r4]
 8024920:	07db      	lsls	r3, r3, #31
 8024922:	d40b      	bmi.n	802493c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 8024924:	4620      	mov	r0, r4
 8024926:	f007 feae 	bl	802c686 <__cxa_guard_acquire>
 802492a:	b138      	cbz	r0, 802493c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 802492c:	4620      	mov	r0, r4
 802492e:	f007 feb6 	bl	802c69e <__cxa_guard_release>
 8024932:	4a06      	ldr	r2, [pc, #24]	@ (802494c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8024934:	4909      	ldr	r1, [pc, #36]	@ (802495c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8024936:	480a      	ldr	r0, [pc, #40]	@ (8024960 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024938:	f007 fe9e 	bl	802c678 <__aeabi_atexit>
 802493c:	4b05      	ldr	r3, [pc, #20]	@ (8024954 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 802493e:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8024940:	4b07      	ldr	r3, [pc, #28]	@ (8024960 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8024942:	672b      	str	r3, [r5, #112]	@ 0x70
 8024944:	bd38      	pop	{r3, r4, r5, pc}
 8024946:	bf00      	nop
 8024948:	200121a8 	.word	0x200121a8
 802494c:	20000000 	.word	0x20000000
 8024950:	0802046b 	.word	0x0802046b
 8024954:	20000034 	.word	0x20000034
 8024958:	200121ac 	.word	0x200121ac
 802495c:	08020469 	.word	0x08020469
 8024960:	20000038 	.word	0x20000038

08024964 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 8024964:	b510      	push	{r4, lr}
 8024966:	4604      	mov	r4, r0
 8024968:	f7ff ff8c 	bl	8024884 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802496c:	4620      	mov	r0, r4
 802496e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024972:	f7ff bfbf 	b.w	80248f4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

08024976 <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 8024976:	b510      	push	{r4, lr}
 8024978:	4604      	mov	r4, r0
 802497a:	f7ff fff3 	bl	8024964 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 802497e:	4620      	mov	r0, r4
 8024980:	f7ff ff76 	bl	8024870 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 8024984:	4620      	mov	r0, r4
 8024986:	f7ff fe09 	bl	802459c <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 802498a:	4620      	mov	r0, r4
 802498c:	f7ff fd12 	bl	80243b4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 8024990:	4620      	mov	r0, r4
 8024992:	f7ff fd89 	bl	80244a8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 8024996:	4620      	mov	r0, r4
 8024998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802499c:	f7ff bee8 	b.w	8024770 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

080249a0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 80249a0:	b538      	push	{r3, r4, r5, lr}
 80249a2:	4605      	mov	r5, r0
 80249a4:	4c09      	ldr	r4, [pc, #36]	@ (80249cc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x2c>)
 80249a6:	e8d4 3f8f 	ldab	r3, [r4]
 80249aa:	07db      	lsls	r3, r3, #31
 80249ac:	d40b      	bmi.n	80249c6 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 80249ae:	4620      	mov	r0, r4
 80249b0:	f007 fe69 	bl	802c686 <__cxa_guard_acquire>
 80249b4:	b138      	cbz	r0, 80249c6 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x26>
 80249b6:	4620      	mov	r0, r4
 80249b8:	f007 fe71 	bl	802c69e <__cxa_guard_release>
 80249bc:	4a04      	ldr	r2, [pc, #16]	@ (80249d0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 80249be:	4905      	ldr	r1, [pc, #20]	@ (80249d4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 80249c0:	4805      	ldr	r0, [pc, #20]	@ (80249d8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 80249c2:	f007 fe59 	bl	802c678 <__aeabi_atexit>
 80249c6:	4b04      	ldr	r3, [pc, #16]	@ (80249d8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 80249c8:	67eb      	str	r3, [r5, #124]	@ 0x7c
 80249ca:	bd38      	pop	{r3, r4, r5, pc}
 80249cc:	2001219c 	.word	0x2001219c
 80249d0:	20000000 	.word	0x20000000
 80249d4:	08020463 	.word	0x08020463
 80249d8:	2000002c 	.word	0x2000002c

080249dc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>:
 80249dc:	b538      	push	{r3, r4, r5, lr}
 80249de:	4605      	mov	r5, r0
 80249e0:	4c0a      	ldr	r4, [pc, #40]	@ (8024a0c <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x30>)
 80249e2:	e8d4 3f8f 	ldab	r3, [r4]
 80249e6:	07db      	lsls	r3, r3, #31
 80249e8:	d40b      	bmi.n	8024a02 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 80249ea:	4620      	mov	r0, r4
 80249ec:	f007 fe4b 	bl	802c686 <__cxa_guard_acquire>
 80249f0:	b138      	cbz	r0, 8024a02 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x26>
 80249f2:	4620      	mov	r0, r4
 80249f4:	f007 fe53 	bl	802c69e <__cxa_guard_release>
 80249f8:	4a05      	ldr	r2, [pc, #20]	@ (8024a10 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x34>)
 80249fa:	4906      	ldr	r1, [pc, #24]	@ (8024a14 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x38>)
 80249fc:	4806      	ldr	r0, [pc, #24]	@ (8024a18 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 80249fe:	f007 fe3b 	bl	802c678 <__aeabi_atexit>
 8024a02:	4b05      	ldr	r3, [pc, #20]	@ (8024a18 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv+0x3c>)
 8024a04:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 8024a08:	bd38      	pop	{r3, r4, r5, pc}
 8024a0a:	bf00      	nop
 8024a0c:	200121a0 	.word	0x200121a0
 8024a10:	20000000 	.word	0x20000000
 8024a14:	08020461 	.word	0x08020461
 8024a18:	20000030 	.word	0x20000030

08024a1c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>:
 8024a1c:	b570      	push	{r4, r5, r6, lr}
 8024a1e:	4606      	mov	r6, r0
 8024a20:	4d0b      	ldr	r5, [pc, #44]	@ (8024a50 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8024a22:	e8d5 3f8f 	ldab	r3, [r5]
 8024a26:	f013 0f01 	tst.w	r3, #1
 8024a2a:	4c0a      	ldr	r4, [pc, #40]	@ (8024a54 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8024a2c:	d10d      	bne.n	8024a4a <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8024a2e:	4628      	mov	r0, r5
 8024a30:	f007 fe29 	bl	802c686 <__cxa_guard_acquire>
 8024a34:	b148      	cbz	r0, 8024a4a <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x2e>
 8024a36:	4b08      	ldr	r3, [pc, #32]	@ (8024a58 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8024a38:	4628      	mov	r0, r5
 8024a3a:	6023      	str	r3, [r4, #0]
 8024a3c:	f007 fe2f 	bl	802c69e <__cxa_guard_release>
 8024a40:	4a06      	ldr	r2, [pc, #24]	@ (8024a5c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8024a42:	4907      	ldr	r1, [pc, #28]	@ (8024a60 <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8024a44:	4620      	mov	r0, r4
 8024a46:	f007 fe17 	bl	802c678 <__aeabi_atexit>
 8024a4a:	f8c6 4084 	str.w	r4, [r6, #132]	@ 0x84
 8024a4e:	bd70      	pop	{r4, r5, r6, pc}
 8024a50:	200121a4 	.word	0x200121a4
 8024a54:	2001231c 	.word	0x2001231c
 8024a58:	080305e8 	.word	0x080305e8
 8024a5c:	20000000 	.word	0x20000000
 8024a60:	0802045f 	.word	0x0802045f

08024a64 <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_AllEv>:
 8024a64:	b510      	push	{r4, lr}
 8024a66:	4604      	mov	r4, r0
 8024a68:	f7ff ff9a 	bl	80249a0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
 8024a6c:	4620      	mov	r0, r4
 8024a6e:	f7ff ffb5 	bl	80249dc <_ZN8touchgfx8LCD16bpp24enableDecompressorL8_RLEEv>
 8024a72:	4620      	mov	r0, r4
 8024a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024a78:	f7ff bfd0 	b.w	8024a1c <_ZN8touchgfx8LCD16bpp25enableDecompressorL8_LZW9Ev>

08024a7c <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv>:
 8024a7c:	b570      	push	{r4, r5, r6, lr}
 8024a7e:	4606      	mov	r6, r0
 8024a80:	4d0b      	ldr	r5, [pc, #44]	@ (8024ab0 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x34>)
 8024a82:	e8d5 3f8f 	ldab	r3, [r5]
 8024a86:	f013 0f01 	tst.w	r3, #1
 8024a8a:	4c0a      	ldr	r4, [pc, #40]	@ (8024ab4 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x38>)
 8024a8c:	d10d      	bne.n	8024aaa <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8024a8e:	4628      	mov	r0, r5
 8024a90:	f007 fdf9 	bl	802c686 <__cxa_guard_acquire>
 8024a94:	b148      	cbz	r0, 8024aaa <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x2e>
 8024a96:	4b08      	ldr	r3, [pc, #32]	@ (8024ab8 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x3c>)
 8024a98:	4628      	mov	r0, r5
 8024a9a:	6023      	str	r3, [r4, #0]
 8024a9c:	f007 fdff 	bl	802c69e <__cxa_guard_release>
 8024aa0:	4a06      	ldr	r2, [pc, #24]	@ (8024abc <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x40>)
 8024aa2:	4907      	ldr	r1, [pc, #28]	@ (8024ac0 <_ZN8touchgfx8LCD16bpp21enableDecompressorRGBEv+0x44>)
 8024aa4:	4620      	mov	r0, r4
 8024aa6:	f007 fde7 	bl	802c678 <__aeabi_atexit>
 8024aaa:	f8c6 4088 	str.w	r4, [r6, #136]	@ 0x88
 8024aae:	bd70      	pop	{r4, r5, r6, pc}
 8024ab0:	20012198 	.word	0x20012198
 8024ab4:	20012218 	.word	0x20012218
 8024ab8:	08030604 	.word	0x08030604
 8024abc:	20000000 	.word	0x20000000
 8024ac0:	0802045d 	.word	0x0802045d

08024ac4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 8024ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ac8:	f9bd e024 	ldrsh.w	lr, [sp, #36]	@ 0x24
 8024acc:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	@ 0x2c
 8024ad0:	fb05 4c0e 	mla	ip, r5, lr, r4
 8024ad4:	2d00      	cmp	r5, #0
 8024ad6:	f9bd b028 	ldrsh.w	fp, [sp, #40]	@ 0x28
 8024ada:	f89d 9034 	ldrb.w	r9, [sp, #52]	@ 0x34
 8024ade:	f89d 7038 	ldrb.w	r7, [sp, #56]	@ 0x38
 8024ae2:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 8024ae6:	eb02 0a0c 	add.w	sl, r2, ip
 8024aea:	8808      	ldrh	r0, [r1, #0]
 8024aec:	f2c0 80b0 	blt.w	8024c50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8024af0:	45ab      	cmp	fp, r5
 8024af2:	f340 80ad 	ble.w	8024c50 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 8024af6:	2c00      	cmp	r4, #0
 8024af8:	f2c0 80a8 	blt.w	8024c4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8024afc:	45a6      	cmp	lr, r4
 8024afe:	f340 80a5 	ble.w	8024c4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 8024b02:	f812 200c 	ldrb.w	r2, [r2, ip]
 8024b06:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 8024b0a:	1c62      	adds	r2, r4, #1
 8024b0c:	f100 80a3 	bmi.w	8024c56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024b10:	4596      	cmp	lr, r2
 8024b12:	f340 80a0 	ble.w	8024c56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024b16:	f1b9 0f00 	cmp.w	r9, #0
 8024b1a:	f000 809c 	beq.w	8024c56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 8024b1e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024b22:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8024b26:	3501      	adds	r5, #1
 8024b28:	f100 8099 	bmi.w	8024c5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024b2c:	45ab      	cmp	fp, r5
 8024b2e:	f340 8096 	ble.w	8024c5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024b32:	2f00      	cmp	r7, #0
 8024b34:	f000 8093 	beq.w	8024c5e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 8024b38:	2c00      	cmp	r4, #0
 8024b3a:	f2c0 808e 	blt.w	8024c5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8024b3e:	45a6      	cmp	lr, r4
 8024b40:	f340 808b 	ble.w	8024c5a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 8024b44:	f81a 200e 	ldrb.w	r2, [sl, lr]
 8024b48:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 8024b4c:	3401      	adds	r4, #1
 8024b4e:	f100 8089 	bmi.w	8024c64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024b52:	45a6      	cmp	lr, r4
 8024b54:	f340 8086 	ble.w	8024c64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024b58:	f1b9 0f00 	cmp.w	r9, #0
 8024b5c:	f000 8082 	beq.w	8024c64 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 8024b60:	44d6      	add	lr, sl
 8024b62:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8024b66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8024b6a:	fb19 fe07 	smulbb	lr, r9, r7
 8024b6e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8024b72:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8024b76:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8024b7a:	ea44 0808 	orr.w	r8, r4, r8
 8024b7e:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8024b82:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8024b86:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8024b8a:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8024b8e:	ea44 0c0c 	orr.w	ip, r4, ip
 8024b92:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8024b96:	fb04 f40c 	mul.w	r4, r4, ip
 8024b9a:	f1c7 0210 	rsb	r2, r7, #16
 8024b9e:	eba2 0209 	sub.w	r2, r2, r9
 8024ba2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8024ba6:	fb02 4808 	mla	r8, r2, r8, r4
 8024baa:	b2b4      	uxth	r4, r6
 8024bac:	43f6      	mvns	r6, r6
 8024bae:	041a      	lsls	r2, r3, #16
 8024bb0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8024bb4:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024bb8:	4313      	orrs	r3, r2
 8024bba:	fb0e 8303 	mla	r3, lr, r3, r8
 8024bbe:	042a      	lsls	r2, r5, #16
 8024bc0:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8024bc4:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8024bc8:	432a      	orrs	r2, r5
 8024bca:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8024bce:	fb07 3202 	mla	r2, r7, r2, r3
 8024bd2:	0d53      	lsrs	r3, r2, #21
 8024bd4:	0952      	lsrs	r2, r2, #5
 8024bd6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024bda:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024bde:	431a      	orrs	r2, r3
 8024be0:	b293      	uxth	r3, r2
 8024be2:	1202      	asrs	r2, r0, #8
 8024be4:	b2f6      	uxtb	r6, r6
 8024be6:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8024bea:	fb12 f206 	smulbb	r2, r2, r6
 8024bee:	10c7      	asrs	r7, r0, #3
 8024bf0:	00c0      	lsls	r0, r0, #3
 8024bf2:	b2c0      	uxtb	r0, r0
 8024bf4:	121d      	asrs	r5, r3, #8
 8024bf6:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8024bfa:	fb10 f006 	smulbb	r0, r0, r6
 8024bfe:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8024c02:	fb17 f706 	smulbb	r7, r7, r6
 8024c06:	fb05 2504 	mla	r5, r5, r4, r2
 8024c0a:	10da      	asrs	r2, r3, #3
 8024c0c:	00db      	lsls	r3, r3, #3
 8024c0e:	b2db      	uxtb	r3, r3
 8024c10:	fb03 0004 	mla	r0, r3, r4, r0
 8024c14:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8024c18:	fb02 7204 	mla	r2, r2, r4, r7
 8024c1c:	b2ad      	uxth	r5, r5
 8024c1e:	b280      	uxth	r0, r0
 8024c20:	1c6b      	adds	r3, r5, #1
 8024c22:	b292      	uxth	r2, r2
 8024c24:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8024c28:	1c43      	adds	r3, r0, #1
 8024c2a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8024c2e:	1c50      	adds	r0, r2, #1
 8024c30:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8024c34:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8024c38:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024c3c:	0952      	lsrs	r2, r2, #5
 8024c3e:	432b      	orrs	r3, r5
 8024c40:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8024c44:	4313      	orrs	r3, r2
 8024c46:	800b      	strh	r3, [r1, #0]
 8024c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c4c:	4680      	mov	r8, r0
 8024c4e:	e75c      	b.n	8024b0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 8024c50:	4684      	mov	ip, r0
 8024c52:	4680      	mov	r8, r0
 8024c54:	e767      	b.n	8024b26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8024c56:	4684      	mov	ip, r0
 8024c58:	e765      	b.n	8024b26 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 8024c5a:	4605      	mov	r5, r0
 8024c5c:	e776      	b.n	8024b4c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 8024c5e:	4603      	mov	r3, r0
 8024c60:	4605      	mov	r5, r0
 8024c62:	e782      	b.n	8024b6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 8024c64:	4603      	mov	r3, r0
 8024c66:	e780      	b.n	8024b6a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

08024c68 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c6c:	b099      	sub	sp, #100	@ 0x64
 8024c6e:	9215      	str	r2, [sp, #84]	@ 0x54
 8024c70:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8024c72:	9016      	str	r0, [sp, #88]	@ 0x58
 8024c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8024c76:	6850      	ldr	r0, [r2, #4]
 8024c78:	f89d 30ac 	ldrb.w	r3, [sp, #172]	@ 0xac
 8024c7c:	910c      	str	r1, [sp, #48]	@ 0x30
 8024c7e:	930d      	str	r3, [sp, #52]	@ 0x34
 8024c80:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8024c84:	fb00 1303 	mla	r3, r0, r3, r1
 8024c88:	e9dd a523 	ldrd	sl, r5, [sp, #140]	@ 0x8c
 8024c8c:	6812      	ldr	r2, [r2, #0]
 8024c8e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 8024c92:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024c94:	681b      	ldr	r3, [r3, #0]
 8024c96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8024c98:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024c9a:	685e      	ldr	r6, [r3, #4]
 8024c9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024c9e:	3604      	adds	r6, #4
 8024ca0:	43db      	mvns	r3, r3
 8024ca2:	b2db      	uxtb	r3, r3
 8024ca4:	930a      	str	r3, [sp, #40]	@ 0x28
 8024ca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024ca8:	2b00      	cmp	r3, #0
 8024caa:	dc03      	bgt.n	8024cb4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8024cac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8024cae:	2b00      	cmp	r3, #0
 8024cb0:	f340 8225 	ble.w	80250fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024cb4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024cb6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024cba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024cbe:	1e48      	subs	r0, r1, #1
 8024cc0:	1e57      	subs	r7, r2, #1
 8024cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024cc4:	2b00      	cmp	r3, #0
 8024cc6:	f340 80e3 	ble.w	8024e90 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8024cca:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8024cce:	ea4f 4325 	mov.w	r3, r5, asr #16
 8024cd2:	d406      	bmi.n	8024ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cd4:	4584      	cmp	ip, r0
 8024cd6:	da04      	bge.n	8024ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cd8:	2b00      	cmp	r3, #0
 8024cda:	db02      	blt.n	8024ce2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8024cdc:	42bb      	cmp	r3, r7
 8024cde:	f2c0 80d8 	blt.w	8024e92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8024ce2:	f11c 0c01 	adds.w	ip, ip, #1
 8024ce6:	f100 80c9 	bmi.w	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024cea:	4561      	cmp	r1, ip
 8024cec:	f2c0 80c6 	blt.w	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024cf0:	3301      	adds	r3, #1
 8024cf2:	f100 80c3 	bmi.w	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024cf6:	429a      	cmp	r2, r3
 8024cf8:	f2c0 80c0 	blt.w	8024e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8024cfc:	4647      	mov	r7, r8
 8024cfe:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8024d02:	f1bb 0f00 	cmp.w	fp, #0
 8024d06:	f340 80e3 	ble.w	8024ed0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 8024d0a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8024d0c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024d0e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8024d12:	ea5f 422a 	movs.w	r2, sl, asr #16
 8024d16:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8024d1a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8024d1e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024d22:	689b      	ldr	r3, [r3, #8]
 8024d24:	f100 8121 	bmi.w	8024f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024d28:	f103 39ff 	add.w	r9, r3, #4294967295
 8024d2c:	454a      	cmp	r2, r9
 8024d2e:	f280 811c 	bge.w	8024f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024d32:	f1bc 0f00 	cmp.w	ip, #0
 8024d36:	f2c0 8118 	blt.w	8024f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024d3a:	f10e 39ff 	add.w	r9, lr, #4294967295
 8024d3e:	45cc      	cmp	ip, r9
 8024d40:	f280 8113 	bge.w	8024f6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 8024d44:	b21b      	sxth	r3, r3
 8024d46:	fb0c 2203 	mla	r2, ip, r3, r2
 8024d4a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024d4c:	eb04 0902 	add.w	r9, r4, r2
 8024d50:	5ca2      	ldrb	r2, [r4, r2]
 8024d52:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 8024d56:	2800      	cmp	r0, #0
 8024d58:	f000 80fe 	beq.w	8024f58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8024d5c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8024d60:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8024d64:	9211      	str	r2, [sp, #68]	@ 0x44
 8024d66:	b151      	cbz	r1, 8024d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024d68:	eb09 0203 	add.w	r2, r9, r3
 8024d6c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024d70:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024d74:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024d76:	7853      	ldrb	r3, [r2, #1]
 8024d78:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024d7c:	9312      	str	r3, [sp, #72]	@ 0x48
 8024d7e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8024d80:	fb10 f201 	smulbb	r2, r0, r1
 8024d84:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8024d88:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024d8c:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024d90:	ea4c 0c03 	orr.w	ip, ip, r3
 8024d94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8024d96:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8024d98:	041b      	lsls	r3, r3, #16
 8024d9a:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8024d9e:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8024da2:	10d2      	asrs	r2, r2, #3
 8024da4:	4323      	orrs	r3, r4
 8024da6:	4353      	muls	r3, r2
 8024da8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8024dac:	fb09 330c 	mla	r3, r9, ip, r3
 8024db0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8024db4:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8024db8:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8024dbc:	ea4c 0e0e 	orr.w	lr, ip, lr
 8024dc0:	f1c1 0c10 	rsb	ip, r1, #16
 8024dc4:	ebac 0c00 	sub.w	ip, ip, r0
 8024dc8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8024dcc:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8024dd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8024dd2:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8024dd6:	0418      	lsls	r0, r3, #16
 8024dd8:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8024ddc:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8024de0:	4318      	orrs	r0, r3
 8024de2:	fb02 c200 	mla	r2, r2, r0, ip
 8024de6:	8838      	ldrh	r0, [r7, #0]
 8024de8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8024dea:	0d53      	lsrs	r3, r2, #21
 8024dec:	1201      	asrs	r1, r0, #8
 8024dee:	0952      	lsrs	r2, r2, #5
 8024df0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8024df4:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8024df8:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8024dfc:	431a      	orrs	r2, r3
 8024dfe:	fb11 f104 	smulbb	r1, r1, r4
 8024e02:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8024e06:	00c0      	lsls	r0, r0, #3
 8024e08:	b292      	uxth	r2, r2
 8024e0a:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8024e0e:	b2c0      	uxtb	r0, r0
 8024e10:	f8bd 3034 	ldrh.w	r3, [sp, #52]	@ 0x34
 8024e14:	ea4f 2c22 	mov.w	ip, r2, asr #8
 8024e18:	fb1e fe04 	smulbb	lr, lr, r4
 8024e1c:	fb10 f004 	smulbb	r0, r0, r4
 8024e20:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8024e24:	fb0c 1c03 	mla	ip, ip, r3, r1
 8024e28:	10d1      	asrs	r1, r2, #3
 8024e2a:	00d2      	lsls	r2, r2, #3
 8024e2c:	b2d2      	uxtb	r2, r2
 8024e2e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8024e32:	fb01 e103 	mla	r1, r1, r3, lr
 8024e36:	fb02 0303 	mla	r3, r2, r3, r0
 8024e3a:	fa1f fc8c 	uxth.w	ip, ip
 8024e3e:	b29a      	uxth	r2, r3
 8024e40:	f10c 0301 	add.w	r3, ip, #1
 8024e44:	b289      	uxth	r1, r1
 8024e46:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8024e4a:	1c53      	adds	r3, r2, #1
 8024e4c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8024e50:	1c4a      	adds	r2, r1, #1
 8024e52:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8024e56:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8024e5a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8024e5e:	0949      	lsrs	r1, r1, #5
 8024e60:	ea43 030c 	orr.w	r3, r3, ip
 8024e64:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8024e68:	430b      	orrs	r3, r1
 8024e6a:	803b      	strh	r3, [r7, #0]
 8024e6c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024e6e:	3702      	adds	r7, #2
 8024e70:	449a      	add	sl, r3
 8024e72:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024e74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024e78:	441d      	add	r5, r3
 8024e7a:	e742      	b.n	8024d02 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8024e7c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8024e7e:	f108 0802 	add.w	r8, r8, #2
 8024e82:	449a      	add	sl, r3
 8024e84:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8024e86:	441d      	add	r5, r3
 8024e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e8a:	3b01      	subs	r3, #1
 8024e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8024e8e:	e718      	b.n	8024cc2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8024e90:	d023      	beq.n	8024eda <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8024e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e94:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8024e96:	3b01      	subs	r3, #1
 8024e98:	fb00 a003 	mla	r0, r0, r3, sl
 8024e9c:	1400      	asrs	r0, r0, #16
 8024e9e:	f53f af2d 	bmi.w	8024cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024ea2:	3901      	subs	r1, #1
 8024ea4:	4288      	cmp	r0, r1
 8024ea6:	f6bf af29 	bge.w	8024cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024eaa:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8024eac:	fb01 5303 	mla	r3, r1, r3, r5
 8024eb0:	141b      	asrs	r3, r3, #16
 8024eb2:	f53f af23 	bmi.w	8024cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024eb6:	3a01      	subs	r2, #1
 8024eb8:	4293      	cmp	r3, r2
 8024eba:	f6bf af1f 	bge.w	8024cfc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024ebe:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8024ec2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	@ 0x34
 8024ec6:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 8024eca:	f1be 0f00 	cmp.w	lr, #0
 8024ece:	dc6c      	bgt.n	8024faa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8024ed0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024ed2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8024ed6:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 8024eda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024edc:	2b00      	cmp	r3, #0
 8024ede:	f340 810e 	ble.w	80250fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8024ee6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024eea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024eee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024ef2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024ef6:	eef0 6a62 	vmov.f32	s13, s5
 8024efa:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024efe:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024f02:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024f06:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024f0e:	ee16 aa90 	vmov	sl, s13
 8024f12:	eef0 6a43 	vmov.f32	s13, s6
 8024f16:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024f1a:	ee12 2a90 	vmov	r2, s5
 8024f1e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024f22:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024f24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024f28:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f2c:	ee13 2a10 	vmov	r2, s6
 8024f30:	9325      	str	r3, [sp, #148]	@ 0x94
 8024f32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024f34:	ee16 5a90 	vmov	r5, s13
 8024f38:	fb92 f3f3 	sdiv	r3, r2, r3
 8024f3c:	9326      	str	r3, [sp, #152]	@ 0x98
 8024f3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8024f40:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8024f42:	3b01      	subs	r3, #1
 8024f44:	930c      	str	r3, [sp, #48]	@ 0x30
 8024f46:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8024f48:	bf08      	it	eq
 8024f4a:	4613      	moveq	r3, r2
 8024f4c:	eeb0 3a67 	vmov.f32	s6, s15
 8024f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8024f52:	eef0 2a47 	vmov.f32	s5, s14
 8024f56:	e6a6      	b.n	8024ca6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8024f58:	2900      	cmp	r1, #0
 8024f5a:	f43f af10 	beq.w	8024d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024f5e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024f62:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024f66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8024f68:	e709      	b.n	8024d7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8024f6a:	f112 0901 	adds.w	r9, r2, #1
 8024f6e:	f53f af7d 	bmi.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024f72:	454b      	cmp	r3, r9
 8024f74:	f6ff af7a 	blt.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024f78:	f11c 0901 	adds.w	r9, ip, #1
 8024f7c:	f53f af76 	bmi.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024f80:	45ce      	cmp	lr, r9
 8024f82:	f6ff af73 	blt.w	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024f86:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8024f88:	9202      	str	r2, [sp, #8]
 8024f8a:	b21b      	sxth	r3, r3
 8024f8c:	fa0f f28e 	sxth.w	r2, lr
 8024f90:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8024f94:	e9cd c003 	strd	ip, r0, [sp, #12]
 8024f98:	9201      	str	r2, [sp, #4]
 8024f9a:	9300      	str	r3, [sp, #0]
 8024f9c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024f9e:	4633      	mov	r3, r6
 8024fa0:	4639      	mov	r1, r7
 8024fa2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8024fa4:	f7ff fd8e 	bl	8024ac4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 8024fa8:	e760      	b.n	8024e6c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8024faa:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8024fac:	ea4f 422a 	mov.w	r2, sl, asr #16
 8024fb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8024fb4:	1429      	asrs	r1, r5, #16
 8024fb6:	fb03 2101 	mla	r1, r3, r1, r2
 8024fba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8024fbc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024fbe:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 8024fc2:	440a      	add	r2, r1
 8024fc4:	5c61      	ldrb	r1, [r4, r1]
 8024fc6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8024fca:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 8024fce:	f1bc 0f00 	cmp.w	ip, #0
 8024fd2:	f000 808c 	beq.w	80250ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8024fd6:	7857      	ldrb	r7, [r2, #1]
 8024fd8:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 8024fdc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8024fde:	b140      	cbz	r0, 8024ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8024fe0:	18d7      	adds	r7, r2, r3
 8024fe2:	5cd3      	ldrb	r3, [r2, r3]
 8024fe4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024fe8:	9310      	str	r3, [sp, #64]	@ 0x40
 8024fea:	787b      	ldrb	r3, [r7, #1]
 8024fec:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8024ff0:	9314      	str	r3, [sp, #80]	@ 0x50
 8024ff2:	fb1c f200 	smulbb	r2, ip, r0
 8024ff6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8024ff8:	10d2      	asrs	r2, r2, #3
 8024ffa:	041f      	lsls	r7, r3, #16
 8024ffc:	f007 67fc 	and.w	r7, r7, #132120576	@ 0x7e00000
 8025000:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025004:	431f      	orrs	r7, r3
 8025006:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 802500a:	9317      	str	r3, [sp, #92]	@ 0x5c
 802500c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802500e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8025010:	041b      	lsls	r3, r3, #16
 8025012:	f424 6bfc 	bic.w	fp, r4, #2016	@ 0x7e0
 8025016:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802501a:	ea43 030b 	orr.w	r3, r3, fp
 802501e:	4353      	muls	r3, r2
 8025020:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8025022:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025026:	fb04 3707 	mla	r7, r4, r7, r3
 802502a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802502e:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8025032:	ea43 0b01 	orr.w	fp, r3, r1
 8025036:	f1c0 0110 	rsb	r1, r0, #16
 802503a:	eba1 0c0c 	sub.w	ip, r1, ip
 802503e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025042:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025044:	fb0c 770b 	mla	r7, ip, fp, r7
 8025048:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802504c:	f423 6bfc 	bic.w	fp, r3, #2016	@ 0x7e0
 8025050:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025054:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8025058:	ea4c 0c0b 	orr.w	ip, ip, fp
 802505c:	fb02 770c 	mla	r7, r2, ip, r7
 8025060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025062:	0d79      	lsrs	r1, r7, #21
 8025064:	8812      	ldrh	r2, [r2, #0]
 8025066:	097f      	lsrs	r7, r7, #5
 8025068:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802506c:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8025070:	430f      	orrs	r7, r1
 8025072:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025074:	1211      	asrs	r1, r2, #8
 8025076:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802507a:	b2bb      	uxth	r3, r7
 802507c:	fb11 f104 	smulbb	r1, r1, r4
 8025080:	10d7      	asrs	r7, r2, #3
 8025082:	00d2      	lsls	r2, r2, #3
 8025084:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8025088:	b2d2      	uxtb	r2, r2
 802508a:	1218      	asrs	r0, r3, #8
 802508c:	fb17 f704 	smulbb	r7, r7, r4
 8025090:	fb12 f204 	smulbb	r2, r2, r4
 8025094:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8025098:	fb00 1009 	mla	r0, r0, r9, r1
 802509c:	10d9      	asrs	r1, r3, #3
 802509e:	00db      	lsls	r3, r3, #3
 80250a0:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80250a4:	b2db      	uxtb	r3, r3
 80250a6:	fb01 7109 	mla	r1, r1, r9, r7
 80250aa:	fb03 2309 	mla	r3, r3, r9, r2
 80250ae:	b280      	uxth	r0, r0
 80250b0:	b29b      	uxth	r3, r3
 80250b2:	b289      	uxth	r1, r1
 80250b4:	1c42      	adds	r2, r0, #1
 80250b6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80250ba:	1c4f      	adds	r7, r1, #1
 80250bc:	1c5a      	adds	r2, r3, #1
 80250be:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80250c2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80250c6:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80250ca:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80250ce:	0949      	lsrs	r1, r1, #5
 80250d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80250d2:	4310      	orrs	r0, r2
 80250d4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80250d8:	4308      	orrs	r0, r1
 80250da:	f823 0b02 	strh.w	r0, [r3], #2
 80250de:	930e      	str	r3, [sp, #56]	@ 0x38
 80250e0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80250e2:	f10e 3eff 	add.w	lr, lr, #4294967295
 80250e6:	449a      	add	sl, r3
 80250e8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80250ea:	441d      	add	r5, r3
 80250ec:	e6ed      	b.n	8024eca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 80250ee:	2800      	cmp	r0, #0
 80250f0:	f43f af7f 	beq.w	8024ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80250f4:	5cd3      	ldrb	r3, [r2, r3]
 80250f6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 80250fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80250fc:	e779      	b.n	8024ff2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80250fe:	b019      	add	sp, #100	@ 0x64
 8025100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025104 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8025104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025108:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 802510c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
 8025110:	fb08 470e 	mla	r7, r8, lr, r4
 8025114:	f1b8 0f00 	cmp.w	r8, #0
 8025118:	f9bd a024 	ldrsh.w	sl, [sp, #36]	@ 0x24
 802511c:	f89d 5030 	ldrb.w	r5, [sp, #48]	@ 0x30
 8025120:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8025124:	eb02 0907 	add.w	r9, r2, r7
 8025128:	8808      	ldrh	r0, [r1, #0]
 802512a:	db67      	blt.n	80251fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 802512c:	45c2      	cmp	sl, r8
 802512e:	dd65      	ble.n	80251fc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 8025130:	2c00      	cmp	r4, #0
 8025132:	db61      	blt.n	80251f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8025134:	45a6      	cmp	lr, r4
 8025136:	dd5f      	ble.n	80251f8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 8025138:	5dd2      	ldrb	r2, [r2, r7]
 802513a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 802513e:	1c62      	adds	r2, r4, #1
 8025140:	d45f      	bmi.n	8025202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8025142:	4596      	cmp	lr, r2
 8025144:	dd5d      	ble.n	8025202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 8025146:	2d00      	cmp	r5, #0
 8025148:	d05b      	beq.n	8025202 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 802514a:	f899 2001 	ldrb.w	r2, [r9, #1]
 802514e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 8025152:	f118 0801 	adds.w	r8, r8, #1
 8025156:	d458      	bmi.n	802520a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8025158:	45c2      	cmp	sl, r8
 802515a:	dd56      	ble.n	802520a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 802515c:	2e00      	cmp	r6, #0
 802515e:	d054      	beq.n	802520a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 8025160:	2c00      	cmp	r4, #0
 8025162:	db50      	blt.n	8025206 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8025164:	45a6      	cmp	lr, r4
 8025166:	dd4e      	ble.n	8025206 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 8025168:	f819 200e 	ldrb.w	r2, [r9, lr]
 802516c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8025170:	3401      	adds	r4, #1
 8025172:	d407      	bmi.n	8025184 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8025174:	45a6      	cmp	lr, r4
 8025176:	dd05      	ble.n	8025184 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 8025178:	b125      	cbz	r5, 8025184 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 802517a:	44ce      	add	lr, r9
 802517c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8025180:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8025184:	fb15 f406 	smulbb	r4, r5, r6
 8025188:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802518c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8025190:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8025194:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025198:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802519c:	ea43 0c0c 	orr.w	ip, r3, ip
 80251a0:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 80251a4:	f1c6 0310 	rsb	r3, r6, #16
 80251a8:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 80251ac:	1b5b      	subs	r3, r3, r5
 80251ae:	ea4e 0707 	orr.w	r7, lr, r7
 80251b2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 80251b6:	437d      	muls	r5, r7
 80251b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80251bc:	fb03 5c0c 	mla	ip, r3, ip, r5
 80251c0:	0403      	lsls	r3, r0, #16
 80251c2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80251c6:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80251ca:	4318      	orrs	r0, r3
 80251cc:	fb04 c000 	mla	r0, r4, r0, ip
 80251d0:	0413      	lsls	r3, r2, #16
 80251d2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80251d6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80251da:	4313      	orrs	r3, r2
 80251dc:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80251e0:	fb06 0003 	mla	r0, r6, r3, r0
 80251e4:	0d43      	lsrs	r3, r0, #21
 80251e6:	0940      	lsrs	r0, r0, #5
 80251e8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80251ec:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80251f0:	4318      	orrs	r0, r3
 80251f2:	8008      	strh	r0, [r1, #0]
 80251f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80251f8:	4684      	mov	ip, r0
 80251fa:	e7a0      	b.n	802513e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 80251fc:	4607      	mov	r7, r0
 80251fe:	4684      	mov	ip, r0
 8025200:	e7a7      	b.n	8025152 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8025202:	4607      	mov	r7, r0
 8025204:	e7a5      	b.n	8025152 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 8025206:	4602      	mov	r2, r0
 8025208:	e7b2      	b.n	8025170 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 802520a:	4602      	mov	r2, r0
 802520c:	e7ba      	b.n	8025184 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0802520e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802520e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8025212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025216:	b093      	sub	sp, #76	@ 0x4c
 8025218:	920f      	str	r2, [sp, #60]	@ 0x3c
 802521a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802521c:	9010      	str	r0, [sp, #64]	@ 0x40
 802521e:	6850      	ldr	r0, [r2, #4]
 8025220:	9108      	str	r1, [sp, #32]
 8025222:	9306      	str	r3, [sp, #24]
 8025224:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8025228:	fb00 1303 	mla	r3, r0, r3, r1
 802522c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8025230:	6812      	ldr	r2, [r2, #0]
 8025232:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8025236:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025238:	681b      	ldr	r3, [r3, #0]
 802523a:	9307      	str	r3, [sp, #28]
 802523c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802523e:	685f      	ldr	r7, [r3, #4]
 8025240:	3704      	adds	r7, #4
 8025242:	9b08      	ldr	r3, [sp, #32]
 8025244:	2b00      	cmp	r3, #0
 8025246:	dc03      	bgt.n	8025250 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8025248:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802524a:	2b00      	cmp	r3, #0
 802524c:	f340 81b2 	ble.w	80255b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8025250:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8025252:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025256:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802525a:	1e48      	subs	r0, r1, #1
 802525c:	f102 3cff 	add.w	ip, r2, #4294967295
 8025260:	9b06      	ldr	r3, [sp, #24]
 8025262:	2b00      	cmp	r3, #0
 8025264:	f340 80a9 	ble.w	80253ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8025268:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802526c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025270:	d406      	bmi.n	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025272:	4586      	cmp	lr, r0
 8025274:	da04      	bge.n	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025276:	2b00      	cmp	r3, #0
 8025278:	db02      	blt.n	8025280 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802527a:	4563      	cmp	r3, ip
 802527c:	f2c0 809e 	blt.w	80253bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025280:	f11e 0e01 	adds.w	lr, lr, #1
 8025284:	f100 808f 	bmi.w	80253a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025288:	4571      	cmp	r1, lr
 802528a:	f2c0 808c 	blt.w	80253a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802528e:	3301      	adds	r3, #1
 8025290:	f100 8089 	bmi.w	80253a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8025294:	429a      	cmp	r2, r3
 8025296:	f2c0 8086 	blt.w	80253a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802529a:	46c8      	mov	r8, r9
 802529c:	f8dd b018 	ldr.w	fp, [sp, #24]
 80252a0:	f1bb 0f00 	cmp.w	fp, #0
 80252a4:	f340 80a6 	ble.w	80253f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80252a8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80252aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80252ac:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80252b0:	1422      	asrs	r2, r4, #16
 80252b2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80252b6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80252ba:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80252be:	689b      	ldr	r3, [r3, #8]
 80252c0:	f100 80e3 	bmi.w	802548a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80252c4:	f103 3aff 	add.w	sl, r3, #4294967295
 80252c8:	4552      	cmp	r2, sl
 80252ca:	f280 80de 	bge.w	802548a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80252ce:	f1bc 0f00 	cmp.w	ip, #0
 80252d2:	f2c0 80da 	blt.w	802548a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80252d6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80252da:	45d4      	cmp	ip, sl
 80252dc:	f280 80d5 	bge.w	802548a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80252e0:	b21b      	sxth	r3, r3
 80252e2:	fb0c 2203 	mla	r2, ip, r3, r2
 80252e6:	9d07      	ldr	r5, [sp, #28]
 80252e8:	eb05 0a02 	add.w	sl, r5, r2
 80252ec:	5caa      	ldrb	r2, [r5, r2]
 80252ee:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 80252f2:	2800      	cmp	r0, #0
 80252f4:	f000 80c0 	beq.w	8025478 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80252f8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80252fc:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8025300:	920b      	str	r2, [sp, #44]	@ 0x2c
 8025302:	b151      	cbz	r1, 802531a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8025304:	eb0a 0203 	add.w	r2, sl, r3
 8025308:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802530c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025310:	9309      	str	r3, [sp, #36]	@ 0x24
 8025312:	7853      	ldrb	r3, [r2, #1]
 8025314:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025318:	930c      	str	r3, [sp, #48]	@ 0x30
 802531a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802531c:	fb10 f201 	smulbb	r2, r0, r1
 8025320:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8025324:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025328:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802532c:	ea4c 0c03 	orr.w	ip, ip, r3
 8025330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025332:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8025334:	041b      	lsls	r3, r3, #16
 8025336:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802533a:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802533e:	10d2      	asrs	r2, r2, #3
 8025340:	432b      	orrs	r3, r5
 8025342:	4353      	muls	r3, r2
 8025344:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 8025348:	fb0a 330c 	mla	r3, sl, ip, r3
 802534c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8025350:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8025354:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8025358:	ea4c 0e0e 	orr.w	lr, ip, lr
 802535c:	f1c1 0c10 	rsb	ip, r1, #16
 8025360:	ebac 0c00 	sub.w	ip, ip, r0
 8025364:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025368:	fb0c 3c0e 	mla	ip, ip, lr, r3
 802536c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802536e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8025372:	0418      	lsls	r0, r3, #16
 8025374:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8025378:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802537c:	4318      	orrs	r0, r3
 802537e:	fb02 c200 	mla	r2, r2, r0, ip
 8025382:	0d53      	lsrs	r3, r2, #21
 8025384:	0952      	lsrs	r2, r2, #5
 8025386:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802538a:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 802538e:	431a      	orrs	r2, r3
 8025390:	f8a8 2000 	strh.w	r2, [r8]
 8025394:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025396:	f108 0802 	add.w	r8, r8, #2
 802539a:	441c      	add	r4, r3
 802539c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802539e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80253a2:	441e      	add	r6, r3
 80253a4:	e77c      	b.n	80252a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80253a6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80253a8:	f109 0902 	add.w	r9, r9, #2
 80253ac:	441c      	add	r4, r3
 80253ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80253b0:	441e      	add	r6, r3
 80253b2:	9b06      	ldr	r3, [sp, #24]
 80253b4:	3b01      	subs	r3, #1
 80253b6:	9306      	str	r3, [sp, #24]
 80253b8:	e752      	b.n	8025260 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80253ba:	d020      	beq.n	80253fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80253bc:	9b06      	ldr	r3, [sp, #24]
 80253be:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 80253c0:	3b01      	subs	r3, #1
 80253c2:	fb00 4003 	mla	r0, r0, r3, r4
 80253c6:	1400      	asrs	r0, r0, #16
 80253c8:	f53f af67 	bmi.w	802529a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80253cc:	3901      	subs	r1, #1
 80253ce:	4288      	cmp	r0, r1
 80253d0:	f6bf af63 	bge.w	802529a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80253d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80253d6:	fb01 6303 	mla	r3, r1, r3, r6
 80253da:	141b      	asrs	r3, r3, #16
 80253dc:	f53f af5d 	bmi.w	802529a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80253e0:	3a01      	subs	r2, #1
 80253e2:	4293      	cmp	r3, r2
 80253e4:	f6bf af59 	bge.w	802529a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80253e8:	46ca      	mov	sl, r9
 80253ea:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80253ee:	f1b8 0f00 	cmp.w	r8, #0
 80253f2:	dc67      	bgt.n	80254c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 80253f4:	9b06      	ldr	r3, [sp, #24]
 80253f6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80253fa:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80253fe:	9b08      	ldr	r3, [sp, #32]
 8025400:	2b00      	cmp	r3, #0
 8025402:	f340 80d7 	ble.w	80255b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 8025406:	ee30 0a04 	vadd.f32	s0, s0, s8
 802540a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802540e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8025412:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025416:	eeb0 6a62 	vmov.f32	s12, s5
 802541a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802541e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025422:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025426:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802542a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802542e:	ee16 4a10 	vmov	r4, s12
 8025432:	eeb0 6a43 	vmov.f32	s12, s6
 8025436:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802543a:	ee12 2a90 	vmov	r2, s5
 802543e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025442:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025444:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8025448:	fb92 f3f3 	sdiv	r3, r2, r3
 802544c:	ee13 2a10 	vmov	r2, s6
 8025450:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025452:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025454:	ee16 6a10 	vmov	r6, s12
 8025458:	fb92 f3f3 	sdiv	r3, r2, r3
 802545c:	9320      	str	r3, [sp, #128]	@ 0x80
 802545e:	9b08      	ldr	r3, [sp, #32]
 8025460:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8025462:	3b01      	subs	r3, #1
 8025464:	9308      	str	r3, [sp, #32]
 8025466:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025468:	bf08      	it	eq
 802546a:	4613      	moveq	r3, r2
 802546c:	eeb0 3a67 	vmov.f32	s6, s15
 8025470:	9306      	str	r3, [sp, #24]
 8025472:	eef0 2a47 	vmov.f32	s5, s14
 8025476:	e6e4      	b.n	8025242 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8025478:	2900      	cmp	r1, #0
 802547a:	f43f af4e 	beq.w	802531a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802547e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8025482:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025486:	9309      	str	r3, [sp, #36]	@ 0x24
 8025488:	e747      	b.n	802531a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 802548a:	f112 0a01 	adds.w	sl, r2, #1
 802548e:	d481      	bmi.n	8025394 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025490:	4553      	cmp	r3, sl
 8025492:	f6ff af7f 	blt.w	8025394 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8025496:	f11c 0a01 	adds.w	sl, ip, #1
 802549a:	f53f af7b 	bmi.w	8025394 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 802549e:	45d6      	cmp	lr, sl
 80254a0:	f6ff af78 	blt.w	8025394 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80254a4:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 80254a8:	b21b      	sxth	r3, r3
 80254aa:	fa0f f28e 	sxth.w	r2, lr
 80254ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80254b2:	9201      	str	r2, [sp, #4]
 80254b4:	9300      	str	r3, [sp, #0]
 80254b6:	9a07      	ldr	r2, [sp, #28]
 80254b8:	463b      	mov	r3, r7
 80254ba:	4641      	mov	r1, r8
 80254bc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80254be:	f7ff fe21 	bl	8025104 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80254c2:	e767      	b.n	8025394 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 80254c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80254c6:	1422      	asrs	r2, r4, #16
 80254c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80254cc:	1431      	asrs	r1, r6, #16
 80254ce:	fb03 2101 	mla	r1, r3, r1, r2
 80254d2:	9d07      	ldr	r5, [sp, #28]
 80254d4:	9a07      	ldr	r2, [sp, #28]
 80254d6:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 80254da:	440a      	add	r2, r1
 80254dc:	5c69      	ldrb	r1, [r5, r1]
 80254de:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80254e2:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80254e6:	f1be 0f00 	cmp.w	lr, #0
 80254ea:	d05c      	beq.n	80255a6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 80254ec:	f892 c001 	ldrb.w	ip, [r2, #1]
 80254f0:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80254f4:	950d      	str	r5, [sp, #52]	@ 0x34
 80254f6:	b150      	cbz	r0, 802550e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80254f8:	eb02 0c03 	add.w	ip, r2, r3
 80254fc:	5cd3      	ldrb	r3, [r2, r3]
 80254fe:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8025502:	930a      	str	r3, [sp, #40]	@ 0x28
 8025504:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8025508:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802550c:	930e      	str	r3, [sp, #56]	@ 0x38
 802550e:	fb1e f200 	smulbb	r2, lr, r0
 8025512:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025514:	10d2      	asrs	r2, r2, #3
 8025516:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802551a:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 802551e:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8025522:	ea4c 0c03 	orr.w	ip, ip, r3
 8025526:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 802552a:	9311      	str	r3, [sp, #68]	@ 0x44
 802552c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802552e:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8025530:	041b      	lsls	r3, r3, #16
 8025532:	f425 6bfc 	bic.w	fp, r5, #2016	@ 0x7e0
 8025536:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 802553a:	ea43 030b 	orr.w	r3, r3, fp
 802553e:	4353      	muls	r3, r2
 8025540:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8025542:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025546:	fb05 3c0c 	mla	ip, r5, ip, r3
 802554a:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 802554e:	f00b 63fc 	and.w	r3, fp, #132120576	@ 0x7e00000
 8025552:	ea43 0b01 	orr.w	fp, r3, r1
 8025556:	f1c0 0110 	rsb	r1, r0, #16
 802555a:	eba1 0e0e 	sub.w	lr, r1, lr
 802555e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8025562:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025564:	fb0e cc0b 	mla	ip, lr, fp, ip
 8025568:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802556c:	f423 6efc 	bic.w	lr, r3, #2016	@ 0x7e0
 8025570:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8025574:	ea4b 0e0e 	orr.w	lr, fp, lr
 8025578:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 802557c:	fb02 cc0e 	mla	ip, r2, lr, ip
 8025580:	ea4f 535c 	mov.w	r3, ip, lsr #21
 8025584:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025588:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802558c:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8025590:	ea43 0c0c 	orr.w	ip, r3, ip
 8025594:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025596:	f82a cb02 	strh.w	ip, [sl], #2
 802559a:	441c      	add	r4, r3
 802559c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802559e:	f108 38ff 	add.w	r8, r8, #4294967295
 80255a2:	441e      	add	r6, r3
 80255a4:	e723      	b.n	80253ee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 80255a6:	2800      	cmp	r0, #0
 80255a8:	d0b1      	beq.n	802550e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80255aa:	5cd3      	ldrb	r3, [r2, r3]
 80255ac:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80255b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80255b2:	e7ac      	b.n	802550e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 80255b4:	b013      	add	sp, #76	@ 0x4c
 80255b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080255ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 80255ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80255be:	880d      	ldrh	r5, [r1, #0]
 80255c0:	b087      	sub	sp, #28
 80255c2:	10ef      	asrs	r7, r5, #3
 80255c4:	ea4f 2a25 	mov.w	sl, r5, asr #8
 80255c8:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 80255cc:	00ed      	lsls	r5, r5, #3
 80255ce:	9701      	str	r7, [sp, #4]
 80255d0:	b2ed      	uxtb	r5, r5
 80255d2:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	@ 0x40
 80255d6:	9502      	str	r5, [sp, #8]
 80255d8:	9d01      	ldr	r5, [sp, #4]
 80255da:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 80255de:	fb06 0709 	mla	r7, r6, r9, r0
 80255e2:	9103      	str	r1, [sp, #12]
 80255e4:	f00a 0af8 	and.w	sl, sl, #248	@ 0xf8
 80255e8:	022d      	lsls	r5, r5, #8
 80255ea:	9902      	ldr	r1, [sp, #8]
 80255ec:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 80255f0:	430d      	orrs	r5, r1
 80255f2:	2e00      	cmp	r6, #0
 80255f4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 80255f8:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 80255fc:	f89d e054 	ldrb.w	lr, [sp, #84]	@ 0x54
 8025600:	f89d 8058 	ldrb.w	r8, [sp, #88]	@ 0x58
 8025604:	eb02 0c07 	add.w	ip, r2, r7
 8025608:	9505      	str	r5, [sp, #20]
 802560a:	f2c0 80b6 	blt.w	802577a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 802560e:	45b3      	cmp	fp, r6
 8025610:	f340 80b3 	ble.w	802577a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 8025614:	2800      	cmp	r0, #0
 8025616:	f2c0 80ae 	blt.w	8025776 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 802561a:	4581      	cmp	r9, r0
 802561c:	f340 80ab 	ble.w	8025776 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 8025620:	5dd7      	ldrb	r7, [r2, r7]
 8025622:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025626:	441f      	add	r7, r3
 8025628:	1c42      	adds	r2, r0, #1
 802562a:	f100 80a9 	bmi.w	8025780 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802562e:	4591      	cmp	r9, r2
 8025630:	f340 80a6 	ble.w	8025780 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 8025634:	2c00      	cmp	r4, #0
 8025636:	f000 80a3 	beq.w	8025780 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 802563a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 802563e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025642:	441d      	add	r5, r3
 8025644:	3601      	adds	r6, #1
 8025646:	f100 809f 	bmi.w	8025788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 802564a:	45b3      	cmp	fp, r6
 802564c:	f340 809c 	ble.w	8025788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8025650:	f1be 0f00 	cmp.w	lr, #0
 8025654:	f000 8098 	beq.w	8025788 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 8025658:	2800      	cmp	r0, #0
 802565a:	f2c0 8093 	blt.w	8025784 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 802565e:	4581      	cmp	r9, r0
 8025660:	f340 8090 	ble.w	8025784 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 8025664:	f81c 6009 	ldrb.w	r6, [ip, r9]
 8025668:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 802566c:	441e      	add	r6, r3
 802566e:	3001      	adds	r0, #1
 8025670:	f100 808d 	bmi.w	802578e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8025674:	4581      	cmp	r9, r0
 8025676:	f340 808a 	ble.w	802578e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 802567a:	2c00      	cmp	r4, #0
 802567c:	f000 8087 	beq.w	802578e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 8025680:	44e1      	add	r9, ip
 8025682:	f899 2001 	ldrb.w	r2, [r9, #1]
 8025686:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802568a:	4413      	add	r3, r2
 802568c:	b2a4      	uxth	r4, r4
 802568e:	fa1f fe8e 	uxth.w	lr, lr
 8025692:	fb04 fb0e 	mul.w	fp, r4, lr
 8025696:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 802569a:	fa1f f08e 	uxth.w	r0, lr
 802569e:	fa1f fe88 	uxth.w	lr, r8
 80256a2:	ea6f 0808 	mvn.w	r8, r8
 80256a6:	0124      	lsls	r4, r4, #4
 80256a8:	f5c4 7980 	rsb	r9, r4, #256	@ 0x100
 80256ac:	eba4 040b 	sub.w	r4, r4, fp
 80256b0:	b2a2      	uxth	r2, r4
 80256b2:	78ac      	ldrb	r4, [r5, #2]
 80256b4:	f897 c002 	ldrb.w	ip, [r7, #2]
 80256b8:	4354      	muls	r4, r2
 80256ba:	eba9 0900 	sub.w	r9, r9, r0
 80256be:	fa1f f989 	uxth.w	r9, r9
 80256c2:	fb09 440c 	mla	r4, r9, ip, r4
 80256c6:	f896 c002 	ldrb.w	ip, [r6, #2]
 80256ca:	fa5f f888 	uxtb.w	r8, r8
 80256ce:	fb00 440c 	mla	r4, r0, ip, r4
 80256d2:	f893 c002 	ldrb.w	ip, [r3, #2]
 80256d6:	fb1a fa08 	smulbb	sl, sl, r8
 80256da:	fb0b 4c0c 	mla	ip, fp, ip, r4
 80256de:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80256e2:	fb0c ac0e 	mla	ip, ip, lr, sl
 80256e6:	f895 a001 	ldrb.w	sl, [r5, #1]
 80256ea:	782d      	ldrb	r5, [r5, #0]
 80256ec:	fb02 fa0a 	mul.w	sl, r2, sl
 80256f0:	436a      	muls	r2, r5
 80256f2:	787c      	ldrb	r4, [r7, #1]
 80256f4:	783f      	ldrb	r7, [r7, #0]
 80256f6:	fb09 aa04 	mla	sl, r9, r4, sl
 80256fa:	fb09 2207 	mla	r2, r9, r7, r2
 80256fe:	7874      	ldrb	r4, [r6, #1]
 8025700:	7835      	ldrb	r5, [r6, #0]
 8025702:	fb00 aa04 	mla	sl, r0, r4, sl
 8025706:	fb00 2005 	mla	r0, r0, r5, r2
 802570a:	785c      	ldrb	r4, [r3, #1]
 802570c:	781b      	ldrb	r3, [r3, #0]
 802570e:	fb0b a404 	mla	r4, fp, r4, sl
 8025712:	9901      	ldr	r1, [sp, #4]
 8025714:	fb0b 0b03 	mla	fp, fp, r3, r0
 8025718:	9b02      	ldr	r3, [sp, #8]
 802571a:	fb11 fa08 	smulbb	sl, r1, r8
 802571e:	fb13 f808 	smulbb	r8, r3, r8
 8025722:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8025726:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802572a:	fb04 a40e 	mla	r4, r4, lr, sl
 802572e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 8025732:	fa1f fc8c 	uxth.w	ip, ip
 8025736:	f10c 0301 	add.w	r3, ip, #1
 802573a:	fa1f fe8e 	uxth.w	lr, lr
 802573e:	b2a4      	uxth	r4, r4
 8025740:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8025744:	f40c 4378 	and.w	r3, ip, #63488	@ 0xf800
 8025748:	f104 0a01 	add.w	sl, r4, #1
 802574c:	f10e 0c01 	add.w	ip, lr, #1
 8025750:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8025754:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8025758:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802575c:	0964      	lsrs	r4, r4, #5
 802575e:	ea4c 0c03 	orr.w	ip, ip, r3
 8025762:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8025766:	9b03      	ldr	r3, [sp, #12]
 8025768:	ea4c 0c04 	orr.w	ip, ip, r4
 802576c:	f8a3 c000 	strh.w	ip, [r3]
 8025770:	b007      	add	sp, #28
 8025772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025776:	af05      	add	r7, sp, #20
 8025778:	e756      	b.n	8025628 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 802577a:	ad05      	add	r5, sp, #20
 802577c:	462f      	mov	r7, r5
 802577e:	e761      	b.n	8025644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8025780:	ad05      	add	r5, sp, #20
 8025782:	e75f      	b.n	8025644 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 8025784:	ae05      	add	r6, sp, #20
 8025786:	e772      	b.n	802566e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 8025788:	ab05      	add	r3, sp, #20
 802578a:	461e      	mov	r6, r3
 802578c:	e77e      	b.n	802568c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 802578e:	ab05      	add	r3, sp, #20
 8025790:	e77c      	b.n	802568c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

08025792 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025796:	b095      	sub	sp, #84	@ 0x54
 8025798:	9212      	str	r2, [sp, #72]	@ 0x48
 802579a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 802579c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802579e:	9309      	str	r3, [sp, #36]	@ 0x24
 80257a0:	6850      	ldr	r0, [r2, #4]
 80257a2:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 80257a6:	910e      	str	r1, [sp, #56]	@ 0x38
 80257a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80257aa:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	@ 0x90
 80257ae:	fb00 1303 	mla	r3, r0, r3, r1
 80257b2:	6812      	ldr	r2, [r2, #0]
 80257b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80257b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80257ba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80257bc:	681b      	ldr	r3, [r3, #0]
 80257be:	930d      	str	r3, [sp, #52]	@ 0x34
 80257c0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80257c2:	685c      	ldr	r4, [r3, #4]
 80257c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80257c6:	3404      	adds	r4, #4
 80257c8:	43db      	mvns	r3, r3
 80257ca:	b2db      	uxtb	r3, r3
 80257cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80257ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80257d0:	2b00      	cmp	r3, #0
 80257d2:	dc03      	bgt.n	80257dc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80257d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80257d6:	2b00      	cmp	r3, #0
 80257d8:	f340 8255 	ble.w	8025c86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 80257dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80257de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80257e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80257e6:	1e48      	subs	r0, r1, #1
 80257e8:	1e55      	subs	r5, r2, #1
 80257ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80257ec:	2b00      	cmp	r3, #0
 80257ee:	f340 80f9 	ble.w	80259e4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80257f2:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 80257f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80257f6:	1436      	asrs	r6, r6, #16
 80257f8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80257fc:	d406      	bmi.n	802580c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80257fe:	4286      	cmp	r6, r0
 8025800:	da04      	bge.n	802580c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025802:	2b00      	cmp	r3, #0
 8025804:	db02      	blt.n	802580c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8025806:	42ab      	cmp	r3, r5
 8025808:	f2c0 80ed 	blt.w	80259e6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 802580c:	3601      	adds	r6, #1
 802580e:	f100 80da 	bmi.w	80259c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025812:	42b1      	cmp	r1, r6
 8025814:	f2c0 80d7 	blt.w	80259c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025818:	3301      	adds	r3, #1
 802581a:	f100 80d4 	bmi.w	80259c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 802581e:	429a      	cmp	r2, r3
 8025820:	f2c0 80d1 	blt.w	80259c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 8025824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025826:	9311      	str	r3, [sp, #68]	@ 0x44
 8025828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802582a:	930c      	str	r3, [sp, #48]	@ 0x30
 802582c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802582e:	2b00      	cmp	r3, #0
 8025830:	f340 80fa 	ble.w	8025a28 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8025834:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8025836:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025838:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 802583a:	68c6      	ldr	r6, [r0, #12]
 802583c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802583e:	141d      	asrs	r5, r3, #16
 8025840:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025844:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025846:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025848:	1400      	asrs	r0, r0, #16
 802584a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 802584e:	6892      	ldr	r2, [r2, #8]
 8025850:	f100 813e 	bmi.w	8025ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025854:	1e57      	subs	r7, r2, #1
 8025856:	42b8      	cmp	r0, r7
 8025858:	f280 813a 	bge.w	8025ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802585c:	2d00      	cmp	r5, #0
 802585e:	f2c0 8137 	blt.w	8025ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8025862:	1e77      	subs	r7, r6, #1
 8025864:	42bd      	cmp	r5, r7
 8025866:	f280 8133 	bge.w	8025ad0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 802586a:	b212      	sxth	r2, r2
 802586c:	fb05 0002 	mla	r0, r5, r2, r0
 8025870:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025872:	f815 a000 	ldrb.w	sl, [r5, r0]
 8025876:	182e      	adds	r6, r5, r0
 8025878:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802587c:	eb04 050a 	add.w	r5, r4, sl
 8025880:	2b00      	cmp	r3, #0
 8025882:	f000 8117 	beq.w	8025ab4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8025886:	f896 c001 	ldrb.w	ip, [r6, #1]
 802588a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 802588e:	44a4      	add	ip, r4
 8025890:	2900      	cmp	r1, #0
 8025892:	f000 8117 	beq.w	8025ac4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8025896:	18b0      	adds	r0, r6, r2
 8025898:	7840      	ldrb	r0, [r0, #1]
 802589a:	5cb2      	ldrb	r2, [r6, r2]
 802589c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80258a0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80258a4:	4422      	add	r2, r4
 80258a6:	4420      	add	r0, r4
 80258a8:	b29b      	uxth	r3, r3
 80258aa:	b289      	uxth	r1, r1
 80258ac:	fb03 f901 	mul.w	r9, r3, r1
 80258b0:	011b      	lsls	r3, r3, #4
 80258b2:	f89c 7002 	ldrb.w	r7, [ip, #2]
 80258b6:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 80258ba:	eba3 0309 	sub.w	r3, r3, r9
 80258be:	b29b      	uxth	r3, r3
 80258c0:	435f      	muls	r7, r3
 80258c2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80258c6:	b289      	uxth	r1, r1
 80258c8:	f895 b002 	ldrb.w	fp, [r5, #2]
 80258cc:	eba8 0801 	sub.w	r8, r8, r1
 80258d0:	fa1f f888 	uxth.w	r8, r8
 80258d4:	fb08 770b 	mla	r7, r8, fp, r7
 80258d8:	f892 b002 	ldrb.w	fp, [r2, #2]
 80258dc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80258de:	fb01 770b 	mla	r7, r1, fp, r7
 80258e2:	f8b6 e000 	ldrh.w	lr, [r6]
 80258e6:	f890 b002 	ldrb.w	fp, [r0, #2]
 80258ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80258ec:	fb09 770b 	mla	r7, r9, fp, r7
 80258f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80258f2:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 80258f6:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 80258fa:	fb1b fb03 	smulbb	fp, fp, r3
 80258fe:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 8025902:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025906:	fb07 b706 	mla	r7, r7, r6, fp
 802590a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802590c:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025910:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8025914:	f89c c000 	ldrb.w	ip, [ip]
 8025918:	435d      	muls	r5, r3
 802591a:	fb08 550b 	mla	r5, r8, fp, r5
 802591e:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025924:	fb01 550b 	mla	r5, r1, fp, r5
 8025928:	f890 b001 	ldrb.w	fp, [r0, #1]
 802592c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 8025930:	fb09 550b 	mla	r5, r9, fp, r5
 8025934:	ea4f 0bee 	mov.w	fp, lr, asr #3
 8025938:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 802593c:	fb1b fb03 	smulbb	fp, fp, r3
 8025940:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025942:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025946:	fb03 f30c 	mul.w	r3, r3, ip
 802594a:	fb08 330a 	mla	r3, r8, sl, r3
 802594e:	f892 c000 	ldrb.w	ip, [r2]
 8025952:	fa5f fe8e 	uxtb.w	lr, lr
 8025956:	fb01 330c 	mla	r3, r1, ip, r3
 802595a:	f890 c000 	ldrb.w	ip, [r0]
 802595e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025962:	fb09 3c0c 	mla	ip, r9, ip, r3
 8025966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025968:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 802596c:	fb1e fe03 	smulbb	lr, lr, r3
 8025970:	fb05 b506 	mla	r5, r5, r6, fp
 8025974:	fb0c e606 	mla	r6, ip, r6, lr
 8025978:	b2bf      	uxth	r7, r7
 802597a:	1c7b      	adds	r3, r7, #1
 802597c:	b2ad      	uxth	r5, r5
 802597e:	b2b6      	uxth	r6, r6
 8025980:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8025984:	f407 4378 	and.w	r3, r7, #63488	@ 0xf800
 8025988:	f105 0b01 	add.w	fp, r5, #1
 802598c:	1c77      	adds	r7, r6, #1
 802598e:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8025992:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025996:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 802599a:	096d      	lsrs	r5, r5, #5
 802599c:	431f      	orrs	r7, r3
 802599e:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80259a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259a4:	433d      	orrs	r5, r7
 80259a6:	801d      	strh	r5, [r3, #0]
 80259a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80259aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80259ac:	3302      	adds	r3, #2
 80259ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80259b0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80259b2:	4413      	add	r3, r2
 80259b4:	931f      	str	r3, [sp, #124]	@ 0x7c
 80259b6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80259b8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80259ba:	4413      	add	r3, r2
 80259bc:	9320      	str	r3, [sp, #128]	@ 0x80
 80259be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80259c0:	3b01      	subs	r3, #1
 80259c2:	9311      	str	r3, [sp, #68]	@ 0x44
 80259c4:	e732      	b.n	802582c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80259c6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80259c8:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 80259ca:	4433      	add	r3, r6
 80259cc:	931f      	str	r3, [sp, #124]	@ 0x7c
 80259ce:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80259d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80259d2:	4433      	add	r3, r6
 80259d4:	9320      	str	r3, [sp, #128]	@ 0x80
 80259d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80259d8:	3b01      	subs	r3, #1
 80259da:	9309      	str	r3, [sp, #36]	@ 0x24
 80259dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80259de:	3302      	adds	r3, #2
 80259e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80259e2:	e702      	b.n	80257ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80259e4:	d027      	beq.n	8025a36 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80259e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80259e8:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80259ea:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 80259ec:	3b01      	subs	r3, #1
 80259ee:	fb00 5003 	mla	r0, r0, r3, r5
 80259f2:	1400      	asrs	r0, r0, #16
 80259f4:	f53f af16 	bmi.w	8025824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80259f8:	3901      	subs	r1, #1
 80259fa:	4288      	cmp	r0, r1
 80259fc:	f6bf af12 	bge.w	8025824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025a00:	9922      	ldr	r1, [sp, #136]	@ 0x88
 8025a02:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8025a04:	fb01 0303 	mla	r3, r1, r3, r0
 8025a08:	141b      	asrs	r3, r3, #16
 8025a0a:	f53f af0b 	bmi.w	8025824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025a0e:	3a01      	subs	r2, #1
 8025a10:	4293      	cmp	r3, r2
 8025a12:	f6bf af07 	bge.w	8025824 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8025a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a18:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8025a1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8025a1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025a20:	930c      	str	r3, [sp, #48]	@ 0x30
 8025a22:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025a24:	2b00      	cmp	r3, #0
 8025a26:	dc70      	bgt.n	8025b0a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8025a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025a2c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025a30:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025a34:	930a      	str	r3, [sp, #40]	@ 0x28
 8025a36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025a38:	2b00      	cmp	r3, #0
 8025a3a:	f340 8124 	ble.w	8025c86 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8025a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025a42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025a46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8025a4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025a4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025a52:	eef0 6a62 	vmov.f32	s13, s5
 8025a56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025a5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025a5e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025a62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025a6a:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 8025a6e:	eef0 6a43 	vmov.f32	s13, s6
 8025a72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025a76:	ee12 2a90 	vmov	r2, s5
 8025a7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025a7e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025a80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025a84:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a88:	ee13 2a10 	vmov	r2, s6
 8025a8c:	9321      	str	r3, [sp, #132]	@ 0x84
 8025a8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025a90:	edcd 6a20 	vstr	s13, [sp, #128]	@ 0x80
 8025a94:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a98:	9322      	str	r3, [sp, #136]	@ 0x88
 8025a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8025a9c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8025a9e:	3b01      	subs	r3, #1
 8025aa0:	930e      	str	r3, [sp, #56]	@ 0x38
 8025aa2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8025aa4:	bf08      	it	eq
 8025aa6:	4613      	moveq	r3, r2
 8025aa8:	eeb0 3a67 	vmov.f32	s6, s15
 8025aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8025aae:	eef0 2a47 	vmov.f32	s5, s14
 8025ab2:	e68c      	b.n	80257ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025ab4:	b149      	cbz	r1, 8025aca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8025ab6:	4628      	mov	r0, r5
 8025ab8:	5cb2      	ldrb	r2, [r6, r2]
 8025aba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025abe:	4422      	add	r2, r4
 8025ac0:	46ac      	mov	ip, r5
 8025ac2:	e6f1      	b.n	80258a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8025ac4:	4628      	mov	r0, r5
 8025ac6:	462a      	mov	r2, r5
 8025ac8:	e6ee      	b.n	80258a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8025aca:	4628      	mov	r0, r5
 8025acc:	462a      	mov	r2, r5
 8025ace:	e7f7      	b.n	8025ac0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8025ad0:	1c47      	adds	r7, r0, #1
 8025ad2:	f53f af69 	bmi.w	80259a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025ad6:	42ba      	cmp	r2, r7
 8025ad8:	f6ff af66 	blt.w	80259a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025adc:	1c6f      	adds	r7, r5, #1
 8025ade:	f53f af63 	bmi.w	80259a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025ae2:	42be      	cmp	r6, r7
 8025ae4:	f6ff af60 	blt.w	80259a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025ae8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8025aea:	b236      	sxth	r6, r6
 8025aec:	b212      	sxth	r2, r2
 8025aee:	e9cd 1705 	strd	r1, r7, [sp, #20]
 8025af2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8025af6:	9002      	str	r0, [sp, #8]
 8025af8:	9200      	str	r2, [sp, #0]
 8025afa:	9601      	str	r6, [sp, #4]
 8025afc:	4623      	mov	r3, r4
 8025afe:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	@ 0x30
 8025b02:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8025b04:	f7ff fd59 	bl	80255ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 8025b08:	e74e      	b.n	80259a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8025b0a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025b0c:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8025b0e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8025b12:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8025b14:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
 8025b16:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8025b1a:	142d      	asrs	r5, r5, #16
 8025b1c:	1400      	asrs	r0, r0, #16
 8025b1e:	fb02 5000 	mla	r0, r2, r0, r5
 8025b22:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8025b24:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025b26:	f815 9000 	ldrb.w	r9, [r5, r0]
 8025b2a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8025b2e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8025b32:	182e      	adds	r6, r5, r0
 8025b34:	eb04 0509 	add.w	r5, r4, r9
 8025b38:	2b00      	cmp	r3, #0
 8025b3a:	f000 8096 	beq.w	8025c6a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8025b3e:	7877      	ldrb	r7, [r6, #1]
 8025b40:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025b44:	4427      	add	r7, r4
 8025b46:	2900      	cmp	r1, #0
 8025b48:	f000 8097 	beq.w	8025c7a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 8025b4c:	18b0      	adds	r0, r6, r2
 8025b4e:	7840      	ldrb	r0, [r0, #1]
 8025b50:	5cb2      	ldrb	r2, [r6, r2]
 8025b52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025b56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025b5a:	4422      	add	r2, r4
 8025b5c:	4420      	add	r0, r4
 8025b5e:	b29b      	uxth	r3, r3
 8025b60:	b289      	uxth	r1, r1
 8025b62:	fb03 f801 	mul.w	r8, r3, r1
 8025b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025b68:	011b      	lsls	r3, r3, #4
 8025b6a:	f8b6 c000 	ldrh.w	ip, [r6]
 8025b6e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8025b72:	78be      	ldrb	r6, [r7, #2]
 8025b74:	eba3 0308 	sub.w	r3, r3, r8
 8025b78:	b29b      	uxth	r3, r3
 8025b7a:	435e      	muls	r6, r3
 8025b7c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8025b80:	b289      	uxth	r1, r1
 8025b82:	f895 b002 	ldrb.w	fp, [r5, #2]
 8025b86:	ebae 0e01 	sub.w	lr, lr, r1
 8025b8a:	fa1f fe8e 	uxth.w	lr, lr
 8025b8e:	fb0e 660b 	mla	r6, lr, fp, r6
 8025b92:	f892 b002 	ldrb.w	fp, [r2, #2]
 8025b96:	9310      	str	r3, [sp, #64]	@ 0x40
 8025b98:	fb01 660b 	mla	r6, r1, fp, r6
 8025b9c:	f890 b002 	ldrb.w	fp, [r0, #2]
 8025ba0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025ba2:	fb08 660b 	mla	r6, r8, fp, r6
 8025ba6:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 8025baa:	f00b 0bf8 	and.w	fp, fp, #248	@ 0xf8
 8025bae:	fb1b fb03 	smulbb	fp, fp, r3
 8025bb2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8025bb6:	fb06 b60a 	mla	r6, r6, sl, fp
 8025bba:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025bbc:	f895 b001 	ldrb.w	fp, [r5, #1]
 8025bc0:	787d      	ldrb	r5, [r7, #1]
 8025bc2:	783f      	ldrb	r7, [r7, #0]
 8025bc4:	435d      	muls	r5, r3
 8025bc6:	fb0e 550b 	mla	r5, lr, fp, r5
 8025bca:	f892 b001 	ldrb.w	fp, [r2, #1]
 8025bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025bd0:	fb01 550b 	mla	r5, r1, fp, r5
 8025bd4:	f890 b001 	ldrb.w	fp, [r0, #1]
 8025bd8:	f814 9009 	ldrb.w	r9, [r4, r9]
 8025bdc:	fb08 550b 	mla	r5, r8, fp, r5
 8025be0:	ea4f 0bec 	mov.w	fp, ip, asr #3
 8025be4:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8025be8:	fb1b fb03 	smulbb	fp, fp, r3
 8025bec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8025bee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8025bf2:	437b      	muls	r3, r7
 8025bf4:	fb0e 3309 	mla	r3, lr, r9, r3
 8025bf8:	7817      	ldrb	r7, [r2, #0]
 8025bfa:	fa5f fc8c 	uxtb.w	ip, ip
 8025bfe:	fb01 3307 	mla	r3, r1, r7, r3
 8025c02:	7807      	ldrb	r7, [r0, #0]
 8025c04:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8025c08:	fb08 3707 	mla	r7, r8, r7, r3
 8025c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025c0e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8025c12:	fb1c fc03 	smulbb	ip, ip, r3
 8025c16:	fb05 b50a 	mla	r5, r5, sl, fp
 8025c1a:	fb07 c70a 	mla	r7, r7, sl, ip
 8025c1e:	b2b6      	uxth	r6, r6
 8025c20:	b2ad      	uxth	r5, r5
 8025c22:	b2bf      	uxth	r7, r7
 8025c24:	1c73      	adds	r3, r6, #1
 8025c26:	1c7a      	adds	r2, r7, #1
 8025c28:	f105 0b01 	add.w	fp, r5, #1
 8025c2c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8025c30:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 8025c34:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 8025c38:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8025c3c:	f406 4678 	and.w	r6, r6, #63488	@ 0xf800
 8025c40:	096d      	lsrs	r5, r5, #5
 8025c42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025c44:	4316      	orrs	r6, r2
 8025c46:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8025c4a:	432e      	orrs	r6, r5
 8025c4c:	f823 6b02 	strh.w	r6, [r3], #2
 8025c50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8025c52:	930c      	str	r3, [sp, #48]	@ 0x30
 8025c54:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8025c56:	4413      	add	r3, r2
 8025c58:	931f      	str	r3, [sp, #124]	@ 0x7c
 8025c5a:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8025c5c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025c5e:	4413      	add	r3, r2
 8025c60:	9320      	str	r3, [sp, #128]	@ 0x80
 8025c62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8025c64:	3b01      	subs	r3, #1
 8025c66:	9311      	str	r3, [sp, #68]	@ 0x44
 8025c68:	e6db      	b.n	8025a22 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 8025c6a:	b149      	cbz	r1, 8025c80 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8025c6c:	4628      	mov	r0, r5
 8025c6e:	5cb2      	ldrb	r2, [r6, r2]
 8025c70:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025c74:	4422      	add	r2, r4
 8025c76:	462f      	mov	r7, r5
 8025c78:	e771      	b.n	8025b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025c7a:	4628      	mov	r0, r5
 8025c7c:	462a      	mov	r2, r5
 8025c7e:	e76e      	b.n	8025b5e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8025c80:	4628      	mov	r0, r5
 8025c82:	462a      	mov	r2, r5
 8025c84:	e7f7      	b.n	8025c76 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8025c86:	b015      	add	sp, #84	@ 0x54
 8025c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025c8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 8025c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c90:	880f      	ldrh	r7, [r1, #0]
 8025c92:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8025c96:	023c      	lsls	r4, r7, #8
 8025c98:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	@ 0x38
 8025c9c:	f404 0b78 	and.w	fp, r4, #16252928	@ 0xf80000
 8025ca0:	fb05 ca0e 	mla	sl, r5, lr, ip
 8025ca4:	017c      	lsls	r4, r7, #5
 8025ca6:	f404 447c 	and.w	r4, r4, #64512	@ 0xfc00
 8025caa:	00ff      	lsls	r7, r7, #3
 8025cac:	ea4b 0404 	orr.w	r4, fp, r4
 8025cb0:	b2ff      	uxtb	r7, r7
 8025cb2:	4327      	orrs	r7, r4
 8025cb4:	2d00      	cmp	r5, #0
 8025cb6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8025cba:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8025cbe:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8025cc2:	eb02 080a 	add.w	r8, r2, sl
 8025cc6:	9701      	str	r7, [sp, #4]
 8025cc8:	db7e      	blt.n	8025dc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025cca:	45a9      	cmp	r9, r5
 8025ccc:	dd7c      	ble.n	8025dc8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 8025cce:	f1bc 0f00 	cmp.w	ip, #0
 8025cd2:	db77      	blt.n	8025dc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025cd4:	45e6      	cmp	lr, ip
 8025cd6:	dd75      	ble.n	8025dc4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 8025cd8:	f812 700a 	ldrb.w	r7, [r2, sl]
 8025cdc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8025ce0:	441f      	add	r7, r3
 8025ce2:	f11c 0201 	adds.w	r2, ip, #1
 8025ce6:	d472      	bmi.n	8025dce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025ce8:	4596      	cmp	lr, r2
 8025cea:	dd70      	ble.n	8025dce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025cec:	2800      	cmp	r0, #0
 8025cee:	d06e      	beq.n	8025dce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 8025cf0:	f898 4001 	ldrb.w	r4, [r8, #1]
 8025cf4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8025cf8:	441c      	add	r4, r3
 8025cfa:	3501      	adds	r5, #1
 8025cfc:	d46b      	bmi.n	8025dd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025cfe:	45a9      	cmp	r9, r5
 8025d00:	dd69      	ble.n	8025dd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025d02:	2e00      	cmp	r6, #0
 8025d04:	d067      	beq.n	8025dd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 8025d06:	f1bc 0f00 	cmp.w	ip, #0
 8025d0a:	db62      	blt.n	8025dd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8025d0c:	45e6      	cmp	lr, ip
 8025d0e:	dd60      	ble.n	8025dd2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 8025d10:	f818 500e 	ldrb.w	r5, [r8, lr]
 8025d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8025d18:	441d      	add	r5, r3
 8025d1a:	f11c 0201 	adds.w	r2, ip, #1
 8025d1e:	d45d      	bmi.n	8025ddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025d20:	4596      	cmp	lr, r2
 8025d22:	dd5b      	ble.n	8025ddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025d24:	2800      	cmp	r0, #0
 8025d26:	d059      	beq.n	8025ddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 8025d28:	44c6      	add	lr, r8
 8025d2a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8025d2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025d32:	4413      	add	r3, r2
 8025d34:	b280      	uxth	r0, r0
 8025d36:	b2b2      	uxth	r2, r6
 8025d38:	fb00 f602 	mul.w	r6, r0, r2
 8025d3c:	0100      	lsls	r0, r0, #4
 8025d3e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8025d42:	f5c0 7880 	rsb	r8, r0, #256	@ 0x100
 8025d46:	1b80      	subs	r0, r0, r6
 8025d48:	fa1f fc82 	uxth.w	ip, r2
 8025d4c:	b282      	uxth	r2, r0
 8025d4e:	78a0      	ldrb	r0, [r4, #2]
 8025d50:	f897 e002 	ldrb.w	lr, [r7, #2]
 8025d54:	4350      	muls	r0, r2
 8025d56:	eba8 080c 	sub.w	r8, r8, ip
 8025d5a:	fa1f f888 	uxth.w	r8, r8
 8025d5e:	fb08 0e0e 	mla	lr, r8, lr, r0
 8025d62:	78a8      	ldrb	r0, [r5, #2]
 8025d64:	f897 9000 	ldrb.w	r9, [r7]
 8025d68:	fb0c e000 	mla	r0, ip, r0, lr
 8025d6c:	f893 e002 	ldrb.w	lr, [r3, #2]
 8025d70:	787f      	ldrb	r7, [r7, #1]
 8025d72:	fb06 0e0e 	mla	lr, r6, lr, r0
 8025d76:	f40e 4078 	and.w	r0, lr, #63488	@ 0xf800
 8025d7a:	f894 e000 	ldrb.w	lr, [r4]
 8025d7e:	fb02 fe0e 	mul.w	lr, r2, lr
 8025d82:	fb08 e909 	mla	r9, r8, r9, lr
 8025d86:	f895 e000 	ldrb.w	lr, [r5]
 8025d8a:	fb0c 990e 	mla	r9, ip, lr, r9
 8025d8e:	f893 e000 	ldrb.w	lr, [r3]
 8025d92:	785b      	ldrb	r3, [r3, #1]
 8025d94:	fb06 9e0e 	mla	lr, r6, lr, r9
 8025d98:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8025d9c:	ea4e 0e00 	orr.w	lr, lr, r0
 8025da0:	7860      	ldrb	r0, [r4, #1]
 8025da2:	4350      	muls	r0, r2
 8025da4:	fb08 0007 	mla	r0, r8, r7, r0
 8025da8:	786a      	ldrb	r2, [r5, #1]
 8025daa:	fb0c 0202 	mla	r2, ip, r2, r0
 8025dae:	fb06 2303 	mla	r3, r6, r3, r2
 8025db2:	095b      	lsrs	r3, r3, #5
 8025db4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8025db8:	ea4e 0303 	orr.w	r3, lr, r3
 8025dbc:	800b      	strh	r3, [r1, #0]
 8025dbe:	b003      	add	sp, #12
 8025dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025dc4:	af01      	add	r7, sp, #4
 8025dc6:	e78c      	b.n	8025ce2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 8025dc8:	ac01      	add	r4, sp, #4
 8025dca:	4627      	mov	r7, r4
 8025dcc:	e795      	b.n	8025cfa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025dce:	ac01      	add	r4, sp, #4
 8025dd0:	e793      	b.n	8025cfa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 8025dd2:	ad01      	add	r5, sp, #4
 8025dd4:	e7a1      	b.n	8025d1a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 8025dd6:	ab01      	add	r3, sp, #4
 8025dd8:	461d      	mov	r5, r3
 8025dda:	e7ab      	b.n	8025d34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 8025ddc:	ab01      	add	r3, sp, #4
 8025dde:	e7a9      	b.n	8025d34 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

08025de0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025de4:	b08f      	sub	sp, #60	@ 0x3c
 8025de6:	920c      	str	r2, [sp, #48]	@ 0x30
 8025de8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8025dea:	900d      	str	r0, [sp, #52]	@ 0x34
 8025dec:	6850      	ldr	r0, [r2, #4]
 8025dee:	910a      	str	r1, [sp, #40]	@ 0x28
 8025df0:	9306      	str	r3, [sp, #24]
 8025df2:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	@ 0x78
 8025df6:	fb00 1303 	mla	r3, r0, r3, r1
 8025dfa:	e9dd b519 	ldrd	fp, r5, [sp, #100]	@ 0x64
 8025dfe:	6812      	ldr	r2, [r2, #0]
 8025e00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025e04:	9307      	str	r3, [sp, #28]
 8025e06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025e08:	681b      	ldr	r3, [r3, #0]
 8025e0a:	9308      	str	r3, [sp, #32]
 8025e0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025e0e:	685c      	ldr	r4, [r3, #4]
 8025e10:	3404      	adds	r4, #4
 8025e12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025e14:	2b00      	cmp	r3, #0
 8025e16:	dc03      	bgt.n	8025e20 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8025e18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8025e1a:	2b00      	cmp	r3, #0
 8025e1c:	f340 81d6 	ble.w	80261cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8025e20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8025e22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025e2a:	1e48      	subs	r0, r1, #1
 8025e2c:	1e56      	subs	r6, r2, #1
 8025e2e:	9b06      	ldr	r3, [sp, #24]
 8025e30:	2b00      	cmp	r3, #0
 8025e32:	f340 80b7 	ble.w	8025fa4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8025e36:	ea5f 472b 	movs.w	r7, fp, asr #16
 8025e3a:	ea4f 4325 	mov.w	r3, r5, asr #16
 8025e3e:	d406      	bmi.n	8025e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025e40:	4287      	cmp	r7, r0
 8025e42:	da04      	bge.n	8025e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	db02      	blt.n	8025e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8025e48:	42b3      	cmp	r3, r6
 8025e4a:	f2c0 80ac 	blt.w	8025fa6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025e4e:	3701      	adds	r7, #1
 8025e50:	f100 809d 	bmi.w	8025f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e54:	42b9      	cmp	r1, r7
 8025e56:	f2c0 809a 	blt.w	8025f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e5a:	3301      	adds	r3, #1
 8025e5c:	f100 8097 	bmi.w	8025f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e60:	429a      	cmp	r2, r3
 8025e62:	f2c0 8094 	blt.w	8025f8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e66:	9b06      	ldr	r3, [sp, #24]
 8025e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025e6a:	9b07      	ldr	r3, [sp, #28]
 8025e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8025e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025e70:	2b00      	cmp	r3, #0
 8025e72:	f340 80b5 	ble.w	8025fe0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8025e76:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8025e78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8025e7a:	68c7      	ldr	r7, [r0, #12]
 8025e7c:	ea5f 402b 	movs.w	r0, fp, asr #16
 8025e80:	ea4f 4625 	mov.w	r6, r5, asr #16
 8025e84:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8025e88:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025e8c:	6892      	ldr	r2, [r2, #8]
 8025e8e:	f100 80fb 	bmi.w	8026088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025e92:	f102 3cff 	add.w	ip, r2, #4294967295
 8025e96:	4560      	cmp	r0, ip
 8025e98:	f280 80f6 	bge.w	8026088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025e9c:	2e00      	cmp	r6, #0
 8025e9e:	f2c0 80f3 	blt.w	8026088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025ea2:	f107 3cff 	add.w	ip, r7, #4294967295
 8025ea6:	4566      	cmp	r6, ip
 8025ea8:	f280 80ee 	bge.w	8026088 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8025eac:	b212      	sxth	r2, r2
 8025eae:	fb06 0002 	mla	r0, r6, r2, r0
 8025eb2:	9e08      	ldr	r6, [sp, #32]
 8025eb4:	1837      	adds	r7, r6, r0
 8025eb6:	5c30      	ldrb	r0, [r6, r0]
 8025eb8:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 8025ebc:	eb04 0c08 	add.w	ip, r4, r8
 8025ec0:	2b00      	cmp	r3, #0
 8025ec2:	f000 80d3 	beq.w	802606c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8025ec6:	787e      	ldrb	r6, [r7, #1]
 8025ec8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8025ecc:	4426      	add	r6, r4
 8025ece:	2900      	cmp	r1, #0
 8025ed0:	f000 80d4 	beq.w	802607c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8025ed4:	18b8      	adds	r0, r7, r2
 8025ed6:	7840      	ldrb	r0, [r0, #1]
 8025ed8:	5cba      	ldrb	r2, [r7, r2]
 8025eda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8025ede:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8025ee2:	4422      	add	r2, r4
 8025ee4:	4420      	add	r0, r4
 8025ee6:	b29b      	uxth	r3, r3
 8025ee8:	b289      	uxth	r1, r1
 8025eea:	fb03 f901 	mul.w	r9, r3, r1
 8025eee:	011b      	lsls	r3, r3, #4
 8025ef0:	78b7      	ldrb	r7, [r6, #2]
 8025ef2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8025ef6:	eba3 0309 	sub.w	r3, r3, r9
 8025efa:	b29b      	uxth	r3, r3
 8025efc:	435f      	muls	r7, r3
 8025efe:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8025f02:	b289      	uxth	r1, r1
 8025f04:	f89c a002 	ldrb.w	sl, [ip, #2]
 8025f08:	ebae 0e01 	sub.w	lr, lr, r1
 8025f0c:	fa1f fe8e 	uxth.w	lr, lr
 8025f10:	fb0e 770a 	mla	r7, lr, sl, r7
 8025f14:	f892 a002 	ldrb.w	sl, [r2, #2]
 8025f18:	f89c c001 	ldrb.w	ip, [ip, #1]
 8025f1c:	fb01 770a 	mla	r7, r1, sl, r7
 8025f20:	f890 a002 	ldrb.w	sl, [r0, #2]
 8025f24:	fb09 7a0a 	mla	sl, r9, sl, r7
 8025f28:	f814 7008 	ldrb.w	r7, [r4, r8]
 8025f2c:	f896 8000 	ldrb.w	r8, [r6]
 8025f30:	7876      	ldrb	r6, [r6, #1]
 8025f32:	fb03 f808 	mul.w	r8, r3, r8
 8025f36:	fb0e 8807 	mla	r8, lr, r7, r8
 8025f3a:	7817      	ldrb	r7, [r2, #0]
 8025f3c:	4373      	muls	r3, r6
 8025f3e:	fb01 8807 	mla	r8, r1, r7, r8
 8025f42:	7807      	ldrb	r7, [r0, #0]
 8025f44:	fb0e 330c 	mla	r3, lr, ip, r3
 8025f48:	fb09 8707 	mla	r7, r9, r7, r8
 8025f4c:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8025f50:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8025f54:	ea47 070a 	orr.w	r7, r7, sl
 8025f58:	f892 a001 	ldrb.w	sl, [r2, #1]
 8025f5c:	fb01 310a 	mla	r1, r1, sl, r3
 8025f60:	f890 a001 	ldrb.w	sl, [r0, #1]
 8025f64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f66:	fb09 1a0a 	mla	sl, r9, sl, r1
 8025f6a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8025f6e:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8025f72:	ea47 070a 	orr.w	r7, r7, sl
 8025f76:	801f      	strh	r7, [r3, #0]
 8025f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025f7a:	3302      	adds	r3, #2
 8025f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8025f7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025f80:	449b      	add	fp, r3
 8025f82:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f84:	441d      	add	r5, r3
 8025f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025f88:	3b01      	subs	r3, #1
 8025f8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025f8c:	e76f      	b.n	8025e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8025f8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8025f90:	449b      	add	fp, r3
 8025f92:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8025f94:	441d      	add	r5, r3
 8025f96:	9b06      	ldr	r3, [sp, #24]
 8025f98:	3b01      	subs	r3, #1
 8025f9a:	9306      	str	r3, [sp, #24]
 8025f9c:	9b07      	ldr	r3, [sp, #28]
 8025f9e:	3302      	adds	r3, #2
 8025fa0:	9307      	str	r3, [sp, #28]
 8025fa2:	e744      	b.n	8025e2e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8025fa4:	d023      	beq.n	8025fee <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8025fa6:	9b06      	ldr	r3, [sp, #24]
 8025fa8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8025faa:	3b01      	subs	r3, #1
 8025fac:	fb00 b003 	mla	r0, r0, r3, fp
 8025fb0:	1400      	asrs	r0, r0, #16
 8025fb2:	f53f af58 	bmi.w	8025e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025fb6:	3901      	subs	r1, #1
 8025fb8:	4288      	cmp	r0, r1
 8025fba:	f6bf af54 	bge.w	8025e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025fbe:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8025fc0:	fb01 5303 	mla	r3, r1, r3, r5
 8025fc4:	141b      	asrs	r3, r3, #16
 8025fc6:	f53f af4e 	bmi.w	8025e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025fca:	3a01      	subs	r2, #1
 8025fcc:	4293      	cmp	r3, r2
 8025fce:	f6bf af4a 	bge.w	8025e66 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8025fd2:	9b06      	ldr	r3, [sp, #24]
 8025fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8025fd6:	9b07      	ldr	r3, [sp, #28]
 8025fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025fda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025fdc:	2b00      	cmp	r3, #0
 8025fde:	dc70      	bgt.n	80260c2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8025fe0:	9b06      	ldr	r3, [sp, #24]
 8025fe2:	9a07      	ldr	r2, [sp, #28]
 8025fe4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8025fe8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8025fec:	9307      	str	r3, [sp, #28]
 8025fee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025ff0:	2b00      	cmp	r3, #0
 8025ff2:	f340 80eb 	ble.w	80261cc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8025ff6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8025ffa:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025ffe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026002:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026006:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802600a:	eef0 6a62 	vmov.f32	s13, s5
 802600e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026012:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026016:	ee61 7a27 	vmul.f32	s15, s2, s15
 802601a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802601e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026022:	ee16 ba90 	vmov	fp, s13
 8026026:	eef0 6a43 	vmov.f32	s13, s6
 802602a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802602e:	ee12 2a90 	vmov	r2, s5
 8026032:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026036:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026038:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802603c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026040:	ee13 2a10 	vmov	r2, s6
 8026044:	931b      	str	r3, [sp, #108]	@ 0x6c
 8026046:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026048:	ee16 5a90 	vmov	r5, s13
 802604c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026050:	931c      	str	r3, [sp, #112]	@ 0x70
 8026052:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8026054:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8026056:	3b01      	subs	r3, #1
 8026058:	930a      	str	r3, [sp, #40]	@ 0x28
 802605a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802605c:	bf08      	it	eq
 802605e:	4613      	moveq	r3, r2
 8026060:	eeb0 3a67 	vmov.f32	s6, s15
 8026064:	9306      	str	r3, [sp, #24]
 8026066:	eef0 2a47 	vmov.f32	s5, s14
 802606a:	e6d2      	b.n	8025e12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 802606c:	b149      	cbz	r1, 8026082 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802606e:	4660      	mov	r0, ip
 8026070:	5cba      	ldrb	r2, [r7, r2]
 8026072:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026076:	4422      	add	r2, r4
 8026078:	4666      	mov	r6, ip
 802607a:	e734      	b.n	8025ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 802607c:	4660      	mov	r0, ip
 802607e:	4662      	mov	r2, ip
 8026080:	e731      	b.n	8025ee6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8026082:	4660      	mov	r0, ip
 8026084:	4662      	mov	r2, ip
 8026086:	e7f7      	b.n	8026078 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 8026088:	f110 0c01 	adds.w	ip, r0, #1
 802608c:	f53f af74 	bmi.w	8025f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8026090:	4562      	cmp	r2, ip
 8026092:	f6ff af71 	blt.w	8025f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 8026096:	f116 0c01 	adds.w	ip, r6, #1
 802609a:	f53f af6d 	bmi.w	8025f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 802609e:	4567      	cmp	r7, ip
 80260a0:	f6ff af6a 	blt.w	8025f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80260a4:	b23f      	sxth	r7, r7
 80260a6:	b212      	sxth	r2, r2
 80260a8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80260ac:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80260b0:	9200      	str	r2, [sp, #0]
 80260b2:	9701      	str	r7, [sp, #4]
 80260b4:	4623      	mov	r3, r4
 80260b6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80260ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80260bc:	f7ff fde6 	bl	8025c8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 80260c0:	e75a      	b.n	8025f78 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 80260c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80260c4:	ea4f 462b 	mov.w	r6, fp, asr #16
 80260c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80260cc:	1428      	asrs	r0, r5, #16
 80260ce:	fb02 6000 	mla	r0, r2, r0, r6
 80260d2:	9e08      	ldr	r6, [sp, #32]
 80260d4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80260d8:	f816 8000 	ldrb.w	r8, [r6, r0]
 80260dc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80260e0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80260e4:	1837      	adds	r7, r6, r0
 80260e6:	eb04 0c08 	add.w	ip, r4, r8
 80260ea:	2b00      	cmp	r3, #0
 80260ec:	d060      	beq.n	80261b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 80260ee:	787e      	ldrb	r6, [r7, #1]
 80260f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80260f4:	4426      	add	r6, r4
 80260f6:	2900      	cmp	r1, #0
 80260f8:	d062      	beq.n	80261c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 80260fa:	18b8      	adds	r0, r7, r2
 80260fc:	7840      	ldrb	r0, [r0, #1]
 80260fe:	5cba      	ldrb	r2, [r7, r2]
 8026100:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026104:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026108:	4422      	add	r2, r4
 802610a:	4420      	add	r0, r4
 802610c:	b29b      	uxth	r3, r3
 802610e:	b289      	uxth	r1, r1
 8026110:	fb03 f901 	mul.w	r9, r3, r1
 8026114:	011b      	lsls	r3, r3, #4
 8026116:	78b7      	ldrb	r7, [r6, #2]
 8026118:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 802611c:	eba3 0309 	sub.w	r3, r3, r9
 8026120:	b29b      	uxth	r3, r3
 8026122:	435f      	muls	r7, r3
 8026124:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8026128:	b289      	uxth	r1, r1
 802612a:	f89c a002 	ldrb.w	sl, [ip, #2]
 802612e:	ebae 0e01 	sub.w	lr, lr, r1
 8026132:	fa1f fe8e 	uxth.w	lr, lr
 8026136:	fb0e 770a 	mla	r7, lr, sl, r7
 802613a:	f892 a002 	ldrb.w	sl, [r2, #2]
 802613e:	f89c c001 	ldrb.w	ip, [ip, #1]
 8026142:	fb01 770a 	mla	r7, r1, sl, r7
 8026146:	f890 a002 	ldrb.w	sl, [r0, #2]
 802614a:	fb09 7a0a 	mla	sl, r9, sl, r7
 802614e:	f814 7008 	ldrb.w	r7, [r4, r8]
 8026152:	f896 8000 	ldrb.w	r8, [r6]
 8026156:	7876      	ldrb	r6, [r6, #1]
 8026158:	fb03 f808 	mul.w	r8, r3, r8
 802615c:	fb0e 8807 	mla	r8, lr, r7, r8
 8026160:	7817      	ldrb	r7, [r2, #0]
 8026162:	4373      	muls	r3, r6
 8026164:	fb01 8807 	mla	r8, r1, r7, r8
 8026168:	7807      	ldrb	r7, [r0, #0]
 802616a:	fb0e 330c 	mla	r3, lr, ip, r3
 802616e:	fb09 8707 	mla	r7, r9, r7, r8
 8026172:	7856      	ldrb	r6, [r2, #1]
 8026174:	f40a 4a78 	and.w	sl, sl, #63488	@ 0xf800
 8026178:	fb01 3306 	mla	r3, r1, r6, r3
 802617c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8026180:	ea47 070a 	orr.w	r7, r7, sl
 8026184:	f890 a001 	ldrb.w	sl, [r0, #1]
 8026188:	fb09 3a0a 	mla	sl, r9, sl, r3
 802618c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8026190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8026192:	f40a 6afc 	and.w	sl, sl, #2016	@ 0x7e0
 8026196:	ea47 070a 	orr.w	r7, r7, sl
 802619a:	f823 7b02 	strh.w	r7, [r3], #2
 802619e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80261a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80261a2:	449b      	add	fp, r3
 80261a4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80261a6:	441d      	add	r5, r3
 80261a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80261aa:	3b01      	subs	r3, #1
 80261ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80261ae:	e714      	b.n	8025fda <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 80261b0:	b149      	cbz	r1, 80261c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80261b2:	4660      	mov	r0, ip
 80261b4:	5cba      	ldrb	r2, [r7, r2]
 80261b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80261ba:	4422      	add	r2, r4
 80261bc:	4666      	mov	r6, ip
 80261be:	e7a5      	b.n	802610c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80261c0:	4660      	mov	r0, ip
 80261c2:	4662      	mov	r2, ip
 80261c4:	e7a2      	b.n	802610c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80261c6:	4660      	mov	r0, ip
 80261c8:	4662      	mov	r2, ip
 80261ca:	e7f7      	b.n	80261bc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 80261cc:	b00f      	add	sp, #60	@ 0x3c
 80261ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080261d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 80261d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261d6:	b085      	sub	sp, #20
 80261d8:	f9bd c038 	ldrsh.w	ip, [sp, #56]	@ 0x38
 80261dc:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	@ 0x40
 80261e0:	9102      	str	r1, [sp, #8]
 80261e2:	fb04 710c 	mla	r1, r4, ip, r7
 80261e6:	2c00      	cmp	r4, #0
 80261e8:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 80261ec:	f89d 6048 	ldrb.w	r6, [sp, #72]	@ 0x48
 80261f0:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80261f4:	eb02 0e01 	add.w	lr, r2, r1
 80261f8:	f2c0 8122 	blt.w	8026440 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 80261fc:	45a0      	cmp	r8, r4
 80261fe:	f340 811f 	ble.w	8026440 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 8026202:	2f00      	cmp	r7, #0
 8026204:	f2c0 811a 	blt.w	802643c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 8026208:	45bc      	cmp	ip, r7
 802620a:	f340 8117 	ble.w	802643c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 802620e:	5c52      	ldrb	r2, [r2, r1]
 8026210:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8026214:	1c7a      	adds	r2, r7, #1
 8026216:	f100 8116 	bmi.w	8026446 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 802621a:	4594      	cmp	ip, r2
 802621c:	f340 8113 	ble.w	8026446 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 8026220:	2e00      	cmp	r6, #0
 8026222:	f000 8112 	beq.w	802644a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 8026226:	f89e 2001 	ldrb.w	r2, [lr, #1]
 802622a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802622e:	3401      	adds	r4, #1
 8026230:	f100 810f 	bmi.w	8026452 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 8026234:	45a0      	cmp	r8, r4
 8026236:	f340 810c 	ble.w	8026452 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 802623a:	2800      	cmp	r0, #0
 802623c:	f000 810c 	beq.w	8026458 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 8026240:	2f00      	cmp	r7, #0
 8026242:	f2c0 8104 	blt.w	802644e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 8026246:	45bc      	cmp	ip, r7
 8026248:	f340 8101 	ble.w	802644e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 802624c:	f81e 200c 	ldrb.w	r2, [lr, ip]
 8026250:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8026254:	3701      	adds	r7, #1
 8026256:	f100 8102 	bmi.w	802645e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 802625a:	45bc      	cmp	ip, r7
 802625c:	f340 80ff 	ble.w	802645e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 8026260:	2e00      	cmp	r6, #0
 8026262:	f000 80fe 	beq.w	8026462 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 8026266:	44f4      	add	ip, lr
 8026268:	f89c 2001 	ldrb.w	r2, [ip, #1]
 802626c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8026270:	b2b6      	uxth	r6, r6
 8026272:	b280      	uxth	r0, r0
 8026274:	fb00 fe06 	mul.w	lr, r0, r6
 8026278:	0136      	lsls	r6, r6, #4
 802627a:	eba6 070e 	sub.w	r7, r6, lr
 802627e:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8026282:	b2bf      	uxth	r7, r7
 8026284:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8026288:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802628c:	fb0a f607 	mul.w	r6, sl, r7
 8026290:	b280      	uxth	r0, r0
 8026292:	1a1b      	subs	r3, r3, r0
 8026294:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026298:	b29b      	uxth	r3, r3
 802629a:	fb0b 6603 	mla	r6, fp, r3, r6
 802629e:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80262a2:	fb00 6609 	mla	r6, r0, r9, r6
 80262a6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80262aa:	fb0e 6608 	mla	r6, lr, r8, r6
 80262ae:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80262b2:	9600      	str	r6, [sp, #0]
 80262b4:	2e00      	cmp	r6, #0
 80262b6:	f000 80be 	beq.w	8026436 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 80262ba:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80262be:	fb0b fc0c 	mul.w	ip, fp, ip
 80262c2:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 80262c6:	fb0b f505 	mul.w	r5, fp, r5
 80262ca:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80262ce:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80262d2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80262d6:	44dc      	add	ip, fp
 80262d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80262dc:	9501      	str	r5, [sp, #4]
 80262de:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 80262e2:	9503      	str	r5, [sp, #12]
 80262e4:	9d01      	ldr	r5, [sp, #4]
 80262e6:	9e02      	ldr	r6, [sp, #8]
 80262e8:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 80262ec:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80262f0:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 80262f4:	fb0a fc0c 	mul.w	ip, sl, ip
 80262f8:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80262fc:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026300:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026304:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026308:	4465      	add	r5, ip
 802630a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802630e:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 8026312:	fb09 fc0c 	mul.w	ip, r9, ip
 8026316:	fb09 f904 	mul.w	r9, r9, r4
 802631a:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802631e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8026322:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8026326:	fb08 f404 	mul.w	r4, r8, r4
 802632a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802632e:	fb08 f802 	mul.w	r8, r8, r2
 8026332:	0a2d      	lsrs	r5, r5, #8
 8026334:	0a22      	lsrs	r2, r4, #8
 8026336:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802633a:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802633e:	437d      	muls	r5, r7
 8026340:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8026344:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026348:	4414      	add	r4, r2
 802634a:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802634e:	fb0a fa01 	mul.w	sl, sl, r1
 8026352:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8026356:	9a03      	ldr	r2, [sp, #12]
 8026358:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802635c:	fb02 5503 	mla	r5, r2, r3, r5
 8026360:	0a24      	lsrs	r4, r4, #8
 8026362:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8026366:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802636a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802636e:	fb04 540e 	mla	r4, r4, lr, r5
 8026372:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026376:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802637a:	4461      	add	r1, ip
 802637c:	0a09      	lsrs	r1, r1, #8
 802637e:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 8026382:	fb01 4100 	mla	r1, r1, r0, r4
 8026386:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802638a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802638e:	fb07 f70a 	mul.w	r7, r7, sl
 8026392:	0a09      	lsrs	r1, r1, #8
 8026394:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 8026398:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802639c:	fb03 7101 	mla	r1, r3, r1, r7
 80263a0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80263a4:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80263a8:	fb0e 1e08 	mla	lr, lr, r8, r1
 80263ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80263b0:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 80263b4:	fb00 e101 	mla	r1, r0, r1, lr
 80263b8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 80263bc:	9a00      	ldr	r2, [sp, #0]
 80263be:	b287      	uxth	r7, r0
 80263c0:	437a      	muls	r2, r7
 80263c2:	1c53      	adds	r3, r2, #1
 80263c4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80263c8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80263cc:	0a09      	lsrs	r1, r1, #8
 80263ce:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 80263d2:	4321      	orrs	r1, r4
 80263d4:	0c0a      	lsrs	r2, r1, #16
 80263d6:	8836      	ldrh	r6, [r6, #0]
 80263d8:	fb12 f207 	smulbb	r2, r2, r7
 80263dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80263e0:	b2c8      	uxtb	r0, r1
 80263e2:	1235      	asrs	r5, r6, #8
 80263e4:	fb14 f407 	smulbb	r4, r4, r7
 80263e8:	fb10 f007 	smulbb	r0, r0, r7
 80263ec:	b2db      	uxtb	r3, r3
 80263ee:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80263f2:	fb05 2503 	mla	r5, r5, r3, r2
 80263f6:	10f2      	asrs	r2, r6, #3
 80263f8:	00f6      	lsls	r6, r6, #3
 80263fa:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80263fe:	b2f6      	uxtb	r6, r6
 8026400:	fb02 4203 	mla	r2, r2, r3, r4
 8026404:	fb06 0303 	mla	r3, r6, r3, r0
 8026408:	b2ad      	uxth	r5, r5
 802640a:	b299      	uxth	r1, r3
 802640c:	b294      	uxth	r4, r2
 802640e:	1c6b      	adds	r3, r5, #1
 8026410:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8026414:	1c62      	adds	r2, r4, #1
 8026416:	1c4b      	adds	r3, r1, #1
 8026418:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802641c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8026420:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8026424:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8026428:	0952      	lsrs	r2, r2, #5
 802642a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802642e:	432b      	orrs	r3, r5
 8026430:	4313      	orrs	r3, r2
 8026432:	9a02      	ldr	r2, [sp, #8]
 8026434:	8013      	strh	r3, [r2, #0]
 8026436:	b005      	add	sp, #20
 8026438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802643c:	2500      	movs	r5, #0
 802643e:	e6e9      	b.n	8026214 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 8026440:	2100      	movs	r1, #0
 8026442:	460d      	mov	r5, r1
 8026444:	e6f3      	b.n	802622e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 8026446:	2100      	movs	r1, #0
 8026448:	e6f1      	b.n	802622e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802644a:	4631      	mov	r1, r6
 802644c:	e6ef      	b.n	802622e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 802644e:	2400      	movs	r4, #0
 8026450:	e700      	b.n	8026254 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 8026452:	2200      	movs	r2, #0
 8026454:	4614      	mov	r4, r2
 8026456:	e70b      	b.n	8026270 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8026458:	4602      	mov	r2, r0
 802645a:	4604      	mov	r4, r0
 802645c:	e708      	b.n	8026270 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 802645e:	2200      	movs	r2, #0
 8026460:	e706      	b.n	8026270 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 8026462:	4632      	mov	r2, r6
 8026464:	e704      	b.n	8026270 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

08026466 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026466:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802646a:	b09f      	sub	sp, #124	@ 0x7c
 802646c:	921b      	str	r2, [sp, #108]	@ 0x6c
 802646e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8026470:	901d      	str	r0, [sp, #116]	@ 0x74
 8026472:	9309      	str	r3, [sp, #36]	@ 0x24
 8026474:	6850      	ldr	r0, [r2, #4]
 8026476:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 802647a:	9119      	str	r1, [sp, #100]	@ 0x64
 802647c:	931c      	str	r3, [sp, #112]	@ 0x70
 802647e:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 8026482:	fb00 1303 	mla	r3, r0, r3, r1
 8026486:	6812      	ldr	r2, [r2, #0]
 8026488:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 802648a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802648e:	930c      	str	r3, [sp, #48]	@ 0x30
 8026490:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026492:	681b      	ldr	r3, [r3, #0]
 8026494:	9312      	str	r3, [sp, #72]	@ 0x48
 8026496:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026498:	685e      	ldr	r6, [r3, #4]
 802649a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 802649e:	3604      	adds	r6, #4
 80264a0:	930d      	str	r3, [sp, #52]	@ 0x34
 80264a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80264a4:	2b00      	cmp	r3, #0
 80264a6:	dc03      	bgt.n	80264b0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80264a8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80264aa:	2b00      	cmp	r3, #0
 80264ac:	f340 8387 	ble.w	8026bbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 80264b0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80264b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80264b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80264ba:	1e48      	subs	r0, r1, #1
 80264bc:	1e57      	subs	r7, r2, #1
 80264be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264c0:	2b00      	cmp	r3, #0
 80264c2:	f340 8194 	ble.w	80267ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 80264c6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80264c8:	142b      	asrs	r3, r5, #16
 80264ca:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80264ce:	d406      	bmi.n	80264de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80264d0:	4584      	cmp	ip, r0
 80264d2:	da04      	bge.n	80264de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80264d4:	2b00      	cmp	r3, #0
 80264d6:	db02      	blt.n	80264de <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80264d8:	42bb      	cmp	r3, r7
 80264da:	f2c0 8189 	blt.w	80267f0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 80264de:	f11c 0c01 	adds.w	ip, ip, #1
 80264e2:	f100 8177 	bmi.w	80267d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80264e6:	4561      	cmp	r1, ip
 80264e8:	f2c0 8174 	blt.w	80267d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80264ec:	3301      	adds	r3, #1
 80264ee:	f100 8171 	bmi.w	80267d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80264f2:	429a      	cmp	r2, r3
 80264f4:	f2c0 816e 	blt.w	80267d4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80264f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80264fa:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80264fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80264fe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8026500:	2b00      	cmp	r3, #0
 8026502:	f340 8193 	ble.w	802682c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8026506:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026508:	ea4f 4c25 	mov.w	ip, r5, asr #16
 802650c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026510:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026512:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026516:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 802651a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802651c:	141b      	asrs	r3, r3, #16
 802651e:	f100 81d6 	bmi.w	80268ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8026522:	f100 38ff 	add.w	r8, r0, #4294967295
 8026526:	4543      	cmp	r3, r8
 8026528:	f280 81d1 	bge.w	80268ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802652c:	f1bc 0f00 	cmp.w	ip, #0
 8026530:	f2c0 81cd 	blt.w	80268ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 8026534:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026538:	45c4      	cmp	ip, r8
 802653a:	f280 81c8 	bge.w	80268ce <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 802653e:	b200      	sxth	r0, r0
 8026540:	fb0c 3300 	mla	r3, ip, r0, r3
 8026544:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026546:	eb04 0803 	add.w	r8, r4, r3
 802654a:	5ce3      	ldrb	r3, [r4, r3]
 802654c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026550:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026554:	2a00      	cmp	r2, #0
 8026556:	f000 81af 	beq.w	80268b8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802655a:	f898 c001 	ldrb.w	ip, [r8, #1]
 802655e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026562:	940e      	str	r4, [sp, #56]	@ 0x38
 8026564:	0e24      	lsrs	r4, r4, #24
 8026566:	9415      	str	r4, [sp, #84]	@ 0x54
 8026568:	b179      	cbz	r1, 802658a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 802656a:	eb08 0c00 	add.w	ip, r8, r0
 802656e:	f818 0000 	ldrb.w	r0, [r8, r0]
 8026572:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026576:	900a      	str	r0, [sp, #40]	@ 0x28
 8026578:	0e00      	lsrs	r0, r0, #24
 802657a:	9013      	str	r0, [sp, #76]	@ 0x4c
 802657c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8026580:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8026584:	900f      	str	r0, [sp, #60]	@ 0x3c
 8026586:	0e00      	lsrs	r0, r0, #24
 8026588:	9016      	str	r0, [sp, #88]	@ 0x58
 802658a:	b292      	uxth	r2, r2
 802658c:	b289      	uxth	r1, r1
 802658e:	fb02 f901 	mul.w	r9, r2, r1
 8026592:	0112      	lsls	r2, r2, #4
 8026594:	eba2 0809 	sub.w	r8, r2, r9
 8026598:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802659a:	fa1f f888 	uxth.w	r8, r8
 802659e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80265a2:	fb08 f000 	mul.w	r0, r8, r0
 80265a6:	b289      	uxth	r1, r1
 80265a8:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 80265ac:	1a52      	subs	r2, r2, r1
 80265ae:	b292      	uxth	r2, r2
 80265b0:	fb02 000e 	mla	r0, r2, lr, r0
 80265b4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80265b6:	fb01 0004 	mla	r0, r1, r4, r0
 80265ba:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80265bc:	fb09 0004 	mla	r0, r9, r4, r0
 80265c0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80265c4:	2800      	cmp	r0, #0
 80265c6:	f000 80fa 	beq.w	80267be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80265ca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80265ce:	d01b      	beq.n	8026608 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80265d0:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80265d4:	fb0e fa0a 	mul.w	sl, lr, sl
 80265d8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80265dc:	fb0e fe03 	mul.w	lr, lr, r3
 80265e0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80265e4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80265e8:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80265ec:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80265f0:	4453      	add	r3, sl
 80265f2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80265f6:	0a1b      	lsrs	r3, r3, #8
 80265f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80265fc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026600:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026604:	ea43 030c 	orr.w	r3, r3, ip
 8026608:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802660a:	2cff      	cmp	r4, #255	@ 0xff
 802660c:	d021      	beq.n	8026652 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 802660e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8026610:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026614:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026616:	fb04 fb0b 	mul.w	fp, r4, fp
 802661a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802661c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026620:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026624:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8026626:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802662a:	fb04 fa0a 	mul.w	sl, r4, sl
 802662e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8026632:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026636:	44de      	add	lr, fp
 8026638:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802663c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026640:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026644:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026648:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802664c:	ea4e 040a 	orr.w	r4, lr, sl
 8026650:	940e      	str	r4, [sp, #56]	@ 0x38
 8026652:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026654:	2cff      	cmp	r4, #255	@ 0xff
 8026656:	d021      	beq.n	802669c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8026658:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802665a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802665e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026660:	fb04 fb0b 	mul.w	fp, r4, fp
 8026664:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8026666:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802666a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802666e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026670:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026674:	fb04 fa0a 	mul.w	sl, r4, sl
 8026678:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802667c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8026680:	44de      	add	lr, fp
 8026682:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8026686:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802668a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802668e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026692:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026696:	ea4e 040a 	orr.w	r4, lr, sl
 802669a:	940a      	str	r4, [sp, #40]	@ 0x28
 802669c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802669e:	2cff      	cmp	r4, #255	@ 0xff
 80266a0:	d021      	beq.n	80266e6 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 80266a2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80266a4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80266a8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80266aa:	fb04 fb0b 	mul.w	fp, r4, fp
 80266ae:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80266b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80266b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80266b8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 80266ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80266be:	fb04 fa0a 	mul.w	sl, r4, sl
 80266c2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80266c6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80266ca:	44de      	add	lr, fp
 80266cc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80266d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80266d4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80266d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80266dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80266e0:	ea4e 040a 	orr.w	r4, lr, sl
 80266e4:	940f      	str	r4, [sp, #60]	@ 0x3c
 80266e6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80266e8:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80266ec:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80266f0:	fb08 fc0c 	mul.w	ip, r8, ip
 80266f4:	fb02 cc0e 	mla	ip, r2, lr, ip
 80266f8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80266fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80266fe:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8026702:	fb01 cc0e 	mla	ip, r1, lr, ip
 8026706:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026708:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802670c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802670e:	fb09 cc0e 	mla	ip, r9, lr, ip
 8026712:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8026716:	fb08 f80e 	mul.w	r8, r8, lr
 802671a:	fb02 8303 	mla	r3, r2, r3, r8
 802671e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8026720:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026724:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026728:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802672a:	fb01 330a 	mla	r3, r1, sl, r3
 802672e:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 8026732:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8026734:	fb09 3901 	mla	r9, r9, r1, r3
 8026738:	4342      	muls	r2, r0
 802673a:	1c50      	adds	r0, r2, #1
 802673c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8026740:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8026744:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026748:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802674c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8026750:	ea4c 0c09 	orr.w	ip, ip, r9
 8026754:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026756:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802675a:	883b      	ldrh	r3, [r7, #0]
 802675c:	fb12 f204 	smulbb	r2, r2, r4
 8026760:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8026764:	fa5f fc8c 	uxtb.w	ip, ip
 8026768:	1219      	asrs	r1, r3, #8
 802676a:	fb1c fc04 	smulbb	ip, ip, r4
 802676e:	b2c0      	uxtb	r0, r0
 8026770:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8026774:	fb01 2100 	mla	r1, r1, r0, r2
 8026778:	10da      	asrs	r2, r3, #3
 802677a:	00db      	lsls	r3, r3, #3
 802677c:	fb1e fe04 	smulbb	lr, lr, r4
 8026780:	b2db      	uxtb	r3, r3
 8026782:	fb03 c300 	mla	r3, r3, r0, ip
 8026786:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802678a:	b289      	uxth	r1, r1
 802678c:	fb02 e200 	mla	r2, r2, r0, lr
 8026790:	fa1f fc83 	uxth.w	ip, r3
 8026794:	1c4b      	adds	r3, r1, #1
 8026796:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802679a:	f10c 0301 	add.w	r3, ip, #1
 802679e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 80267a2:	b292      	uxth	r2, r2
 80267a4:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 80267a8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80267ac:	430b      	orrs	r3, r1
 80267ae:	1c51      	adds	r1, r2, #1
 80267b0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80267b4:	0952      	lsrs	r2, r2, #5
 80267b6:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80267ba:	4313      	orrs	r3, r2
 80267bc:	803b      	strh	r3, [r7, #0]
 80267be:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80267c0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 80267c2:	3702      	adds	r7, #2
 80267c4:	441a      	add	r2, r3
 80267c6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80267c8:	9229      	str	r2, [sp, #164]	@ 0xa4
 80267ca:	441d      	add	r5, r3
 80267cc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80267ce:	3b01      	subs	r3, #1
 80267d0:	931a      	str	r3, [sp, #104]	@ 0x68
 80267d2:	e694      	b.n	80264fe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80267d4:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80267d6:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80267d8:	441c      	add	r4, r3
 80267da:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80267dc:	9429      	str	r4, [sp, #164]	@ 0xa4
 80267de:	441d      	add	r5, r3
 80267e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80267e2:	3b01      	subs	r3, #1
 80267e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80267e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80267e8:	3302      	adds	r3, #2
 80267ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80267ec:	e667      	b.n	80264be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80267ee:	d024      	beq.n	802683a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 80267f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80267f2:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80267f4:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80267f6:	3b01      	subs	r3, #1
 80267f8:	fb00 4003 	mla	r0, r0, r3, r4
 80267fc:	1400      	asrs	r0, r0, #16
 80267fe:	f53f ae7b 	bmi.w	80264f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026802:	3901      	subs	r1, #1
 8026804:	4288      	cmp	r0, r1
 8026806:	f6bf ae77 	bge.w	80264f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802680a:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 802680c:	fb01 5303 	mla	r3, r1, r3, r5
 8026810:	141b      	asrs	r3, r3, #16
 8026812:	f53f ae71 	bmi.w	80264f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8026816:	3a01      	subs	r2, #1
 8026818:	4293      	cmp	r3, r2
 802681a:	f6bf ae6d 	bge.w	80264f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802681e:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8026822:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 8026826:	f1bb 0f00 	cmp.w	fp, #0
 802682a:	dc70      	bgt.n	802690e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 802682c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802682e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026832:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8026834:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8026838:	930c      	str	r3, [sp, #48]	@ 0x30
 802683a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802683c:	2b00      	cmp	r3, #0
 802683e:	f340 81be 	ble.w	8026bbe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 8026842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026846:	ee30 0a04 	vadd.f32	s0, s0, s8
 802684a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802684e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026852:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026856:	eef0 6a62 	vmov.f32	s13, s5
 802685a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802685e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026862:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026866:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802686a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802686e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 8026872:	eef0 6a43 	vmov.f32	s13, s6
 8026876:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802687a:	ee12 2a90 	vmov	r2, s5
 802687e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026882:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026884:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026888:	fb92 f3f3 	sdiv	r3, r2, r3
 802688c:	ee13 2a10 	vmov	r2, s6
 8026890:	932b      	str	r3, [sp, #172]	@ 0xac
 8026892:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8026894:	ee16 5a90 	vmov	r5, s13
 8026898:	fb92 f3f3 	sdiv	r3, r2, r3
 802689c:	932c      	str	r3, [sp, #176]	@ 0xb0
 802689e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80268a0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80268a2:	3b01      	subs	r3, #1
 80268a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80268a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80268a8:	bf08      	it	eq
 80268aa:	4613      	moveq	r3, r2
 80268ac:	eeb0 3a67 	vmov.f32	s6, s15
 80268b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80268b2:	eef0 2a47 	vmov.f32	s5, s14
 80268b6:	e5f4      	b.n	80264a2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80268b8:	2900      	cmp	r1, #0
 80268ba:	f43f ae66 	beq.w	802658a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80268be:	f818 0000 	ldrb.w	r0, [r8, r0]
 80268c2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80268c6:	900a      	str	r0, [sp, #40]	@ 0x28
 80268c8:	0e00      	lsrs	r0, r0, #24
 80268ca:	9013      	str	r0, [sp, #76]	@ 0x4c
 80268cc:	e65d      	b.n	802658a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80268ce:	f113 0801 	adds.w	r8, r3, #1
 80268d2:	f53f af74 	bmi.w	80267be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80268d6:	4540      	cmp	r0, r8
 80268d8:	f6ff af71 	blt.w	80267be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80268dc:	f11c 0801 	adds.w	r8, ip, #1
 80268e0:	f53f af6d 	bmi.w	80267be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80268e4:	45c6      	cmp	lr, r8
 80268e6:	f6ff af6a 	blt.w	80267be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80268ea:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80268ec:	9302      	str	r3, [sp, #8]
 80268ee:	b200      	sxth	r0, r0
 80268f0:	fa0f f38e 	sxth.w	r3, lr
 80268f4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80268f8:	e9cd c203 	strd	ip, r2, [sp, #12]
 80268fc:	9301      	str	r3, [sp, #4]
 80268fe:	9000      	str	r0, [sp, #0]
 8026900:	4633      	mov	r3, r6
 8026902:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8026904:	4639      	mov	r1, r7
 8026906:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8026908:	f7ff fc63 	bl	80261d2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 802690c:	e757      	b.n	80267be <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 802690e:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8026910:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8026912:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026916:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8026918:	1427      	asrs	r7, r4, #16
 802691a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802691e:	142b      	asrs	r3, r5, #16
 8026920:	fb01 7303 	mla	r3, r1, r3, r7
 8026924:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026926:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802692a:	18e7      	adds	r7, r4, r3
 802692c:	5ce3      	ldrb	r3, [r4, r3]
 802692e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026932:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8026936:	2a00      	cmp	r2, #0
 8026938:	f000 8137 	beq.w	8026baa <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 802693c:	f897 e001 	ldrb.w	lr, [r7, #1]
 8026940:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 8026944:	9410      	str	r4, [sp, #64]	@ 0x40
 8026946:	0e24      	lsrs	r4, r4, #24
 8026948:	9417      	str	r4, [sp, #92]	@ 0x5c
 802694a:	b170      	cbz	r0, 802696a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 802694c:	eb07 0e01 	add.w	lr, r7, r1
 8026950:	5c79      	ldrb	r1, [r7, r1]
 8026952:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026956:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026958:	0e09      	lsrs	r1, r1, #24
 802695a:	9114      	str	r1, [sp, #80]	@ 0x50
 802695c:	f89e 1001 	ldrb.w	r1, [lr, #1]
 8026960:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026964:	9111      	str	r1, [sp, #68]	@ 0x44
 8026966:	0e09      	lsrs	r1, r1, #24
 8026968:	9118      	str	r1, [sp, #96]	@ 0x60
 802696a:	b292      	uxth	r2, r2
 802696c:	b280      	uxth	r0, r0
 802696e:	fb02 f800 	mul.w	r8, r2, r0
 8026972:	0112      	lsls	r2, r2, #4
 8026974:	eba2 0e08 	sub.w	lr, r2, r8
 8026978:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 802697a:	fa1f fe8e 	uxth.w	lr, lr
 802697e:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8026982:	fb0e f101 	mul.w	r1, lr, r1
 8026986:	b280      	uxth	r0, r0
 8026988:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802698c:	1a12      	subs	r2, r2, r0
 802698e:	b292      	uxth	r2, r2
 8026990:	fb02 110c 	mla	r1, r2, ip, r1
 8026994:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026996:	fb00 1104 	mla	r1, r0, r4, r1
 802699a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 802699c:	fb08 1104 	mla	r1, r8, r4, r1
 80269a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80269a4:	2900      	cmp	r1, #0
 80269a6:	f000 80f5 	beq.w	8026b94 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80269aa:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80269ae:	d019      	beq.n	80269e4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 80269b0:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80269b4:	fb0c fa0a 	mul.w	sl, ip, sl
 80269b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80269bc:	fb0c fc03 	mul.w	ip, ip, r3
 80269c0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80269c4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80269c8:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80269cc:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80269d0:	4453      	add	r3, sl
 80269d2:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80269d6:	0a1b      	lsrs	r3, r3, #8
 80269d8:	0a3f      	lsrs	r7, r7, #8
 80269da:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80269de:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80269e2:	433b      	orrs	r3, r7
 80269e4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80269e6:	2cff      	cmp	r4, #255	@ 0xff
 80269e8:	d020      	beq.n	8026a2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 80269ea:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80269ec:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80269f0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80269f2:	4367      	muls	r7, r4
 80269f4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80269f6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80269fa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80269fe:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 8026a00:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026a04:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a08:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a0c:	44bc      	add	ip, r7
 8026a0e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026a12:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a16:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a1a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a1e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a22:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026a26:	ea4c 040a 	orr.w	r4, ip, sl
 8026a2a:	9410      	str	r4, [sp, #64]	@ 0x40
 8026a2c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026a2e:	2cff      	cmp	r4, #255	@ 0xff
 8026a30:	d020      	beq.n	8026a74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 8026a32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026a34:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026a38:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026a3a:	4367      	muls	r7, r4
 8026a3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026a3e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a42:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026a46:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8026a48:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026a4c:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a50:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a54:	44bc      	add	ip, r7
 8026a56:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026a5a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026a5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026a62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026a66:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a6a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026a6e:	ea4c 040a 	orr.w	r4, ip, sl
 8026a72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026a74:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8026a76:	2cff      	cmp	r4, #255	@ 0xff
 8026a78:	d020      	beq.n	8026abc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 8026a7a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026a7c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026a80:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8026a82:	4367      	muls	r7, r4
 8026a84:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026a86:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026a8a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026a8e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8026a90:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026a94:	fb04 fa0a 	mul.w	sl, r4, sl
 8026a98:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026a9c:	44bc      	add	ip, r7
 8026a9e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8026aa2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8026aa6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026aaa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026aae:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026ab2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8026ab6:	ea4c 040a 	orr.w	r4, ip, sl
 8026aba:	9411      	str	r4, [sp, #68]	@ 0x44
 8026abc:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026abe:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8026ac2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8026ac6:	fb0e f707 	mul.w	r7, lr, r7
 8026aca:	fb02 770c 	mla	r7, r2, ip, r7
 8026ace:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026ad0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026ad4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026ad8:	fb00 770c 	mla	r7, r0, ip, r7
 8026adc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8026ade:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8026ae2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026ae4:	fb08 770c 	mla	r7, r8, ip, r7
 8026ae8:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8026aec:	fb0e fe0c 	mul.w	lr, lr, ip
 8026af0:	fb02 e303 	mla	r3, r2, r3, lr
 8026af4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8026af6:	0a3f      	lsrs	r7, r7, #8
 8026af8:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8026afc:	fb00 330a 	mla	r3, r0, sl, r3
 8026b00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8026b02:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8026b06:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8026b0a:	fb08 3c0c 	mla	ip, r8, ip, r3
 8026b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8026b10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026b14:	434b      	muls	r3, r1
 8026b16:	1c59      	adds	r1, r3, #1
 8026b18:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8026b1c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8026b20:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026b24:	ea47 070c 	orr.w	r7, r7, ip
 8026b28:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8026b2a:	0c3b      	lsrs	r3, r7, #16
 8026b2c:	f8b9 0000 	ldrh.w	r0, [r9]
 8026b30:	fb13 f304 	smulbb	r3, r3, r4
 8026b34:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8026b38:	b2ff      	uxtb	r7, r7
 8026b3a:	1202      	asrs	r2, r0, #8
 8026b3c:	fb17 f704 	smulbb	r7, r7, r4
 8026b40:	b2c9      	uxtb	r1, r1
 8026b42:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8026b46:	fb02 3201 	mla	r2, r2, r1, r3
 8026b4a:	10c3      	asrs	r3, r0, #3
 8026b4c:	00c0      	lsls	r0, r0, #3
 8026b4e:	fb1c fc04 	smulbb	ip, ip, r4
 8026b52:	b2c0      	uxtb	r0, r0
 8026b54:	fb00 7001 	mla	r0, r0, r1, r7
 8026b58:	b292      	uxth	r2, r2
 8026b5a:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8026b5e:	fb03 c301 	mla	r3, r3, r1, ip
 8026b62:	f102 0c01 	add.w	ip, r2, #1
 8026b66:	b280      	uxth	r0, r0
 8026b68:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8026b6c:	f402 4c78 	and.w	ip, r2, #63488	@ 0xf800
 8026b70:	1c42      	adds	r2, r0, #1
 8026b72:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8026b76:	b29b      	uxth	r3, r3
 8026b78:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8026b7c:	ea42 020c 	orr.w	r2, r2, ip
 8026b80:	f103 0c01 	add.w	ip, r3, #1
 8026b84:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8026b88:	095b      	lsrs	r3, r3, #5
 8026b8a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026b8e:	431a      	orrs	r2, r3
 8026b90:	f8a9 2000 	strh.w	r2, [r9]
 8026b94:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8026b96:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8026b98:	f109 0902 	add.w	r9, r9, #2
 8026b9c:	441a      	add	r2, r3
 8026b9e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026ba0:	9229      	str	r2, [sp, #164]	@ 0xa4
 8026ba2:	441d      	add	r5, r3
 8026ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026ba8:	e63d      	b.n	8026826 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8026baa:	2800      	cmp	r0, #0
 8026bac:	f43f aedd 	beq.w	802696a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026bb0:	5c79      	ldrb	r1, [r7, r1]
 8026bb2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026bb6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8026bb8:	0e09      	lsrs	r1, r1, #24
 8026bba:	9114      	str	r1, [sp, #80]	@ 0x50
 8026bbc:	e6d5      	b.n	802696a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 8026bbe:	b01f      	add	sp, #124	@ 0x7c
 8026bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026bc4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 8026bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bc8:	b089      	sub	sp, #36	@ 0x24
 8026bca:	9101      	str	r1, [sp, #4]
 8026bcc:	9801      	ldr	r0, [sp, #4]
 8026bce:	f9bd c048 	ldrsh.w	ip, [sp, #72]	@ 0x48
 8026bd2:	8800      	ldrh	r0, [r0, #0]
 8026bd4:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	@ 0x50
 8026bd8:	1206      	asrs	r6, r0, #8
 8026bda:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8026bde:	9602      	str	r6, [sp, #8]
 8026be0:	10c6      	asrs	r6, r0, #3
 8026be2:	00c0      	lsls	r0, r0, #3
 8026be4:	b2c0      	uxtb	r0, r0
 8026be6:	9004      	str	r0, [sp, #16]
 8026be8:	fb07 100c 	mla	r0, r7, ip, r1
 8026bec:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8026bf0:	2f00      	cmp	r7, #0
 8026bf2:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	@ 0x4c
 8026bf6:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 8026bfa:	f89d 405c 	ldrb.w	r4, [sp, #92]	@ 0x5c
 8026bfe:	9603      	str	r6, [sp, #12]
 8026c00:	eb02 0e00 	add.w	lr, r2, r0
 8026c04:	f2c0 810a 	blt.w	8026e1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8026c08:	45b8      	cmp	r8, r7
 8026c0a:	f340 8107 	ble.w	8026e1c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 8026c0e:	2900      	cmp	r1, #0
 8026c10:	f2c0 8102 	blt.w	8026e18 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8026c14:	458c      	cmp	ip, r1
 8026c16:	f340 80ff 	ble.w	8026e18 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 8026c1a:	5c12      	ldrb	r2, [r2, r0]
 8026c1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8026c20:	1c4a      	adds	r2, r1, #1
 8026c22:	f100 80fe 	bmi.w	8026e22 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8026c26:	4594      	cmp	ip, r2
 8026c28:	f340 80fb 	ble.w	8026e22 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 8026c2c:	2d00      	cmp	r5, #0
 8026c2e:	f000 80fa 	beq.w	8026e26 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 8026c32:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8026c36:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8026c3a:	3701      	adds	r7, #1
 8026c3c:	f100 80f7 	bmi.w	8026e2e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026c40:	45b8      	cmp	r8, r7
 8026c42:	f340 80f4 	ble.w	8026e2e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 8026c46:	2c00      	cmp	r4, #0
 8026c48:	f000 80f4 	beq.w	8026e34 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 8026c4c:	2900      	cmp	r1, #0
 8026c4e:	eb0e 020c 	add.w	r2, lr, ip
 8026c52:	f2c0 80ea 	blt.w	8026e2a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026c56:	458c      	cmp	ip, r1
 8026c58:	f340 80e7 	ble.w	8026e2a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 8026c5c:	f81e 700c 	ldrb.w	r7, [lr, ip]
 8026c60:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8026c64:	3101      	adds	r1, #1
 8026c66:	f100 80e8 	bmi.w	8026e3a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026c6a:	458c      	cmp	ip, r1
 8026c6c:	f340 80e5 	ble.w	8026e3a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 8026c70:	2d00      	cmp	r5, #0
 8026c72:	f000 80e4 	beq.w	8026e3e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 8026c76:	7852      	ldrb	r2, [r2, #1]
 8026c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026c7c:	0e0b      	lsrs	r3, r1, #24
 8026c7e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8026c82:	9300      	str	r3, [sp, #0]
 8026c84:	b2a4      	uxth	r4, r4
 8026c86:	b2ab      	uxth	r3, r5
 8026c88:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8026c8c:	fb03 f904 	mul.w	r9, r3, r4
 8026c90:	fb0a f505 	mul.w	r5, sl, r5
 8026c94:	011b      	lsls	r3, r3, #4
 8026c96:	eba3 0e09 	sub.w	lr, r3, r9
 8026c9a:	f5c3 7280 	rsb	r2, r3, #256	@ 0x100
 8026c9e:	f400 437f 	and.w	r3, r0, #65280	@ 0xff00
 8026ca2:	0a28      	lsrs	r0, r5, #8
 8026ca4:	fb0a f303 	mul.w	r3, sl, r3
 8026ca8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026cac:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8026cb0:	4405      	add	r5, r0
 8026cb2:	0a2d      	lsrs	r5, r5, #8
 8026cb4:	f005 10ff 	and.w	r0, r5, #16711935	@ 0xff00ff
 8026cb8:	9005      	str	r0, [sp, #20]
 8026cba:	f503 7080 	add.w	r0, r3, #256	@ 0x100
 8026cbe:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8026cc2:	0a1b      	lsrs	r3, r3, #8
 8026cc4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8026cc8:	9306      	str	r3, [sp, #24]
 8026cca:	f006 13ff 	and.w	r3, r6, #16711935	@ 0xff00ff
 8026cce:	fb0b f303 	mul.w	r3, fp, r3
 8026cd2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026cd6:	ea4f 6817 	mov.w	r8, r7, lsr #24
 8026cda:	fb0b f606 	mul.w	r6, fp, r6
 8026cde:	f007 1cff 	and.w	ip, r7, #16711935	@ 0xff00ff
 8026ce2:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8026ce6:	fb08 f707 	mul.w	r7, r8, r7
 8026cea:	0a1d      	lsrs	r5, r3, #8
 8026cec:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026cf0:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8026cf4:	441d      	add	r5, r3
 8026cf6:	f506 7380 	add.w	r3, r6, #256	@ 0x100
 8026cfa:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8026cfe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8026d02:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 8026d06:	fb08 fc0c 	mul.w	ip, r8, ip
 8026d0a:	0a1b      	lsrs	r3, r3, #8
 8026d0c:	9307      	str	r3, [sp, #28]
 8026d0e:	f001 17ff 	and.w	r7, r1, #16711935	@ 0xff00ff
 8026d12:	0e0b      	lsrs	r3, r1, #24
 8026d14:	0a2d      	lsrs	r5, r5, #8
 8026d16:	fa1f fe8e 	uxth.w	lr, lr
 8026d1a:	435f      	muls	r7, r3
 8026d1c:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026d20:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 8026d24:	fb05 f50e 	mul.w	r5, r5, lr
 8026d28:	b2a4      	uxth	r4, r4
 8026d2a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 8026d2e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026d32:	4359      	muls	r1, r3
 8026d34:	1b12      	subs	r2, r2, r4
 8026d36:	9b05      	ldr	r3, [sp, #20]
 8026d38:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8026d3c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026d40:	b292      	uxth	r2, r2
 8026d42:	4460      	add	r0, ip
 8026d44:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8026d48:	fb03 5502 	mla	r5, r3, r2, r5
 8026d4c:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8026d50:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d54:	44bc      	add	ip, r7
 8026d56:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026d5a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8026d5e:	0a36      	lsrs	r6, r6, #8
 8026d60:	fb0c 5509 	mla	r5, ip, r9, r5
 8026d64:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8026d68:	fb0e f606 	mul.w	r6, lr, r6
 8026d6c:	9b06      	ldr	r3, [sp, #24]
 8026d6e:	0a00      	lsrs	r0, r0, #8
 8026d70:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8026d74:	fb00 5504 	mla	r5, r0, r4, r5
 8026d78:	f403 407f 	and.w	r0, r3, #65280	@ 0xff00
 8026d7c:	fb02 6000 	mla	r0, r2, r0, r6
 8026d80:	f501 7780 	add.w	r7, r1, #256	@ 0x100
 8026d84:	fb0e fe0b 	mul.w	lr, lr, fp
 8026d88:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8026d8c:	0a09      	lsrs	r1, r1, #8
 8026d8e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8026d92:	fb09 0001 	mla	r0, r9, r1, r0
 8026d96:	fb02 e20a 	mla	r2, r2, sl, lr
 8026d9a:	9b07      	ldr	r3, [sp, #28]
 8026d9c:	0a2d      	lsrs	r5, r5, #8
 8026d9e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026da2:	fb04 0003 	mla	r0, r4, r3, r0
 8026da6:	fb04 2408 	mla	r4, r4, r8, r2
 8026daa:	9b00      	ldr	r3, [sp, #0]
 8026dac:	9a04      	ldr	r2, [sp, #16]
 8026dae:	fb09 4903 	mla	r9, r9, r3, r4
 8026db2:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8026db6:	9b02      	ldr	r3, [sp, #8]
 8026db8:	fa5f f989 	uxtb.w	r9, r9
 8026dbc:	fb03 f109 	mul.w	r1, r3, r9
 8026dc0:	9b03      	ldr	r3, [sp, #12]
 8026dc2:	0a00      	lsrs	r0, r0, #8
 8026dc4:	fb03 f309 	mul.w	r3, r3, r9
 8026dc8:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8026dcc:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8026dd0:	4305      	orrs	r5, r0
 8026dd2:	fb02 f909 	mul.w	r9, r2, r9
 8026dd6:	1c58      	adds	r0, r3, #1
 8026dd8:	1c4a      	adds	r2, r1, #1
 8026dda:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8026dde:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8026de2:	0a2b      	lsrs	r3, r5, #8
 8026de4:	0c2a      	lsrs	r2, r5, #16
 8026de6:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8026dea:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 8026dee:	00db      	lsls	r3, r3, #3
 8026df0:	0212      	lsls	r2, r2, #8
 8026df2:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8026df6:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8026dfa:	4313      	orrs	r3, r2
 8026dfc:	f109 0201 	add.w	r2, r9, #1
 8026e00:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8026e04:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 8026e08:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8026e0c:	431d      	orrs	r5, r3
 8026e0e:	9b01      	ldr	r3, [sp, #4]
 8026e10:	801d      	strh	r5, [r3, #0]
 8026e12:	b009      	add	sp, #36	@ 0x24
 8026e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e18:	2000      	movs	r0, #0
 8026e1a:	e701      	b.n	8026c20 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 8026e1c:	2600      	movs	r6, #0
 8026e1e:	4630      	mov	r0, r6
 8026e20:	e70b      	b.n	8026c3a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026e22:	2600      	movs	r6, #0
 8026e24:	e709      	b.n	8026c3a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026e26:	462e      	mov	r6, r5
 8026e28:	e707      	b.n	8026c3a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 8026e2a:	2700      	movs	r7, #0
 8026e2c:	e71a      	b.n	8026c64 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 8026e2e:	2100      	movs	r1, #0
 8026e30:	460f      	mov	r7, r1
 8026e32:	e723      	b.n	8026c7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026e34:	4621      	mov	r1, r4
 8026e36:	4627      	mov	r7, r4
 8026e38:	e720      	b.n	8026c7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026e3a:	2100      	movs	r1, #0
 8026e3c:	e71e      	b.n	8026c7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 8026e3e:	4629      	mov	r1, r5
 8026e40:	e71c      	b.n	8026c7c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

08026e44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e48:	b09b      	sub	sp, #108	@ 0x6c
 8026e4a:	9218      	str	r2, [sp, #96]	@ 0x60
 8026e4c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8026e4e:	9019      	str	r0, [sp, #100]	@ 0x64
 8026e50:	6850      	ldr	r0, [r2, #4]
 8026e52:	9116      	str	r1, [sp, #88]	@ 0x58
 8026e54:	9307      	str	r3, [sp, #28]
 8026e56:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8026e5a:	fb00 1303 	mla	r3, r0, r3, r1
 8026e5e:	6812      	ldr	r2, [r2, #0]
 8026e60:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8026e62:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8026e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8026e68:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026e6a:	681b      	ldr	r3, [r3, #0]
 8026e6c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8026e6e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026e70:	685e      	ldr	r6, [r3, #4]
 8026e72:	3604      	adds	r6, #4
 8026e74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8026e76:	2b00      	cmp	r3, #0
 8026e78:	dc03      	bgt.n	8026e82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8026e7a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8026e7c:	2b00      	cmp	r3, #0
 8026e7e:	f340 8373 	ble.w	8027568 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 8026e82:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026e84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026e88:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026e8c:	1e48      	subs	r0, r1, #1
 8026e8e:	1e57      	subs	r7, r2, #1
 8026e90:	9b07      	ldr	r3, [sp, #28]
 8026e92:	2b00      	cmp	r3, #0
 8026e94:	f340 818f 	ble.w	80271b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8026e98:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8026e9a:	142b      	asrs	r3, r5, #16
 8026e9c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026ea0:	d406      	bmi.n	8026eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026ea2:	4584      	cmp	ip, r0
 8026ea4:	da04      	bge.n	8026eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026ea6:	2b00      	cmp	r3, #0
 8026ea8:	db02      	blt.n	8026eb0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8026eaa:	42bb      	cmp	r3, r7
 8026eac:	f2c0 8184 	blt.w	80271b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 8026eb0:	f11c 0c01 	adds.w	ip, ip, #1
 8026eb4:	f100 8172 	bmi.w	802719c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026eb8:	4561      	cmp	r1, ip
 8026eba:	f2c0 816f 	blt.w	802719c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026ebe:	3301      	adds	r3, #1
 8026ec0:	f100 816c 	bmi.w	802719c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026ec4:	429a      	cmp	r2, r3
 8026ec6:	f2c0 8169 	blt.w	802719c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 8026eca:	9b07      	ldr	r3, [sp, #28]
 8026ecc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8026ece:	9317      	str	r3, [sp, #92]	@ 0x5c
 8026ed0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8026ed2:	2b00      	cmp	r3, #0
 8026ed4:	f340 818e 	ble.w	80271f4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 8026ed8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026eda:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8026ede:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8026ee2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8026ee4:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8026ee8:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8026eec:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8026eee:	141b      	asrs	r3, r3, #16
 8026ef0:	f100 81d1 	bmi.w	8027296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026ef4:	f101 38ff 	add.w	r8, r1, #4294967295
 8026ef8:	4543      	cmp	r3, r8
 8026efa:	f280 81cc 	bge.w	8027296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026efe:	f1bc 0f00 	cmp.w	ip, #0
 8026f02:	f2c0 81c8 	blt.w	8027296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026f06:	f10e 38ff 	add.w	r8, lr, #4294967295
 8026f0a:	45c4      	cmp	ip, r8
 8026f0c:	f280 81c3 	bge.w	8027296 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8026f10:	b209      	sxth	r1, r1
 8026f12:	fb0c 3301 	mla	r3, ip, r1, r3
 8026f16:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8026f18:	eb04 0803 	add.w	r8, r4, r3
 8026f1c:	5ce3      	ldrb	r3, [r4, r3]
 8026f1e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8026f22:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8026f26:	2a00      	cmp	r2, #0
 8026f28:	f000 81aa 	beq.w	8027280 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 8026f2c:	f898 c001 	ldrb.w	ip, [r8, #1]
 8026f30:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8026f34:	940b      	str	r4, [sp, #44]	@ 0x2c
 8026f36:	0e24      	lsrs	r4, r4, #24
 8026f38:	9412      	str	r4, [sp, #72]	@ 0x48
 8026f3a:	b178      	cbz	r0, 8026f5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8026f3c:	eb08 0c01 	add.w	ip, r8, r1
 8026f40:	f818 1001 	ldrb.w	r1, [r8, r1]
 8026f44:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026f48:	9108      	str	r1, [sp, #32]
 8026f4a:	0e09      	lsrs	r1, r1, #24
 8026f4c:	9110      	str	r1, [sp, #64]	@ 0x40
 8026f4e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8026f52:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8026f56:	910c      	str	r1, [sp, #48]	@ 0x30
 8026f58:	0e09      	lsrs	r1, r1, #24
 8026f5a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8026f5c:	b292      	uxth	r2, r2
 8026f5e:	b280      	uxth	r0, r0
 8026f60:	fb02 f900 	mul.w	r9, r2, r0
 8026f64:	0112      	lsls	r2, r2, #4
 8026f66:	eba2 0809 	sub.w	r8, r2, r9
 8026f6a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8026f6c:	fa1f f888 	uxth.w	r8, r8
 8026f70:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8026f74:	fb08 f101 	mul.w	r1, r8, r1
 8026f78:	b280      	uxth	r0, r0
 8026f7a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8026f7e:	1a12      	subs	r2, r2, r0
 8026f80:	b292      	uxth	r2, r2
 8026f82:	fb02 110e 	mla	r1, r2, lr, r1
 8026f86:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8026f88:	fb00 1104 	mla	r1, r0, r4, r1
 8026f8c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8026f8e:	fb09 1104 	mla	r1, r9, r4, r1
 8026f92:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8026f96:	2900      	cmp	r1, #0
 8026f98:	f000 80f5 	beq.w	8027186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 8026f9c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8026fa0:	d01b      	beq.n	8026fda <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8026fa2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8026fa6:	fb0e fa0a 	mul.w	sl, lr, sl
 8026faa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8026fae:	fb0e fe03 	mul.w	lr, lr, r3
 8026fb2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8026fb6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026fba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8026fbe:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8026fc2:	4453      	add	r3, sl
 8026fc4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8026fc8:	0a1b      	lsrs	r3, r3, #8
 8026fca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026fce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8026fd2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8026fd6:	ea43 030c 	orr.w	r3, r3, ip
 8026fda:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026fdc:	2cff      	cmp	r4, #255	@ 0xff
 8026fde:	d021      	beq.n	8027024 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8026fe0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026fe2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8026fe6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026fe8:	fb04 fb0b 	mul.w	fp, r4, fp
 8026fec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8026fee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8026ff2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8026ff6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8026ff8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8026ffc:	fb04 fa0a 	mul.w	sl, r4, sl
 8027000:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027004:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027008:	44de      	add	lr, fp
 802700a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802700e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027012:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027016:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802701a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802701e:	ea4e 040a 	orr.w	r4, lr, sl
 8027022:	940b      	str	r4, [sp, #44]	@ 0x2c
 8027024:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027026:	2cff      	cmp	r4, #255	@ 0xff
 8027028:	d021      	beq.n	802706e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 802702a:	9c08      	ldr	r4, [sp, #32]
 802702c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8027030:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027032:	fb04 fb0b 	mul.w	fp, r4, fp
 8027036:	9c08      	ldr	r4, [sp, #32]
 8027038:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802703c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027040:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027042:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027046:	fb04 fa0a 	mul.w	sl, r4, sl
 802704a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802704e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8027052:	44de      	add	lr, fp
 8027054:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027058:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802705c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027060:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027064:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027068:	ea4e 040a 	orr.w	r4, lr, sl
 802706c:	9408      	str	r4, [sp, #32]
 802706e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8027070:	2cff      	cmp	r4, #255	@ 0xff
 8027072:	d021      	beq.n	80270b8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027074:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027076:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802707a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802707c:	fb04 fb0b 	mul.w	fp, r4, fp
 8027080:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8027082:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027086:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802708a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802708c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8027090:	fb04 fa0a 	mul.w	sl, r4, sl
 8027094:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8027098:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802709c:	44de      	add	lr, fp
 802709e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80270a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80270a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80270aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80270ae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80270b2:	ea4e 040a 	orr.w	r4, lr, sl
 80270b6:	940c      	str	r4, [sp, #48]	@ 0x30
 80270b8:	43c9      	mvns	r1, r1
 80270ba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80270bc:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80270c0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80270c4:	fb08 fc0c 	mul.w	ip, r8, ip
 80270c8:	fb02 cc0e 	mla	ip, r2, lr, ip
 80270cc:	9c08      	ldr	r4, [sp, #32]
 80270ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80270d2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80270d6:	fb00 cc0e 	mla	ip, r0, lr, ip
 80270da:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80270dc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80270e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80270e2:	fb09 cc0e 	mla	ip, r9, lr, ip
 80270e6:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80270ea:	fb08 f80e 	mul.w	r8, r8, lr
 80270ee:	fb02 8303 	mla	r3, r2, r3, r8
 80270f2:	9a08      	ldr	r2, [sp, #32]
 80270f4:	f8b7 8000 	ldrh.w	r8, [r7]
 80270f8:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80270fc:	fb00 330a 	mla	r3, r0, sl, r3
 8027100:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8027102:	fa5f fe81 	uxtb.w	lr, r1
 8027106:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 802710a:	fb09 3900 	mla	r9, r9, r0, r3
 802710e:	ea4f 2228 	mov.w	r2, r8, asr #8
 8027112:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8027116:	fb02 f20e 	mul.w	r2, r2, lr
 802711a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802711e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027122:	ea4f 00e8 	mov.w	r0, r8, asr #3
 8027126:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802712a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802712e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027132:	ea4c 0c09 	orr.w	ip, ip, r9
 8027136:	fb00 f00e 	mul.w	r0, r0, lr
 802713a:	1c53      	adds	r3, r2, #1
 802713c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8027140:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8027144:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027148:	4a62      	ldr	r2, [pc, #392]	@ (80272d4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 802714a:	b2db      	uxtb	r3, r3
 802714c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8027150:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 8027154:	b2c9      	uxtb	r1, r1
 8027156:	1c43      	adds	r3, r0, #1
 8027158:	fb01 f10e 	mul.w	r1, r1, lr
 802715c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027160:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8027164:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8027168:	00db      	lsls	r3, r3, #3
 802716a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802716e:	4313      	orrs	r3, r2
 8027170:	1c4a      	adds	r2, r1, #1
 8027172:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027176:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 802717a:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802717e:	ea4c 0c03 	orr.w	ip, ip, r3
 8027182:	f8a7 c000 	strh.w	ip, [r7]
 8027186:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027188:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802718a:	3702      	adds	r7, #2
 802718c:	441a      	add	r2, r3
 802718e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027190:	9225      	str	r2, [sp, #148]	@ 0x94
 8027192:	441d      	add	r5, r3
 8027194:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8027196:	3b01      	subs	r3, #1
 8027198:	9317      	str	r3, [sp, #92]	@ 0x5c
 802719a:	e699      	b.n	8026ed0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802719c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802719e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80271a0:	441c      	add	r4, r3
 80271a2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80271a4:	9425      	str	r4, [sp, #148]	@ 0x94
 80271a6:	441d      	add	r5, r3
 80271a8:	9b07      	ldr	r3, [sp, #28]
 80271aa:	3b01      	subs	r3, #1
 80271ac:	9307      	str	r3, [sp, #28]
 80271ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80271b0:	3302      	adds	r3, #2
 80271b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80271b4:	e66c      	b.n	8026e90 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80271b6:	d024      	beq.n	8027202 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 80271b8:	9b07      	ldr	r3, [sp, #28]
 80271ba:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 80271bc:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80271be:	3b01      	subs	r3, #1
 80271c0:	fb00 4003 	mla	r0, r0, r3, r4
 80271c4:	1400      	asrs	r0, r0, #16
 80271c6:	f53f ae80 	bmi.w	8026eca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80271ca:	3901      	subs	r1, #1
 80271cc:	4288      	cmp	r0, r1
 80271ce:	f6bf ae7c 	bge.w	8026eca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80271d2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80271d4:	fb01 5303 	mla	r3, r1, r3, r5
 80271d8:	141b      	asrs	r3, r3, #16
 80271da:	f53f ae76 	bmi.w	8026eca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80271de:	3a01      	subs	r2, #1
 80271e0:	4293      	cmp	r3, r2
 80271e2:	f6bf ae72 	bge.w	8026eca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80271e6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80271ea:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80271ee:	f1bb 0f00 	cmp.w	fp, #0
 80271f2:	dc71      	bgt.n	80272d8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 80271f4:	9b07      	ldr	r3, [sp, #28]
 80271f6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80271fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80271fc:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027200:	930a      	str	r3, [sp, #40]	@ 0x28
 8027202:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027204:	2b00      	cmp	r3, #0
 8027206:	f340 81af 	ble.w	8027568 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 802720a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802720e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027212:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027216:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802721a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802721e:	eef0 6a62 	vmov.f32	s13, s5
 8027222:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027226:	ee77 2a62 	vsub.f32	s5, s14, s5
 802722a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802722e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027232:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027236:	edcd 6a25 	vstr	s13, [sp, #148]	@ 0x94
 802723a:	eef0 6a43 	vmov.f32	s13, s6
 802723e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027242:	ee12 2a90 	vmov	r2, s5
 8027246:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802724a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802724c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027250:	fb92 f3f3 	sdiv	r3, r2, r3
 8027254:	ee13 2a10 	vmov	r2, s6
 8027258:	9327      	str	r3, [sp, #156]	@ 0x9c
 802725a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802725c:	ee16 5a90 	vmov	r5, s13
 8027260:	fb92 f3f3 	sdiv	r3, r2, r3
 8027264:	9328      	str	r3, [sp, #160]	@ 0xa0
 8027266:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8027268:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802726a:	3b01      	subs	r3, #1
 802726c:	9316      	str	r3, [sp, #88]	@ 0x58
 802726e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027270:	bf08      	it	eq
 8027272:	4613      	moveq	r3, r2
 8027274:	eeb0 3a67 	vmov.f32	s6, s15
 8027278:	9307      	str	r3, [sp, #28]
 802727a:	eef0 2a47 	vmov.f32	s5, s14
 802727e:	e5f9      	b.n	8026e74 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8027280:	2800      	cmp	r0, #0
 8027282:	f43f ae6b 	beq.w	8026f5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8027286:	f818 1001 	ldrb.w	r1, [r8, r1]
 802728a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802728e:	9108      	str	r1, [sp, #32]
 8027290:	0e09      	lsrs	r1, r1, #24
 8027292:	9110      	str	r1, [sp, #64]	@ 0x40
 8027294:	e662      	b.n	8026f5c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8027296:	f113 0801 	adds.w	r8, r3, #1
 802729a:	f53f af74 	bmi.w	8027186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 802729e:	4541      	cmp	r1, r8
 80272a0:	f6ff af71 	blt.w	8027186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80272a4:	f11c 0801 	adds.w	r8, ip, #1
 80272a8:	f53f af6d 	bmi.w	8027186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80272ac:	45c6      	cmp	lr, r8
 80272ae:	f6ff af6a 	blt.w	8027186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80272b2:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80272b6:	b209      	sxth	r1, r1
 80272b8:	fa0f f38e 	sxth.w	r3, lr
 80272bc:	e9cd 2004 	strd	r2, r0, [sp, #16]
 80272c0:	9301      	str	r3, [sp, #4]
 80272c2:	9100      	str	r1, [sp, #0]
 80272c4:	4633      	mov	r3, r6
 80272c6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80272c8:	4639      	mov	r1, r7
 80272ca:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80272cc:	f7ff fc7a 	bl	8026bc4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 80272d0:	e759      	b.n	8027186 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 80272d2:	bf00      	nop
 80272d4:	fffff800 	.word	0xfffff800
 80272d8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80272da:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80272dc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80272e0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80272e2:	1427      	asrs	r7, r4, #16
 80272e4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80272e8:	142b      	asrs	r3, r5, #16
 80272ea:	fb01 7303 	mla	r3, r1, r3, r7
 80272ee:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80272f0:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80272f4:	18e7      	adds	r7, r4, r3
 80272f6:	5ce3      	ldrb	r3, [r4, r3]
 80272f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80272fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8027300:	2a00      	cmp	r2, #0
 8027302:	f000 8127 	beq.w	8027554 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027306:	f897 e001 	ldrb.w	lr, [r7, #1]
 802730a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 802730e:	940d      	str	r4, [sp, #52]	@ 0x34
 8027310:	0e24      	lsrs	r4, r4, #24
 8027312:	9414      	str	r4, [sp, #80]	@ 0x50
 8027314:	b170      	cbz	r0, 8027334 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8027316:	eb07 0e01 	add.w	lr, r7, r1
 802731a:	5c79      	ldrb	r1, [r7, r1]
 802731c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027320:	9109      	str	r1, [sp, #36]	@ 0x24
 8027322:	0e09      	lsrs	r1, r1, #24
 8027324:	9111      	str	r1, [sp, #68]	@ 0x44
 8027326:	f89e 1001 	ldrb.w	r1, [lr, #1]
 802732a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802732e:	910e      	str	r1, [sp, #56]	@ 0x38
 8027330:	0e09      	lsrs	r1, r1, #24
 8027332:	9115      	str	r1, [sp, #84]	@ 0x54
 8027334:	b292      	uxth	r2, r2
 8027336:	b280      	uxth	r0, r0
 8027338:	fb02 f800 	mul.w	r8, r2, r0
 802733c:	0112      	lsls	r2, r2, #4
 802733e:	eba2 0e08 	sub.w	lr, r2, r8
 8027342:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 8027346:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027348:	fa1f fe8e 	uxth.w	lr, lr
 802734c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8027350:	fb0e f202 	mul.w	r2, lr, r2
 8027354:	b280      	uxth	r0, r0
 8027356:	1a09      	subs	r1, r1, r0
 8027358:	b289      	uxth	r1, r1
 802735a:	fb01 220c 	mla	r2, r1, ip, r2
 802735e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027360:	fb00 2204 	mla	r2, r0, r4, r2
 8027364:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027366:	fb08 2204 	mla	r2, r8, r4, r2
 802736a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802736e:	2a00      	cmp	r2, #0
 8027370:	f000 80e5 	beq.w	802753e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 8027374:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8027378:	d019      	beq.n	80273ae <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 802737a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802737e:	fb0c fa0a 	mul.w	sl, ip, sl
 8027382:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8027386:	fb0c fc03 	mul.w	ip, ip, r3
 802738a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802738e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8027392:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8027396:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802739a:	4453      	add	r3, sl
 802739c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80273a0:	0a1b      	lsrs	r3, r3, #8
 80273a2:	0a3f      	lsrs	r7, r7, #8
 80273a4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80273a8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80273ac:	433b      	orrs	r3, r7
 80273ae:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80273b0:	2cff      	cmp	r4, #255	@ 0xff
 80273b2:	d020      	beq.n	80273f6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 80273b4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80273b6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80273ba:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80273bc:	4367      	muls	r7, r4
 80273be:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80273c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80273c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80273c8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80273ca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80273ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80273d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80273d6:	44bc      	add	ip, r7
 80273d8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80273dc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80273e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80273e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80273e8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80273ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80273f0:	ea4c 040a 	orr.w	r4, ip, sl
 80273f4:	940d      	str	r4, [sp, #52]	@ 0x34
 80273f6:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80273f8:	2cff      	cmp	r4, #255	@ 0xff
 80273fa:	d020      	beq.n	802743e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 80273fc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80273fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027402:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027404:	4367      	muls	r7, r4
 8027406:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8027408:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802740c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027410:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8027412:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8027416:	fb04 fa0a 	mul.w	sl, r4, sl
 802741a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802741e:	44bc      	add	ip, r7
 8027420:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8027424:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027428:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802742c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027430:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027434:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027438:	ea4c 040a 	orr.w	r4, ip, sl
 802743c:	9409      	str	r4, [sp, #36]	@ 0x24
 802743e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8027440:	2cff      	cmp	r4, #255	@ 0xff
 8027442:	d020      	beq.n	8027486 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 8027444:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027446:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802744a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802744c:	4367      	muls	r7, r4
 802744e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027450:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8027454:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8027458:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 802745a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802745e:	fb04 fa0a 	mul.w	sl, r4, sl
 8027462:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8027466:	44bc      	add	ip, r7
 8027468:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802746c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8027470:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027474:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027478:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802747c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8027480:	ea4c 040a 	orr.w	r4, ip, sl
 8027484:	940e      	str	r4, [sp, #56]	@ 0x38
 8027486:	43d2      	mvns	r2, r2
 8027488:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802748a:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802748e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8027492:	fb0e f707 	mul.w	r7, lr, r7
 8027496:	fb01 770c 	mla	r7, r1, ip, r7
 802749a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802749c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80274a0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80274a4:	fb00 770c 	mla	r7, r0, ip, r7
 80274a8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80274aa:	b2d2      	uxtb	r2, r2
 80274ac:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80274b0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80274b2:	fb08 770c 	mla	r7, r8, ip, r7
 80274b6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80274ba:	fb0e fe0c 	mul.w	lr, lr, ip
 80274be:	fb01 e303 	mla	r3, r1, r3, lr
 80274c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80274c4:	0a3f      	lsrs	r7, r7, #8
 80274c6:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 80274ca:	fb00 330a 	mla	r3, r0, sl, r3
 80274ce:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80274d0:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80274d4:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 80274d8:	fb08 3c0c 	mla	ip, r8, ip, r3
 80274dc:	f8b9 3000 	ldrh.w	r3, [r9]
 80274e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80274e4:	1218      	asrs	r0, r3, #8
 80274e6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80274ea:	4350      	muls	r0, r2
 80274ec:	10d9      	asrs	r1, r3, #3
 80274ee:	00db      	lsls	r3, r3, #3
 80274f0:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80274f4:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80274f8:	b2db      	uxtb	r3, r3
 80274fa:	ea47 070c 	orr.w	r7, r7, ip
 80274fe:	4351      	muls	r1, r2
 8027500:	4353      	muls	r3, r2
 8027502:	1c42      	adds	r2, r0, #1
 8027504:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8027508:	0c3a      	lsrs	r2, r7, #16
 802750a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802750e:	4a18      	ldr	r2, [pc, #96]	@ (8027570 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 8027510:	b2c0      	uxtb	r0, r0
 8027512:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 8027516:	1c4a      	adds	r2, r1, #1
 8027518:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 802751c:	0a3a      	lsrs	r2, r7, #8
 802751e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027522:	00c9      	lsls	r1, r1, #3
 8027524:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027528:	4301      	orrs	r1, r0
 802752a:	1c58      	adds	r0, r3, #1
 802752c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8027530:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8027534:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 8027538:	4308      	orrs	r0, r1
 802753a:	f8a9 0000 	strh.w	r0, [r9]
 802753e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8027540:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8027542:	f109 0902 	add.w	r9, r9, #2
 8027546:	441a      	add	r2, r3
 8027548:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802754a:	9225      	str	r2, [sp, #148]	@ 0x94
 802754c:	441d      	add	r5, r3
 802754e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027552:	e64c      	b.n	80271ee <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8027554:	2800      	cmp	r0, #0
 8027556:	f43f aeed 	beq.w	8027334 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 802755a:	5c79      	ldrb	r1, [r7, r1]
 802755c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8027560:	9109      	str	r1, [sp, #36]	@ 0x24
 8027562:	0e09      	lsrs	r1, r1, #24
 8027564:	9111      	str	r1, [sp, #68]	@ 0x44
 8027566:	e6e5      	b.n	8027334 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 8027568:	b01b      	add	sp, #108	@ 0x6c
 802756a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802756e:	bf00      	nop
 8027570:	fffff800 	.word	0xfffff800

08027574 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 8027574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027578:	b085      	sub	sp, #20
 802757a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802757e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8027582:	fb00 7406 	mla	r4, r0, r6, r7
 8027586:	2800      	cmp	r0, #0
 8027588:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 802758c:	9103      	str	r1, [sp, #12]
 802758e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8027592:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8027596:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802759a:	9501      	str	r5, [sp, #4]
 802759c:	eb03 0904 	add.w	r9, r3, r4
 80275a0:	f2c0 8150 	blt.w	8027844 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80275a4:	4583      	cmp	fp, r0
 80275a6:	f340 814d 	ble.w	8027844 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 80275aa:	2f00      	cmp	r7, #0
 80275ac:	f2c0 8146 	blt.w	802783c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80275b0:	42be      	cmp	r6, r7
 80275b2:	f340 8143 	ble.w	802783c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 80275b6:	f813 c004 	ldrb.w	ip, [r3, r4]
 80275ba:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80275be:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80275c2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80275c6:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 80275ca:	4355      	muls	r5, r2
 80275cc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80275d0:	fb0c f203 	mul.w	r2, ip, r3
 80275d4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80275d8:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 80275dc:	441d      	add	r5, r3
 80275de:	f102 0320 	add.w	r3, r2, #32
 80275e2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80275e6:	0a1b      	lsrs	r3, r3, #8
 80275e8:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80275ec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80275f0:	431c      	orrs	r4, r3
 80275f2:	1c7b      	adds	r3, r7, #1
 80275f4:	f100 812b 	bmi.w	802784e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80275f8:	429e      	cmp	r6, r3
 80275fa:	f340 8128 	ble.w	802784e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 80275fe:	2900      	cmp	r1, #0
 8027600:	f000 8128 	beq.w	8027854 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 8027604:	9a01      	ldr	r2, [sp, #4]
 8027606:	f899 3001 	ldrb.w	r3, [r9, #1]
 802760a:	8855      	ldrh	r5, [r2, #2]
 802760c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8027610:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8027614:	fb08 f802 	mul.w	r8, r8, r2
 8027618:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 802761c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027620:	435d      	muls	r5, r3
 8027622:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8027626:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802762a:	44d0      	add	r8, sl
 802762c:	f105 0a20 	add.w	sl, r5, #32
 8027630:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8027634:	0a2d      	lsrs	r5, r5, #8
 8027636:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802763a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802763e:	432a      	orrs	r2, r5
 8027640:	3001      	adds	r0, #1
 8027642:	f100 810d 	bmi.w	8027860 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 8027646:	4583      	cmp	fp, r0
 8027648:	f340 810a 	ble.w	8027860 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 802764c:	f1be 0f00 	cmp.w	lr, #0
 8027650:	f000 810b 	beq.w	802786a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 8027654:	2f00      	cmp	r7, #0
 8027656:	f2c0 8100 	blt.w	802785a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 802765a:	42be      	cmp	r6, r7
 802765c:	f340 80fd 	ble.w	802785a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 8027660:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8027664:	9801      	ldr	r0, [sp, #4]
 8027666:	f819 5006 	ldrb.w	r5, [r9, r6]
 802766a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802766e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8027672:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8027676:	fb0a fa00 	mul.w	sl, sl, r0
 802767a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802767e:	fb05 f808 	mul.w	r8, r5, r8
 8027682:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8027686:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802768a:	4482      	add	sl, r0
 802768c:	f108 0020 	add.w	r0, r8, #32
 8027690:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8027694:	0a00      	lsrs	r0, r0, #8
 8027696:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802769a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802769e:	ea4b 0b00 	orr.w	fp, fp, r0
 80276a2:	3701      	adds	r7, #1
 80276a4:	f100 80e6 	bmi.w	8027874 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80276a8:	42be      	cmp	r6, r7
 80276aa:	f340 80e3 	ble.w	8027874 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 80276ae:	2900      	cmp	r1, #0
 80276b0:	f000 80e3 	beq.w	802787a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 80276b4:	9801      	ldr	r0, [sp, #4]
 80276b6:	3601      	adds	r6, #1
 80276b8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80276bc:	f819 7006 	ldrb.w	r7, [r9, r6]
 80276c0:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 80276c4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80276c8:	fb07 f800 	mul.w	r8, r7, r0
 80276cc:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80276d0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80276d4:	fb09 f906 	mul.w	r9, r9, r6
 80276d8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80276dc:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80276e0:	44d1      	add	r9, sl
 80276e2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80276e6:	f108 0020 	add.w	r0, r8, #32
 80276ea:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80276ee:	0a00      	lsrs	r0, r0, #8
 80276f0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80276f4:	4330      	orrs	r0, r6
 80276f6:	b28e      	uxth	r6, r1
 80276f8:	fa1f f98e 	uxth.w	r9, lr
 80276fc:	fb06 f809 	mul.w	r8, r6, r9
 8027700:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8027704:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 8027708:	0136      	lsls	r6, r6, #4
 802770a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802770e:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8027712:	9601      	str	r6, [sp, #4]
 8027714:	ea4a 0404 	orr.w	r4, sl, r4
 8027718:	fa1f f689 	uxth.w	r6, r9
 802771c:	9602      	str	r6, [sp, #8]
 802771e:	4626      	mov	r6, r4
 8027720:	fb11 f90e 	smulbb	r9, r1, lr
 8027724:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027728:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802772c:	f1ce 0410 	rsb	r4, lr, #16
 8027730:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027734:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027738:	1a64      	subs	r4, r4, r1
 802773a:	ea4a 0202 	orr.w	r2, sl, r2
 802773e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8027742:	434a      	muls	r2, r1
 8027744:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8027748:	fb04 2406 	mla	r4, r4, r6, r2
 802774c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027750:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027754:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027758:	ea4a 0000 	orr.w	r0, sl, r0
 802775c:	fb09 4200 	mla	r2, r9, r0, r4
 8027760:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8027764:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8027768:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802776c:	ea44 0b0b 	orr.w	fp, r4, fp
 8027770:	9c01      	ldr	r4, [sp, #4]
 8027772:	9e02      	ldr	r6, [sp, #8]
 8027774:	f5c4 7480 	rsb	r4, r4, #256	@ 0x100
 8027778:	1ba4      	subs	r4, r4, r6
 802777a:	9e01      	ldr	r6, [sp, #4]
 802777c:	b2a4      	uxth	r4, r4
 802777e:	eba6 0608 	sub.w	r6, r6, r8
 8027782:	b2b6      	uxth	r6, r6
 8027784:	4373      	muls	r3, r6
 8027786:	fb0c 3304 	mla	r3, ip, r4, r3
 802778a:	9c02      	ldr	r4, [sp, #8]
 802778c:	9903      	ldr	r1, [sp, #12]
 802778e:	fb04 3505 	mla	r5, r4, r5, r3
 8027792:	fb08 5707 	mla	r7, r8, r7, r5
 8027796:	8808      	ldrh	r0, [r1, #0]
 8027798:	f89d 1050 	ldrb.w	r1, [sp, #80]	@ 0x50
 802779c:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80277a0:	b289      	uxth	r1, r1
 80277a2:	434f      	muls	r7, r1
 80277a4:	1c7b      	adds	r3, r7, #1
 80277a6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80277aa:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 80277ae:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 80277b2:	fb0e 2e0b 	mla	lr, lr, fp, r2
 80277b6:	1203      	asrs	r3, r0, #8
 80277b8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80277bc:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80277c0:	b2ff      	uxtb	r7, r7
 80277c2:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80277c6:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80277ca:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80277ce:	fb13 f307 	smulbb	r3, r3, r7
 80277d2:	ea42 0e0e 	orr.w	lr, r2, lr
 80277d6:	fa1f f28e 	uxth.w	r2, lr
 80277da:	1215      	asrs	r5, r2, #8
 80277dc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 80277e0:	fb05 3501 	mla	r5, r5, r1, r3
 80277e4:	10c3      	asrs	r3, r0, #3
 80277e6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80277ea:	fb13 f307 	smulbb	r3, r3, r7
 80277ee:	10d4      	asrs	r4, r2, #3
 80277f0:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80277f4:	fb04 3401 	mla	r4, r4, r1, r3
 80277f8:	00c3      	lsls	r3, r0, #3
 80277fa:	b2db      	uxtb	r3, r3
 80277fc:	fb13 f307 	smulbb	r3, r3, r7
 8027800:	00d2      	lsls	r2, r2, #3
 8027802:	b2d2      	uxtb	r2, r2
 8027804:	fb02 3101 	mla	r1, r2, r1, r3
 8027808:	b2ad      	uxth	r5, r5
 802780a:	b289      	uxth	r1, r1
 802780c:	b2a4      	uxth	r4, r4
 802780e:	1c6b      	adds	r3, r5, #1
 8027810:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027814:	1c62      	adds	r2, r4, #1
 8027816:	1c4b      	adds	r3, r1, #1
 8027818:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 802781c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8027820:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027824:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027828:	0964      	lsrs	r4, r4, #5
 802782a:	432b      	orrs	r3, r5
 802782c:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8027830:	9a03      	ldr	r2, [sp, #12]
 8027832:	4323      	orrs	r3, r4
 8027834:	8013      	strh	r3, [r2, #0]
 8027836:	b005      	add	sp, #20
 8027838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802783c:	f04f 0c00 	mov.w	ip, #0
 8027840:	4664      	mov	r4, ip
 8027842:	e6d6      	b.n	80275f2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 8027844:	2300      	movs	r3, #0
 8027846:	469c      	mov	ip, r3
 8027848:	461a      	mov	r2, r3
 802784a:	461c      	mov	r4, r3
 802784c:	e6f8      	b.n	8027640 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802784e:	2300      	movs	r3, #0
 8027850:	461a      	mov	r2, r3
 8027852:	e6f5      	b.n	8027640 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 8027854:	460b      	mov	r3, r1
 8027856:	460a      	mov	r2, r1
 8027858:	e6f2      	b.n	8027640 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 802785a:	2500      	movs	r5, #0
 802785c:	46ab      	mov	fp, r5
 802785e:	e720      	b.n	80276a2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 8027860:	2700      	movs	r7, #0
 8027862:	463d      	mov	r5, r7
 8027864:	4638      	mov	r0, r7
 8027866:	46bb      	mov	fp, r7
 8027868:	e745      	b.n	80276f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802786a:	4677      	mov	r7, lr
 802786c:	4675      	mov	r5, lr
 802786e:	4670      	mov	r0, lr
 8027870:	46f3      	mov	fp, lr
 8027872:	e740      	b.n	80276f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 8027874:	2700      	movs	r7, #0
 8027876:	4638      	mov	r0, r7
 8027878:	e73d      	b.n	80276f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 802787a:	460f      	mov	r7, r1
 802787c:	4608      	mov	r0, r1
 802787e:	e73a      	b.n	80276f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

08027880 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027884:	b097      	sub	sp, #92	@ 0x5c
 8027886:	9214      	str	r2, [sp, #80]	@ 0x50
 8027888:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802788a:	9015      	str	r0, [sp, #84]	@ 0x54
 802788c:	9308      	str	r3, [sp, #32]
 802788e:	6850      	ldr	r0, [r2, #4]
 8027890:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 8027894:	9111      	str	r1, [sp, #68]	@ 0x44
 8027896:	9312      	str	r3, [sp, #72]	@ 0x48
 8027898:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802789c:	fb00 1303 	mla	r3, r0, r3, r1
 80278a0:	6812      	ldr	r2, [r2, #0]
 80278a2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80278a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80278a8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80278aa:	681b      	ldr	r3, [r3, #0]
 80278ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80278ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80278b0:	685b      	ldr	r3, [r3, #4]
 80278b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80278b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80278b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80278ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80278bc:	2b00      	cmp	r3, #0
 80278be:	dc03      	bgt.n	80278c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80278c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80278c2:	2b00      	cmp	r3, #0
 80278c4:	f340 83cb 	ble.w	802805e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 80278c8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80278ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80278ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80278d2:	1e48      	subs	r0, r1, #1
 80278d4:	1e55      	subs	r5, r2, #1
 80278d6:	9b08      	ldr	r3, [sp, #32]
 80278d8:	2b00      	cmp	r3, #0
 80278da:	f340 81a3 	ble.w	8027c24 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 80278de:	9e21      	ldr	r6, [sp, #132]	@ 0x84
 80278e0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80278e2:	1436      	asrs	r6, r6, #16
 80278e4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80278e8:	d406      	bmi.n	80278f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80278ea:	4286      	cmp	r6, r0
 80278ec:	da04      	bge.n	80278f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80278ee:	2b00      	cmp	r3, #0
 80278f0:	db02      	blt.n	80278f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80278f2:	42ab      	cmp	r3, r5
 80278f4:	f2c0 8197 	blt.w	8027c26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 80278f8:	3601      	adds	r6, #1
 80278fa:	f100 8184 	bmi.w	8027c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80278fe:	42b1      	cmp	r1, r6
 8027900:	f2c0 8181 	blt.w	8027c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027904:	3301      	adds	r3, #1
 8027906:	f100 817e 	bmi.w	8027c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802790a:	429a      	cmp	r2, r3
 802790c:	f2c0 817b 	blt.w	8027c06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027910:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027914:	9b08      	ldr	r3, [sp, #32]
 8027916:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8027918:	9313      	str	r3, [sp, #76]	@ 0x4c
 802791a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802791c:	2b00      	cmp	r3, #0
 802791e:	f340 81a4 	ble.w	8027c6a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 8027922:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027924:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8027926:	1418      	asrs	r0, r3, #16
 8027928:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802792a:	142d      	asrs	r5, r5, #16
 802792c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8027930:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027932:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8027936:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027938:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 802793c:	f100 81f8 	bmi.w	8027d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027940:	f102 3eff 	add.w	lr, r2, #4294967295
 8027944:	4575      	cmp	r5, lr
 8027946:	f280 81f3 	bge.w	8027d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802794a:	2800      	cmp	r0, #0
 802794c:	f2c0 81f0 	blt.w	8027d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8027950:	f103 3eff 	add.w	lr, r3, #4294967295
 8027954:	4570      	cmp	r0, lr
 8027956:	f280 81eb 	bge.w	8027d30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802795a:	b212      	sxth	r2, r2
 802795c:	fb00 5002 	mla	r0, r0, r2, r5
 8027960:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027962:	fa1f fe81 	uxth.w	lr, r1
 8027966:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802796a:	eb03 0a00 	add.w	sl, r3, r0
 802796e:	f813 9000 	ldrb.w	r9, [r3, r0]
 8027972:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 8027976:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802797a:	b29b      	uxth	r3, r3
 802797c:	f1bc 0f00 	cmp.w	ip, #0
 8027980:	f000 81b9 	beq.w	8027cf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 8027984:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8027988:	eb0a 0b02 	add.w	fp, sl, r2
 802798c:	fa1f fa8c 	uxth.w	sl, ip
 8027990:	fb0a fe0e 	mul.w	lr, sl, lr
 8027994:	eba5 050e 	sub.w	r5, r5, lr
 8027998:	b2ad      	uxth	r5, r5
 802799a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802799e:	fb08 f505 	mul.w	r5, r8, r5
 80279a2:	fa1f fa8a 	uxth.w	sl, sl
 80279a6:	eba3 030a 	sub.w	r3, r3, sl
 80279aa:	b29b      	uxth	r3, r3
 80279ac:	940d      	str	r4, [sp, #52]	@ 0x34
 80279ae:	fb09 5303 	mla	r3, r9, r3, r5
 80279b2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80279b6:	940e      	str	r4, [sp, #56]	@ 0x38
 80279b8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80279ba:	fb0a 3304 	mla	r3, sl, r4, r3
 80279be:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80279c0:	fb0e 3304 	mla	r3, lr, r4, r3
 80279c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80279c8:	2b00      	cmp	r3, #0
 80279ca:	f000 810f 	beq.w	8027bec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80279ce:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80279d0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80279d4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80279d8:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80279dc:	f000 8190 	beq.w	8027d00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 80279e0:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80279e4:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80279e8:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80279ec:	fb09 f000 	mul.w	r0, r9, r0
 80279f0:	fb0a fe0e 	mul.w	lr, sl, lr
 80279f4:	f100 0b20 	add.w	fp, r0, #32
 80279f8:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80279fc:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027a00:	44ce      	add	lr, r9
 8027a02:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8027a06:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027a0a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027a0e:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027a12:	ea4e 0909 	orr.w	r9, lr, r9
 8027a16:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027a1a:	8868      	ldrh	r0, [r5, #2]
 8027a1c:	d019      	beq.n	8027a52 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8027a1e:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 8027a22:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027a26:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027a2a:	fb08 f800 	mul.w	r8, r8, r0
 8027a2e:	fb0a fe0e 	mul.w	lr, sl, lr
 8027a32:	f108 0b20 	add.w	fp, r8, #32
 8027a36:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8027a3a:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8027a3e:	4486      	add	lr, r0
 8027a40:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8027a44:	0a00      	lsrs	r0, r0, #8
 8027a46:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8027a4a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027a4e:	ea4e 0000 	orr.w	r0, lr, r0
 8027a52:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8027a56:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8027a5a:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8027a5e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027a62:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027a66:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027a6a:	ea4e 0909 	orr.w	r9, lr, r9
 8027a6e:	ea4a 0000 	orr.w	r0, sl, r0
 8027a72:	f1bc 0f00 	cmp.w	ip, #0
 8027a76:	f000 8145 	beq.w	8027d04 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 8027a7a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8027a7e:	3a01      	subs	r2, #1
 8027a80:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8027a82:	0052      	lsls	r2, r2, #1
 8027a84:	3202      	adds	r2, #2
 8027a86:	2cff      	cmp	r4, #255	@ 0xff
 8027a88:	eb05 0e02 	add.w	lr, r5, r2
 8027a8c:	5aaa      	ldrh	r2, [r5, r2]
 8027a8e:	d018      	beq.n	8027ac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8027a90:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 8027a94:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027a98:	fb04 fa02 	mul.w	sl, r4, r2
 8027a9c:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027aa0:	fb08 f805 	mul.w	r8, r8, r5
 8027aa4:	f10a 0520 	add.w	r5, sl, #32
 8027aa8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8027aac:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8027ab0:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027ab4:	4442      	add	r2, r8
 8027ab6:	0a2d      	lsrs	r5, r5, #8
 8027ab8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8027abc:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027ac0:	432a      	orrs	r2, r5
 8027ac2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8027ac4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8027ac8:	2cff      	cmp	r4, #255	@ 0xff
 8027aca:	d01a      	beq.n	8027b02 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8027acc:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8027ad0:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8027ad4:	fb04 fa05 	mul.w	sl, r4, r5
 8027ad8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027adc:	fb08 f80e 	mul.w	r8, r8, lr
 8027ae0:	f10a 0e20 	add.w	lr, sl, #32
 8027ae4:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8027ae8:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8027aec:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027af0:	4445      	add	r5, r8
 8027af2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027af6:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8027afa:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8027afe:	ea45 050e 	orr.w	r5, r5, lr
 8027b02:	fb1c fe01 	smulbb	lr, ip, r1
 8027b06:	f1cc 0810 	rsb	r8, ip, #16
 8027b0a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8027b0e:	eba8 0801 	sub.w	r8, r8, r1
 8027b12:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8027b16:	4341      	muls	r1, r0
 8027b18:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8027b1c:	fb09 1108 	mla	r1, r9, r8, r1
 8027b20:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8027b24:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027b28:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027b2c:	ea4a 0202 	orr.w	r2, sl, r2
 8027b30:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8027b34:	fb0c 1102 	mla	r1, ip, r2, r1
 8027b38:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8027b3c:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027b40:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8027b44:	ea4b 0505 	orr.w	r5, fp, r5
 8027b48:	fb0e 1e05 	mla	lr, lr, r5, r1
 8027b4c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8027b50:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8027b54:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027b58:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8027b5c:	ea42 0e0e 	orr.w	lr, r2, lr
 8027b60:	fa1f f28e 	uxth.w	r2, lr
 8027b64:	2bff      	cmp	r3, #255	@ 0xff
 8027b66:	d103      	bne.n	8027b70 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8027b68:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027b6a:	29ff      	cmp	r1, #255	@ 0xff
 8027b6c:	f000 80de 	beq.w	8027d2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 8027b70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8027b72:	8838      	ldrh	r0, [r7, #0]
 8027b74:	434b      	muls	r3, r1
 8027b76:	f103 0c01 	add.w	ip, r3, #1
 8027b7a:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 8027b7e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027b82:	fa5f fc83 	uxtb.w	ip, r3
 8027b86:	1203      	asrs	r3, r0, #8
 8027b88:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8027b8c:	fb13 f30c 	smulbb	r3, r3, ip
 8027b90:	1215      	asrs	r5, r2, #8
 8027b92:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027b96:	fb05 3501 	mla	r5, r5, r1, r3
 8027b9a:	10c3      	asrs	r3, r0, #3
 8027b9c:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8027ba0:	fb13 f30c 	smulbb	r3, r3, ip
 8027ba4:	10d1      	asrs	r1, r2, #3
 8027ba6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027ba8:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8027bac:	fb01 3104 	mla	r1, r1, r4, r3
 8027bb0:	00c3      	lsls	r3, r0, #3
 8027bb2:	b2db      	uxtb	r3, r3
 8027bb4:	fb13 f30c 	smulbb	r3, r3, ip
 8027bb8:	00d2      	lsls	r2, r2, #3
 8027bba:	b2d2      	uxtb	r2, r2
 8027bbc:	fb02 3304 	mla	r3, r2, r4, r3
 8027bc0:	b2ad      	uxth	r5, r5
 8027bc2:	b29a      	uxth	r2, r3
 8027bc4:	1c6b      	adds	r3, r5, #1
 8027bc6:	b289      	uxth	r1, r1
 8027bc8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027bcc:	1c53      	adds	r3, r2, #1
 8027bce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8027bd2:	1c4a      	adds	r2, r1, #1
 8027bd4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8027bd8:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027bdc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8027be0:	0949      	lsrs	r1, r1, #5
 8027be2:	432b      	orrs	r3, r5
 8027be4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027be8:	430b      	orrs	r3, r1
 8027bea:	803b      	strh	r3, [r7, #0]
 8027bec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027bee:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8027bf0:	3702      	adds	r7, #2
 8027bf2:	4413      	add	r3, r2
 8027bf4:	9321      	str	r3, [sp, #132]	@ 0x84
 8027bf6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8027bf8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027bfa:	441a      	add	r2, r3
 8027bfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027bfe:	9222      	str	r2, [sp, #136]	@ 0x88
 8027c00:	3b01      	subs	r3, #1
 8027c02:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027c04:	e689      	b.n	802791a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027c06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027c08:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8027c0a:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8027c0c:	4433      	add	r3, r6
 8027c0e:	9321      	str	r3, [sp, #132]	@ 0x84
 8027c10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8027c12:	441c      	add	r4, r3
 8027c14:	9b08      	ldr	r3, [sp, #32]
 8027c16:	9422      	str	r4, [sp, #136]	@ 0x88
 8027c18:	3b01      	subs	r3, #1
 8027c1a:	9308      	str	r3, [sp, #32]
 8027c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c1e:	3302      	adds	r3, #2
 8027c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c22:	e658      	b.n	80278d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8027c24:	d028      	beq.n	8027c78 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8027c26:	9b08      	ldr	r3, [sp, #32]
 8027c28:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8027c2a:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8027c2c:	3b01      	subs	r3, #1
 8027c2e:	fb00 5003 	mla	r0, r0, r3, r5
 8027c32:	1400      	asrs	r0, r0, #16
 8027c34:	f53f ae6c 	bmi.w	8027910 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027c38:	3901      	subs	r1, #1
 8027c3a:	4288      	cmp	r0, r1
 8027c3c:	f6bf ae68 	bge.w	8027910 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027c40:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8027c42:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8027c44:	fb01 0303 	mla	r3, r1, r3, r0
 8027c48:	141b      	asrs	r3, r3, #16
 8027c4a:	f53f ae61 	bmi.w	8027910 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027c4e:	3a01      	subs	r2, #1
 8027c50:	4293      	cmp	r3, r2
 8027c52:	f6bf ae5d 	bge.w	8027910 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8027c56:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 8027c5a:	9b08      	ldr	r3, [sp, #32]
 8027c5c:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 8027c60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8027c62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8027c64:	2b00      	cmp	r3, #0
 8027c66:	f300 8082 	bgt.w	8027d6e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 8027c6a:	9b08      	ldr	r3, [sp, #32]
 8027c6c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027c72:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8027c76:	9309      	str	r3, [sp, #36]	@ 0x24
 8027c78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027c7a:	2b00      	cmp	r3, #0
 8027c7c:	f340 81ef 	ble.w	802805e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 8027c80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8027c84:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027c88:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027c8c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027c90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027c94:	eef0 6a62 	vmov.f32	s13, s5
 8027c98:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027c9c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027ca0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027ca4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ca8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027cac:	edcd 6a21 	vstr	s13, [sp, #132]	@ 0x84
 8027cb0:	eef0 6a43 	vmov.f32	s13, s6
 8027cb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027cb8:	ee12 2a90 	vmov	r2, s5
 8027cbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027cc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027cc2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027cc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8027cca:	ee13 2a10 	vmov	r2, s6
 8027cce:	9323      	str	r3, [sp, #140]	@ 0x8c
 8027cd0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027cd2:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 8027cd6:	fb92 f3f3 	sdiv	r3, r2, r3
 8027cda:	9324      	str	r3, [sp, #144]	@ 0x90
 8027cdc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8027cde:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8027ce0:	3b01      	subs	r3, #1
 8027ce2:	9311      	str	r3, [sp, #68]	@ 0x44
 8027ce4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8027ce6:	bf08      	it	eq
 8027ce8:	4613      	moveq	r3, r2
 8027cea:	eeb0 3a67 	vmov.f32	s6, s15
 8027cee:	9308      	str	r3, [sp, #32]
 8027cf0:	eef0 2a47 	vmov.f32	s5, s14
 8027cf4:	e5e1      	b.n	80278ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8027cf6:	fb08 f505 	mul.w	r5, r8, r5
 8027cfa:	fb09 5303 	mla	r3, r9, r3, r5
 8027cfe:	e661      	b.n	80279c4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 8027d00:	4681      	mov	r9, r0
 8027d02:	e688      	b.n	8027a16 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8027d04:	f1c1 0210 	rsb	r2, r1, #16
 8027d08:	4341      	muls	r1, r0
 8027d0a:	fb09 1902 	mla	r9, r9, r2, r1
 8027d0e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8027d12:	ea4f 5259 	mov.w	r2, r9, lsr #21
 8027d16:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8027d1a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8027d1e:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027d22:	ea42 0909 	orr.w	r9, r2, r9
 8027d26:	fa1f f289 	uxth.w	r2, r9
 8027d2a:	e71b      	b.n	8027b64 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8027d2c:	803a      	strh	r2, [r7, #0]
 8027d2e:	e75d      	b.n	8027bec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d30:	f115 0e01 	adds.w	lr, r5, #1
 8027d34:	f53f af5a 	bmi.w	8027bec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d38:	4572      	cmp	r2, lr
 8027d3a:	f6ff af57 	blt.w	8027bec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d3e:	f110 0e01 	adds.w	lr, r0, #1
 8027d42:	f53f af53 	bmi.w	8027bec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d46:	4573      	cmp	r3, lr
 8027d48:	f6ff af50 	blt.w	8027bec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d4c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8027d4e:	b21b      	sxth	r3, r3
 8027d50:	b212      	sxth	r2, r2
 8027d52:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8027d56:	9301      	str	r3, [sp, #4]
 8027d58:	9200      	str	r2, [sp, #0]
 8027d5a:	e9cd c405 	strd	ip, r4, [sp, #20]
 8027d5e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8027d62:	9502      	str	r5, [sp, #8]
 8027d64:	4639      	mov	r1, r7
 8027d66:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8027d68:	f7ff fc04 	bl	8027574 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 8027d6c:	e73e      	b.n	8027bec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 8027d6e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027d70:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8027d74:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027d76:	fa1f fc82 	uxth.w	ip, r2
 8027d7a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027d7e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8027d80:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8027d84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027d88:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8027d8a:	141f      	asrs	r7, r3, #16
 8027d8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8027d8e:	141b      	asrs	r3, r3, #16
 8027d90:	fb01 3707 	mla	r7, r1, r7, r3
 8027d94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8027d96:	eb03 0a07 	add.w	sl, r3, r7
 8027d9a:	f813 9007 	ldrb.w	r9, [r3, r7]
 8027d9e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8027da2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8027da6:	b29b      	uxth	r3, r3
 8027da8:	2d00      	cmp	r5, #0
 8027daa:	f000 813d 	beq.w	8028028 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 8027dae:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8027db2:	eb0a 0b01 	add.w	fp, sl, r1
 8027db6:	fa1f fa85 	uxth.w	sl, r5
 8027dba:	fb0a fc0c 	mul.w	ip, sl, ip
 8027dbe:	eba0 000c 	sub.w	r0, r0, ip
 8027dc2:	b280      	uxth	r0, r0
 8027dc4:	fb08 f000 	mul.w	r0, r8, r0
 8027dc8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 8027dcc:	fa1f fa8a 	uxth.w	sl, sl
 8027dd0:	eba3 030a 	sub.w	r3, r3, sl
 8027dd4:	b29b      	uxth	r3, r3
 8027dd6:	fb09 0303 	mla	r3, r9, r3, r0
 8027dda:	940f      	str	r4, [sp, #60]	@ 0x3c
 8027ddc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8027dde:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8027de2:	fb0a 3300 	mla	r3, sl, r0, r3
 8027de6:	fb0c 3304 	mla	r3, ip, r4, r3
 8027dea:	9410      	str	r4, [sp, #64]	@ 0x40
 8027dec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027df0:	2b00      	cmp	r3, #0
 8027df2:	f000 810b 	beq.w	802800c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 8027df6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8027df8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8027dfa:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8027dfe:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8027e02:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 8027e06:	f000 8114 	beq.w	8028032 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 8027e0a:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027e0e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8027e12:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027e16:	fb09 f707 	mul.w	r7, r9, r7
 8027e1a:	fb0a fc0c 	mul.w	ip, sl, ip
 8027e1e:	f107 0b20 	add.w	fp, r7, #32
 8027e22:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8027e26:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027e2a:	44cc      	add	ip, r9
 8027e2c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8027e30:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027e34:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027e38:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8027e3c:	ea4c 0909 	orr.w	r9, ip, r9
 8027e40:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8027e44:	8847      	ldrh	r7, [r0, #2]
 8027e46:	d019      	beq.n	8027e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 8027e48:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 8027e4c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8027e50:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027e54:	fb08 f807 	mul.w	r8, r8, r7
 8027e58:	fb0a fc0c 	mul.w	ip, sl, ip
 8027e5c:	f108 0b20 	add.w	fp, r8, #32
 8027e60:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8027e64:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8027e68:	44bc      	add	ip, r7
 8027e6a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 8027e6e:	0a3f      	lsrs	r7, r7, #8
 8027e70:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8027e74:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027e78:	ea4c 0707 	orr.w	r7, ip, r7
 8027e7c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8027e80:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8027e84:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8027e88:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 8027e8c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027e90:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8027e94:	ea4c 0909 	orr.w	r9, ip, r9
 8027e98:	ea4a 0707 	orr.w	r7, sl, r7
 8027e9c:	2d00      	cmp	r5, #0
 8027e9e:	f000 80ca 	beq.w	8028036 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 8027ea2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8027ea6:	3901      	subs	r1, #1
 8027ea8:	0049      	lsls	r1, r1, #1
 8027eaa:	3102      	adds	r1, #2
 8027eac:	eb00 0c01 	add.w	ip, r0, r1
 8027eb0:	5a41      	ldrh	r1, [r0, r1]
 8027eb2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8027eb4:	28ff      	cmp	r0, #255	@ 0xff
 8027eb6:	d019      	beq.n	8027eec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 8027eb8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8027eba:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 8027ebe:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8027ec2:	fb04 fa01 	mul.w	sl, r4, r1
 8027ec6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027eca:	fb08 f800 	mul.w	r8, r8, r0
 8027ece:	f10a 0020 	add.w	r0, sl, #32
 8027ed2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8027ed6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8027eda:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027ede:	4441      	add	r1, r8
 8027ee0:	0a00      	lsrs	r0, r0, #8
 8027ee2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8027ee6:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027eea:	4301      	orrs	r1, r0
 8027eec:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8027eee:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8027ef2:	2cff      	cmp	r4, #255	@ 0xff
 8027ef4:	d01a      	beq.n	8027f2c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 8027ef6:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 8027efa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8027efe:	fb04 fa00 	mul.w	sl, r4, r0
 8027f02:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8027f06:	fb08 f80c 	mul.w	r8, r8, ip
 8027f0a:	f10a 0c20 	add.w	ip, sl, #32
 8027f0e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8027f12:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 8027f16:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 8027f1a:	4440      	add	r0, r8
 8027f1c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027f20:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8027f24:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 8027f28:	ea40 000c 	orr.w	r0, r0, ip
 8027f2c:	fb15 fc02 	smulbb	ip, r5, r2
 8027f30:	f1c5 0810 	rsb	r8, r5, #16
 8027f34:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8027f38:	eba8 0802 	sub.w	r8, r8, r2
 8027f3c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8027f40:	437a      	muls	r2, r7
 8027f42:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 8027f46:	fb09 2208 	mla	r2, r9, r8, r2
 8027f4a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8027f4e:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8027f52:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8027f56:	ea4a 0101 	orr.w	r1, sl, r1
 8027f5a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8027f5e:	fb05 2201 	mla	r2, r5, r1, r2
 8027f62:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8027f66:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8027f6a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8027f6e:	ea4b 0000 	orr.w	r0, fp, r0
 8027f72:	fb0c 2200 	mla	r2, ip, r0, r2
 8027f76:	0d57      	lsrs	r7, r2, #21
 8027f78:	0952      	lsrs	r2, r2, #5
 8027f7a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8027f7e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8027f82:	433a      	orrs	r2, r7
 8027f84:	2bff      	cmp	r3, #255	@ 0xff
 8027f86:	b292      	uxth	r2, r2
 8027f88:	d102      	bne.n	8027f90 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 8027f8a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8027f8c:	29ff      	cmp	r1, #255	@ 0xff
 8027f8e:	d063      	beq.n	8028058 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 8027f90:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8027f92:	f8be 1000 	ldrh.w	r1, [lr]
 8027f96:	4343      	muls	r3, r0
 8027f98:	1c58      	adds	r0, r3, #1
 8027f9a:	eb00 2323 	add.w	r3, r0, r3, asr #8
 8027f9e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 8027fa2:	1208      	asrs	r0, r1, #8
 8027fa4:	b2db      	uxtb	r3, r3
 8027fa6:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8027faa:	fb10 f003 	smulbb	r0, r0, r3
 8027fae:	10cf      	asrs	r7, r1, #3
 8027fb0:	00c9      	lsls	r1, r1, #3
 8027fb2:	b2c9      	uxtb	r1, r1
 8027fb4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8027fb6:	1215      	asrs	r5, r2, #8
 8027fb8:	fb11 f103 	smulbb	r1, r1, r3
 8027fbc:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8027fc0:	fb05 0504 	mla	r5, r5, r4, r0
 8027fc4:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8027fc8:	10d0      	asrs	r0, r2, #3
 8027fca:	00d2      	lsls	r2, r2, #3
 8027fcc:	fb17 f703 	smulbb	r7, r7, r3
 8027fd0:	b2d2      	uxtb	r2, r2
 8027fd2:	fb02 1204 	mla	r2, r2, r4, r1
 8027fd6:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8027fda:	fb00 7004 	mla	r0, r0, r4, r7
 8027fde:	b2ad      	uxth	r5, r5
 8027fe0:	b292      	uxth	r2, r2
 8027fe2:	1c6b      	adds	r3, r5, #1
 8027fe4:	1c57      	adds	r7, r2, #1
 8027fe6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8027fea:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8027fee:	b280      	uxth	r0, r0
 8027ff0:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8027ff4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8027ff8:	433d      	orrs	r5, r7
 8027ffa:	1c47      	adds	r7, r0, #1
 8027ffc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 8028000:	097f      	lsrs	r7, r7, #5
 8028002:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028006:	433d      	orrs	r5, r7
 8028008:	f8ae 5000 	strh.w	r5, [lr]
 802800c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 802800e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8028010:	f10e 0e02 	add.w	lr, lr, #2
 8028014:	4413      	add	r3, r2
 8028016:	9321      	str	r3, [sp, #132]	@ 0x84
 8028018:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 802801a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802801c:	441a      	add	r2, r3
 802801e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8028020:	9222      	str	r2, [sp, #136]	@ 0x88
 8028022:	3b01      	subs	r3, #1
 8028024:	9313      	str	r3, [sp, #76]	@ 0x4c
 8028026:	e61c      	b.n	8027c62 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8028028:	fb08 f000 	mul.w	r0, r8, r0
 802802c:	fb09 0303 	mla	r3, r9, r3, r0
 8028030:	e6dc      	b.n	8027dec <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 8028032:	46b9      	mov	r9, r7
 8028034:	e704      	b.n	8027e40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 8028036:	f1c2 0110 	rsb	r1, r2, #16
 802803a:	437a      	muls	r2, r7
 802803c:	fb09 2901 	mla	r9, r9, r1, r2
 8028040:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028044:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028048:	ea4f 1259 	mov.w	r2, r9, lsr #5
 802804c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028050:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028054:	4302      	orrs	r2, r0
 8028056:	e795      	b.n	8027f84 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 8028058:	f8ae 2000 	strh.w	r2, [lr]
 802805c:	e7d6      	b.n	802800c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 802805e:	b017      	add	sp, #92	@ 0x5c
 8028060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028064 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 8028064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028068:	b085      	sub	sp, #20
 802806a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	@ 0x38
 802806e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8028072:	fb00 7406 	mla	r4, r0, r6, r7
 8028076:	2800      	cmp	r0, #0
 8028078:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 802807c:	9103      	str	r1, [sp, #12]
 802807e:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	@ 0x3c
 8028082:	f89d 1048 	ldrb.w	r1, [sp, #72]	@ 0x48
 8028086:	f89d e04c 	ldrb.w	lr, [sp, #76]	@ 0x4c
 802808a:	9501      	str	r5, [sp, #4]
 802808c:	eb02 0904 	add.w	r9, r2, r4
 8028090:	f2c0 8141 	blt.w	8028316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 8028094:	4583      	cmp	fp, r0
 8028096:	f340 813e 	ble.w	8028316 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 802809a:	2f00      	cmp	r7, #0
 802809c:	f2c0 8137 	blt.w	802830e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80280a0:	42be      	cmp	r6, r7
 80280a2:	f340 8134 	ble.w	802830e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 80280a6:	f812 c004 	ldrb.w	ip, [r2, r4]
 80280aa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80280ae:	f64f 041f 	movw	r4, #63519	@ 0xf81f
 80280b2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80280b6:	f423 65fc 	bic.w	r5, r3, #2016	@ 0x7e0
 80280ba:	4355      	muls	r5, r2
 80280bc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80280c0:	fb0c f203 	mul.w	r2, ip, r3
 80280c4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 80280c8:	f605 0501 	addw	r5, r5, #2049	@ 0x801
 80280cc:	441d      	add	r5, r3
 80280ce:	f102 0320 	add.w	r3, r2, #32
 80280d2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80280d6:	0a1b      	lsrs	r3, r3, #8
 80280d8:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 80280dc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80280e0:	431c      	orrs	r4, r3
 80280e2:	1c7b      	adds	r3, r7, #1
 80280e4:	f100 811c 	bmi.w	8028320 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80280e8:	429e      	cmp	r6, r3
 80280ea:	f340 8119 	ble.w	8028320 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 80280ee:	2900      	cmp	r1, #0
 80280f0:	f000 8119 	beq.w	8028326 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 80280f4:	9a01      	ldr	r2, [sp, #4]
 80280f6:	f899 3001 	ldrb.w	r3, [r9, #1]
 80280fa:	8855      	ldrh	r5, [r2, #2]
 80280fc:	ea4f 08e3 	mov.w	r8, r3, asr #3
 8028100:	f425 62fc 	bic.w	r2, r5, #2016	@ 0x7e0
 8028104:	fb08 f802 	mul.w	r8, r8, r2
 8028108:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 802810c:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028110:	435d      	muls	r5, r3
 8028112:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 8028116:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802811a:	44d0      	add	r8, sl
 802811c:	f105 0a20 	add.w	sl, r5, #32
 8028120:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 8028124:	0a2d      	lsrs	r5, r5, #8
 8028126:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 802812a:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802812e:	432a      	orrs	r2, r5
 8028130:	3001      	adds	r0, #1
 8028132:	f100 80fe 	bmi.w	8028332 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 8028136:	4583      	cmp	fp, r0
 8028138:	f340 80fb 	ble.w	8028332 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 802813c:	f1be 0f00 	cmp.w	lr, #0
 8028140:	f000 80fc 	beq.w	802833c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 8028144:	2f00      	cmp	r7, #0
 8028146:	f2c0 80f1 	blt.w	802832c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 802814a:	42be      	cmp	r6, r7
 802814c:	f340 80ee 	ble.w	802832c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 8028150:	f64f 0b1f 	movw	fp, #63519	@ 0xf81f
 8028154:	9801      	ldr	r0, [sp, #4]
 8028156:	f819 5006 	ldrb.w	r5, [r9, r6]
 802815a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 802815e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8028162:	f428 60fc 	bic.w	r0, r8, #2016	@ 0x7e0
 8028166:	fb0a fa00 	mul.w	sl, sl, r0
 802816a:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 802816e:	fb05 f808 	mul.w	r8, r5, r8
 8028172:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 8028176:	f60a 0a01 	addw	sl, sl, #2049	@ 0x801
 802817a:	4482      	add	sl, r0
 802817c:	f108 0020 	add.w	r0, r8, #32
 8028180:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 8028184:	0a00      	lsrs	r0, r0, #8
 8028186:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 802818a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802818e:	ea4b 0b00 	orr.w	fp, fp, r0
 8028192:	3701      	adds	r7, #1
 8028194:	f100 80d7 	bmi.w	8028346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 8028198:	42be      	cmp	r6, r7
 802819a:	f340 80d4 	ble.w	8028346 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 802819e:	2900      	cmp	r1, #0
 80281a0:	f000 80d4 	beq.w	802834c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 80281a4:	9801      	ldr	r0, [sp, #4]
 80281a6:	3601      	adds	r6, #1
 80281a8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 80281ac:	f819 7006 	ldrb.w	r7, [r9, r6]
 80281b0:	f420 66fc 	bic.w	r6, r0, #2016	@ 0x7e0
 80281b4:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80281b8:	fb07 f800 	mul.w	r8, r7, r0
 80281bc:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80281c0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 80281c4:	fb09 f906 	mul.w	r9, r9, r6
 80281c8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 80281cc:	f609 0901 	addw	r9, r9, #2049	@ 0x801
 80281d0:	44d1      	add	r9, sl
 80281d2:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 80281d6:	f108 0020 	add.w	r0, r8, #32
 80281da:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 80281de:	0a00      	lsrs	r0, r0, #8
 80281e0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80281e4:	4330      	orrs	r0, r6
 80281e6:	b28e      	uxth	r6, r1
 80281e8:	fa1f f98e 	uxth.w	r9, lr
 80281ec:	fb06 f809 	mul.w	r8, r6, r9
 80281f0:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 80281f4:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 80281f8:	0136      	lsls	r6, r6, #4
 80281fa:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80281fe:	f424 64fc 	bic.w	r4, r4, #2016	@ 0x7e0
 8028202:	9601      	str	r6, [sp, #4]
 8028204:	ea4a 0404 	orr.w	r4, sl, r4
 8028208:	fa1f f689 	uxth.w	r6, r9
 802820c:	9602      	str	r6, [sp, #8]
 802820e:	4626      	mov	r6, r4
 8028210:	fb11 f90e 	smulbb	r9, r1, lr
 8028214:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8028218:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 802821c:	f1ce 0410 	rsb	r4, lr, #16
 8028220:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028224:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028228:	1a64      	subs	r4, r4, r1
 802822a:	ea4a 0202 	orr.w	r2, sl, r2
 802822e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 8028232:	434a      	muls	r2, r1
 8028234:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8028238:	fb04 2406 	mla	r4, r4, r6, r2
 802823c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028240:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028244:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028248:	ea4a 0000 	orr.w	r0, sl, r0
 802824c:	fb09 4200 	mla	r2, r9, r0, r4
 8028250:	ea4f 440b 	mov.w	r4, fp, lsl #16
 8028254:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8028258:	9801      	ldr	r0, [sp, #4]
 802825a:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 802825e:	ea44 0b0b 	orr.w	fp, r4, fp
 8028262:	9c02      	ldr	r4, [sp, #8]
 8028264:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8028268:	1b00      	subs	r0, r0, r4
 802826a:	9c01      	ldr	r4, [sp, #4]
 802826c:	b280      	uxth	r0, r0
 802826e:	eba4 0608 	sub.w	r6, r4, r8
 8028272:	b2b6      	uxth	r6, r6
 8028274:	4373      	muls	r3, r6
 8028276:	fb0c 3300 	mla	r3, ip, r0, r3
 802827a:	9802      	ldr	r0, [sp, #8]
 802827c:	9903      	ldr	r1, [sp, #12]
 802827e:	fb00 3505 	mla	r5, r0, r5, r3
 8028282:	fb08 5707 	mla	r7, r8, r7, r5
 8028286:	ea6f 2727 	mvn.w	r7, r7, asr #8
 802828a:	8809      	ldrh	r1, [r1, #0]
 802828c:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 8028290:	fb0e 2e0b 	mla	lr, lr, fp, r2
 8028294:	120b      	asrs	r3, r1, #8
 8028296:	b2ff      	uxtb	r7, r7
 8028298:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802829c:	437b      	muls	r3, r7
 802829e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80282a2:	10c8      	asrs	r0, r1, #3
 80282a4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80282a8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 80282ac:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 80282b0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80282b4:	00c9      	lsls	r1, r1, #3
 80282b6:	4378      	muls	r0, r7
 80282b8:	ea42 0e0e 	orr.w	lr, r2, lr
 80282bc:	b2c9      	uxtb	r1, r1
 80282be:	fa1f f28e 	uxth.w	r2, lr
 80282c2:	434f      	muls	r7, r1
 80282c4:	1c59      	adds	r1, r3, #1
 80282c6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80282ca:	1213      	asrs	r3, r2, #8
 80282cc:	f023 0307 	bic.w	r3, r3, #7
 80282d0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80282d4:	1c41      	adds	r1, r0, #1
 80282d6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80282da:	10d1      	asrs	r1, r2, #3
 80282dc:	f021 0103 	bic.w	r1, r1, #3
 80282e0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80282e4:	021b      	lsls	r3, r3, #8
 80282e6:	00c9      	lsls	r1, r1, #3
 80282e8:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80282ec:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 80282f0:	430b      	orrs	r3, r1
 80282f2:	1c79      	adds	r1, r7, #1
 80282f4:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 80282f8:	00d2      	lsls	r2, r2, #3
 80282fa:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 80282fe:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8028302:	431a      	orrs	r2, r3
 8028304:	9b03      	ldr	r3, [sp, #12]
 8028306:	801a      	strh	r2, [r3, #0]
 8028308:	b005      	add	sp, #20
 802830a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802830e:	f04f 0c00 	mov.w	ip, #0
 8028312:	4664      	mov	r4, ip
 8028314:	e6e5      	b.n	80280e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 8028316:	2300      	movs	r3, #0
 8028318:	469c      	mov	ip, r3
 802831a:	461a      	mov	r2, r3
 802831c:	461c      	mov	r4, r3
 802831e:	e707      	b.n	8028130 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8028320:	2300      	movs	r3, #0
 8028322:	461a      	mov	r2, r3
 8028324:	e704      	b.n	8028130 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 8028326:	460b      	mov	r3, r1
 8028328:	460a      	mov	r2, r1
 802832a:	e701      	b.n	8028130 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 802832c:	2500      	movs	r5, #0
 802832e:	46ab      	mov	fp, r5
 8028330:	e72f      	b.n	8028192 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 8028332:	2700      	movs	r7, #0
 8028334:	463d      	mov	r5, r7
 8028336:	4638      	mov	r0, r7
 8028338:	46bb      	mov	fp, r7
 802833a:	e754      	b.n	80281e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802833c:	4677      	mov	r7, lr
 802833e:	4675      	mov	r5, lr
 8028340:	4670      	mov	r0, lr
 8028342:	46f3      	mov	fp, lr
 8028344:	e74f      	b.n	80281e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 8028346:	2700      	movs	r7, #0
 8028348:	4638      	mov	r0, r7
 802834a:	e74c      	b.n	80281e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 802834c:	460f      	mov	r7, r1
 802834e:	4608      	mov	r0, r1
 8028350:	e749      	b.n	80281e6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

08028354 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028358:	b093      	sub	sp, #76	@ 0x4c
 802835a:	9210      	str	r2, [sp, #64]	@ 0x40
 802835c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802835e:	9011      	str	r0, [sp, #68]	@ 0x44
 8028360:	6850      	ldr	r0, [r2, #4]
 8028362:	910e      	str	r1, [sp, #56]	@ 0x38
 8028364:	9306      	str	r3, [sp, #24]
 8028366:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802836a:	fb00 1303 	mla	r3, r0, r3, r1
 802836e:	6812      	ldr	r2, [r2, #0]
 8028370:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8028374:	9307      	str	r3, [sp, #28]
 8028376:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028378:	681b      	ldr	r3, [r3, #0]
 802837a:	9308      	str	r3, [sp, #32]
 802837c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802837e:	685b      	ldr	r3, [r3, #4]
 8028380:	9309      	str	r3, [sp, #36]	@ 0x24
 8028382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028384:	2b00      	cmp	r3, #0
 8028386:	dc03      	bgt.n	8028390 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028388:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802838a:	2b00      	cmp	r3, #0
 802838c:	f340 83b4 	ble.w	8028af8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 8028390:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028392:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028396:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802839a:	1e48      	subs	r0, r1, #1
 802839c:	1e55      	subs	r5, r2, #1
 802839e:	9b06      	ldr	r3, [sp, #24]
 80283a0:	2b00      	cmp	r3, #0
 80283a2:	f340 8163 	ble.w	802866c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 80283a6:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 80283a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80283aa:	1436      	asrs	r6, r6, #16
 80283ac:	ea4f 4323 	mov.w	r3, r3, asr #16
 80283b0:	d406      	bmi.n	80283c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80283b2:	4286      	cmp	r6, r0
 80283b4:	da04      	bge.n	80283c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80283b6:	2b00      	cmp	r3, #0
 80283b8:	db02      	blt.n	80283c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80283ba:	42ab      	cmp	r3, r5
 80283bc:	f2c0 8157 	blt.w	802866e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 80283c0:	3601      	adds	r6, #1
 80283c2:	f100 8144 	bmi.w	802864e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80283c6:	42b1      	cmp	r1, r6
 80283c8:	f2c0 8141 	blt.w	802864e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80283cc:	3301      	adds	r3, #1
 80283ce:	f100 813e 	bmi.w	802864e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80283d2:	429a      	cmp	r2, r3
 80283d4:	f2c0 813b 	blt.w	802864e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 80283d8:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80283dc:	9b06      	ldr	r3, [sp, #24]
 80283de:	9f07      	ldr	r7, [sp, #28]
 80283e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80283e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80283e4:	2b00      	cmp	r3, #0
 80283e6:	f340 8164 	ble.w	80286b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80283ea:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80283ec:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 80283ee:	1418      	asrs	r0, r3, #16
 80283f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80283f2:	142d      	asrs	r5, r5, #16
 80283f4:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80283f8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80283fa:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80283fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028400:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8028404:	f100 81ee 	bmi.w	80287e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028408:	f102 3eff 	add.w	lr, r2, #4294967295
 802840c:	4575      	cmp	r5, lr
 802840e:	f280 81e9 	bge.w	80287e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028412:	2800      	cmp	r0, #0
 8028414:	f2c0 81e6 	blt.w	80287e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028418:	f103 3eff 	add.w	lr, r3, #4294967295
 802841c:	4570      	cmp	r0, lr
 802841e:	f280 81e1 	bge.w	80287e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8028422:	b212      	sxth	r2, r2
 8028424:	fb00 5002 	mla	r0, r0, r2, r5
 8028428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802842a:	fa1f fe81 	uxth.w	lr, r1
 802842e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8028432:	eb03 0a00 	add.w	sl, r3, r0
 8028436:	f813 9000 	ldrb.w	r9, [r3, r0]
 802843a:	f5c5 7380 	rsb	r3, r5, #256	@ 0x100
 802843e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028442:	b29b      	uxth	r3, r3
 8028444:	f1bc 0f00 	cmp.w	ip, #0
 8028448:	f000 8179 	beq.w	802873e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 802844c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8028450:	eb0a 0b02 	add.w	fp, sl, r2
 8028454:	fa1f fa8c 	uxth.w	sl, ip
 8028458:	fb0a fe0e 	mul.w	lr, sl, lr
 802845c:	eba5 050e 	sub.w	r5, r5, lr
 8028460:	b2ad      	uxth	r5, r5
 8028462:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8028466:	fb08 f505 	mul.w	r5, r8, r5
 802846a:	fa1f fa8a 	uxth.w	sl, sl
 802846e:	eba3 030a 	sub.w	r3, r3, sl
 8028472:	b29b      	uxth	r3, r3
 8028474:	940a      	str	r4, [sp, #40]	@ 0x28
 8028476:	fb09 5303 	mla	r3, r9, r3, r5
 802847a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802847e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8028480:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8028482:	fb0a 3304 	mla	r3, sl, r4, r3
 8028486:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8028488:	fb0e 3304 	mla	r3, lr, r4, r3
 802848c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028490:	2b00      	cmp	r3, #0
 8028492:	f000 80cf 	beq.w	8028634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028496:	9c08      	ldr	r4, [sp, #32]
 8028498:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 802849c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 80284a0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 80284a4:	f000 8150 	beq.w	8028748 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80284a8:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80284ac:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80284b0:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80284b4:	fb09 f000 	mul.w	r0, r9, r0
 80284b8:	fb0a fe0e 	mul.w	lr, sl, lr
 80284bc:	f100 0b20 	add.w	fp, r0, #32
 80284c0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 80284c4:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 80284c8:	44ce      	add	lr, r9
 80284ca:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 80284ce:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80284d2:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 80284d6:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80284da:	ea4e 0909 	orr.w	r9, lr, r9
 80284de:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80284e2:	8868      	ldrh	r0, [r5, #2]
 80284e4:	d019      	beq.n	802851a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80284e6:	f420 6efc 	bic.w	lr, r0, #2016	@ 0x7e0
 80284ea:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80284ee:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80284f2:	fb08 f800 	mul.w	r8, r8, r0
 80284f6:	fb0a fe0e 	mul.w	lr, sl, lr
 80284fa:	f108 0b20 	add.w	fp, r8, #32
 80284fe:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 8028502:	f60e 0e01 	addw	lr, lr, #2049	@ 0x801
 8028506:	4486      	add	lr, r0
 8028508:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802850c:	0a00      	lsrs	r0, r0, #8
 802850e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 8028512:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028516:	ea4e 0000 	orr.w	r0, lr, r0
 802851a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802851e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8028522:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8028526:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802852a:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 802852e:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028532:	ea4e 0909 	orr.w	r9, lr, r9
 8028536:	ea4a 0000 	orr.w	r0, sl, r0
 802853a:	f1bc 0f00 	cmp.w	ip, #0
 802853e:	f000 8105 	beq.w	802874c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8028542:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8028546:	3a01      	subs	r2, #1
 8028548:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802854a:	0052      	lsls	r2, r2, #1
 802854c:	3202      	adds	r2, #2
 802854e:	2cff      	cmp	r4, #255	@ 0xff
 8028550:	eb05 0e02 	add.w	lr, r5, r2
 8028554:	5aaa      	ldrh	r2, [r5, r2]
 8028556:	d018      	beq.n	802858a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8028558:	f422 65fc 	bic.w	r5, r2, #2016	@ 0x7e0
 802855c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028560:	fb04 fa02 	mul.w	sl, r4, r2
 8028564:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8028568:	fb08 f805 	mul.w	r8, r8, r5
 802856c:	f10a 0520 	add.w	r5, sl, #32
 8028570:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8028574:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8028578:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802857c:	4442      	add	r2, r8
 802857e:	0a2d      	lsrs	r5, r5, #8
 8028580:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8028584:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8028588:	432a      	orrs	r2, r5
 802858a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802858c:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8028590:	2cff      	cmp	r4, #255	@ 0xff
 8028592:	d01a      	beq.n	80285ca <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8028594:	f425 6efc 	bic.w	lr, r5, #2016	@ 0x7e0
 8028598:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802859c:	fb04 fa05 	mul.w	sl, r4, r5
 80285a0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80285a4:	fb08 f80e 	mul.w	r8, r8, lr
 80285a8:	f10a 0e20 	add.w	lr, sl, #32
 80285ac:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 80285b0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80285b4:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80285b8:	4445      	add	r5, r8
 80285ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80285be:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 80285c2:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 80285c6:	ea45 050e 	orr.w	r5, r5, lr
 80285ca:	fb1c fe01 	smulbb	lr, ip, r1
 80285ce:	f1cc 0810 	rsb	r8, ip, #16
 80285d2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80285d6:	eba8 0801 	sub.w	r8, r8, r1
 80285da:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80285de:	4341      	muls	r1, r0
 80285e0:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80285e4:	fb09 1108 	mla	r1, r9, r8, r1
 80285e8:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 80285ec:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 80285f0:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80285f4:	ea4a 0202 	orr.w	r2, sl, r2
 80285f8:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80285fc:	fb0c 1102 	mla	r1, ip, r2, r1
 8028600:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8028604:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028608:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 802860c:	ea4b 0505 	orr.w	r5, fp, r5
 8028610:	fb0e 1e05 	mla	lr, lr, r5, r1
 8028614:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8028618:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802861c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028620:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8028624:	ea42 0e0e 	orr.w	lr, r2, lr
 8028628:	fa1f f28e 	uxth.w	r2, lr
 802862c:	2bff      	cmp	r3, #255	@ 0xff
 802862e:	f040 80a1 	bne.w	8028774 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 8028632:	803a      	strh	r2, [r7, #0]
 8028634:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028636:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8028638:	3702      	adds	r7, #2
 802863a:	4413      	add	r3, r2
 802863c:	931d      	str	r3, [sp, #116]	@ 0x74
 802863e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8028640:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028642:	441a      	add	r2, r3
 8028644:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028646:	921e      	str	r2, [sp, #120]	@ 0x78
 8028648:	3b01      	subs	r3, #1
 802864a:	930f      	str	r3, [sp, #60]	@ 0x3c
 802864c:	e6c9      	b.n	80283e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802864e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028650:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 8028652:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8028654:	4433      	add	r3, r6
 8028656:	931d      	str	r3, [sp, #116]	@ 0x74
 8028658:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802865a:	441c      	add	r4, r3
 802865c:	9b06      	ldr	r3, [sp, #24]
 802865e:	941e      	str	r4, [sp, #120]	@ 0x78
 8028660:	3b01      	subs	r3, #1
 8028662:	9306      	str	r3, [sp, #24]
 8028664:	9b07      	ldr	r3, [sp, #28]
 8028666:	3302      	adds	r3, #2
 8028668:	9307      	str	r3, [sp, #28]
 802866a:	e698      	b.n	802839e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802866c:	d028      	beq.n	80286c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 802866e:	9b06      	ldr	r3, [sp, #24]
 8028670:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028672:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8028674:	3b01      	subs	r3, #1
 8028676:	fb00 5003 	mla	r0, r0, r3, r5
 802867a:	1400      	asrs	r0, r0, #16
 802867c:	f53f aeac 	bmi.w	80283d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028680:	3901      	subs	r1, #1
 8028682:	4288      	cmp	r0, r1
 8028684:	f6bf aea8 	bge.w	80283d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028688:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802868a:	981e      	ldr	r0, [sp, #120]	@ 0x78
 802868c:	fb01 0303 	mla	r3, r1, r3, r0
 8028690:	141b      	asrs	r3, r3, #16
 8028692:	f53f aea1 	bmi.w	80283d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8028696:	3a01      	subs	r2, #1
 8028698:	4293      	cmp	r3, r2
 802869a:	f6bf ae9d 	bge.w	80283d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802869e:	f64f 061f 	movw	r6, #63519	@ 0xf81f
 80286a2:	9b06      	ldr	r3, [sp, #24]
 80286a4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80286a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80286aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80286ac:	2b00      	cmp	r3, #0
 80286ae:	f300 80b6 	bgt.w	802881e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 80286b2:	9b06      	ldr	r3, [sp, #24]
 80286b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80286b8:	9b07      	ldr	r3, [sp, #28]
 80286ba:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 80286be:	9307      	str	r3, [sp, #28]
 80286c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80286c2:	2b00      	cmp	r3, #0
 80286c4:	f340 8218 	ble.w	8028af8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 80286c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80286cc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80286d0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80286d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80286d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80286dc:	eef0 6a62 	vmov.f32	s13, s5
 80286e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80286e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80286e8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80286ec:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80286f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80286f4:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 80286f8:	eef0 6a43 	vmov.f32	s13, s6
 80286fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028700:	ee12 2a90 	vmov	r2, s5
 8028704:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028708:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802870a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802870e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028712:	ee13 2a10 	vmov	r2, s6
 8028716:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028718:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802871a:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 802871e:	fb92 f3f3 	sdiv	r3, r2, r3
 8028722:	9320      	str	r3, [sp, #128]	@ 0x80
 8028724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8028726:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028728:	3b01      	subs	r3, #1
 802872a:	930e      	str	r3, [sp, #56]	@ 0x38
 802872c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802872e:	bf08      	it	eq
 8028730:	4613      	moveq	r3, r2
 8028732:	eeb0 3a67 	vmov.f32	s6, s15
 8028736:	9306      	str	r3, [sp, #24]
 8028738:	eef0 2a47 	vmov.f32	s5, s14
 802873c:	e621      	b.n	8028382 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802873e:	fb08 f505 	mul.w	r5, r8, r5
 8028742:	fb09 5303 	mla	r3, r9, r3, r5
 8028746:	e6a1      	b.n	802848c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8028748:	4681      	mov	r9, r0
 802874a:	e6c8      	b.n	80284de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 802874c:	f1c1 0210 	rsb	r2, r1, #16
 8028750:	4341      	muls	r1, r0
 8028752:	fb09 1902 	mla	r9, r9, r2, r1
 8028756:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802875a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 802875e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8028762:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028766:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802876a:	ea42 0909 	orr.w	r9, r2, r9
 802876e:	fa1f f289 	uxth.w	r2, r9
 8028772:	e75b      	b.n	802862c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028774:	43db      	mvns	r3, r3
 8028776:	f8b7 c000 	ldrh.w	ip, [r7]
 802877a:	fa5f fe83 	uxtb.w	lr, r3
 802877e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8028782:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028786:	fb00 f00e 	mul.w	r0, r0, lr
 802878a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802878e:	1c41      	adds	r1, r0, #1
 8028790:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8028794:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8028798:	fb05 f50e 	mul.w	r5, r5, lr
 802879c:	1211      	asrs	r1, r2, #8
 802879e:	f021 0107 	bic.w	r1, r1, #7
 80287a2:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80287a6:	48d6      	ldr	r0, [pc, #856]	@ (8028b00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 80287a8:	b2c9      	uxtb	r1, r1
 80287aa:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 80287ae:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80287b2:	1c69      	adds	r1, r5, #1
 80287b4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80287b8:	b2db      	uxtb	r3, r3
 80287ba:	10d1      	asrs	r1, r2, #3
 80287bc:	fb03 f30e 	mul.w	r3, r3, lr
 80287c0:	f021 0103 	bic.w	r1, r1, #3
 80287c4:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 80287c8:	00c9      	lsls	r1, r1, #3
 80287ca:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 80287ce:	4301      	orrs	r1, r0
 80287d0:	1c58      	adds	r0, r3, #1
 80287d2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80287d6:	00d2      	lsls	r2, r2, #3
 80287d8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80287dc:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80287e0:	430a      	orrs	r2, r1
 80287e2:	e726      	b.n	8028632 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 80287e4:	f115 0e01 	adds.w	lr, r5, #1
 80287e8:	f53f af24 	bmi.w	8028634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80287ec:	4572      	cmp	r2, lr
 80287ee:	f6ff af21 	blt.w	8028634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80287f2:	f110 0e01 	adds.w	lr, r0, #1
 80287f6:	f53f af1d 	bmi.w	8028634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 80287fa:	4573      	cmp	r3, lr
 80287fc:	f6ff af1a 	blt.w	8028634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 8028800:	b21b      	sxth	r3, r3
 8028802:	b212      	sxth	r2, r2
 8028804:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8028808:	e9cd 5002 	strd	r5, r0, [sp, #8]
 802880c:	9301      	str	r3, [sp, #4]
 802880e:	9200      	str	r2, [sp, #0]
 8028810:	4639      	mov	r1, r7
 8028812:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8028816:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028818:	f7ff fc24 	bl	8028064 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 802881c:	e70a      	b.n	8028634 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 802881e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028820:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8028824:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8028826:	fa1f fc82 	uxth.w	ip, r2
 802882a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 802882e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028830:	ea4f 100c 	mov.w	r0, ip, lsl #4
 8028834:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028838:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 802883a:	141f      	asrs	r7, r3, #16
 802883c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802883e:	141b      	asrs	r3, r3, #16
 8028840:	fb01 3707 	mla	r7, r1, r7, r3
 8028844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028846:	eb03 0a07 	add.w	sl, r3, r7
 802884a:	f813 9007 	ldrb.w	r9, [r3, r7]
 802884e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8028852:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8028856:	b29b      	uxth	r3, r3
 8028858:	2d00      	cmp	r5, #0
 802885a:	f000 80fe 	beq.w	8028a5a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802885e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 8028862:	eb0a 0b01 	add.w	fp, sl, r1
 8028866:	fa1f fa85 	uxth.w	sl, r5
 802886a:	fb0a fc0c 	mul.w	ip, sl, ip
 802886e:	eba0 000c 	sub.w	r0, r0, ip
 8028872:	b280      	uxth	r0, r0
 8028874:	fb08 f000 	mul.w	r0, r8, r0
 8028878:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802887c:	fa1f fa8a 	uxth.w	sl, sl
 8028880:	eba3 030a 	sub.w	r3, r3, sl
 8028884:	b29b      	uxth	r3, r3
 8028886:	fb09 0303 	mla	r3, r9, r3, r0
 802888a:	940c      	str	r4, [sp, #48]	@ 0x30
 802888c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 802888e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8028892:	fb0a 3300 	mla	r3, sl, r0, r3
 8028896:	fb0c 3304 	mla	r3, ip, r4, r3
 802889a:	940d      	str	r4, [sp, #52]	@ 0x34
 802889c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80288a0:	2b00      	cmp	r3, #0
 80288a2:	f000 80cc 	beq.w	8028a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 80288a6:	9808      	ldr	r0, [sp, #32]
 80288a8:	9c08      	ldr	r4, [sp, #32]
 80288aa:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80288ae:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80288b2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 80288b6:	f000 80d5 	beq.w	8028a64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 80288ba:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80288be:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80288c2:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 80288c6:	fb09 f707 	mul.w	r7, r9, r7
 80288ca:	fb0a fc0c 	mul.w	ip, sl, ip
 80288ce:	f107 0b20 	add.w	fp, r7, #32
 80288d2:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 80288d6:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 80288da:	44cc      	add	ip, r9
 80288dc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 80288e0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80288e4:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80288e8:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 80288ec:	ea4c 0909 	orr.w	r9, ip, r9
 80288f0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80288f4:	8847      	ldrh	r7, [r0, #2]
 80288f6:	d019      	beq.n	802892c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 80288f8:	f427 6cfc 	bic.w	ip, r7, #2016	@ 0x7e0
 80288fc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8028900:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028904:	fb08 f807 	mul.w	r8, r8, r7
 8028908:	fb0a fc0c 	mul.w	ip, sl, ip
 802890c:	f108 0b20 	add.w	fp, r8, #32
 8028910:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 8028914:	f60c 0c01 	addw	ip, ip, #2049	@ 0x801
 8028918:	44bc      	add	ip, r7
 802891a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 802891e:	0a3f      	lsrs	r7, r7, #8
 8028920:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8028924:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028928:	ea4c 0707 	orr.w	r7, ip, r7
 802892c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8028930:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 8028934:	f00c 6cfc 	and.w	ip, ip, #132120576	@ 0x7e00000
 8028938:	f429 69fc 	bic.w	r9, r9, #2016	@ 0x7e0
 802893c:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028940:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 8028944:	ea4c 0909 	orr.w	r9, ip, r9
 8028948:	ea4a 0707 	orr.w	r7, sl, r7
 802894c:	2d00      	cmp	r5, #0
 802894e:	f000 808b 	beq.w	8028a68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 8028952:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8028956:	3901      	subs	r1, #1
 8028958:	0049      	lsls	r1, r1, #1
 802895a:	3102      	adds	r1, #2
 802895c:	eb00 0c01 	add.w	ip, r0, r1
 8028960:	5a41      	ldrh	r1, [r0, r1]
 8028962:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8028964:	28ff      	cmp	r0, #255	@ 0xff
 8028966:	d019      	beq.n	802899c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 8028968:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802896a:	f421 60fc 	bic.w	r0, r1, #2016	@ 0x7e0
 802896e:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028972:	fb04 fa01 	mul.w	sl, r4, r1
 8028976:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802897a:	fb08 f800 	mul.w	r8, r8, r0
 802897e:	f10a 0020 	add.w	r0, sl, #32
 8028982:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 8028986:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 802898a:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 802898e:	4441      	add	r1, r8
 8028990:	0a00      	lsrs	r0, r0, #8
 8028992:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 8028996:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802899a:	4301      	orrs	r1, r0
 802899c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 802899e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 80289a2:	2cff      	cmp	r4, #255	@ 0xff
 80289a4:	d01a      	beq.n	80289dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 80289a6:	f420 6cfc 	bic.w	ip, r0, #2016	@ 0x7e0
 80289aa:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 80289ae:	fb04 fa00 	mul.w	sl, r4, r0
 80289b2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80289b6:	fb08 f80c 	mul.w	r8, r8, ip
 80289ba:	f10a 0c20 	add.w	ip, sl, #32
 80289be:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 80289c2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80289c6:	f608 0801 	addw	r8, r8, #2049	@ 0x801
 80289ca:	4440      	add	r0, r8
 80289cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80289d0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 80289d4:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80289d8:	ea40 000c 	orr.w	r0, r0, ip
 80289dc:	fb15 fc02 	smulbb	ip, r5, r2
 80289e0:	f1c5 0810 	rsb	r8, r5, #16
 80289e4:	ea4f 0cec 	mov.w	ip, ip, asr #3
 80289e8:	eba8 0802 	sub.w	r8, r8, r2
 80289ec:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 80289f0:	437a      	muls	r2, r7
 80289f2:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 80289f6:	fb09 2208 	mla	r2, r9, r8, r2
 80289fa:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 80289fe:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028a02:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028a06:	ea4a 0101 	orr.w	r1, sl, r1
 8028a0a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 8028a0e:	fb05 2201 	mla	r2, r5, r1, r2
 8028a12:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028a16:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028a1a:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8028a1e:	ea4b 0000 	orr.w	r0, fp, r0
 8028a22:	fb0c 2200 	mla	r2, ip, r0, r2
 8028a26:	0d57      	lsrs	r7, r2, #21
 8028a28:	0952      	lsrs	r2, r2, #5
 8028a2a:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8028a2e:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028a32:	433a      	orrs	r2, r7
 8028a34:	2bff      	cmp	r3, #255	@ 0xff
 8028a36:	b292      	uxth	r2, r2
 8028a38:	d127      	bne.n	8028a8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 8028a3a:	f8ae 2000 	strh.w	r2, [lr]
 8028a3e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8028a40:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8028a42:	f10e 0e02 	add.w	lr, lr, #2
 8028a46:	4413      	add	r3, r2
 8028a48:	931d      	str	r3, [sp, #116]	@ 0x74
 8028a4a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8028a4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028a4e:	441a      	add	r2, r3
 8028a50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8028a52:	921e      	str	r2, [sp, #120]	@ 0x78
 8028a54:	3b01      	subs	r3, #1
 8028a56:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028a58:	e627      	b.n	80286aa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8028a5a:	fb08 f000 	mul.w	r0, r8, r0
 8028a5e:	fb09 0303 	mla	r3, r9, r3, r0
 8028a62:	e71b      	b.n	802889c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 8028a64:	46b9      	mov	r9, r7
 8028a66:	e743      	b.n	80288f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 8028a68:	f1c2 0110 	rsb	r1, r2, #16
 8028a6c:	437a      	muls	r2, r7
 8028a6e:	fb09 2901 	mla	r9, r9, r1, r2
 8028a72:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8028a76:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8028a7a:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8028a7e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8028a82:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028a86:	4302      	orrs	r2, r0
 8028a88:	e7d4      	b.n	8028a34 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8028a8a:	43db      	mvns	r3, r3
 8028a8c:	f8be 7000 	ldrh.w	r7, [lr]
 8028a90:	fa5f fc83 	uxtb.w	ip, r3
 8028a94:	1238      	asrs	r0, r7, #8
 8028a96:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8028a9a:	fb00 f00c 	mul.w	r0, r0, ip
 8028a9e:	10fd      	asrs	r5, r7, #3
 8028aa0:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8028aa4:	fb05 f10c 	mul.w	r1, r5, ip
 8028aa8:	1c45      	adds	r5, r0, #1
 8028aaa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028aae:	1215      	asrs	r5, r2, #8
 8028ab0:	f025 0507 	bic.w	r5, r5, #7
 8028ab4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8028ab8:	00fb      	lsls	r3, r7, #3
 8028aba:	1c4d      	adds	r5, r1, #1
 8028abc:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028ac0:	b2db      	uxtb	r3, r3
 8028ac2:	10d1      	asrs	r1, r2, #3
 8028ac4:	fb03 f30c 	mul.w	r3, r3, ip
 8028ac8:	f021 0103 	bic.w	r1, r1, #3
 8028acc:	4c0c      	ldr	r4, [pc, #48]	@ (8028b00 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 8028ace:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8028ad2:	b2c0      	uxtb	r0, r0
 8028ad4:	00c9      	lsls	r1, r1, #3
 8028ad6:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028ada:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 8028ade:	4308      	orrs	r0, r1
 8028ae0:	1c59      	adds	r1, r3, #1
 8028ae2:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8028ae6:	00d2      	lsls	r2, r2, #3
 8028ae8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8028aec:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8028af0:	4318      	orrs	r0, r3
 8028af2:	f8ae 0000 	strh.w	r0, [lr]
 8028af6:	e7a2      	b.n	8028a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 8028af8:	b013      	add	sp, #76	@ 0x4c
 8028afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028afe:	bf00      	nop
 8028b00:	fffff800 	.word	0xfffff800

08028b04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8028b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028b08:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8028b0c:	fb05 4c03 	mla	ip, r5, r3, r4
 8028b10:	2d00      	cmp	r5, #0
 8028b12:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 8028b16:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8028b1a:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 8028b1e:	f89d 6034 	ldrb.w	r6, [sp, #52]	@ 0x34
 8028b22:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 8028b26:	8808      	ldrh	r0, [r1, #0]
 8028b28:	f2c0 80a7 	blt.w	8028c7a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8028b2c:	45aa      	cmp	sl, r5
 8028b2e:	f340 80a4 	ble.w	8028c7a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 8028b32:	2c00      	cmp	r4, #0
 8028b34:	f2c0 809f 	blt.w	8028c76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8028b38:	42a3      	cmp	r3, r4
 8028b3a:	f340 809c 	ble.w	8028c76 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 8028b3e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 8028b42:	1c62      	adds	r2, r4, #1
 8028b44:	f100 809c 	bmi.w	8028c80 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028b48:	4293      	cmp	r3, r2
 8028b4a:	f340 8099 	ble.w	8028c80 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028b4e:	f1b9 0f00 	cmp.w	r9, #0
 8028b52:	f000 8095 	beq.w	8028c80 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 8028b56:	f8be c002 	ldrh.w	ip, [lr, #2]
 8028b5a:	3501      	adds	r5, #1
 8028b5c:	f100 8094 	bmi.w	8028c88 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028b60:	45aa      	cmp	sl, r5
 8028b62:	f340 8091 	ble.w	8028c88 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028b66:	2f00      	cmp	r7, #0
 8028b68:	f000 808e 	beq.w	8028c88 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8028b6c:	2c00      	cmp	r4, #0
 8028b6e:	f2c0 8089 	blt.w	8028c84 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8028b72:	42a3      	cmp	r3, r4
 8028b74:	f340 8086 	ble.w	8028c84 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8028b78:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8028b7c:	3401      	adds	r4, #1
 8028b7e:	f100 8086 	bmi.w	8028c8e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028b82:	42a3      	cmp	r3, r4
 8028b84:	f340 8083 	ble.w	8028c8e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028b88:	f1b9 0f00 	cmp.w	r9, #0
 8028b8c:	d07f      	beq.n	8028c8e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8028b8e:	3301      	adds	r3, #1
 8028b90:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8028b94:	fb19 fe07 	smulbb	lr, r9, r7
 8028b98:	ea4f 4408 	mov.w	r4, r8, lsl #16
 8028b9c:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8028ba0:	f428 68fc 	bic.w	r8, r8, #2016	@ 0x7e0
 8028ba4:	ea44 0808 	orr.w	r8, r4, r8
 8028ba8:	ea4f 440c 	mov.w	r4, ip, lsl #16
 8028bac:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8028bb0:	f004 64fc 	and.w	r4, r4, #132120576	@ 0x7e00000
 8028bb4:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028bb8:	ea44 0c0c 	orr.w	ip, r4, ip
 8028bbc:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8028bc0:	fb04 f40c 	mul.w	r4, r4, ip
 8028bc4:	f1c7 0210 	rsb	r2, r7, #16
 8028bc8:	eba2 0209 	sub.w	r2, r2, r9
 8028bcc:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8028bd0:	fb02 4808 	mla	r8, r2, r8, r4
 8028bd4:	b2b4      	uxth	r4, r6
 8028bd6:	43f6      	mvns	r6, r6
 8028bd8:	041a      	lsls	r2, r3, #16
 8028bda:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028bde:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028be2:	4313      	orrs	r3, r2
 8028be4:	fb0e 8303 	mla	r3, lr, r3, r8
 8028be8:	042a      	lsls	r2, r5, #16
 8028bea:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028bee:	f425 65fc 	bic.w	r5, r5, #2016	@ 0x7e0
 8028bf2:	432a      	orrs	r2, r5
 8028bf4:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 8028bf8:	fb07 3202 	mla	r2, r7, r2, r3
 8028bfc:	0d53      	lsrs	r3, r2, #21
 8028bfe:	0952      	lsrs	r2, r2, #5
 8028c00:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8028c04:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028c08:	431a      	orrs	r2, r3
 8028c0a:	b293      	uxth	r3, r2
 8028c0c:	1202      	asrs	r2, r0, #8
 8028c0e:	b2f6      	uxtb	r6, r6
 8028c10:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8028c14:	fb12 f206 	smulbb	r2, r2, r6
 8028c18:	10c7      	asrs	r7, r0, #3
 8028c1a:	00c0      	lsls	r0, r0, #3
 8028c1c:	b2c0      	uxtb	r0, r0
 8028c1e:	121d      	asrs	r5, r3, #8
 8028c20:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8028c24:	fb10 f006 	smulbb	r0, r0, r6
 8028c28:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8028c2c:	fb17 f706 	smulbb	r7, r7, r6
 8028c30:	fb05 2504 	mla	r5, r5, r4, r2
 8028c34:	10da      	asrs	r2, r3, #3
 8028c36:	00db      	lsls	r3, r3, #3
 8028c38:	b2db      	uxtb	r3, r3
 8028c3a:	fb03 0004 	mla	r0, r3, r4, r0
 8028c3e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8028c42:	fb02 7204 	mla	r2, r2, r4, r7
 8028c46:	b2ad      	uxth	r5, r5
 8028c48:	b280      	uxth	r0, r0
 8028c4a:	1c6b      	adds	r3, r5, #1
 8028c4c:	b292      	uxth	r2, r2
 8028c4e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8028c52:	1c43      	adds	r3, r0, #1
 8028c54:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8028c58:	1c50      	adds	r0, r2, #1
 8028c5a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8028c5e:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8028c62:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028c66:	0952      	lsrs	r2, r2, #5
 8028c68:	432b      	orrs	r3, r5
 8028c6a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028c6e:	4313      	orrs	r3, r2
 8028c70:	800b      	strh	r3, [r1, #0]
 8028c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028c76:	4680      	mov	r8, r0
 8028c78:	e763      	b.n	8028b42 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 8028c7a:	4684      	mov	ip, r0
 8028c7c:	4680      	mov	r8, r0
 8028c7e:	e76c      	b.n	8028b5a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028c80:	4684      	mov	ip, r0
 8028c82:	e76a      	b.n	8028b5a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8028c84:	4605      	mov	r5, r0
 8028c86:	e779      	b.n	8028b7c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 8028c88:	4603      	mov	r3, r0
 8028c8a:	4605      	mov	r5, r0
 8028c8c:	e782      	b.n	8028b94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8028c8e:	4603      	mov	r3, r0
 8028c90:	e780      	b.n	8028b94 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08028c92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028c92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c96:	b093      	sub	sp, #76	@ 0x4c
 8028c98:	461d      	mov	r5, r3
 8028c9a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 8028c9e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8028ca0:	910a      	str	r1, [sp, #40]	@ 0x28
 8028ca2:	9210      	str	r2, [sp, #64]	@ 0x40
 8028ca4:	6859      	ldr	r1, [r3, #4]
 8028ca6:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8028caa:	681b      	ldr	r3, [r3, #0]
 8028cac:	920b      	str	r2, [sp, #44]	@ 0x2c
 8028cae:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	@ 0x88
 8028cb2:	fb01 2707 	mla	r7, r1, r7, r2
 8028cb6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8028cba:	9307      	str	r3, [sp, #28]
 8028cbc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028cbe:	9011      	str	r0, [sp, #68]	@ 0x44
 8028cc0:	681b      	ldr	r3, [r3, #0]
 8028cc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8028cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8028cc6:	43db      	mvns	r3, r3
 8028cc8:	b2db      	uxtb	r3, r3
 8028cca:	9308      	str	r3, [sp, #32]
 8028ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028cce:	2b00      	cmp	r3, #0
 8028cd0:	dc03      	bgt.n	8028cda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8028cd2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8028cd4:	2b00      	cmp	r3, #0
 8028cd6:	f340 8203 	ble.w	80290e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8028cda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028cdc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028ce0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028ce4:	1e48      	subs	r0, r1, #1
 8028ce6:	f102 3cff 	add.w	ip, r2, #4294967295
 8028cea:	2d00      	cmp	r5, #0
 8028cec:	f340 80da 	ble.w	8028ea4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8028cf0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8028cf4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8028cf8:	d406      	bmi.n	8028d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028cfa:	4586      	cmp	lr, r0
 8028cfc:	da04      	bge.n	8028d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028cfe:	2b00      	cmp	r3, #0
 8028d00:	db02      	blt.n	8028d08 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8028d02:	4563      	cmp	r3, ip
 8028d04:	f2c0 80cf 	blt.w	8028ea6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8028d08:	f11e 0e01 	adds.w	lr, lr, #1
 8028d0c:	f100 80c1 	bmi.w	8028e92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028d10:	4571      	cmp	r1, lr
 8028d12:	f2c0 80be 	blt.w	8028e92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028d16:	3301      	adds	r3, #1
 8028d18:	f100 80bb 	bmi.w	8028e92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028d1c:	429a      	cmp	r2, r3
 8028d1e:	f2c0 80b8 	blt.w	8028e92 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028d22:	46a9      	mov	r9, r5
 8028d24:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028d28:	f1b9 0f00 	cmp.w	r9, #0
 8028d2c:	f340 80d8 	ble.w	8028ee0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 8028d30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028d32:	1421      	asrs	r1, r4, #16
 8028d34:	ea4f 4026 	mov.w	r0, r6, asr #16
 8028d38:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028d3c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8028d40:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8028d44:	f100 8111 	bmi.w	8028f6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028d48:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028d4c:	4551      	cmp	r1, sl
 8028d4e:	f280 810c 	bge.w	8028f6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028d52:	2800      	cmp	r0, #0
 8028d54:	f2c0 8109 	blt.w	8028f6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028d58:	f103 3aff 	add.w	sl, r3, #4294967295
 8028d5c:	4550      	cmp	r0, sl
 8028d5e:	f280 8104 	bge.w	8028f6a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8028d62:	fa0f f38e 	sxth.w	r3, lr
 8028d66:	fb00 1103 	mla	r1, r0, r3, r1
 8028d6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8028d6c:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8028d70:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8028d74:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 8028d78:	f1bc 0f00 	cmp.w	ip, #0
 8028d7c:	d007      	beq.n	8028d8e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8028d7e:	005b      	lsls	r3, r3, #1
 8028d80:	eb0a 0003 	add.w	r0, sl, r3
 8028d84:	f83a 3003 	ldrh.w	r3, [sl, r3]
 8028d88:	930c      	str	r3, [sp, #48]	@ 0x30
 8028d8a:	8843      	ldrh	r3, [r0, #2]
 8028d8c:	930d      	str	r3, [sp, #52]	@ 0x34
 8028d8e:	fb12 f30c 	smulbb	r3, r2, ip
 8028d92:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8028d96:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8028d9a:	f42e 6efc 	bic.w	lr, lr, #2016	@ 0x7e0
 8028d9e:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028da2:	10db      	asrs	r3, r3, #3
 8028da4:	ea40 000e 	orr.w	r0, r0, lr
 8028da8:	f00a 6afc 	and.w	sl, sl, #132120576	@ 0x7e00000
 8028dac:	f1cc 0e10 	rsb	lr, ip, #16
 8028db0:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 8028db4:	ebae 0e02 	sub.w	lr, lr, r2
 8028db8:	ea4a 0101 	orr.w	r1, sl, r1
 8028dbc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8028dc0:	4351      	muls	r1, r2
 8028dc2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8028dc6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8028dc8:	fb0e 1e00 	mla	lr, lr, r0, r1
 8028dcc:	0410      	lsls	r0, r2, #16
 8028dce:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 8028dd2:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8028dd6:	4310      	orrs	r0, r2
 8028dd8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8028dda:	fb03 e000 	mla	r0, r3, r0, lr
 8028dde:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8028de0:	0412      	lsls	r2, r2, #16
 8028de2:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8028de6:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8028dea:	ea42 020e 	orr.w	r2, r2, lr
 8028dee:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8028df2:	fb03 0302 	mla	r3, r3, r2, r0
 8028df6:	f8b8 0000 	ldrh.w	r0, [r8]
 8028dfa:	9f08      	ldr	r7, [sp, #32]
 8028dfc:	0d5a      	lsrs	r2, r3, #21
 8028dfe:	1201      	asrs	r1, r0, #8
 8028e00:	095b      	lsrs	r3, r3, #5
 8028e02:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8028e06:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 8028e0a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8028e0e:	4313      	orrs	r3, r2
 8028e10:	fb11 f107 	smulbb	r1, r1, r7
 8028e14:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 8028e18:	00c0      	lsls	r0, r0, #3
 8028e1a:	b29b      	uxth	r3, r3
 8028e1c:	b2c0      	uxtb	r0, r0
 8028e1e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8028e22:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8028e26:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8028e2a:	fb10 f007 	smulbb	r0, r0, r7
 8028e2e:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8028e32:	fb1e fe07 	smulbb	lr, lr, r7
 8028e36:	fb0c 1c02 	mla	ip, ip, r2, r1
 8028e3a:	10d9      	asrs	r1, r3, #3
 8028e3c:	00db      	lsls	r3, r3, #3
 8028e3e:	b2db      	uxtb	r3, r3
 8028e40:	fb03 0302 	mla	r3, r3, r2, r0
 8028e44:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8028e48:	fb01 e102 	mla	r1, r1, r2, lr
 8028e4c:	fa1f fc8c 	uxth.w	ip, ip
 8028e50:	b29a      	uxth	r2, r3
 8028e52:	f10c 0301 	add.w	r3, ip, #1
 8028e56:	b289      	uxth	r1, r1
 8028e58:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8028e5c:	1c53      	adds	r3, r2, #1
 8028e5e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8028e62:	1c4a      	adds	r2, r1, #1
 8028e64:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8028e68:	f40c 4c78 	and.w	ip, ip, #63488	@ 0xf800
 8028e6c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8028e70:	0949      	lsrs	r1, r1, #5
 8028e72:	ea43 030c 	orr.w	r3, r3, ip
 8028e76:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 8028e7a:	430b      	orrs	r3, r1
 8028e7c:	f8a8 3000 	strh.w	r3, [r8]
 8028e80:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028e82:	f108 0802 	add.w	r8, r8, #2
 8028e86:	441c      	add	r4, r3
 8028e88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028e8a:	f109 39ff 	add.w	r9, r9, #4294967295
 8028e8e:	441e      	add	r6, r3
 8028e90:	e74a      	b.n	8028d28 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8028e92:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8028e94:	3d01      	subs	r5, #1
 8028e96:	441c      	add	r4, r3
 8028e98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8028e9a:	441e      	add	r6, r3
 8028e9c:	9b07      	ldr	r3, [sp, #28]
 8028e9e:	3302      	adds	r3, #2
 8028ea0:	9307      	str	r3, [sp, #28]
 8028ea2:	e722      	b.n	8028cea <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028ea4:	d022      	beq.n	8028eec <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8028ea6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8028ea8:	1e6b      	subs	r3, r5, #1
 8028eaa:	fb00 4003 	mla	r0, r0, r3, r4
 8028eae:	1400      	asrs	r0, r0, #16
 8028eb0:	f53f af37 	bmi.w	8028d22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028eb4:	3901      	subs	r1, #1
 8028eb6:	4288      	cmp	r0, r1
 8028eb8:	f6bf af33 	bge.w	8028d22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028ebc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8028ebe:	fb01 6303 	mla	r3, r1, r3, r6
 8028ec2:	141b      	asrs	r3, r3, #16
 8028ec4:	f53f af2d 	bmi.w	8028d22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028ec8:	3a01      	subs	r2, #1
 8028eca:	4293      	cmp	r3, r2
 8028ecc:	f6bf af29 	bge.w	8028d22 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8028ed0:	46a8      	mov	r8, r5
 8028ed2:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8028ed6:	f8bd a02c 	ldrh.w	sl, [sp, #44]	@ 0x2c
 8028eda:	f1b8 0f00 	cmp.w	r8, #0
 8028ede:	dc5e      	bgt.n	8028f9e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8028ee0:	9b07      	ldr	r3, [sp, #28]
 8028ee2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8028ee6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8028eea:	9307      	str	r3, [sp, #28]
 8028eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028eee:	2b00      	cmp	r3, #0
 8028ef0:	f340 80f6 	ble.w	80290e0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 8028ef4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8028ef8:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028efc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028f00:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028f04:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028f08:	eef0 6a62 	vmov.f32	s13, s5
 8028f0c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028f10:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028f14:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028f18:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028f20:	ee16 4a90 	vmov	r4, s13
 8028f24:	eef0 6a43 	vmov.f32	s13, s6
 8028f28:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028f2c:	ee12 2a90 	vmov	r2, s5
 8028f30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028f34:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028f36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028f3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f3e:	ee13 2a10 	vmov	r2, s6
 8028f42:	931f      	str	r3, [sp, #124]	@ 0x7c
 8028f44:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028f46:	ee16 6a90 	vmov	r6, s13
 8028f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8028f4e:	9320      	str	r3, [sp, #128]	@ 0x80
 8028f50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8028f52:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8028f54:	3b01      	subs	r3, #1
 8028f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8028f58:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8028f5a:	bf0c      	ite	eq
 8028f5c:	4615      	moveq	r5, r2
 8028f5e:	461d      	movne	r5, r3
 8028f60:	eeb0 3a67 	vmov.f32	s6, s15
 8028f64:	eef0 2a47 	vmov.f32	s5, s14
 8028f68:	e6b0      	b.n	8028ccc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8028f6a:	f111 0a01 	adds.w	sl, r1, #1
 8028f6e:	d487      	bmi.n	8028e80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f70:	45d6      	cmp	lr, sl
 8028f72:	db85      	blt.n	8028e80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f74:	f110 0a01 	adds.w	sl, r0, #1
 8028f78:	d482      	bmi.n	8028e80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f7a:	4553      	cmp	r3, sl
 8028f7c:	db80      	blt.n	8028e80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f7e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8028f80:	b21b      	sxth	r3, r3
 8028f82:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8028f86:	9101      	str	r1, [sp, #4]
 8028f88:	9300      	str	r3, [sp, #0]
 8028f8a:	e9cd c704 	strd	ip, r7, [sp, #16]
 8028f8e:	fa0f f38e 	sxth.w	r3, lr
 8028f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8028f94:	4641      	mov	r1, r8
 8028f96:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8028f98:	f7ff fdb4 	bl	8028b04 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8028f9c:	e770      	b.n	8028e80 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8028f9e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8028fa0:	1430      	asrs	r0, r6, #16
 8028fa2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028fa6:	1423      	asrs	r3, r4, #16
 8028fa8:	fb01 3000 	mla	r0, r1, r0, r3
 8028fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8028fae:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8028fb0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8028fb4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8028fb8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8028fbc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8028fc0:	8858      	ldrh	r0, [r3, #2]
 8028fc2:	f1be 0f00 	cmp.w	lr, #0
 8028fc6:	d00b      	beq.n	8028fe0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 8028fc8:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8028fcc:	3901      	subs	r1, #1
 8028fce:	0049      	lsls	r1, r1, #1
 8028fd0:	3102      	adds	r1, #2
 8028fd2:	eb03 0b01 	add.w	fp, r3, r1
 8028fd6:	5a5b      	ldrh	r3, [r3, r1]
 8028fd8:	930e      	str	r3, [sp, #56]	@ 0x38
 8028fda:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8028fde:	930f      	str	r3, [sp, #60]	@ 0x3c
 8028fe0:	fb12 f30e 	smulbb	r3, r2, lr
 8028fe4:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8028fe8:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8028fec:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8028ff0:	f001 61fc 	and.w	r1, r1, #132120576	@ 0x7e00000
 8028ff4:	10db      	asrs	r3, r3, #3
 8028ff6:	ea41 010c 	orr.w	r1, r1, ip
 8028ffa:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8028ffe:	f1ce 0c10 	rsb	ip, lr, #16
 8029002:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8029006:	ebac 0c02 	sub.w	ip, ip, r2
 802900a:	ea4b 0000 	orr.w	r0, fp, r0
 802900e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8029012:	4350      	muls	r0, r2
 8029014:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8029018:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802901a:	fb0c 0c01 	mla	ip, ip, r1, r0
 802901e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8029022:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 8029026:	f422 61fc 	bic.w	r1, r2, #2016	@ 0x7e0
 802902a:	ea4b 0101 	orr.w	r1, fp, r1
 802902e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8029030:	fb03 c101 	mla	r1, r3, r1, ip
 8029034:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8029036:	0412      	lsls	r2, r2, #16
 8029038:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802903c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8029040:	4302      	orrs	r2, r0
 8029042:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8029046:	fb03 1202 	mla	r2, r3, r2, r1
 802904a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 802904e:	0952      	lsrs	r2, r2, #5
 8029050:	f422 63fc 	bic.w	r3, r2, #2016	@ 0x7e0
 8029054:	f8b9 2000 	ldrh.w	r2, [r9]
 8029058:	9f08      	ldr	r7, [sp, #32]
 802905a:	1211      	asrs	r1, r2, #8
 802905c:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8029060:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8029064:	fb11 f107 	smulbb	r1, r1, r7
 8029068:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 802906c:	ea4b 0303 	orr.w	r3, fp, r3
 8029070:	00d2      	lsls	r2, r2, #3
 8029072:	b29b      	uxth	r3, r3
 8029074:	f00c 0cfc 	and.w	ip, ip, #252	@ 0xfc
 8029078:	b2d2      	uxtb	r2, r2
 802907a:	1218      	asrs	r0, r3, #8
 802907c:	fb1c fc07 	smulbb	ip, ip, r7
 8029080:	fb12 f207 	smulbb	r2, r2, r7
 8029084:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8029088:	fb00 100a 	mla	r0, r0, sl, r1
 802908c:	10d9      	asrs	r1, r3, #3
 802908e:	00db      	lsls	r3, r3, #3
 8029090:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 8029094:	b2db      	uxtb	r3, r3
 8029096:	fb01 c10a 	mla	r1, r1, sl, ip
 802909a:	fb03 230a 	mla	r3, r3, sl, r2
 802909e:	b280      	uxth	r0, r0
 80290a0:	b29b      	uxth	r3, r3
 80290a2:	b289      	uxth	r1, r1
 80290a4:	1c42      	adds	r2, r0, #1
 80290a6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80290aa:	f101 0c01 	add.w	ip, r1, #1
 80290ae:	1c5a      	adds	r2, r3, #1
 80290b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80290b4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80290b8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80290ba:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 80290be:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80290c2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80290c6:	4310      	orrs	r0, r2
 80290c8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 80290cc:	441c      	add	r4, r3
 80290ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80290d0:	ea40 000c 	orr.w	r0, r0, ip
 80290d4:	f829 0b02 	strh.w	r0, [r9], #2
 80290d8:	441e      	add	r6, r3
 80290da:	f108 38ff 	add.w	r8, r8, #4294967295
 80290de:	e6fc      	b.n	8028eda <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 80290e0:	b013      	add	sp, #76	@ 0x4c
 80290e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080290e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 80290e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80290ea:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 80290ee:	fb0e 4703 	mla	r7, lr, r3, r4
 80290f2:	f1be 0f00 	cmp.w	lr, #0
 80290f6:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 80290fa:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 80290fe:	f89d 602c 	ldrb.w	r6, [sp, #44]	@ 0x2c
 8029102:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8029106:	8808      	ldrh	r0, [r1, #0]
 8029108:	db60      	blt.n	80291cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802910a:	45f1      	cmp	r9, lr
 802910c:	dd5e      	ble.n	80291cc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 802910e:	2c00      	cmp	r4, #0
 8029110:	db5a      	blt.n	80291c8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8029112:	42a3      	cmp	r3, r4
 8029114:	dd58      	ble.n	80291c8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8029116:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802911a:	1c62      	adds	r2, r4, #1
 802911c:	d459      	bmi.n	80291d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 802911e:	4293      	cmp	r3, r2
 8029120:	dd57      	ble.n	80291d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8029122:	2d00      	cmp	r5, #0
 8029124:	d055      	beq.n	80291d2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8029126:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 802912a:	f11e 0e01 	adds.w	lr, lr, #1
 802912e:	d454      	bmi.n	80291da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8029130:	45f1      	cmp	r9, lr
 8029132:	dd52      	ble.n	80291da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8029134:	2e00      	cmp	r6, #0
 8029136:	d050      	beq.n	80291da <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8029138:	2c00      	cmp	r4, #0
 802913a:	db4c      	blt.n	80291d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 802913c:	42a3      	cmp	r3, r4
 802913e:	dd4a      	ble.n	80291d6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8029140:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8029144:	3401      	adds	r4, #1
 8029146:	d405      	bmi.n	8029154 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8029148:	42a3      	cmp	r3, r4
 802914a:	dd03      	ble.n	8029154 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802914c:	b115      	cbz	r5, 8029154 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 802914e:	3301      	adds	r3, #1
 8029150:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8029154:	fb15 f406 	smulbb	r4, r5, r6
 8029158:	ea4f 430c 	mov.w	r3, ip, lsl #16
 802915c:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8029160:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8029164:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 8029168:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 802916c:	ea43 0c0c 	orr.w	ip, r3, ip
 8029170:	f00e 6efc 	and.w	lr, lr, #132120576	@ 0x7e00000
 8029174:	f1c6 0310 	rsb	r3, r6, #16
 8029178:	f427 67fc 	bic.w	r7, r7, #2016	@ 0x7e0
 802917c:	1b5b      	subs	r3, r3, r5
 802917e:	ea4e 0707 	orr.w	r7, lr, r7
 8029182:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8029186:	437d      	muls	r5, r7
 8029188:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802918c:	fb03 5c0c 	mla	ip, r3, ip, r5
 8029190:	0403      	lsls	r3, r0, #16
 8029192:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 8029196:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 802919a:	4318      	orrs	r0, r3
 802919c:	fb04 c000 	mla	r0, r4, r0, ip
 80291a0:	0413      	lsls	r3, r2, #16
 80291a2:	f003 63fc 	and.w	r3, r3, #132120576	@ 0x7e00000
 80291a6:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 80291aa:	4313      	orrs	r3, r2
 80291ac:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 80291b0:	fb06 0003 	mla	r0, r6, r3, r0
 80291b4:	0d43      	lsrs	r3, r0, #21
 80291b6:	0940      	lsrs	r0, r0, #5
 80291b8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80291bc:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 80291c0:	4318      	orrs	r0, r3
 80291c2:	8008      	strh	r0, [r1, #0]
 80291c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80291c8:	4684      	mov	ip, r0
 80291ca:	e7a6      	b.n	802911a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 80291cc:	4607      	mov	r7, r0
 80291ce:	4684      	mov	ip, r0
 80291d0:	e7ab      	b.n	802912a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80291d2:	4607      	mov	r7, r0
 80291d4:	e7a9      	b.n	802912a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 80291d6:	4602      	mov	r2, r0
 80291d8:	e7b4      	b.n	8029144 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 80291da:	4602      	mov	r2, r0
 80291dc:	e7ba      	b.n	8029154 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

080291de <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80291de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291e2:	b08f      	sub	sp, #60	@ 0x3c
 80291e4:	461d      	mov	r5, r3
 80291e6:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	@ 0x64
 80291ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80291ec:	9107      	str	r1, [sp, #28]
 80291ee:	6859      	ldr	r1, [r3, #4]
 80291f0:	920c      	str	r2, [sp, #48]	@ 0x30
 80291f2:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	@ 0x78
 80291f6:	fb01 2707 	mla	r7, r1, r7, r2
 80291fa:	681b      	ldr	r3, [r3, #0]
 80291fc:	900d      	str	r0, [sp, #52]	@ 0x34
 80291fe:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8029202:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029204:	f8d3 8000 	ldr.w	r8, [r3]
 8029208:	9b07      	ldr	r3, [sp, #28]
 802920a:	2b00      	cmp	r3, #0
 802920c:	dc03      	bgt.n	8029216 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802920e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8029210:	2b00      	cmp	r3, #0
 8029212:	f340 8181 	ble.w	8029518 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8029216:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029218:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802921c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8029220:	1e48      	subs	r0, r1, #1
 8029222:	f102 3cff 	add.w	ip, r2, #4294967295
 8029226:	2d00      	cmp	r5, #0
 8029228:	f340 809b 	ble.w	8029362 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 802922c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8029230:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029234:	d406      	bmi.n	8029244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8029236:	4586      	cmp	lr, r0
 8029238:	da04      	bge.n	8029244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802923a:	2b00      	cmp	r3, #0
 802923c:	db02      	blt.n	8029244 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802923e:	4563      	cmp	r3, ip
 8029240:	f2c0 8090 	blt.w	8029364 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8029244:	f11e 0e01 	adds.w	lr, lr, #1
 8029248:	f100 8084 	bmi.w	8029354 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802924c:	4571      	cmp	r1, lr
 802924e:	f2c0 8081 	blt.w	8029354 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029252:	3301      	adds	r3, #1
 8029254:	d47e      	bmi.n	8029354 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8029256:	429a      	cmp	r2, r3
 8029258:	db7c      	blt.n	8029354 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 802925a:	46aa      	mov	sl, r5
 802925c:	46b9      	mov	r9, r7
 802925e:	f1ba 0f00 	cmp.w	sl, #0
 8029262:	f340 8099 	ble.w	8029398 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8029266:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029268:	1421      	asrs	r1, r4, #16
 802926a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802926e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029272:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8029276:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802927a:	f100 80d0 	bmi.w	802941e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802927e:	f10e 3bff 	add.w	fp, lr, #4294967295
 8029282:	4559      	cmp	r1, fp
 8029284:	f280 80cb 	bge.w	802941e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8029288:	2800      	cmp	r0, #0
 802928a:	f2c0 80c8 	blt.w	802941e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802928e:	f103 3bff 	add.w	fp, r3, #4294967295
 8029292:	4558      	cmp	r0, fp
 8029294:	f280 80c3 	bge.w	802941e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8029298:	fa0f fe8e 	sxth.w	lr, lr
 802929c:	fb00 110e 	mla	r1, r0, lr, r1
 80292a0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80292a4:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 80292a8:	8841      	ldrh	r1, [r0, #2]
 80292aa:	f1bc 0f00 	cmp.w	ip, #0
 80292ae:	d00b      	beq.n	80292c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 80292b0:	f10e 4300 	add.w	r3, lr, #2147483648	@ 0x80000000
 80292b4:	3b01      	subs	r3, #1
 80292b6:	005b      	lsls	r3, r3, #1
 80292b8:	3302      	adds	r3, #2
 80292ba:	eb00 0e03 	add.w	lr, r0, r3
 80292be:	5ac3      	ldrh	r3, [r0, r3]
 80292c0:	9308      	str	r3, [sp, #32]
 80292c2:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80292c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80292c8:	fb12 f30c 	smulbb	r3, r2, ip
 80292cc:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80292d0:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80292d4:	f42b 6bfc 	bic.w	fp, fp, #2016	@ 0x7e0
 80292d8:	ea40 000b 	orr.w	r0, r0, fp
 80292dc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80292e0:	10db      	asrs	r3, r3, #3
 80292e2:	f1cc 0e10 	rsb	lr, ip, #16
 80292e6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80292ea:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80292ee:	ebae 0e02 	sub.w	lr, lr, r2
 80292f2:	ea4b 0101 	orr.w	r1, fp, r1
 80292f6:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80292fa:	4351      	muls	r1, r2
 80292fc:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8029300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029302:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029306:	0410      	lsls	r0, r2, #16
 8029308:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 802930c:	f422 62fc 	bic.w	r2, r2, #2016	@ 0x7e0
 8029310:	4310      	orrs	r0, r2
 8029312:	9a08      	ldr	r2, [sp, #32]
 8029314:	fb03 e000 	mla	r0, r3, r0, lr
 8029318:	9908      	ldr	r1, [sp, #32]
 802931a:	0412      	lsls	r2, r2, #16
 802931c:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 8029320:	f421 6efc 	bic.w	lr, r1, #2016	@ 0x7e0
 8029324:	ea42 020e 	orr.w	r2, r2, lr
 8029328:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 802932c:	fb03 0302 	mla	r3, r3, r2, r0
 8029330:	0d5a      	lsrs	r2, r3, #21
 8029332:	095b      	lsrs	r3, r3, #5
 8029334:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029338:	f423 63fc 	bic.w	r3, r3, #2016	@ 0x7e0
 802933c:	4313      	orrs	r3, r2
 802933e:	f8a9 3000 	strh.w	r3, [r9]
 8029342:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029344:	f109 0902 	add.w	r9, r9, #2
 8029348:	441c      	add	r4, r3
 802934a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802934c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8029350:	441e      	add	r6, r3
 8029352:	e784      	b.n	802925e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8029354:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029356:	3d01      	subs	r5, #1
 8029358:	441c      	add	r4, r3
 802935a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802935c:	3702      	adds	r7, #2
 802935e:	441e      	add	r6, r3
 8029360:	e761      	b.n	8029226 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8029362:	d01d      	beq.n	80293a0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8029364:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8029366:	1e6b      	subs	r3, r5, #1
 8029368:	fb00 4003 	mla	r0, r0, r3, r4
 802936c:	1400      	asrs	r0, r0, #16
 802936e:	f53f af74 	bmi.w	802925a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029372:	3901      	subs	r1, #1
 8029374:	4288      	cmp	r0, r1
 8029376:	f6bf af70 	bge.w	802925a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802937a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 802937c:	fb01 6303 	mla	r3, r1, r3, r6
 8029380:	141b      	asrs	r3, r3, #16
 8029382:	f53f af6a 	bmi.w	802925a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8029386:	3a01      	subs	r2, #1
 8029388:	4293      	cmp	r3, r2
 802938a:	f6bf af66 	bge.w	802925a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802938e:	46a9      	mov	r9, r5
 8029390:	46ba      	mov	sl, r7
 8029392:	f1b9 0f00 	cmp.w	r9, #0
 8029396:	dc5a      	bgt.n	802944e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 8029398:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802939c:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 80293a0:	9b07      	ldr	r3, [sp, #28]
 80293a2:	2b00      	cmp	r3, #0
 80293a4:	f340 80b8 	ble.w	8029518 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80293a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80293ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80293b0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80293b4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80293b8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80293bc:	eef0 6a62 	vmov.f32	s13, s5
 80293c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80293c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80293c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80293cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80293d4:	ee16 4a90 	vmov	r4, s13
 80293d8:	eef0 6a43 	vmov.f32	s13, s6
 80293dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80293e0:	ee12 2a90 	vmov	r2, s5
 80293e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80293e8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80293ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80293ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80293f2:	ee13 2a10 	vmov	r2, s6
 80293f6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80293f8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80293fa:	ee16 6a90 	vmov	r6, s13
 80293fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8029402:	931c      	str	r3, [sp, #112]	@ 0x70
 8029404:	9b07      	ldr	r3, [sp, #28]
 8029406:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8029408:	3b01      	subs	r3, #1
 802940a:	9307      	str	r3, [sp, #28]
 802940c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802940e:	bf0c      	ite	eq
 8029410:	4615      	moveq	r5, r2
 8029412:	461d      	movne	r5, r3
 8029414:	eeb0 3a67 	vmov.f32	s6, s15
 8029418:	eef0 2a47 	vmov.f32	s5, s14
 802941c:	e6f4      	b.n	8029208 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 802941e:	f111 0b01 	adds.w	fp, r1, #1
 8029422:	d48e      	bmi.n	8029342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029424:	45de      	cmp	lr, fp
 8029426:	db8c      	blt.n	8029342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029428:	f110 0b01 	adds.w	fp, r0, #1
 802942c:	d489      	bmi.n	8029342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802942e:	455b      	cmp	r3, fp
 8029430:	db87      	blt.n	8029342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8029432:	b21b      	sxth	r3, r3
 8029434:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8029438:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 802943c:	9300      	str	r3, [sp, #0]
 802943e:	4642      	mov	r2, r8
 8029440:	fa0f f38e 	sxth.w	r3, lr
 8029444:	4649      	mov	r1, r9
 8029446:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8029448:	f7ff fe4d 	bl	80290e6 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 802944c:	e779      	b.n	8029342 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 802944e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8029450:	1420      	asrs	r0, r4, #16
 8029452:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8029456:	1431      	asrs	r1, r6, #16
 8029458:	fb03 0101 	mla	r1, r3, r1, r0
 802945c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8029460:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8029464:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8029468:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802946c:	8841      	ldrh	r1, [r0, #2]
 802946e:	f1be 0f00 	cmp.w	lr, #0
 8029472:	d00b      	beq.n	802948c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8029474:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8029478:	3b01      	subs	r3, #1
 802947a:	005b      	lsls	r3, r3, #1
 802947c:	3302      	adds	r3, #2
 802947e:	eb00 0b03 	add.w	fp, r0, r3
 8029482:	5ac3      	ldrh	r3, [r0, r3]
 8029484:	930a      	str	r3, [sp, #40]	@ 0x28
 8029486:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802948a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802948c:	fb12 f30e 	smulbb	r3, r2, lr
 8029490:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8029494:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8029498:	f42c 6cfc 	bic.w	ip, ip, #2016	@ 0x7e0
 802949c:	f000 60fc 	and.w	r0, r0, #132120576	@ 0x7e00000
 80294a0:	10db      	asrs	r3, r3, #3
 80294a2:	ea40 000c 	orr.w	r0, r0, ip
 80294a6:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80294aa:	f1ce 0c10 	rsb	ip, lr, #16
 80294ae:	f421 61fc 	bic.w	r1, r1, #2016	@ 0x7e0
 80294b2:	ebac 0c02 	sub.w	ip, ip, r2
 80294b6:	ea4b 0101 	orr.w	r1, fp, r1
 80294ba:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80294be:	4351      	muls	r1, r2
 80294c0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 80294c4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80294c6:	fb0c 1c00 	mla	ip, ip, r0, r1
 80294ca:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80294ce:	f00b 6bfc 	and.w	fp, fp, #132120576	@ 0x7e00000
 80294d2:	f422 60fc 	bic.w	r0, r2, #2016	@ 0x7e0
 80294d6:	ea4b 0000 	orr.w	r0, fp, r0
 80294da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80294dc:	fb03 c000 	mla	r0, r3, r0, ip
 80294e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80294e2:	0412      	lsls	r2, r2, #16
 80294e4:	f002 62fc 	and.w	r2, r2, #132120576	@ 0x7e00000
 80294e8:	f421 6bfc 	bic.w	fp, r1, #2016	@ 0x7e0
 80294ec:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80294f0:	ea42 0b0b 	orr.w	fp, r2, fp
 80294f4:	fb03 000b 	mla	r0, r3, fp, r0
 80294f8:	0d43      	lsrs	r3, r0, #21
 80294fa:	0940      	lsrs	r0, r0, #5
 80294fc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029500:	f420 60fc 	bic.w	r0, r0, #2016	@ 0x7e0
 8029504:	4318      	orrs	r0, r3
 8029506:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8029508:	f82a 0b02 	strh.w	r0, [sl], #2
 802950c:	441c      	add	r4, r3
 802950e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8029510:	f109 39ff 	add.w	r9, r9, #4294967295
 8029514:	441e      	add	r6, r3
 8029516:	e73c      	b.n	8029392 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8029518:	b00f      	add	sp, #60	@ 0x3c
 802951a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802951e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 802951e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029522:	b085      	sub	sp, #20
 8029524:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8029528:	9102      	str	r1, [sp, #8]
 802952a:	fb04 7103 	mla	r1, r4, r3, r7
 802952e:	2c00      	cmp	r4, #0
 8029530:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8029534:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8029538:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 802953c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8029540:	f2c0 811b 	blt.w	802977a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8029544:	45a6      	cmp	lr, r4
 8029546:	f340 8118 	ble.w	802977a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 802954a:	2f00      	cmp	r7, #0
 802954c:	f2c0 8113 	blt.w	8029776 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8029550:	42bb      	cmp	r3, r7
 8029552:	f340 8110 	ble.w	8029776 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8029556:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 802955a:	1c7a      	adds	r2, r7, #1
 802955c:	f100 8110 	bmi.w	8029780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8029560:	4293      	cmp	r3, r2
 8029562:	f340 810d 	ble.w	8029780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8029566:	2e00      	cmp	r6, #0
 8029568:	f000 810c 	beq.w	8029784 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 802956c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029570:	3401      	adds	r4, #1
 8029572:	f100 810b 	bmi.w	802978c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8029576:	45a6      	cmp	lr, r4
 8029578:	f340 8108 	ble.w	802978c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 802957c:	2800      	cmp	r0, #0
 802957e:	f000 8108 	beq.w	8029792 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 8029582:	2f00      	cmp	r7, #0
 8029584:	f2c0 8100 	blt.w	8029788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8029588:	42bb      	cmp	r3, r7
 802958a:	f340 80fd 	ble.w	8029788 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 802958e:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029592:	3701      	adds	r7, #1
 8029594:	f100 8100 	bmi.w	8029798 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8029598:	42bb      	cmp	r3, r7
 802959a:	f340 80fd 	ble.w	8029798 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 802959e:	2e00      	cmp	r6, #0
 80295a0:	f000 80fc 	beq.w	802979c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 80295a4:	3301      	adds	r3, #1
 80295a6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80295aa:	b2b6      	uxth	r6, r6
 80295ac:	b280      	uxth	r0, r0
 80295ae:	fb00 fe06 	mul.w	lr, r0, r6
 80295b2:	0136      	lsls	r6, r6, #4
 80295b4:	eba6 070e 	sub.w	r7, r6, lr
 80295b8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80295bc:	b2bf      	uxth	r7, r7
 80295be:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 80295c2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80295c6:	fb0a f607 	mul.w	r6, sl, r7
 80295ca:	b280      	uxth	r0, r0
 80295cc:	1a1b      	subs	r3, r3, r0
 80295ce:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80295d2:	b29b      	uxth	r3, r3
 80295d4:	fb0b 6603 	mla	r6, fp, r3, r6
 80295d8:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80295dc:	fb00 6609 	mla	r6, r0, r9, r6
 80295e0:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80295e4:	fb0e 6608 	mla	r6, lr, r8, r6
 80295e8:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80295ec:	9600      	str	r6, [sp, #0]
 80295ee:	2e00      	cmp	r6, #0
 80295f0:	f000 80be 	beq.w	8029770 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 80295f4:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 80295f8:	fb0b fc0c 	mul.w	ip, fp, ip
 80295fc:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029600:	fb0b f505 	mul.w	r5, fp, r5
 8029604:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029608:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 802960c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029610:	44dc      	add	ip, fp
 8029612:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029616:	9501      	str	r5, [sp, #4]
 8029618:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 802961c:	9503      	str	r5, [sp, #12]
 802961e:	9d01      	ldr	r5, [sp, #4]
 8029620:	9e02      	ldr	r6, [sp, #8]
 8029622:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8029626:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 802962a:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 802962e:	fb0a fc0c 	mul.w	ip, sl, ip
 8029632:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029636:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802963a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802963e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029642:	4465      	add	r5, ip
 8029644:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8029648:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802964c:	fb09 fc0c 	mul.w	ip, r9, ip
 8029650:	fb09 f904 	mul.w	r9, r9, r4
 8029654:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 8029658:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802965c:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 8029660:	fb08 f404 	mul.w	r4, r8, r4
 8029664:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029668:	fb08 f802 	mul.w	r8, r8, r2
 802966c:	0a2d      	lsrs	r5, r5, #8
 802966e:	0a22      	lsrs	r2, r4, #8
 8029670:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8029674:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029678:	437d      	muls	r5, r7
 802967a:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802967e:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 8029682:	4414      	add	r4, r2
 8029684:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8029688:	fb0a fa01 	mul.w	sl, sl, r1
 802968c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8029690:	9a03      	ldr	r2, [sp, #12]
 8029692:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 8029696:	fb02 5503 	mla	r5, r2, r3, r5
 802969a:	0a24      	lsrs	r4, r4, #8
 802969c:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80296a0:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 80296a4:	ea4f 211c 	mov.w	r1, ip, lsr #8
 80296a8:	fb04 540e 	mla	r4, r4, lr, r5
 80296ac:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80296b0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80296b4:	4461      	add	r1, ip
 80296b6:	0a09      	lsrs	r1, r1, #8
 80296b8:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 80296bc:	fb01 4100 	mla	r1, r1, r0, r4
 80296c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80296c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80296c8:	fb07 f70a 	mul.w	r7, r7, sl
 80296cc:	0a09      	lsrs	r1, r1, #8
 80296ce:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 80296d2:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 80296d6:	fb03 7101 	mla	r1, r3, r1, r7
 80296da:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80296de:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 80296e2:	fb0e 1e08 	mla	lr, lr, r8, r1
 80296e6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80296ea:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 80296ee:	fb00 e101 	mla	r1, r0, r1, lr
 80296f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80296f6:	9a00      	ldr	r2, [sp, #0]
 80296f8:	b287      	uxth	r7, r0
 80296fa:	437a      	muls	r2, r7
 80296fc:	1c53      	adds	r3, r2, #1
 80296fe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8029702:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 8029706:	0a09      	lsrs	r1, r1, #8
 8029708:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802970c:	4321      	orrs	r1, r4
 802970e:	0c0a      	lsrs	r2, r1, #16
 8029710:	8836      	ldrh	r6, [r6, #0]
 8029712:	fb12 f207 	smulbb	r2, r2, r7
 8029716:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802971a:	b2c8      	uxtb	r0, r1
 802971c:	1235      	asrs	r5, r6, #8
 802971e:	fb14 f407 	smulbb	r4, r4, r7
 8029722:	fb10 f007 	smulbb	r0, r0, r7
 8029726:	b2db      	uxtb	r3, r3
 8029728:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 802972c:	fb05 2503 	mla	r5, r5, r3, r2
 8029730:	10f2      	asrs	r2, r6, #3
 8029732:	00f6      	lsls	r6, r6, #3
 8029734:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8029738:	b2f6      	uxtb	r6, r6
 802973a:	fb02 4203 	mla	r2, r2, r3, r4
 802973e:	fb06 0303 	mla	r3, r6, r3, r0
 8029742:	b2ad      	uxth	r5, r5
 8029744:	b299      	uxth	r1, r3
 8029746:	b294      	uxth	r4, r2
 8029748:	1c6b      	adds	r3, r5, #1
 802974a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802974e:	1c62      	adds	r2, r4, #1
 8029750:	1c4b      	adds	r3, r1, #1
 8029752:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8029756:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 802975a:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802975e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029762:	0952      	lsrs	r2, r2, #5
 8029764:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029768:	432b      	orrs	r3, r5
 802976a:	4313      	orrs	r3, r2
 802976c:	9a02      	ldr	r2, [sp, #8]
 802976e:	8013      	strh	r3, [r2, #0]
 8029770:	b005      	add	sp, #20
 8029772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029776:	2500      	movs	r5, #0
 8029778:	e6ef      	b.n	802955a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 802977a:	2100      	movs	r1, #0
 802977c:	460d      	mov	r5, r1
 802977e:	e6f7      	b.n	8029570 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029780:	2100      	movs	r1, #0
 8029782:	e6f5      	b.n	8029570 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029784:	4631      	mov	r1, r6
 8029786:	e6f3      	b.n	8029570 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8029788:	2400      	movs	r4, #0
 802978a:	e702      	b.n	8029592 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 802978c:	2200      	movs	r2, #0
 802978e:	4614      	mov	r4, r2
 8029790:	e70b      	b.n	80295aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8029792:	4602      	mov	r2, r0
 8029794:	4604      	mov	r4, r0
 8029796:	e708      	b.n	80295aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8029798:	2200      	movs	r2, #0
 802979a:	e706      	b.n	80295aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802979c:	4632      	mov	r2, r6
 802979e:	e704      	b.n	80295aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

080297a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80297a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80297a4:	b09d      	sub	sp, #116	@ 0x74
 80297a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80297a8:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 80297aa:	901b      	str	r0, [sp, #108]	@ 0x6c
 80297ac:	9307      	str	r3, [sp, #28]
 80297ae:	6850      	ldr	r0, [r2, #4]
 80297b0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 80297b4:	9117      	str	r1, [sp, #92]	@ 0x5c
 80297b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80297b8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 80297bc:	fb00 1303 	mla	r3, r0, r3, r1
 80297c0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	@ 0x9c
 80297c4:	6812      	ldr	r2, [r2, #0]
 80297c6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80297ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80297cc:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80297ce:	681b      	ldr	r3, [r3, #0]
 80297d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80297d2:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80297d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80297d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80297da:	2b00      	cmp	r3, #0
 80297dc:	dc03      	bgt.n	80297e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80297de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80297e0:	2b00      	cmp	r3, #0
 80297e2:	f340 8375 	ble.w	8029ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 80297e6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80297e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80297ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80297f0:	1e48      	subs	r0, r1, #1
 80297f2:	1e57      	subs	r7, r2, #1
 80297f4:	9b07      	ldr	r3, [sp, #28]
 80297f6:	2b00      	cmp	r3, #0
 80297f8:	f340 818e 	ble.w	8029b18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 80297fc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8029800:	ea4f 4326 	mov.w	r3, r6, asr #16
 8029804:	d406      	bmi.n	8029814 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8029806:	4584      	cmp	ip, r0
 8029808:	da04      	bge.n	8029814 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802980a:	2b00      	cmp	r3, #0
 802980c:	db02      	blt.n	8029814 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802980e:	42bb      	cmp	r3, r7
 8029810:	f2c0 8183 	blt.w	8029b1a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8029814:	f11c 0c01 	adds.w	ip, ip, #1
 8029818:	f100 8173 	bmi.w	8029b02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802981c:	4561      	cmp	r1, ip
 802981e:	f2c0 8170 	blt.w	8029b02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029822:	3301      	adds	r3, #1
 8029824:	f100 816d 	bmi.w	8029b02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 8029828:	429a      	cmp	r2, r3
 802982a:	f2c0 816a 	blt.w	8029b02 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 802982e:	9b07      	ldr	r3, [sp, #28]
 8029830:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8029832:	9318      	str	r3, [sp, #96]	@ 0x60
 8029834:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029836:	2b00      	cmp	r3, #0
 8029838:	f340 818c 	ble.w	8029b54 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 802983c:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 802983e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029840:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8029844:	1422      	asrs	r2, r4, #16
 8029846:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802984a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802984e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8029852:	689b      	ldr	r3, [r3, #8]
 8029854:	f100 81cd 	bmi.w	8029bf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029858:	f103 38ff 	add.w	r8, r3, #4294967295
 802985c:	4542      	cmp	r2, r8
 802985e:	f280 81c8 	bge.w	8029bf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029862:	f1bc 0f00 	cmp.w	ip, #0
 8029866:	f2c0 81c4 	blt.w	8029bf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802986a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802986e:	45c4      	cmp	ip, r8
 8029870:	f280 81bf 	bge.w	8029bf2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8029874:	b21b      	sxth	r3, r3
 8029876:	fb0c 2203 	mla	r2, ip, r3, r2
 802987a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802987c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8029880:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8029884:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8029888:	2800      	cmp	r0, #0
 802988a:	f000 81a9 	beq.w	8029be0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 802988e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8029892:	950c      	str	r5, [sp, #48]	@ 0x30
 8029894:	0e2d      	lsrs	r5, r5, #24
 8029896:	9513      	str	r5, [sp, #76]	@ 0x4c
 8029898:	b181      	cbz	r1, 80298bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802989a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802989e:	3b01      	subs	r3, #1
 80298a0:	009b      	lsls	r3, r3, #2
 80298a2:	3304      	adds	r3, #4
 80298a4:	eb08 0c03 	add.w	ip, r8, r3
 80298a8:	f858 3003 	ldr.w	r3, [r8, r3]
 80298ac:	9308      	str	r3, [sp, #32]
 80298ae:	0e1b      	lsrs	r3, r3, #24
 80298b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80298b2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80298b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80298b8:	0e1b      	lsrs	r3, r3, #24
 80298ba:	9314      	str	r3, [sp, #80]	@ 0x50
 80298bc:	b280      	uxth	r0, r0
 80298be:	b289      	uxth	r1, r1
 80298c0:	fb00 f901 	mul.w	r9, r0, r1
 80298c4:	0100      	lsls	r0, r0, #4
 80298c6:	eba0 0809 	sub.w	r8, r0, r9
 80298ca:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 80298ce:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80298d0:	fa1f f888 	uxth.w	r8, r8
 80298d4:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80298d8:	fb08 f000 	mul.w	r0, r8, r0
 80298dc:	b289      	uxth	r1, r1
 80298de:	1a5b      	subs	r3, r3, r1
 80298e0:	b29b      	uxth	r3, r3
 80298e2:	fb03 000e 	mla	r0, r3, lr, r0
 80298e6:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80298e8:	fb01 0005 	mla	r0, r1, r5, r0
 80298ec:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80298ee:	fb09 0005 	mla	r0, r9, r5, r0
 80298f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80298f6:	2800      	cmp	r0, #0
 80298f8:	f000 80fa 	beq.w	8029af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80298fc:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8029900:	d01b      	beq.n	802993a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8029902:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 8029906:	fb0e fa0a 	mul.w	sl, lr, sl
 802990a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802990e:	fb0e fe02 	mul.w	lr, lr, r2
 8029912:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8029916:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802991a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802991e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8029922:	4452      	add	r2, sl
 8029924:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8029928:	0a12      	lsrs	r2, r2, #8
 802992a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802992e:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8029932:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029936:	ea42 020c 	orr.w	r2, r2, ip
 802993a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802993c:	2dff      	cmp	r5, #255	@ 0xff
 802993e:	d021      	beq.n	8029984 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8029940:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029942:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029946:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029948:	fb05 fb0b 	mul.w	fp, r5, fp
 802994c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802994e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8029952:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029956:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8029958:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802995c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029960:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8029964:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8029968:	44de      	add	lr, fp
 802996a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802996e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029972:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029976:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802997a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802997e:	ea4e 050a 	orr.w	r5, lr, sl
 8029982:	950c      	str	r5, [sp, #48]	@ 0x30
 8029984:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029986:	2dff      	cmp	r5, #255	@ 0xff
 8029988:	d021      	beq.n	80299ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802998a:	9d08      	ldr	r5, [sp, #32]
 802998c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8029990:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8029992:	fb05 fb0b 	mul.w	fp, r5, fp
 8029996:	9d08      	ldr	r5, [sp, #32]
 8029998:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802999c:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80299a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80299a2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80299a6:	fb05 fa0a 	mul.w	sl, r5, sl
 80299aa:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80299ae:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80299b2:	44de      	add	lr, fp
 80299b4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80299b8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80299bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80299c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80299c4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80299c8:	ea4e 050a 	orr.w	r5, lr, sl
 80299cc:	9508      	str	r5, [sp, #32]
 80299ce:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80299d0:	2dff      	cmp	r5, #255	@ 0xff
 80299d2:	d021      	beq.n	8029a18 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80299d4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80299d6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 80299da:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80299dc:	fb05 fb0b 	mul.w	fp, r5, fp
 80299e0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80299e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80299e6:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 80299ea:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80299ec:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80299f0:	fb05 fa0a 	mul.w	sl, r5, sl
 80299f4:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80299f8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80299fc:	44de      	add	lr, fp
 80299fe:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8029a02:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8029a06:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029a0a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8029a0e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029a12:	ea4e 050a 	orr.w	r5, lr, sl
 8029a16:	950d      	str	r5, [sp, #52]	@ 0x34
 8029a18:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029a1a:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8029a1e:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029a22:	fb08 fc0c 	mul.w	ip, r8, ip
 8029a26:	fb03 cc0e 	mla	ip, r3, lr, ip
 8029a2a:	9d08      	ldr	r5, [sp, #32]
 8029a2c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8029a30:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029a34:	fb01 cc0e 	mla	ip, r1, lr, ip
 8029a38:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8029a3a:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 8029a3e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8029a40:	fb09 cc0e 	mla	ip, r9, lr, ip
 8029a44:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8029a48:	fb08 f80e 	mul.w	r8, r8, lr
 8029a4c:	fb03 8202 	mla	r2, r3, r2, r8
 8029a50:	9b08      	ldr	r3, [sp, #32]
 8029a52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029a56:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 8029a5a:	fb01 220a 	mla	r2, r1, sl, r2
 8029a5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8029a60:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029a64:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8029a68:	fb09 2901 	mla	r9, r9, r1, r2
 8029a6c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8029a6e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8029a72:	4342      	muls	r2, r0
 8029a74:	1c50      	adds	r0, r2, #1
 8029a76:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8029a7a:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8029a7e:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8029a82:	ea4c 0c09 	orr.w	ip, ip, r9
 8029a86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029a88:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8029a8c:	883b      	ldrh	r3, [r7, #0]
 8029a8e:	fb12 f205 	smulbb	r2, r2, r5
 8029a92:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8029a96:	fa5f fc8c 	uxtb.w	ip, ip
 8029a9a:	1219      	asrs	r1, r3, #8
 8029a9c:	fb1c fc05 	smulbb	ip, ip, r5
 8029aa0:	b2c0      	uxtb	r0, r0
 8029aa2:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8029aa6:	fb01 2100 	mla	r1, r1, r0, r2
 8029aaa:	10da      	asrs	r2, r3, #3
 8029aac:	00db      	lsls	r3, r3, #3
 8029aae:	fb1e fe05 	smulbb	lr, lr, r5
 8029ab2:	b2db      	uxtb	r3, r3
 8029ab4:	fb03 c300 	mla	r3, r3, r0, ip
 8029ab8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8029abc:	b289      	uxth	r1, r1
 8029abe:	fb02 e200 	mla	r2, r2, r0, lr
 8029ac2:	fa1f fc83 	uxth.w	ip, r3
 8029ac6:	1c4b      	adds	r3, r1, #1
 8029ac8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029acc:	f10c 0301 	add.w	r3, ip, #1
 8029ad0:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8029ad4:	b292      	uxth	r2, r2
 8029ad6:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8029ada:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8029ade:	430b      	orrs	r3, r1
 8029ae0:	1c51      	adds	r1, r2, #1
 8029ae2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029ae6:	0952      	lsrs	r2, r2, #5
 8029ae8:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8029aec:	4313      	orrs	r3, r2
 8029aee:	803b      	strh	r3, [r7, #0]
 8029af0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8029af2:	3702      	adds	r7, #2
 8029af4:	441c      	add	r4, r3
 8029af6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029af8:	441e      	add	r6, r3
 8029afa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8029afc:	3b01      	subs	r3, #1
 8029afe:	9318      	str	r3, [sp, #96]	@ 0x60
 8029b00:	e698      	b.n	8029834 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8029b02:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8029b04:	441c      	add	r4, r3
 8029b06:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029b08:	441e      	add	r6, r3
 8029b0a:	9b07      	ldr	r3, [sp, #28]
 8029b0c:	3b01      	subs	r3, #1
 8029b0e:	9307      	str	r3, [sp, #28]
 8029b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029b12:	3302      	adds	r3, #2
 8029b14:	930a      	str	r3, [sp, #40]	@ 0x28
 8029b16:	e66d      	b.n	80297f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8029b18:	d023      	beq.n	8029b62 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8029b1a:	9b07      	ldr	r3, [sp, #28]
 8029b1c:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8029b1e:	3b01      	subs	r3, #1
 8029b20:	fb00 4003 	mla	r0, r0, r3, r4
 8029b24:	1400      	asrs	r0, r0, #16
 8029b26:	f53f ae82 	bmi.w	802982e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029b2a:	3901      	subs	r1, #1
 8029b2c:	4288      	cmp	r0, r1
 8029b2e:	f6bf ae7e 	bge.w	802982e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029b32:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8029b34:	fb01 6303 	mla	r3, r1, r3, r6
 8029b38:	141b      	asrs	r3, r3, #16
 8029b3a:	f53f ae78 	bmi.w	802982e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029b3e:	3a01      	subs	r2, #1
 8029b40:	4293      	cmp	r3, r2
 8029b42:	f6bf ae74 	bge.w	802982e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8029b46:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8029b4a:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8029b4e:	f1bb 0f00 	cmp.w	fp, #0
 8029b52:	dc6c      	bgt.n	8029c2e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8029b54:	9b07      	ldr	r3, [sp, #28]
 8029b56:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8029b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8029b5c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8029b60:	930a      	str	r3, [sp, #40]	@ 0x28
 8029b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029b64:	2b00      	cmp	r3, #0
 8029b66:	f340 81b3 	ble.w	8029ed0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8029b6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8029b6e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029b72:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029b76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8029b7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8029b7e:	eef0 6a62 	vmov.f32	s13, s5
 8029b82:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029b86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029b8a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8029b8e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029b92:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8029b96:	ee16 4a90 	vmov	r4, s13
 8029b9a:	eef0 6a43 	vmov.f32	s13, s6
 8029b9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029ba2:	ee12 2a90 	vmov	r2, s5
 8029ba6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8029baa:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029bac:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029bb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8029bb4:	ee13 2a10 	vmov	r2, s6
 8029bb8:	9329      	str	r3, [sp, #164]	@ 0xa4
 8029bba:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029bbc:	ee16 6a90 	vmov	r6, s13
 8029bc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8029bc4:	932a      	str	r3, [sp, #168]	@ 0xa8
 8029bc6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8029bc8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8029bca:	3b01      	subs	r3, #1
 8029bcc:	9317      	str	r3, [sp, #92]	@ 0x5c
 8029bce:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8029bd0:	bf08      	it	eq
 8029bd2:	4613      	moveq	r3, r2
 8029bd4:	eeb0 3a67 	vmov.f32	s6, s15
 8029bd8:	9307      	str	r3, [sp, #28]
 8029bda:	eef0 2a47 	vmov.f32	s5, s14
 8029bde:	e5fb      	b.n	80297d8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8029be0:	2900      	cmp	r1, #0
 8029be2:	f43f ae6b 	beq.w	80298bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029be6:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8029bea:	9308      	str	r3, [sp, #32]
 8029bec:	0e1b      	lsrs	r3, r3, #24
 8029bee:	9311      	str	r3, [sp, #68]	@ 0x44
 8029bf0:	e664      	b.n	80298bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8029bf2:	f112 0801 	adds.w	r8, r2, #1
 8029bf6:	f53f af7b 	bmi.w	8029af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029bfa:	4543      	cmp	r3, r8
 8029bfc:	f6ff af78 	blt.w	8029af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029c00:	f11c 0801 	adds.w	r8, ip, #1
 8029c04:	f53f af74 	bmi.w	8029af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029c08:	45c6      	cmp	lr, r8
 8029c0a:	f6ff af71 	blt.w	8029af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029c0e:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8029c10:	9201      	str	r2, [sp, #4]
 8029c12:	fa0f f28e 	sxth.w	r2, lr
 8029c16:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8029c1a:	e9cd c002 	strd	ip, r0, [sp, #8]
 8029c1e:	9200      	str	r2, [sp, #0]
 8029c20:	b21b      	sxth	r3, r3
 8029c22:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8029c24:	4639      	mov	r1, r7
 8029c26:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8029c28:	f7ff fc79 	bl	802951e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 8029c2c:	e760      	b.n	8029af0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8029c2e:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8029c30:	1427      	asrs	r7, r4, #16
 8029c32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8029c36:	1433      	asrs	r3, r6, #16
 8029c38:	fb01 7303 	mla	r3, r1, r3, r7
 8029c3c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8029c3e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8029c42:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 8029c46:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029c4a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8029c4e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8029c52:	2a00      	cmp	r2, #0
 8029c54:	f000 8133 	beq.w	8029ebe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 8029c58:	687d      	ldr	r5, [r7, #4]
 8029c5a:	950e      	str	r5, [sp, #56]	@ 0x38
 8029c5c:	0e2d      	lsrs	r5, r5, #24
 8029c5e:	9515      	str	r5, [sp, #84]	@ 0x54
 8029c60:	b178      	cbz	r0, 8029c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029c62:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8029c66:	3901      	subs	r1, #1
 8029c68:	0089      	lsls	r1, r1, #2
 8029c6a:	3104      	adds	r1, #4
 8029c6c:	eb07 0e01 	add.w	lr, r7, r1
 8029c70:	5879      	ldr	r1, [r7, r1]
 8029c72:	9109      	str	r1, [sp, #36]	@ 0x24
 8029c74:	0e09      	lsrs	r1, r1, #24
 8029c76:	9112      	str	r1, [sp, #72]	@ 0x48
 8029c78:	f8de 1004 	ldr.w	r1, [lr, #4]
 8029c7c:	910f      	str	r1, [sp, #60]	@ 0x3c
 8029c7e:	0e09      	lsrs	r1, r1, #24
 8029c80:	9116      	str	r1, [sp, #88]	@ 0x58
 8029c82:	b292      	uxth	r2, r2
 8029c84:	b280      	uxth	r0, r0
 8029c86:	fb02 f800 	mul.w	r8, r2, r0
 8029c8a:	0112      	lsls	r2, r2, #4
 8029c8c:	eba2 0e08 	sub.w	lr, r2, r8
 8029c90:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8029c92:	fa1f fe8e 	uxth.w	lr, lr
 8029c96:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 8029c9a:	fb0e f101 	mul.w	r1, lr, r1
 8029c9e:	b280      	uxth	r0, r0
 8029ca0:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8029ca4:	1a12      	subs	r2, r2, r0
 8029ca6:	b292      	uxth	r2, r2
 8029ca8:	fb02 110c 	mla	r1, r2, ip, r1
 8029cac:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029cae:	fb00 1105 	mla	r1, r0, r5, r1
 8029cb2:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029cb4:	fb08 1105 	mla	r1, r8, r5, r1
 8029cb8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8029cbc:	2900      	cmp	r1, #0
 8029cbe:	f000 80f5 	beq.w	8029eac <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 8029cc2:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8029cc6:	d019      	beq.n	8029cfc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8029cc8:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8029ccc:	fb0c fa0a 	mul.w	sl, ip, sl
 8029cd0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029cd4:	fb0c fc03 	mul.w	ip, ip, r3
 8029cd8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8029cdc:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029ce0:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8029ce4:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8029ce8:	4453      	add	r3, sl
 8029cea:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8029cee:	0a1b      	lsrs	r3, r3, #8
 8029cf0:	0a3f      	lsrs	r7, r7, #8
 8029cf2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8029cf6:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8029cfa:	433b      	orrs	r3, r7
 8029cfc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029cfe:	2dff      	cmp	r5, #255	@ 0xff
 8029d00:	d020      	beq.n	8029d44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 8029d02:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029d04:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029d08:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029d0a:	436f      	muls	r7, r5
 8029d0c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029d0e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d12:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029d16:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8029d18:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029d1c:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d20:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d24:	44bc      	add	ip, r7
 8029d26:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029d2a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d36:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d3a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029d3e:	ea4c 050a 	orr.w	r5, ip, sl
 8029d42:	950e      	str	r5, [sp, #56]	@ 0x38
 8029d44:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029d46:	2dff      	cmp	r5, #255	@ 0xff
 8029d48:	d020      	beq.n	8029d8c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 8029d4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029d4c:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029d50:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029d52:	436f      	muls	r7, r5
 8029d54:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029d56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029d5a:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029d5e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8029d60:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029d64:	fb05 fa0a 	mul.w	sl, r5, sl
 8029d68:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d6c:	44bc      	add	ip, r7
 8029d6e:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029d72:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029d76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029d7a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029d7e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029d82:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029d86:	ea4c 050a 	orr.w	r5, ip, sl
 8029d8a:	9509      	str	r5, [sp, #36]	@ 0x24
 8029d8c:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029d8e:	2dff      	cmp	r5, #255	@ 0xff
 8029d90:	d020      	beq.n	8029dd4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 8029d92:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029d94:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029d98:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029d9a:	436f      	muls	r7, r5
 8029d9c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029d9e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8029da2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 8029da6:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 8029da8:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8029dac:	fb05 fa0a 	mul.w	sl, r5, sl
 8029db0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029db4:	44bc      	add	ip, r7
 8029db6:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8029dba:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8029dbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029dc2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8029dc6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8029dca:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8029dce:	ea4c 050a 	orr.w	r5, ip, sl
 8029dd2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8029dd4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029dd6:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8029dda:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 8029dde:	fb0e f707 	mul.w	r7, lr, r7
 8029de2:	fb02 770c 	mla	r7, r2, ip, r7
 8029de6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8029de8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8029dec:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029df0:	fb00 770c 	mla	r7, r0, ip, r7
 8029df4:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8029df6:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029dfa:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8029dfc:	fb08 770c 	mla	r7, r8, ip, r7
 8029e00:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 8029e04:	fb0e fe0c 	mul.w	lr, lr, ip
 8029e08:	fb02 e303 	mla	r3, r2, r3, lr
 8029e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8029e0e:	0a3f      	lsrs	r7, r7, #8
 8029e10:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8029e14:	fb00 330a 	mla	r3, r0, sl, r3
 8029e18:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8029e1a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8029e1e:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8029e22:	fb08 3c0c 	mla	ip, r8, ip, r3
 8029e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8029e28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029e2c:	4359      	muls	r1, r3
 8029e2e:	1c4b      	adds	r3, r1, #1
 8029e30:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8029e34:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8029e38:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8029e3c:	ea47 070c 	orr.w	r7, r7, ip
 8029e40:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8029e42:	0c3b      	lsrs	r3, r7, #16
 8029e44:	f8b9 0000 	ldrh.w	r0, [r9]
 8029e48:	fb13 f305 	smulbb	r3, r3, r5
 8029e4c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8029e50:	b2ff      	uxtb	r7, r7
 8029e52:	1202      	asrs	r2, r0, #8
 8029e54:	fb17 f705 	smulbb	r7, r7, r5
 8029e58:	b2c9      	uxtb	r1, r1
 8029e5a:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 8029e5e:	fb02 3201 	mla	r2, r2, r1, r3
 8029e62:	10c3      	asrs	r3, r0, #3
 8029e64:	00c0      	lsls	r0, r0, #3
 8029e66:	fb1c fc05 	smulbb	ip, ip, r5
 8029e6a:	b2c0      	uxtb	r0, r0
 8029e6c:	fb00 7001 	mla	r0, r0, r1, r7
 8029e70:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 8029e74:	fb03 c301 	mla	r3, r3, r1, ip
 8029e78:	b292      	uxth	r2, r2
 8029e7a:	b280      	uxth	r0, r0
 8029e7c:	1c51      	adds	r1, r2, #1
 8029e7e:	f100 0c01 	add.w	ip, r0, #1
 8029e82:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8029e86:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 8029e8a:	b29b      	uxth	r3, r3
 8029e8c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8029e90:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8029e94:	ea4c 0202 	orr.w	r2, ip, r2
 8029e98:	f103 0c01 	add.w	ip, r3, #1
 8029e9c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8029ea0:	095b      	lsrs	r3, r3, #5
 8029ea2:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8029ea6:	431a      	orrs	r2, r3
 8029ea8:	f8a9 2000 	strh.w	r2, [r9]
 8029eac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8029eae:	f109 0902 	add.w	r9, r9, #2
 8029eb2:	441c      	add	r4, r3
 8029eb4:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8029eb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029eba:	441e      	add	r6, r3
 8029ebc:	e647      	b.n	8029b4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8029ebe:	2800      	cmp	r0, #0
 8029ec0:	f43f aedf 	beq.w	8029c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029ec4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8029ec8:	9109      	str	r1, [sp, #36]	@ 0x24
 8029eca:	0e09      	lsrs	r1, r1, #24
 8029ecc:	9112      	str	r1, [sp, #72]	@ 0x48
 8029ece:	e6d8      	b.n	8029c82 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8029ed0:	b01d      	add	sp, #116	@ 0x74
 8029ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08029ed6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8029ed6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029eda:	b085      	sub	sp, #20
 8029edc:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	@ 0x3c
 8029ee0:	9102      	str	r1, [sp, #8]
 8029ee2:	fb04 7103 	mla	r1, r4, r3, r7
 8029ee6:	2c00      	cmp	r4, #0
 8029ee8:	f9bd e038 	ldrsh.w	lr, [sp, #56]	@ 0x38
 8029eec:	f89d 6044 	ldrb.w	r6, [sp, #68]	@ 0x44
 8029ef0:	f89d 0048 	ldrb.w	r0, [sp, #72]	@ 0x48
 8029ef4:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8029ef8:	f2c0 810c 	blt.w	802a114 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8029efc:	45a6      	cmp	lr, r4
 8029efe:	f340 8109 	ble.w	802a114 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8029f02:	2f00      	cmp	r7, #0
 8029f04:	f2c0 8104 	blt.w	802a110 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8029f08:	42bb      	cmp	r3, r7
 8029f0a:	f340 8101 	ble.w	802a110 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8029f0e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8029f12:	1c7a      	adds	r2, r7, #1
 8029f14:	f100 8101 	bmi.w	802a11a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8029f18:	4293      	cmp	r3, r2
 8029f1a:	f340 80fe 	ble.w	802a11a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8029f1e:	2e00      	cmp	r6, #0
 8029f20:	f000 80fd 	beq.w	802a11e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8029f24:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8029f28:	3401      	adds	r4, #1
 8029f2a:	f100 80fc 	bmi.w	802a126 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029f2e:	45a6      	cmp	lr, r4
 8029f30:	f340 80f9 	ble.w	802a126 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8029f34:	2800      	cmp	r0, #0
 8029f36:	f000 80f9 	beq.w	802a12c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 8029f3a:	2f00      	cmp	r7, #0
 8029f3c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8029f40:	f2c0 80ef 	blt.w	802a122 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029f44:	42bb      	cmp	r3, r7
 8029f46:	f340 80ec 	ble.w	802a122 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8029f4a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 8029f4e:	3701      	adds	r7, #1
 8029f50:	f100 80ef 	bmi.w	802a132 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029f54:	42bb      	cmp	r3, r7
 8029f56:	f340 80ec 	ble.w	802a132 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8029f5a:	2e00      	cmp	r6, #0
 8029f5c:	f000 80eb 	beq.w	802a136 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8029f60:	6852      	ldr	r2, [r2, #4]
 8029f62:	b2b6      	uxth	r6, r6
 8029f64:	b280      	uxth	r0, r0
 8029f66:	fb00 fe06 	mul.w	lr, r0, r6
 8029f6a:	0136      	lsls	r6, r6, #4
 8029f6c:	eba6 070e 	sub.w	r7, r6, lr
 8029f70:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8029f74:	b2bf      	uxth	r7, r7
 8029f76:	f5c6 7380 	rsb	r3, r6, #256	@ 0x100
 8029f7a:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8029f7e:	fb07 f60a 	mul.w	r6, r7, sl
 8029f82:	b280      	uxth	r0, r0
 8029f84:	1a1b      	subs	r3, r3, r0
 8029f86:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8029f8a:	b29b      	uxth	r3, r3
 8029f8c:	fb0b 6603 	mla	r6, fp, r3, r6
 8029f90:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8029f94:	fb00 6609 	mla	r6, r0, r9, r6
 8029f98:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8029f9c:	fb0e 6608 	mla	r6, lr, r8, r6
 8029fa0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8029fa4:	9600      	str	r6, [sp, #0]
 8029fa6:	2e00      	cmp	r6, #0
 8029fa8:	f000 80af 	beq.w	802a10a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8029fac:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 8029fb0:	fb0b fc0c 	mul.w	ip, fp, ip
 8029fb4:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8029fb8:	fb0b f505 	mul.w	r5, fp, r5
 8029fbc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8029fc0:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8029fc4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029fc8:	44dc      	add	ip, fp
 8029fca:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8029fce:	9501      	str	r5, [sp, #4]
 8029fd0:	f00c 15ff 	and.w	r5, ip, #16711935	@ 0xff00ff
 8029fd4:	9503      	str	r5, [sp, #12]
 8029fd6:	9d01      	ldr	r5, [sp, #4]
 8029fd8:	9e02      	ldr	r6, [sp, #8]
 8029fda:	f505 7c80 	add.w	ip, r5, #256	@ 0x100
 8029fde:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8029fe2:	f001 1cff 	and.w	ip, r1, #16711935	@ 0xff00ff
 8029fe6:	fb0a fc0c 	mul.w	ip, sl, ip
 8029fea:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8029fee:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8029ff2:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8029ff6:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8029ffa:	4465      	add	r5, ip
 8029ffc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802a000:	f404 447f 	and.w	r4, r4, #65280	@ 0xff00
 802a004:	fb09 fc0c 	mul.w	ip, r9, ip
 802a008:	fb09 f904 	mul.w	r9, r9, r4
 802a00c:	f509 7480 	add.w	r4, r9, #256	@ 0x100
 802a010:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 802a014:	f002 14ff 	and.w	r4, r2, #16711935	@ 0xff00ff
 802a018:	fb08 f404 	mul.w	r4, r8, r4
 802a01c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a020:	fb08 f802 	mul.w	r8, r8, r2
 802a024:	0a2d      	lsrs	r5, r5, #8
 802a026:	0a22      	lsrs	r2, r4, #8
 802a028:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 802a02c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802a030:	437d      	muls	r5, r7
 802a032:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 802a036:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802a03a:	4414      	add	r4, r2
 802a03c:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 802a040:	fb0a fa01 	mul.w	sl, sl, r1
 802a044:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802a048:	9a03      	ldr	r2, [sp, #12]
 802a04a:	f50a 7180 	add.w	r1, sl, #256	@ 0x100
 802a04e:	fb02 5503 	mla	r5, r2, r3, r5
 802a052:	0a24      	lsrs	r4, r4, #8
 802a054:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 802a058:	f004 14ff 	and.w	r4, r4, #16711935	@ 0xff00ff
 802a05c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802a060:	fb04 540e 	mla	r4, r4, lr, r5
 802a064:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a068:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 802a06c:	4461      	add	r1, ip
 802a06e:	0a09      	lsrs	r1, r1, #8
 802a070:	f001 11ff 	and.w	r1, r1, #16711935	@ 0xff00ff
 802a074:	fb01 4100 	mla	r1, r1, r0, r4
 802a078:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a07c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a080:	fb07 f70a 	mul.w	r7, r7, sl
 802a084:	0a09      	lsrs	r1, r1, #8
 802a086:	f001 14ff 	and.w	r4, r1, #16711935	@ 0xff00ff
 802a08a:	f40b 417f 	and.w	r1, fp, #65280	@ 0xff00
 802a08e:	fb03 7101 	mla	r1, r3, r1, r7
 802a092:	9b00      	ldr	r3, [sp, #0]
 802a094:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802a098:	43da      	mvns	r2, r3
 802a09a:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 802a09e:	fb0e 1e08 	mla	lr, lr, r8, r1
 802a0a2:	8836      	ldrh	r6, [r6, #0]
 802a0a4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a0a8:	f409 417f 	and.w	r1, r9, #65280	@ 0xff00
 802a0ac:	fb00 e101 	mla	r1, r0, r1, lr
 802a0b0:	1233      	asrs	r3, r6, #8
 802a0b2:	b2d2      	uxtb	r2, r2
 802a0b4:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802a0b8:	4353      	muls	r3, r2
 802a0ba:	10f0      	asrs	r0, r6, #3
 802a0bc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a0c0:	4350      	muls	r0, r2
 802a0c2:	0a09      	lsrs	r1, r1, #8
 802a0c4:	00f6      	lsls	r6, r6, #3
 802a0c6:	f401 417f 	and.w	r1, r1, #65280	@ 0xff00
 802a0ca:	b2f6      	uxtb	r6, r6
 802a0cc:	4321      	orrs	r1, r4
 802a0ce:	4356      	muls	r6, r2
 802a0d0:	1c5a      	adds	r2, r3, #1
 802a0d2:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 802a0d6:	0c0b      	lsrs	r3, r1, #16
 802a0d8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a0dc:	1c42      	adds	r2, r0, #1
 802a0de:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802a0e2:	0a0a      	lsrs	r2, r1, #8
 802a0e4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a0e8:	021b      	lsls	r3, r3, #8
 802a0ea:	00d2      	lsls	r2, r2, #3
 802a0ec:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a0f0:	f403 4378 	and.w	r3, r3, #63488	@ 0xf800
 802a0f4:	4313      	orrs	r3, r2
 802a0f6:	1c72      	adds	r2, r6, #1
 802a0f8:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802a0fc:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 802a100:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802a104:	4319      	orrs	r1, r3
 802a106:	9b02      	ldr	r3, [sp, #8]
 802a108:	8019      	strh	r1, [r3, #0]
 802a10a:	b005      	add	sp, #20
 802a10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a110:	2500      	movs	r5, #0
 802a112:	e6fe      	b.n	8029f12 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 802a114:	2100      	movs	r1, #0
 802a116:	460d      	mov	r5, r1
 802a118:	e706      	b.n	8029f28 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a11a:	2100      	movs	r1, #0
 802a11c:	e704      	b.n	8029f28 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a11e:	4631      	mov	r1, r6
 802a120:	e702      	b.n	8029f28 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802a122:	2400      	movs	r4, #0
 802a124:	e713      	b.n	8029f4e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 802a126:	2200      	movs	r2, #0
 802a128:	4614      	mov	r4, r2
 802a12a:	e71a      	b.n	8029f62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a12c:	4602      	mov	r2, r0
 802a12e:	4604      	mov	r4, r0
 802a130:	e717      	b.n	8029f62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a132:	2200      	movs	r2, #0
 802a134:	e715      	b.n	8029f62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802a136:	4632      	mov	r2, r6
 802a138:	e713      	b.n	8029f62 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802a13c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a140:	b09b      	sub	sp, #108	@ 0x6c
 802a142:	9218      	str	r2, [sp, #96]	@ 0x60
 802a144:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802a146:	9019      	str	r0, [sp, #100]	@ 0x64
 802a148:	6850      	ldr	r0, [r2, #4]
 802a14a:	9116      	str	r1, [sp, #88]	@ 0x58
 802a14c:	9307      	str	r3, [sp, #28]
 802a14e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 802a152:	fb00 1303 	mla	r3, r0, r3, r1
 802a156:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	@ 0x94
 802a15a:	6812      	ldr	r2, [r2, #0]
 802a15c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 802a160:	930a      	str	r3, [sp, #40]	@ 0x28
 802a162:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a164:	681b      	ldr	r3, [r3, #0]
 802a166:	930f      	str	r3, [sp, #60]	@ 0x3c
 802a168:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a16a:	2b00      	cmp	r3, #0
 802a16c:	dc03      	bgt.n	802a176 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802a16e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802a170:	2b00      	cmp	r3, #0
 802a172:	f340 8387 	ble.w	802a884 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802a176:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a178:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802a17c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802a180:	1e48      	subs	r0, r1, #1
 802a182:	1e57      	subs	r7, r2, #1
 802a184:	9b07      	ldr	r3, [sp, #28]
 802a186:	2b00      	cmp	r3, #0
 802a188:	f340 8166 	ble.w	802a458 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 802a18c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802a190:	ea4f 4326 	mov.w	r3, r6, asr #16
 802a194:	d406      	bmi.n	802a1a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a196:	4584      	cmp	ip, r0
 802a198:	da04      	bge.n	802a1a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a19a:	2b00      	cmp	r3, #0
 802a19c:	db02      	blt.n	802a1a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802a19e:	42bb      	cmp	r3, r7
 802a1a0:	f2c0 815b 	blt.w	802a45a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802a1a4:	f11c 0c01 	adds.w	ip, ip, #1
 802a1a8:	f100 814b 	bmi.w	802a442 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a1ac:	4561      	cmp	r1, ip
 802a1ae:	f2c0 8148 	blt.w	802a442 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a1b2:	3301      	adds	r3, #1
 802a1b4:	f100 8145 	bmi.w	802a442 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a1b8:	429a      	cmp	r2, r3
 802a1ba:	f2c0 8142 	blt.w	802a442 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 802a1be:	9b07      	ldr	r3, [sp, #28]
 802a1c0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 802a1c2:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a1c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a1c6:	2b00      	cmp	r3, #0
 802a1c8:	f340 8165 	ble.w	802a496 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 802a1cc:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 802a1ce:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a1d0:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802a1d4:	1422      	asrs	r2, r4, #16
 802a1d6:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802a1da:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802a1de:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a1e2:	689b      	ldr	r3, [r3, #8]
 802a1e4:	f100 81d5 	bmi.w	802a592 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a1e8:	f103 38ff 	add.w	r8, r3, #4294967295
 802a1ec:	4542      	cmp	r2, r8
 802a1ee:	f280 81d0 	bge.w	802a592 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a1f2:	f1bc 0f00 	cmp.w	ip, #0
 802a1f6:	f2c0 81cc 	blt.w	802a592 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a1fa:	f10e 38ff 	add.w	r8, lr, #4294967295
 802a1fe:	45c4      	cmp	ip, r8
 802a200:	f280 81c7 	bge.w	802a592 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802a204:	b21b      	sxth	r3, r3
 802a206:	fb0c 2203 	mla	r2, ip, r3, r2
 802a20a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802a20c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802a210:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802a214:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802a218:	2900      	cmp	r1, #0
 802a21a:	f000 8182 	beq.w	802a522 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802a21e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802a222:	950b      	str	r5, [sp, #44]	@ 0x2c
 802a224:	0e2d      	lsrs	r5, r5, #24
 802a226:	9512      	str	r5, [sp, #72]	@ 0x48
 802a228:	b180      	cbz	r0, 802a24c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a22a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 802a22e:	3b01      	subs	r3, #1
 802a230:	009b      	lsls	r3, r3, #2
 802a232:	3304      	adds	r3, #4
 802a234:	eb08 0c03 	add.w	ip, r8, r3
 802a238:	f858 3003 	ldr.w	r3, [r8, r3]
 802a23c:	9308      	str	r3, [sp, #32]
 802a23e:	0e1b      	lsrs	r3, r3, #24
 802a240:	9310      	str	r3, [sp, #64]	@ 0x40
 802a242:	f8dc 3004 	ldr.w	r3, [ip, #4]
 802a246:	930c      	str	r3, [sp, #48]	@ 0x30
 802a248:	0e1b      	lsrs	r3, r3, #24
 802a24a:	9313      	str	r3, [sp, #76]	@ 0x4c
 802a24c:	b289      	uxth	r1, r1
 802a24e:	b280      	uxth	r0, r0
 802a250:	fb01 f900 	mul.w	r9, r1, r0
 802a254:	0109      	lsls	r1, r1, #4
 802a256:	eba1 0809 	sub.w	r8, r1, r9
 802a25a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802a25c:	fa1f f888 	uxth.w	r8, r8
 802a260:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a264:	fb08 f303 	mul.w	r3, r8, r3
 802a268:	b280      	uxth	r0, r0
 802a26a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 802a26e:	1a09      	subs	r1, r1, r0
 802a270:	b289      	uxth	r1, r1
 802a272:	fb01 330e 	mla	r3, r1, lr, r3
 802a276:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a278:	fb00 3305 	mla	r3, r0, r5, r3
 802a27c:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802a27e:	fb09 3305 	mla	r3, r9, r5, r3
 802a282:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a286:	2b00      	cmp	r3, #0
 802a288:	f000 80d2 	beq.w	802a430 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a28c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 802a290:	d01b      	beq.n	802a2ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802a292:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 802a296:	fb0e fa0a 	mul.w	sl, lr, sl
 802a29a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a29e:	fb0e fe02 	mul.w	lr, lr, r2
 802a2a2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 802a2a6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802a2aa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802a2ae:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 802a2b2:	4452      	add	r2, sl
 802a2b4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802a2b8:	0a12      	lsrs	r2, r2, #8
 802a2ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a2be:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 802a2c2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802a2c6:	ea42 020c 	orr.w	r2, r2, ip
 802a2ca:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a2cc:	2dff      	cmp	r5, #255	@ 0xff
 802a2ce:	d021      	beq.n	802a314 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802a2d0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a2d2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802a2d6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a2d8:	fb05 fb0b 	mul.w	fp, r5, fp
 802a2dc:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a2de:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a2e2:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802a2e6:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802a2e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a2ec:	fb05 fa0a 	mul.w	sl, r5, sl
 802a2f0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a2f4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a2f8:	44de      	add	lr, fp
 802a2fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a2fe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a302:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a306:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a30a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a30e:	ea4e 050a 	orr.w	r5, lr, sl
 802a312:	950b      	str	r5, [sp, #44]	@ 0x2c
 802a314:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a316:	2dff      	cmp	r5, #255	@ 0xff
 802a318:	d021      	beq.n	802a35e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802a31a:	9d08      	ldr	r5, [sp, #32]
 802a31c:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802a320:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a322:	fb05 fb0b 	mul.w	fp, r5, fp
 802a326:	9d08      	ldr	r5, [sp, #32]
 802a328:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802a32c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802a32e:	fb05 fa0e 	mul.w	sl, r5, lr
 802a332:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a336:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a33a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a33e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a342:	44de      	add	lr, fp
 802a344:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a348:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a34c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a350:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a354:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a358:	ea4e 050a 	orr.w	r5, lr, sl
 802a35c:	9508      	str	r5, [sp, #32]
 802a35e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802a360:	2dff      	cmp	r5, #255	@ 0xff
 802a362:	d021      	beq.n	802a3a8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 802a364:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802a366:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802a36a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802a36c:	fb05 fb0b 	mul.w	fp, r5, fp
 802a370:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802a372:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802a376:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802a37a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 802a37c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a380:	fb05 fa0a 	mul.w	sl, r5, sl
 802a384:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802a388:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802a38c:	44de      	add	lr, fp
 802a38e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802a392:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802a396:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a39a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802a39e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a3a2:	ea4e 050a 	orr.w	r5, lr, sl
 802a3a6:	950c      	str	r5, [sp, #48]	@ 0x30
 802a3a8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a3aa:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 802a3ae:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a3b2:	fb08 fc0c 	mul.w	ip, r8, ip
 802a3b6:	fb01 cc0e 	mla	ip, r1, lr, ip
 802a3ba:	9d08      	ldr	r5, [sp, #32]
 802a3bc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802a3c0:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802a3c4:	fb00 cc0e 	mla	ip, r0, lr, ip
 802a3c8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802a3ca:	2bff      	cmp	r3, #255	@ 0xff
 802a3cc:	f005 1eff 	and.w	lr, r5, #16711935	@ 0xff00ff
 802a3d0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 802a3d2:	fb09 cc0e 	mla	ip, r9, lr, ip
 802a3d6:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 802a3da:	fb08 f80e 	mul.w	r8, r8, lr
 802a3de:	fb01 8202 	mla	r2, r1, r2, r8
 802a3e2:	9908      	ldr	r1, [sp, #32]
 802a3e4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a3e8:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802a3ec:	fb00 220a 	mla	r2, r0, sl, r2
 802a3f0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802a3f2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a3f6:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 802a3fa:	fb09 2900 	mla	r9, r9, r0, r2
 802a3fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802a402:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 802a406:	ea4c 0c09 	orr.w	ip, ip, r9
 802a40a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802a40e:	f040 8091 	bne.w	802a534 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 802a412:	ea4f 135c 	mov.w	r3, ip, lsr #5
 802a416:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 802a41a:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802a41e:	f022 0207 	bic.w	r2, r2, #7
 802a422:	431a      	orrs	r2, r3
 802a424:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 802a428:	ea4c 0c02 	orr.w	ip, ip, r2
 802a42c:	f8a7 c000 	strh.w	ip, [r7]
 802a430:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a432:	3702      	adds	r7, #2
 802a434:	441c      	add	r4, r3
 802a436:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a438:	441e      	add	r6, r3
 802a43a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 802a43c:	3b01      	subs	r3, #1
 802a43e:	9317      	str	r3, [sp, #92]	@ 0x5c
 802a440:	e6c0      	b.n	802a1c4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802a442:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a444:	441c      	add	r4, r3
 802a446:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a448:	441e      	add	r6, r3
 802a44a:	9b07      	ldr	r3, [sp, #28]
 802a44c:	3b01      	subs	r3, #1
 802a44e:	9307      	str	r3, [sp, #28]
 802a450:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a452:	3302      	adds	r3, #2
 802a454:	930a      	str	r3, [sp, #40]	@ 0x28
 802a456:	e695      	b.n	802a184 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802a458:	d024      	beq.n	802a4a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802a45a:	9b07      	ldr	r3, [sp, #28]
 802a45c:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 802a45e:	3b01      	subs	r3, #1
 802a460:	fb00 4003 	mla	r0, r0, r3, r4
 802a464:	1400      	asrs	r0, r0, #16
 802a466:	f53f aeaa 	bmi.w	802a1be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a46a:	3901      	subs	r1, #1
 802a46c:	4288      	cmp	r0, r1
 802a46e:	f6bf aea6 	bge.w	802a1be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a472:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802a474:	fb01 6303 	mla	r3, r1, r3, r6
 802a478:	141b      	asrs	r3, r3, #16
 802a47a:	f53f aea0 	bmi.w	802a1be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a47e:	3a01      	subs	r2, #1
 802a480:	4293      	cmp	r3, r2
 802a482:	f6bf ae9c 	bge.w	802a1be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802a486:	f8dd b01c 	ldr.w	fp, [sp, #28]
 802a48a:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 802a48e:	f1bb 0f00 	cmp.w	fp, #0
 802a492:	f300 809a 	bgt.w	802a5ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 802a496:	9b07      	ldr	r3, [sp, #28]
 802a498:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802a49c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802a49e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802a4a2:	930a      	str	r3, [sp, #40]	@ 0x28
 802a4a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a4a6:	2b00      	cmp	r3, #0
 802a4a8:	f340 81ec 	ble.w	802a884 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 802a4ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802a4b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 802a4b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802a4b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802a4bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802a4c0:	eef0 6a62 	vmov.f32	s13, s5
 802a4c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 802a4c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 802a4cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 802a4d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a4d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802a4d8:	ee16 4a90 	vmov	r4, s13
 802a4dc:	eef0 6a43 	vmov.f32	s13, s6
 802a4e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802a4e4:	ee12 2a90 	vmov	r2, s5
 802a4e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802a4ec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a4ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802a4f2:	fb92 f3f3 	sdiv	r3, r2, r3
 802a4f6:	ee13 2a10 	vmov	r2, s6
 802a4fa:	9327      	str	r3, [sp, #156]	@ 0x9c
 802a4fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a4fe:	ee16 6a90 	vmov	r6, s13
 802a502:	fb92 f3f3 	sdiv	r3, r2, r3
 802a506:	9328      	str	r3, [sp, #160]	@ 0xa0
 802a508:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802a50a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 802a50c:	3b01      	subs	r3, #1
 802a50e:	9316      	str	r3, [sp, #88]	@ 0x58
 802a510:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802a512:	bf08      	it	eq
 802a514:	4613      	moveq	r3, r2
 802a516:	eeb0 3a67 	vmov.f32	s6, s15
 802a51a:	9307      	str	r3, [sp, #28]
 802a51c:	eef0 2a47 	vmov.f32	s5, s14
 802a520:	e622      	b.n	802a168 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 802a522:	2800      	cmp	r0, #0
 802a524:	f43f ae92 	beq.w	802a24c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a528:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802a52c:	9308      	str	r3, [sp, #32]
 802a52e:	0e1b      	lsrs	r3, r3, #24
 802a530:	9310      	str	r3, [sp, #64]	@ 0x40
 802a532:	e68b      	b.n	802a24c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802a534:	43db      	mvns	r3, r3
 802a536:	8839      	ldrh	r1, [r7, #0]
 802a538:	fa5f f883 	uxtb.w	r8, r3
 802a53c:	ea4f 2e21 	mov.w	lr, r1, asr #8
 802a540:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 802a544:	fb0e fe08 	mul.w	lr, lr, r8
 802a548:	10c8      	asrs	r0, r1, #3
 802a54a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a54e:	fb00 f008 	mul.w	r0, r0, r8
 802a552:	00cb      	lsls	r3, r1, #3
 802a554:	f10e 0101 	add.w	r1, lr, #1
 802a558:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802a55c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 802a560:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 802a564:	b2db      	uxtb	r3, r3
 802a566:	f100 0e01 	add.w	lr, r0, #1
 802a56a:	fb03 f308 	mul.w	r3, r3, r8
 802a56e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802a572:	4dc6      	ldr	r5, [pc, #792]	@ (802a88c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802a574:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 802a578:	b2c9      	uxtb	r1, r1
 802a57a:	00d2      	lsls	r2, r2, #3
 802a57c:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 802a580:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a584:	430a      	orrs	r2, r1
 802a586:	1c59      	adds	r1, r3, #1
 802a588:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802a58c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 802a590:	e748      	b.n	802a424 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802a592:	f112 0801 	adds.w	r8, r2, #1
 802a596:	f53f af4b 	bmi.w	802a430 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a59a:	4543      	cmp	r3, r8
 802a59c:	f6ff af48 	blt.w	802a430 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5a0:	f11c 0801 	adds.w	r8, ip, #1
 802a5a4:	f53f af44 	bmi.w	802a430 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5a8:	45c6      	cmp	lr, r8
 802a5aa:	f6ff af41 	blt.w	802a430 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5ae:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802a5b2:	fa0f f28e 	sxth.w	r2, lr
 802a5b6:	e9cd 1003 	strd	r1, r0, [sp, #12]
 802a5ba:	9200      	str	r2, [sp, #0]
 802a5bc:	b21b      	sxth	r3, r3
 802a5be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802a5c0:	4639      	mov	r1, r7
 802a5c2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802a5c4:	f7ff fc87 	bl	8029ed6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 802a5c8:	e732      	b.n	802a430 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802a5ca:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802a5cc:	1421      	asrs	r1, r4, #16
 802a5ce:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 802a5d2:	1433      	asrs	r3, r6, #16
 802a5d4:	fb07 1303 	mla	r3, r7, r3, r1
 802a5d8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802a5da:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802a5dc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802a5e0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 802a5e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802a5e8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802a5ec:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 802a5f0:	2a00      	cmp	r2, #0
 802a5f2:	f000 8108 	beq.w	802a806 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802a5f6:	684d      	ldr	r5, [r1, #4]
 802a5f8:	950d      	str	r5, [sp, #52]	@ 0x34
 802a5fa:	0e2d      	lsrs	r5, r5, #24
 802a5fc:	9514      	str	r5, [sp, #80]	@ 0x50
 802a5fe:	b178      	cbz	r0, 802a620 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a600:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 802a604:	3f01      	subs	r7, #1
 802a606:	00bf      	lsls	r7, r7, #2
 802a608:	3704      	adds	r7, #4
 802a60a:	eb01 0e07 	add.w	lr, r1, r7
 802a60e:	59c9      	ldr	r1, [r1, r7]
 802a610:	9109      	str	r1, [sp, #36]	@ 0x24
 802a612:	0e09      	lsrs	r1, r1, #24
 802a614:	9111      	str	r1, [sp, #68]	@ 0x44
 802a616:	f8de 1004 	ldr.w	r1, [lr, #4]
 802a61a:	910e      	str	r1, [sp, #56]	@ 0x38
 802a61c:	0e09      	lsrs	r1, r1, #24
 802a61e:	9115      	str	r1, [sp, #84]	@ 0x54
 802a620:	b292      	uxth	r2, r2
 802a622:	b280      	uxth	r0, r0
 802a624:	fb02 f900 	mul.w	r9, r2, r0
 802a628:	0112      	lsls	r2, r2, #4
 802a62a:	eba2 0e09 	sub.w	lr, r2, r9
 802a62e:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 802a632:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802a634:	fa1f fe8e 	uxth.w	lr, lr
 802a638:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802a63c:	fb0e f202 	mul.w	r2, lr, r2
 802a640:	b280      	uxth	r0, r0
 802a642:	1a09      	subs	r1, r1, r0
 802a644:	b289      	uxth	r1, r1
 802a646:	fb01 220c 	mla	r2, r1, ip, r2
 802a64a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a64c:	fb00 2205 	mla	r2, r0, r5, r2
 802a650:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802a652:	fb09 2205 	mla	r2, r9, r5, r2
 802a656:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802a65a:	2a00      	cmp	r2, #0
 802a65c:	f000 80ca 	beq.w	802a7f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802a660:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 802a664:	d019      	beq.n	802a69a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 802a666:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802a66a:	fb0c fa0a 	mul.w	sl, ip, sl
 802a66e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a672:	fb0c fc03 	mul.w	ip, ip, r3
 802a676:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802a67a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a67e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 802a682:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 802a686:	4453      	add	r3, sl
 802a688:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802a68c:	0a1b      	lsrs	r3, r3, #8
 802a68e:	0a3f      	lsrs	r7, r7, #8
 802a690:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802a694:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 802a698:	433b      	orrs	r3, r7
 802a69a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802a69c:	2dff      	cmp	r5, #255	@ 0xff
 802a69e:	d020      	beq.n	802a6e2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 802a6a0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a6a2:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a6a6:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802a6a8:	436f      	muls	r7, r5
 802a6aa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a6ac:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a6b0:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802a6b4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 802a6b6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a6ba:	fb05 fa0a 	mul.w	sl, r5, sl
 802a6be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a6c2:	44bc      	add	ip, r7
 802a6c4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a6c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a6cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a6d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a6d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a6d8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a6dc:	ea4c 050a 	orr.w	r5, ip, sl
 802a6e0:	950d      	str	r5, [sp, #52]	@ 0x34
 802a6e2:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a6e4:	2dff      	cmp	r5, #255	@ 0xff
 802a6e6:	d020      	beq.n	802a72a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 802a6e8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802a6ea:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a6ee:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a6f0:	436f      	muls	r7, r5
 802a6f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802a6f4:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802a6f8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 802a6fa:	fb05 fa0c 	mul.w	sl, r5, ip
 802a6fe:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a702:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a706:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a70a:	44bc      	add	ip, r7
 802a70c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a710:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a714:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a718:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a71c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a720:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a724:	ea4c 050a 	orr.w	r5, ip, sl
 802a728:	9509      	str	r5, [sp, #36]	@ 0x24
 802a72a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802a72c:	2dff      	cmp	r5, #255	@ 0xff
 802a72e:	d020      	beq.n	802a772 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 802a730:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a732:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a736:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802a738:	436f      	muls	r7, r5
 802a73a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a73c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802a740:	f405 4a7f 	and.w	sl, r5, #65280	@ 0xff00
 802a744:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 802a746:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802a74a:	fb05 fa0a 	mul.w	sl, r5, sl
 802a74e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a752:	44bc      	add	ip, r7
 802a754:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802a758:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802a75c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a760:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802a764:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802a768:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802a76c:	ea4c 050a 	orr.w	r5, ip, sl
 802a770:	950e      	str	r5, [sp, #56]	@ 0x38
 802a772:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a774:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802a778:	f005 17ff 	and.w	r7, r5, #16711935	@ 0xff00ff
 802a77c:	fb0e f707 	mul.w	r7, lr, r7
 802a780:	fb01 770c 	mla	r7, r1, ip, r7
 802a784:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 802a786:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802a78a:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a78e:	fb00 770c 	mla	r7, r0, ip, r7
 802a792:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802a794:	2aff      	cmp	r2, #255	@ 0xff
 802a796:	f005 1cff 	and.w	ip, r5, #16711935	@ 0xff00ff
 802a79a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802a79c:	fb09 770c 	mla	r7, r9, ip, r7
 802a7a0:	f405 4c7f 	and.w	ip, r5, #65280	@ 0xff00
 802a7a4:	fb0e fe0c 	mul.w	lr, lr, ip
 802a7a8:	fb01 e303 	mla	r3, r1, r3, lr
 802a7ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 802a7ae:	ea4f 2717 	mov.w	r7, r7, lsr #8
 802a7b2:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802a7b6:	fb00 330a 	mla	r3, r0, sl, r3
 802a7ba:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802a7bc:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802a7c0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 802a7c4:	fb09 3c0c 	mla	ip, r9, ip, r3
 802a7c8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802a7cc:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802a7d0:	ea47 070c 	orr.w	r7, r7, ip
 802a7d4:	ea4f 2317 	mov.w	r3, r7, lsr #8
 802a7d8:	d11e      	bne.n	802a818 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 802a7da:	097a      	lsrs	r2, r7, #5
 802a7dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 802a7e0:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802a7e4:	f023 0307 	bic.w	r3, r3, #7
 802a7e8:	4313      	orrs	r3, r2
 802a7ea:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a7ee:	431f      	orrs	r7, r3
 802a7f0:	f8a8 7000 	strh.w	r7, [r8]
 802a7f4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802a7f6:	f108 0802 	add.w	r8, r8, #2
 802a7fa:	441c      	add	r4, r3
 802a7fc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802a7fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a802:	441e      	add	r6, r3
 802a804:	e643      	b.n	802a48e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802a806:	2800      	cmp	r0, #0
 802a808:	f43f af0a 	beq.w	802a620 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a80c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 802a810:	9109      	str	r1, [sp, #36]	@ 0x24
 802a812:	0e09      	lsrs	r1, r1, #24
 802a814:	9111      	str	r1, [sp, #68]	@ 0x44
 802a816:	e703      	b.n	802a620 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 802a818:	43d2      	mvns	r2, r2
 802a81a:	f8b8 1000 	ldrh.w	r1, [r8]
 802a81e:	fa5f fe82 	uxtb.w	lr, r2
 802a822:	ea4f 2c21 	mov.w	ip, r1, asr #8
 802a826:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 802a82a:	fb0c fc0e 	mul.w	ip, ip, lr
 802a82e:	10c8      	asrs	r0, r1, #3
 802a830:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802a834:	fb00 f00e 	mul.w	r0, r0, lr
 802a838:	00ca      	lsls	r2, r1, #3
 802a83a:	f10c 0101 	add.w	r1, ip, #1
 802a83e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a842:	b2d2      	uxtb	r2, r2
 802a844:	0c39      	lsrs	r1, r7, #16
 802a846:	fb02 f20e 	mul.w	r2, r2, lr
 802a84a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802a84e:	490f      	ldr	r1, [pc, #60]	@ (802a88c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 802a850:	fa5f fc8c 	uxtb.w	ip, ip
 802a854:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 802a858:	1c41      	adds	r1, r0, #1
 802a85a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802a85e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802a862:	1c51      	adds	r1, r2, #1
 802a864:	00c0      	lsls	r0, r0, #3
 802a866:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802a86a:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a86e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 802a872:	ea4c 0c00 	orr.w	ip, ip, r0
 802a876:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802a87a:	ea47 0c0c 	orr.w	ip, r7, ip
 802a87e:	f8a8 c000 	strh.w	ip, [r8]
 802a882:	e7b7      	b.n	802a7f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802a884:	b01b      	add	sp, #108	@ 0x6c
 802a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a88a:	bf00      	nop
 802a88c:	fffff800 	.word	0xfffff800

0802a890 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 802a890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a894:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802a898:	2d00      	cmp	r5, #0
 802a89a:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802a89e:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802a8a2:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802a8a6:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802a8aa:	fb05 0e03 	mla	lr, r5, r3, r0
 802a8ae:	f2c0 808c 	blt.w	802a9ca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802a8b2:	45a9      	cmp	r9, r5
 802a8b4:	f340 8089 	ble.w	802a9ca <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802a8b8:	2800      	cmp	r0, #0
 802a8ba:	f2c0 8084 	blt.w	802a9c6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802a8be:	4580      	cmp	r8, r0
 802a8c0:	f340 8081 	ble.w	802a9c6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802a8c4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802a8c8:	5d16      	ldrb	r6, [r2, r4]
 802a8ca:	f01e 0f01 	tst.w	lr, #1
 802a8ce:	bf0c      	ite	eq
 802a8d0:	f006 060f 	andeq.w	r6, r6, #15
 802a8d4:	1136      	asrne	r6, r6, #4
 802a8d6:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802a8da:	b2f6      	uxtb	r6, r6
 802a8dc:	1c44      	adds	r4, r0, #1
 802a8de:	d477      	bmi.n	802a9d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802a8e0:	45a0      	cmp	r8, r4
 802a8e2:	dd75      	ble.n	802a9d0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802a8e4:	2f00      	cmp	r7, #0
 802a8e6:	d075      	beq.n	802a9d4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 802a8e8:	f10e 0a01 	add.w	sl, lr, #1
 802a8ec:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802a8f0:	5d14      	ldrb	r4, [r2, r4]
 802a8f2:	f01a 0f01 	tst.w	sl, #1
 802a8f6:	bf0c      	ite	eq
 802a8f8:	f004 040f 	andeq.w	r4, r4, #15
 802a8fc:	1124      	asrne	r4, r4, #4
 802a8fe:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802a902:	b2e4      	uxtb	r4, r4
 802a904:	3501      	adds	r5, #1
 802a906:	d469      	bmi.n	802a9dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802a908:	45a9      	cmp	r9, r5
 802a90a:	dd67      	ble.n	802a9dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 802a90c:	f1bc 0f00 	cmp.w	ip, #0
 802a910:	d067      	beq.n	802a9e2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 802a912:	2800      	cmp	r0, #0
 802a914:	db60      	blt.n	802a9d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802a916:	4580      	cmp	r8, r0
 802a918:	dd5e      	ble.n	802a9d8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 802a91a:	eb03 090e 	add.w	r9, r3, lr
 802a91e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802a922:	5d55      	ldrb	r5, [r2, r5]
 802a924:	f019 0f01 	tst.w	r9, #1
 802a928:	bf0c      	ite	eq
 802a92a:	f005 050f 	andeq.w	r5, r5, #15
 802a92e:	112d      	asrne	r5, r5, #4
 802a930:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802a934:	b2ed      	uxtb	r5, r5
 802a936:	3001      	adds	r0, #1
 802a938:	d456      	bmi.n	802a9e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802a93a:	4580      	cmp	r8, r0
 802a93c:	dd54      	ble.n	802a9e8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 802a93e:	2f00      	cmp	r7, #0
 802a940:	d054      	beq.n	802a9ec <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 802a942:	3301      	adds	r3, #1
 802a944:	449e      	add	lr, r3
 802a946:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802a94a:	5cd0      	ldrb	r0, [r2, r3]
 802a94c:	f01e 0f01 	tst.w	lr, #1
 802a950:	bf0c      	ite	eq
 802a952:	f000 000f 	andeq.w	r0, r0, #15
 802a956:	1100      	asrne	r0, r0, #4
 802a958:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802a95c:	b2c3      	uxtb	r3, r0
 802a95e:	b2ba      	uxth	r2, r7
 802a960:	fa1f fc8c 	uxth.w	ip, ip
 802a964:	fb02 f00c 	mul.w	r0, r2, ip
 802a968:	0112      	lsls	r2, r2, #4
 802a96a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802a96e:	1a12      	subs	r2, r2, r0
 802a970:	b292      	uxth	r2, r2
 802a972:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802a976:	4362      	muls	r2, r4
 802a978:	fa1f fc8c 	uxth.w	ip, ip
 802a97c:	eba7 070c 	sub.w	r7, r7, ip
 802a980:	b2bf      	uxth	r7, r7
 802a982:	fb06 2207 	mla	r2, r6, r7, r2
 802a986:	fb0c 2505 	mla	r5, ip, r5, r2
 802a98a:	fb00 5303 	mla	r3, r0, r3, r5
 802a98e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802a992:	b1b3      	cbz	r3, 802a9c2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802a994:	f89d 2038 	ldrb.w	r2, [sp, #56]	@ 0x38
 802a998:	435a      	muls	r2, r3
 802a99a:	1c53      	adds	r3, r2, #1
 802a99c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802a9a0:	4a2d      	ldr	r2, [pc, #180]	@ (802aa58 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802a9a2:	121b      	asrs	r3, r3, #8
 802a9a4:	6812      	ldr	r2, [r2, #0]
 802a9a6:	2bff      	cmp	r3, #255	@ 0xff
 802a9a8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 802a9ac:	d120      	bne.n	802a9f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 802a9ae:	4b2b      	ldr	r3, [pc, #172]	@ (802aa5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802a9b0:	0950      	lsrs	r0, r2, #5
 802a9b2:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802a9b6:	4033      	ands	r3, r6
 802a9b8:	4318      	orrs	r0, r3
 802a9ba:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802a9be:	4302      	orrs	r2, r0
 802a9c0:	800a      	strh	r2, [r1, #0]
 802a9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a9c6:	2600      	movs	r6, #0
 802a9c8:	e788      	b.n	802a8dc <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 802a9ca:	2400      	movs	r4, #0
 802a9cc:	4626      	mov	r6, r4
 802a9ce:	e799      	b.n	802a904 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a9d0:	2400      	movs	r4, #0
 802a9d2:	e797      	b.n	802a904 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a9d4:	463c      	mov	r4, r7
 802a9d6:	e795      	b.n	802a904 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802a9d8:	2500      	movs	r5, #0
 802a9da:	e7ac      	b.n	802a936 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 802a9dc:	2300      	movs	r3, #0
 802a9de:	461d      	mov	r5, r3
 802a9e0:	e7bd      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a9e2:	4663      	mov	r3, ip
 802a9e4:	4665      	mov	r5, ip
 802a9e6:	e7ba      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a9e8:	2300      	movs	r3, #0
 802a9ea:	e7b8      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a9ec:	463b      	mov	r3, r7
 802a9ee:	e7b6      	b.n	802a95e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802a9f0:	b29f      	uxth	r7, r3
 802a9f2:	43db      	mvns	r3, r3
 802a9f4:	f3c2 4007 	ubfx	r0, r2, #16, #8
 802a9f8:	880d      	ldrh	r5, [r1, #0]
 802a9fa:	fb10 f007 	smulbb	r0, r0, r7
 802a9fe:	b2f6      	uxtb	r6, r6
 802aa00:	b2d2      	uxtb	r2, r2
 802aa02:	122c      	asrs	r4, r5, #8
 802aa04:	fb12 f207 	smulbb	r2, r2, r7
 802aa08:	fb16 f607 	smulbb	r6, r6, r7
 802aa0c:	b2db      	uxtb	r3, r3
 802aa0e:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802aa12:	fb04 0403 	mla	r4, r4, r3, r0
 802aa16:	10e8      	asrs	r0, r5, #3
 802aa18:	00ed      	lsls	r5, r5, #3
 802aa1a:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802aa1e:	b2ed      	uxtb	r5, r5
 802aa20:	fb00 6603 	mla	r6, r0, r3, r6
 802aa24:	fb05 2303 	mla	r3, r5, r3, r2
 802aa28:	b2a4      	uxth	r4, r4
 802aa2a:	b29a      	uxth	r2, r3
 802aa2c:	1c63      	adds	r3, r4, #1
 802aa2e:	b2b0      	uxth	r0, r6
 802aa30:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802aa34:	1c53      	adds	r3, r2, #1
 802aa36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802aa3a:	1c42      	adds	r2, r0, #1
 802aa3c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802aa40:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802aa44:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802aa48:	0940      	lsrs	r0, r0, #5
 802aa4a:	4323      	orrs	r3, r4
 802aa4c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802aa50:	4303      	orrs	r3, r0
 802aa52:	800b      	strh	r3, [r1, #0]
 802aa54:	e7b5      	b.n	802a9c2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802aa56:	bf00      	nop
 802aa58:	20012114 	.word	0x20012114
 802aa5c:	00fff800 	.word	0x00fff800

0802aa60 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aa64:	b097      	sub	sp, #92	@ 0x5c
 802aa66:	9214      	str	r2, [sp, #80]	@ 0x50
 802aa68:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 802aa6a:	9015      	str	r0, [sp, #84]	@ 0x54
 802aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 802aa6e:	6850      	ldr	r0, [r2, #4]
 802aa70:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 802aa74:	910d      	str	r1, [sp, #52]	@ 0x34
 802aa76:	930f      	str	r3, [sp, #60]	@ 0x3c
 802aa78:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 802aa7c:	fb00 1303 	mla	r3, r0, r3, r1
 802aa80:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	@ 0x84
 802aa84:	6812      	ldr	r2, [r2, #0]
 802aa86:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802aa8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aa8c:	689b      	ldr	r3, [r3, #8]
 802aa8e:	3301      	adds	r3, #1
 802aa90:	f023 0301 	bic.w	r3, r3, #1
 802aa94:	930a      	str	r3, [sp, #40]	@ 0x28
 802aa96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aa98:	681f      	ldr	r7, [r3, #0]
 802aa9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802aa9c:	2b00      	cmp	r3, #0
 802aa9e:	dc03      	bgt.n	802aaa8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 802aaa0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 802aaa2:	2b00      	cmp	r3, #0
 802aaa4:	f340 8287 	ble.w	802afb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802aaa8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802aaaa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802aaae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802aab2:	1e48      	subs	r0, r1, #1
 802aab4:	f102 3cff 	add.w	ip, r2, #4294967295
 802aab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aaba:	2b00      	cmp	r3, #0
 802aabc:	f340 80c3 	ble.w	802ac46 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 802aac0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802aac4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802aac8:	d406      	bmi.n	802aad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802aaca:	4586      	cmp	lr, r0
 802aacc:	da04      	bge.n	802aad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802aace:	2b00      	cmp	r3, #0
 802aad0:	db02      	blt.n	802aad8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802aad2:	4563      	cmp	r3, ip
 802aad4:	f2c0 80b8 	blt.w	802ac48 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802aad8:	f11e 0e01 	adds.w	lr, lr, #1
 802aadc:	f100 80a9 	bmi.w	802ac32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802aae0:	4571      	cmp	r1, lr
 802aae2:	f2c0 80a6 	blt.w	802ac32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802aae6:	3301      	adds	r3, #1
 802aae8:	f100 80a3 	bmi.w	802ac32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802aaec:	429a      	cmp	r2, r3
 802aaee:	f2c0 80a0 	blt.w	802ac32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802aaf2:	46c8      	mov	r8, r9
 802aaf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802aaf6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	@ 0x28
 802aafa:	930e      	str	r3, [sp, #56]	@ 0x38
 802aafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802aafe:	2b00      	cmp	r3, #0
 802ab00:	f340 80c2 	ble.w	802ac88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802ab04:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802ab06:	1430      	asrs	r0, r6, #16
 802ab08:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802ab0c:	1423      	asrs	r3, r4, #16
 802ab0e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802ab12:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802ab16:	f100 814d 	bmi.w	802adb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ab1a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802ab1e:	455b      	cmp	r3, fp
 802ab20:	f280 8148 	bge.w	802adb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ab24:	2800      	cmp	r0, #0
 802ab26:	f2c0 8145 	blt.w	802adb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ab2a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802ab2e:	4558      	cmp	r0, fp
 802ab30:	f280 8140 	bge.w	802adb4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 802ab34:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802ab36:	fb00 3305 	mla	r3, r0, r5, r3
 802ab3a:	0858      	lsrs	r0, r3, #1
 802ab3c:	f817 c000 	ldrb.w	ip, [r7, r0]
 802ab40:	07dd      	lsls	r5, r3, #31
 802ab42:	bf54      	ite	pl
 802ab44:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ab48:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ab4c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ab50:	fa5f fc8c 	uxtb.w	ip, ip
 802ab54:	2a00      	cmp	r2, #0
 802ab56:	f000 80db 	beq.w	802ad10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 802ab5a:	1c58      	adds	r0, r3, #1
 802ab5c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802ab60:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802ab64:	07c0      	lsls	r0, r0, #31
 802ab66:	bf54      	ite	pl
 802ab68:	f00e 0e0f 	andpl.w	lr, lr, #15
 802ab6c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802ab70:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802ab74:	fa5f f08e 	uxtb.w	r0, lr
 802ab78:	9010      	str	r0, [sp, #64]	@ 0x40
 802ab7a:	b1c9      	cbz	r1, 802abb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802ab7c:	4453      	add	r3, sl
 802ab7e:	0858      	lsrs	r0, r3, #1
 802ab80:	5c38      	ldrb	r0, [r7, r0]
 802ab82:	07dd      	lsls	r5, r3, #31
 802ab84:	bf54      	ite	pl
 802ab86:	f000 000f 	andpl.w	r0, r0, #15
 802ab8a:	1100      	asrmi	r0, r0, #4
 802ab8c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802ab90:	3301      	adds	r3, #1
 802ab92:	b2c0      	uxtb	r0, r0
 802ab94:	900b      	str	r0, [sp, #44]	@ 0x2c
 802ab96:	0858      	lsrs	r0, r3, #1
 802ab98:	f817 e000 	ldrb.w	lr, [r7, r0]
 802ab9c:	07dd      	lsls	r5, r3, #31
 802ab9e:	bf54      	ite	pl
 802aba0:	f00e 030f 	andpl.w	r3, lr, #15
 802aba4:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802aba8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802abac:	b2db      	uxtb	r3, r3
 802abae:	9311      	str	r3, [sp, #68]	@ 0x44
 802abb0:	b292      	uxth	r2, r2
 802abb2:	b289      	uxth	r1, r1
 802abb4:	fb02 f301 	mul.w	r3, r2, r1
 802abb8:	0112      	lsls	r2, r2, #4
 802abba:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802abbe:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 802abc0:	1ad2      	subs	r2, r2, r3
 802abc2:	b292      	uxth	r2, r2
 802abc4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802abc8:	436a      	muls	r2, r5
 802abca:	b289      	uxth	r1, r1
 802abcc:	1a40      	subs	r0, r0, r1
 802abce:	b280      	uxth	r0, r0
 802abd0:	fb0c 2c00 	mla	ip, ip, r0, r2
 802abd4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 802abd6:	fb01 c102 	mla	r1, r1, r2, ip
 802abda:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 802abdc:	fb03 1302 	mla	r3, r3, r2, r1
 802abe0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802abe4:	b1db      	cbz	r3, 802ac1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802abe6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802abe8:	4353      	muls	r3, r2
 802abea:	1c5a      	adds	r2, r3, #1
 802abec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802abf0:	4ac6      	ldr	r2, [pc, #792]	@ (802af0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802abf2:	121b      	asrs	r3, r3, #8
 802abf4:	6812      	ldr	r2, [r2, #0]
 802abf6:	2bff      	cmp	r3, #255	@ 0xff
 802abf8:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802abfc:	f040 8099 	bne.w	802ad32 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 802ac00:	0953      	lsrs	r3, r2, #5
 802ac02:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802ac06:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802ac0a:	f02c 0c07 	bic.w	ip, ip, #7
 802ac0e:	ea43 0c0c 	orr.w	ip, r3, ip
 802ac12:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802ac16:	ea4c 0202 	orr.w	r2, ip, r2
 802ac1a:	f8a8 2000 	strh.w	r2, [r8]
 802ac1e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ac20:	f108 0802 	add.w	r8, r8, #2
 802ac24:	441c      	add	r4, r3
 802ac26:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ac28:	441e      	add	r6, r3
 802ac2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802ac2c:	3b01      	subs	r3, #1
 802ac2e:	930e      	str	r3, [sp, #56]	@ 0x38
 802ac30:	e764      	b.n	802aafc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 802ac32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802ac34:	f109 0902 	add.w	r9, r9, #2
 802ac38:	441c      	add	r4, r3
 802ac3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802ac3c:	441e      	add	r6, r3
 802ac3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac40:	3b01      	subs	r3, #1
 802ac42:	9309      	str	r3, [sp, #36]	@ 0x24
 802ac44:	e738      	b.n	802aab8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 802ac46:	d024      	beq.n	802ac92 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802ac48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac4a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 802ac4c:	3b01      	subs	r3, #1
 802ac4e:	fb00 4003 	mla	r0, r0, r3, r4
 802ac52:	1400      	asrs	r0, r0, #16
 802ac54:	f53f af4d 	bmi.w	802aaf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ac58:	3901      	subs	r1, #1
 802ac5a:	4288      	cmp	r0, r1
 802ac5c:	f6bf af49 	bge.w	802aaf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ac60:	9924      	ldr	r1, [sp, #144]	@ 0x90
 802ac62:	fb01 6303 	mla	r3, r1, r3, r6
 802ac66:	141b      	asrs	r3, r3, #16
 802ac68:	f53f af43 	bmi.w	802aaf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ac6c:	3a01      	subs	r2, #1
 802ac6e:	4293      	cmp	r3, r2
 802ac70:	f6bf af3f 	bge.w	802aaf2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802ac74:	46c8      	mov	r8, r9
 802ac76:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 802ac7a:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 802ac7e:	930e      	str	r3, [sp, #56]	@ 0x38
 802ac80:	f1bb 0f00 	cmp.w	fp, #0
 802ac84:	f300 80b7 	bgt.w	802adf6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 802ac88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802ac8a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802ac8e:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802ac92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802ac94:	2b00      	cmp	r3, #0
 802ac96:	f340 818e 	ble.w	802afb6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802ac9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802ac9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 802aca2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802aca6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802acaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802acae:	eef0 6a62 	vmov.f32	s13, s5
 802acb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 802acb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 802acba:	ee61 7a27 	vmul.f32	s15, s2, s15
 802acbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802acc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802acc6:	ee16 4a90 	vmov	r4, s13
 802acca:	eef0 6a43 	vmov.f32	s13, s6
 802acce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802acd2:	ee12 2a90 	vmov	r2, s5
 802acd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802acda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802acdc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802ace0:	fb92 f3f3 	sdiv	r3, r2, r3
 802ace4:	ee13 2a10 	vmov	r2, s6
 802ace8:	9323      	str	r3, [sp, #140]	@ 0x8c
 802acea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802acec:	ee16 6a90 	vmov	r6, s13
 802acf0:	fb92 f3f3 	sdiv	r3, r2, r3
 802acf4:	9324      	str	r3, [sp, #144]	@ 0x90
 802acf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802acf8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 802acfa:	3b01      	subs	r3, #1
 802acfc:	930d      	str	r3, [sp, #52]	@ 0x34
 802acfe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802ad00:	bf08      	it	eq
 802ad02:	4613      	moveq	r3, r2
 802ad04:	eeb0 3a67 	vmov.f32	s6, s15
 802ad08:	9309      	str	r3, [sp, #36]	@ 0x24
 802ad0a:	eef0 2a47 	vmov.f32	s5, s14
 802ad0e:	e6c4      	b.n	802aa9a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802ad10:	2900      	cmp	r1, #0
 802ad12:	f43f af4d 	beq.w	802abb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802ad16:	eb0a 0003 	add.w	r0, sl, r3
 802ad1a:	0843      	lsrs	r3, r0, #1
 802ad1c:	5cfb      	ldrb	r3, [r7, r3]
 802ad1e:	07c0      	lsls	r0, r0, #31
 802ad20:	bf54      	ite	pl
 802ad22:	f003 030f 	andpl.w	r3, r3, #15
 802ad26:	111b      	asrmi	r3, r3, #4
 802ad28:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802ad2c:	b2db      	uxtb	r3, r3
 802ad2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 802ad30:	e73e      	b.n	802abb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 802ad32:	fa1f fb83 	uxth.w	fp, r3
 802ad36:	43db      	mvns	r3, r3
 802ad38:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802ad3c:	f8b8 e000 	ldrh.w	lr, [r8]
 802ad40:	fb11 f10b 	smulbb	r1, r1, fp
 802ad44:	fa5f fc8c 	uxtb.w	ip, ip
 802ad48:	b2d2      	uxtb	r2, r2
 802ad4a:	ea4f 202e 	mov.w	r0, lr, asr #8
 802ad4e:	fb1c fc0b 	smulbb	ip, ip, fp
 802ad52:	fb12 fb0b 	smulbb	fp, r2, fp
 802ad56:	b2db      	uxtb	r3, r3
 802ad58:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802ad5c:	fb00 1003 	mla	r0, r0, r3, r1
 802ad60:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802ad64:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802ad68:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802ad6c:	fa5f fe8e 	uxtb.w	lr, lr
 802ad70:	fb01 cc03 	mla	ip, r1, r3, ip
 802ad74:	fb0e bb03 	mla	fp, lr, r3, fp
 802ad78:	b280      	uxth	r0, r0
 802ad7a:	1c43      	adds	r3, r0, #1
 802ad7c:	fa1f fc8c 	uxth.w	ip, ip
 802ad80:	fa1f fb8b 	uxth.w	fp, fp
 802ad84:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802ad88:	f400 4378 	and.w	r3, r0, #63488	@ 0xf800
 802ad8c:	f10c 0101 	add.w	r1, ip, #1
 802ad90:	f10b 0001 	add.w	r0, fp, #1
 802ad94:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 802ad98:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802ad9c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802ada0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802ada4:	4318      	orrs	r0, r3
 802ada6:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802adaa:	ea40 000c 	orr.w	r0, r0, ip
 802adae:	f8a8 0000 	strh.w	r0, [r8]
 802adb2:	e734      	b.n	802ac1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802adb4:	f113 0b01 	adds.w	fp, r3, #1
 802adb8:	f53f af31 	bmi.w	802ac1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802adbc:	45dc      	cmp	ip, fp
 802adbe:	f6ff af2e 	blt.w	802ac1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802adc2:	f110 0b01 	adds.w	fp, r0, #1
 802adc6:	f53f af2a 	bmi.w	802ac1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802adca:	45de      	cmp	lr, fp
 802adcc:	f6ff af27 	blt.w	802ac1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802add0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 802add2:	9302      	str	r3, [sp, #8]
 802add4:	fa0f f38e 	sxth.w	r3, lr
 802add8:	9301      	str	r3, [sp, #4]
 802adda:	fa0f f38c 	sxth.w	r3, ip
 802adde:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802ade2:	e9cd 1505 	strd	r1, r5, [sp, #20]
 802ade6:	9300      	str	r3, [sp, #0]
 802ade8:	463a      	mov	r2, r7
 802adea:	4653      	mov	r3, sl
 802adec:	4641      	mov	r1, r8
 802adee:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802adf0:	f7ff fd4e 	bl	802a890 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 802adf4:	e713      	b.n	802ac1e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802adf6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 802adf8:	1422      	asrs	r2, r4, #16
 802adfa:	1433      	asrs	r3, r6, #16
 802adfc:	fb05 2303 	mla	r3, r5, r3, r2
 802ae00:	085a      	lsrs	r2, r3, #1
 802ae02:	5cba      	ldrb	r2, [r7, r2]
 802ae04:	07dd      	lsls	r5, r3, #31
 802ae06:	bf54      	ite	pl
 802ae08:	f002 020f 	andpl.w	r2, r2, #15
 802ae0c:	1112      	asrmi	r2, r2, #4
 802ae0e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802ae12:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802ae16:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802ae1a:	b2d2      	uxtb	r2, r2
 802ae1c:	2900      	cmp	r1, #0
 802ae1e:	d077      	beq.n	802af10 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 802ae20:	f103 0e01 	add.w	lr, r3, #1
 802ae24:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 802ae28:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae2c:	f01e 0f01 	tst.w	lr, #1
 802ae30:	bf0c      	ite	eq
 802ae32:	f00c 0c0f 	andeq.w	ip, ip, #15
 802ae36:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802ae3a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae3e:	fa5f f58c 	uxtb.w	r5, ip
 802ae42:	9512      	str	r5, [sp, #72]	@ 0x48
 802ae44:	b300      	cbz	r0, 802ae88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802ae46:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802ae48:	442b      	add	r3, r5
 802ae4a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802ae4e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae52:	07dd      	lsls	r5, r3, #31
 802ae54:	bf54      	ite	pl
 802ae56:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ae5a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ae5e:	3301      	adds	r3, #1
 802ae60:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae64:	fa5f f58c 	uxtb.w	r5, ip
 802ae68:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802ae6c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802ae70:	950c      	str	r5, [sp, #48]	@ 0x30
 802ae72:	07dd      	lsls	r5, r3, #31
 802ae74:	bf54      	ite	pl
 802ae76:	f00c 0c0f 	andpl.w	ip, ip, #15
 802ae7a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802ae7e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802ae82:	fa5f f38c 	uxtb.w	r3, ip
 802ae86:	9313      	str	r3, [sp, #76]	@ 0x4c
 802ae88:	b289      	uxth	r1, r1
 802ae8a:	b280      	uxth	r0, r0
 802ae8c:	fb01 f300 	mul.w	r3, r1, r0
 802ae90:	0109      	lsls	r1, r1, #4
 802ae92:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802ae96:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 802ae98:	1ac9      	subs	r1, r1, r3
 802ae9a:	b289      	uxth	r1, r1
 802ae9c:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802aea0:	4369      	muls	r1, r5
 802aea2:	b280      	uxth	r0, r0
 802aea4:	ebac 0c00 	sub.w	ip, ip, r0
 802aea8:	fa1f fc8c 	uxth.w	ip, ip
 802aeac:	fb02 120c 	mla	r2, r2, ip, r1
 802aeb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 802aeb2:	fb00 2001 	mla	r0, r0, r1, r2
 802aeb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 802aeb8:	fb03 0302 	mla	r3, r3, r2, r0
 802aebc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802aec0:	b1d3      	cbz	r3, 802aef8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802aec2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802aec4:	4353      	muls	r3, r2
 802aec6:	1c5a      	adds	r2, r3, #1
 802aec8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802aecc:	4a0f      	ldr	r2, [pc, #60]	@ (802af0c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 802aece:	121b      	asrs	r3, r3, #8
 802aed0:	6812      	ldr	r2, [r2, #0]
 802aed2:	2bff      	cmp	r3, #255	@ 0xff
 802aed4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 802aed8:	d12e      	bne.n	802af38 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802aeda:	0953      	lsrs	r3, r2, #5
 802aedc:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 802aee0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802aee4:	f02c 0c07 	bic.w	ip, ip, #7
 802aee8:	ea43 0c0c 	orr.w	ip, r3, ip
 802aeec:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802aef0:	ea4c 0202 	orr.w	r2, ip, r2
 802aef4:	f8a8 2000 	strh.w	r2, [r8]
 802aef8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802aefa:	f108 0802 	add.w	r8, r8, #2
 802aefe:	441c      	add	r4, r3
 802af00:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802af02:	f10b 3bff 	add.w	fp, fp, #4294967295
 802af06:	441e      	add	r6, r3
 802af08:	e6ba      	b.n	802ac80 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802af0a:	bf00      	nop
 802af0c:	20012114 	.word	0x20012114
 802af10:	2800      	cmp	r0, #0
 802af12:	d0b9      	beq.n	802ae88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802af14:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 802af16:	442b      	add	r3, r5
 802af18:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802af1c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802af20:	07db      	lsls	r3, r3, #31
 802af22:	bf54      	ite	pl
 802af24:	f00c 0c0f 	andpl.w	ip, ip, #15
 802af28:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802af2c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802af30:	fa5f f38c 	uxtb.w	r3, ip
 802af34:	930c      	str	r3, [sp, #48]	@ 0x30
 802af36:	e7a7      	b.n	802ae88 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 802af38:	fa1f fa83 	uxth.w	sl, r3
 802af3c:	43db      	mvns	r3, r3
 802af3e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802af42:	f8b8 e000 	ldrh.w	lr, [r8]
 802af46:	fb11 f10a 	smulbb	r1, r1, sl
 802af4a:	b2d2      	uxtb	r2, r2
 802af4c:	ea4f 202e 	mov.w	r0, lr, asr #8
 802af50:	fb12 f20a 	smulbb	r2, r2, sl
 802af54:	b2db      	uxtb	r3, r3
 802af56:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802af5a:	fb00 1003 	mla	r0, r0, r3, r1
 802af5e:	fa5f fc8c 	uxtb.w	ip, ip
 802af62:	ea4f 01ee 	mov.w	r1, lr, asr #3
 802af66:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802af6a:	fb1c fc0a 	smulbb	ip, ip, sl
 802af6e:	fa5f fe8e 	uxtb.w	lr, lr
 802af72:	fb0e 2203 	mla	r2, lr, r3, r2
 802af76:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 802af7a:	fb01 cc03 	mla	ip, r1, r3, ip
 802af7e:	b280      	uxth	r0, r0
 802af80:	b292      	uxth	r2, r2
 802af82:	1c43      	adds	r3, r0, #1
 802af84:	1c51      	adds	r1, r2, #1
 802af86:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 802af8a:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 802af8e:	fa1f fc8c 	uxth.w	ip, ip
 802af92:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802af96:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 802af9a:	4308      	orrs	r0, r1
 802af9c:	f10c 0101 	add.w	r1, ip, #1
 802afa0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 802afa4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802afa8:	f40c 6cfc 	and.w	ip, ip, #2016	@ 0x7e0
 802afac:	ea40 000c 	orr.w	r0, r0, ip
 802afb0:	f8a8 0000 	strh.w	r0, [r8]
 802afb4:	e7a0      	b.n	802aef8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 802afb6:	b017      	add	sp, #92	@ 0x5c
 802afb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802afbc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 802afbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802afc0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	@ 0x28
 802afc4:	2d00      	cmp	r5, #0
 802afc6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 802afca:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 802afce:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 802afd2:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
 802afd6:	fb05 0e03 	mla	lr, r5, r3, r0
 802afda:	f2c0 80b0 	blt.w	802b13e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802afde:	45a9      	cmp	r9, r5
 802afe0:	f340 80ad 	ble.w	802b13e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802afe4:	2800      	cmp	r0, #0
 802afe6:	f2c0 80a8 	blt.w	802b13a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802afea:	4580      	cmp	r8, r0
 802afec:	f340 80a5 	ble.w	802b13a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802aff0:	ea4f 045e 	mov.w	r4, lr, lsr #1
 802aff4:	5d16      	ldrb	r6, [r2, r4]
 802aff6:	f01e 0f01 	tst.w	lr, #1
 802affa:	bf0c      	ite	eq
 802affc:	f006 060f 	andeq.w	r6, r6, #15
 802b000:	1136      	asrne	r6, r6, #4
 802b002:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802b006:	b2f6      	uxtb	r6, r6
 802b008:	1c44      	adds	r4, r0, #1
 802b00a:	f100 809b 	bmi.w	802b144 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802b00e:	45a0      	cmp	r8, r4
 802b010:	f340 8098 	ble.w	802b144 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802b014:	2f00      	cmp	r7, #0
 802b016:	f000 8097 	beq.w	802b148 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802b01a:	f10e 0a01 	add.w	sl, lr, #1
 802b01e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 802b022:	5d14      	ldrb	r4, [r2, r4]
 802b024:	f01a 0f01 	tst.w	sl, #1
 802b028:	bf0c      	ite	eq
 802b02a:	f004 040f 	andeq.w	r4, r4, #15
 802b02e:	1124      	asrne	r4, r4, #4
 802b030:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802b034:	b2e4      	uxtb	r4, r4
 802b036:	3501      	adds	r5, #1
 802b038:	f100 808a 	bmi.w	802b150 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802b03c:	45a9      	cmp	r9, r5
 802b03e:	f340 8087 	ble.w	802b150 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802b042:	f1bc 0f00 	cmp.w	ip, #0
 802b046:	f000 8086 	beq.w	802b156 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802b04a:	2800      	cmp	r0, #0
 802b04c:	db7e      	blt.n	802b14c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802b04e:	4580      	cmp	r8, r0
 802b050:	dd7c      	ble.n	802b14c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802b052:	eb03 090e 	add.w	r9, r3, lr
 802b056:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802b05a:	5d55      	ldrb	r5, [r2, r5]
 802b05c:	f019 0f01 	tst.w	r9, #1
 802b060:	bf0c      	ite	eq
 802b062:	f005 050f 	andeq.w	r5, r5, #15
 802b066:	112d      	asrne	r5, r5, #4
 802b068:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802b06c:	b2ed      	uxtb	r5, r5
 802b06e:	3001      	adds	r0, #1
 802b070:	d474      	bmi.n	802b15c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b072:	4580      	cmp	r8, r0
 802b074:	dd72      	ble.n	802b15c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 802b076:	2f00      	cmp	r7, #0
 802b078:	d072      	beq.n	802b160 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 802b07a:	3301      	adds	r3, #1
 802b07c:	449e      	add	lr, r3
 802b07e:	ea4f 035e 	mov.w	r3, lr, lsr #1
 802b082:	5cd0      	ldrb	r0, [r2, r3]
 802b084:	f01e 0f01 	tst.w	lr, #1
 802b088:	bf0c      	ite	eq
 802b08a:	f000 000f 	andeq.w	r0, r0, #15
 802b08e:	1100      	asrne	r0, r0, #4
 802b090:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b094:	b2c3      	uxtb	r3, r0
 802b096:	b2ba      	uxth	r2, r7
 802b098:	fa1f fc8c 	uxth.w	ip, ip
 802b09c:	fb02 f00c 	mul.w	r0, r2, ip
 802b0a0:	0112      	lsls	r2, r2, #4
 802b0a2:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 802b0a6:	1a12      	subs	r2, r2, r0
 802b0a8:	b292      	uxth	r2, r2
 802b0aa:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802b0ae:	4362      	muls	r2, r4
 802b0b0:	fa1f fc8c 	uxth.w	ip, ip
 802b0b4:	eba7 070c 	sub.w	r7, r7, ip
 802b0b8:	b2bf      	uxth	r7, r7
 802b0ba:	fb06 2207 	mla	r2, r6, r7, r2
 802b0be:	fb0c 2505 	mla	r5, ip, r5, r2
 802b0c2:	fb00 5303 	mla	r3, r0, r3, r5
 802b0c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b0ca:	b3a3      	cbz	r3, 802b136 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 802b0cc:	4a25      	ldr	r2, [pc, #148]	@ (802b164 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 802b0ce:	880e      	ldrh	r6, [r1, #0]
 802b0d0:	6815      	ldr	r5, [r2, #0]
 802b0d2:	b29a      	uxth	r2, r3
 802b0d4:	43db      	mvns	r3, r3
 802b0d6:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802b0da:	fb10 f002 	smulbb	r0, r0, r2
 802b0de:	f3c5 2707 	ubfx	r7, r5, #8, #8
 802b0e2:	b2ed      	uxtb	r5, r5
 802b0e4:	1234      	asrs	r4, r6, #8
 802b0e6:	fb17 f702 	smulbb	r7, r7, r2
 802b0ea:	fb15 f202 	smulbb	r2, r5, r2
 802b0ee:	b2db      	uxtb	r3, r3
 802b0f0:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802b0f4:	fb04 0403 	mla	r4, r4, r3, r0
 802b0f8:	10f0      	asrs	r0, r6, #3
 802b0fa:	00f6      	lsls	r6, r6, #3
 802b0fc:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802b100:	b2f6      	uxtb	r6, r6
 802b102:	fb00 7003 	mla	r0, r0, r3, r7
 802b106:	fb06 2303 	mla	r3, r6, r3, r2
 802b10a:	b2a4      	uxth	r4, r4
 802b10c:	b29a      	uxth	r2, r3
 802b10e:	1c63      	adds	r3, r4, #1
 802b110:	b280      	uxth	r0, r0
 802b112:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 802b116:	1c53      	adds	r3, r2, #1
 802b118:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802b11c:	1c42      	adds	r2, r0, #1
 802b11e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b122:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802b126:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802b12a:	0940      	lsrs	r0, r0, #5
 802b12c:	4323      	orrs	r3, r4
 802b12e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b132:	4303      	orrs	r3, r0
 802b134:	800b      	strh	r3, [r1, #0]
 802b136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b13a:	2600      	movs	r6, #0
 802b13c:	e764      	b.n	802b008 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802b13e:	2400      	movs	r4, #0
 802b140:	4626      	mov	r6, r4
 802b142:	e778      	b.n	802b036 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b144:	2400      	movs	r4, #0
 802b146:	e776      	b.n	802b036 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b148:	463c      	mov	r4, r7
 802b14a:	e774      	b.n	802b036 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802b14c:	2500      	movs	r5, #0
 802b14e:	e78e      	b.n	802b06e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 802b150:	2300      	movs	r3, #0
 802b152:	461d      	mov	r5, r3
 802b154:	e79f      	b.n	802b096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b156:	4663      	mov	r3, ip
 802b158:	4665      	mov	r5, ip
 802b15a:	e79c      	b.n	802b096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b15c:	2300      	movs	r3, #0
 802b15e:	e79a      	b.n	802b096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b160:	463b      	mov	r3, r7
 802b162:	e798      	b.n	802b096 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802b164:	20012114 	.word	0x20012114

0802b168 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b16c:	b093      	sub	sp, #76	@ 0x4c
 802b16e:	920c      	str	r2, [sp, #48]	@ 0x30
 802b170:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 802b172:	9011      	str	r0, [sp, #68]	@ 0x44
 802b174:	6850      	ldr	r0, [r2, #4]
 802b176:	9107      	str	r1, [sp, #28]
 802b178:	461d      	mov	r5, r3
 802b17a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 802b17e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	@ 0x74
 802b182:	fb00 1303 	mla	r3, r0, r3, r1
 802b186:	6812      	ldr	r2, [r2, #0]
 802b188:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 802b18c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b18e:	689b      	ldr	r3, [r3, #8]
 802b190:	3301      	adds	r3, #1
 802b192:	f023 0301 	bic.w	r3, r3, #1
 802b196:	9306      	str	r3, [sp, #24]
 802b198:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b19a:	681f      	ldr	r7, [r3, #0]
 802b19c:	9b07      	ldr	r3, [sp, #28]
 802b19e:	2b00      	cmp	r3, #0
 802b1a0:	dc03      	bgt.n	802b1aa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802b1a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802b1a4:	2b00      	cmp	r3, #0
 802b1a6:	f340 8265 	ble.w	802b674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802b1aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b1ac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802b1b0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802b1b4:	1e48      	subs	r0, r1, #1
 802b1b6:	f102 3cff 	add.w	ip, r2, #4294967295
 802b1ba:	2d00      	cmp	r5, #0
 802b1bc:	f340 80b7 	ble.w	802b32e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 802b1c0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802b1c4:	ea4f 4326 	mov.w	r3, r6, asr #16
 802b1c8:	d406      	bmi.n	802b1d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b1ca:	4586      	cmp	lr, r0
 802b1cc:	da04      	bge.n	802b1d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b1ce:	2b00      	cmp	r3, #0
 802b1d0:	db02      	blt.n	802b1d8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 802b1d2:	4563      	cmp	r3, ip
 802b1d4:	f2c0 80ac 	blt.w	802b330 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 802b1d8:	f11e 0e01 	adds.w	lr, lr, #1
 802b1dc:	f100 809f 	bmi.w	802b31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b1e0:	4571      	cmp	r1, lr
 802b1e2:	f2c0 809c 	blt.w	802b31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b1e6:	3301      	adds	r3, #1
 802b1e8:	f100 8099 	bmi.w	802b31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b1ec:	429a      	cmp	r2, r3
 802b1ee:	f2c0 8096 	blt.w	802b31e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802b1f2:	46c8      	mov	r8, r9
 802b1f4:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 802b1f8:	9509      	str	r5, [sp, #36]	@ 0x24
 802b1fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b1fc:	2b00      	cmp	r3, #0
 802b1fe:	f340 80b5 	ble.w	802b36c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802b202:	f3c4 3303 	ubfx	r3, r4, #12, #4
 802b206:	9308      	str	r3, [sp, #32]
 802b208:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802b20a:	1430      	asrs	r0, r6, #16
 802b20c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 802b210:	1423      	asrs	r3, r4, #16
 802b212:	f3c6 3103 	ubfx	r1, r6, #12, #4
 802b216:	f100 813e 	bmi.w	802b496 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802b21a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802b21e:	455b      	cmp	r3, fp
 802b220:	f280 8139 	bge.w	802b496 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802b224:	2800      	cmp	r0, #0
 802b226:	f2c0 8136 	blt.w	802b496 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802b22a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802b22e:	4558      	cmp	r0, fp
 802b230:	f280 8131 	bge.w	802b496 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802b234:	9a06      	ldr	r2, [sp, #24]
 802b236:	fb00 3302 	mla	r3, r0, r2, r3
 802b23a:	0858      	lsrs	r0, r3, #1
 802b23c:	f817 c000 	ldrb.w	ip, [r7, r0]
 802b240:	07da      	lsls	r2, r3, #31
 802b242:	bf54      	ite	pl
 802b244:	f00c 0c0f 	andpl.w	ip, ip, #15
 802b248:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802b24c:	9a08      	ldr	r2, [sp, #32]
 802b24e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802b252:	fa5f fc8c 	uxtb.w	ip, ip
 802b256:	2a00      	cmp	r2, #0
 802b258:	f000 80cb 	beq.w	802b3f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802b25c:	1c58      	adds	r0, r3, #1
 802b25e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802b262:	f817 e00e 	ldrb.w	lr, [r7, lr]
 802b266:	07c0      	lsls	r0, r0, #31
 802b268:	bf54      	ite	pl
 802b26a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802b26e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 802b272:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802b276:	fa5f fe8e 	uxtb.w	lr, lr
 802b27a:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 802b27e:	b1b9      	cbz	r1, 802b2b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b280:	4453      	add	r3, sl
 802b282:	0858      	lsrs	r0, r3, #1
 802b284:	5c38      	ldrb	r0, [r7, r0]
 802b286:	07da      	lsls	r2, r3, #31
 802b288:	bf54      	ite	pl
 802b28a:	f000 000f 	andpl.w	r0, r0, #15
 802b28e:	1100      	asrmi	r0, r0, #4
 802b290:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802b294:	b2c0      	uxtb	r0, r0
 802b296:	900a      	str	r0, [sp, #40]	@ 0x28
 802b298:	1c58      	adds	r0, r3, #1
 802b29a:	0843      	lsrs	r3, r0, #1
 802b29c:	5cfb      	ldrb	r3, [r7, r3]
 802b29e:	07c2      	lsls	r2, r0, #31
 802b2a0:	bf54      	ite	pl
 802b2a2:	f003 030f 	andpl.w	r3, r3, #15
 802b2a6:	111b      	asrmi	r3, r3, #4
 802b2a8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b2ac:	b2db      	uxtb	r3, r3
 802b2ae:	930e      	str	r3, [sp, #56]	@ 0x38
 802b2b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 802b2b4:	b289      	uxth	r1, r1
 802b2b6:	fb02 f301 	mul.w	r3, r2, r1
 802b2ba:	0112      	lsls	r2, r2, #4
 802b2bc:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802b2c0:	b289      	uxth	r1, r1
 802b2c2:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 802b2c6:	1a40      	subs	r0, r0, r1
 802b2c8:	fa1f fe80 	uxth.w	lr, r0
 802b2cc:	1ad2      	subs	r2, r2, r3
 802b2ce:	980d      	ldr	r0, [sp, #52]	@ 0x34
 802b2d0:	b292      	uxth	r2, r2
 802b2d2:	4342      	muls	r2, r0
 802b2d4:	fb0c 2c0e 	mla	ip, ip, lr, r2
 802b2d8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 802b2da:	fb01 c102 	mla	r1, r1, r2, ip
 802b2de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802b2e0:	fb03 1302 	mla	r3, r3, r2, r1
 802b2e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b2e8:	2bff      	cmp	r3, #255	@ 0xff
 802b2ea:	f040 8093 	bne.w	802b414 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802b2ee:	4bbe      	ldr	r3, [pc, #760]	@ (802b5e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802b2f0:	681a      	ldr	r2, [r3, #0]
 802b2f2:	4bbe      	ldr	r3, [pc, #760]	@ (802b5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b2f4:	0951      	lsrs	r1, r2, #5
 802b2f6:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b2fa:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802b2fe:	430b      	orrs	r3, r1
 802b300:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b304:	4313      	orrs	r3, r2
 802b306:	f8a8 3000 	strh.w	r3, [r8]
 802b30a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802b30c:	f108 0802 	add.w	r8, r8, #2
 802b310:	441c      	add	r4, r3
 802b312:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b314:	441e      	add	r6, r3
 802b316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802b318:	3b01      	subs	r3, #1
 802b31a:	9309      	str	r3, [sp, #36]	@ 0x24
 802b31c:	e76d      	b.n	802b1fa <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802b31e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802b320:	3d01      	subs	r5, #1
 802b322:	441c      	add	r4, r3
 802b324:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b326:	f109 0902 	add.w	r9, r9, #2
 802b32a:	441e      	add	r6, r3
 802b32c:	e745      	b.n	802b1ba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802b32e:	d021      	beq.n	802b374 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802b330:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 802b332:	1e6b      	subs	r3, r5, #1
 802b334:	fb00 4003 	mla	r0, r0, r3, r4
 802b338:	1400      	asrs	r0, r0, #16
 802b33a:	f53f af5a 	bmi.w	802b1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b33e:	3901      	subs	r1, #1
 802b340:	4288      	cmp	r0, r1
 802b342:	f6bf af56 	bge.w	802b1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b346:	9920      	ldr	r1, [sp, #128]	@ 0x80
 802b348:	fb01 6303 	mla	r3, r1, r3, r6
 802b34c:	141b      	asrs	r3, r3, #16
 802b34e:	f53f af50 	bmi.w	802b1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b352:	3a01      	subs	r2, #1
 802b354:	4293      	cmp	r3, r2
 802b356:	f6bf af4c 	bge.w	802b1f2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802b35a:	46a8      	mov	r8, r5
 802b35c:	46ce      	mov	lr, r9
 802b35e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802b362:	9308      	str	r3, [sp, #32]
 802b364:	f1b8 0f00 	cmp.w	r8, #0
 802b368:	f300 80b5 	bgt.w	802b4d6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802b36c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802b370:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802b374:	9b07      	ldr	r3, [sp, #28]
 802b376:	2b00      	cmp	r3, #0
 802b378:	f340 817c 	ble.w	802b674 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 802b37c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802b380:	ee30 0a04 	vadd.f32	s0, s0, s8
 802b384:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802b388:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802b38c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802b390:	eef0 6a62 	vmov.f32	s13, s5
 802b394:	ee31 1a05 	vadd.f32	s2, s2, s10
 802b398:	ee77 2a62 	vsub.f32	s5, s14, s5
 802b39c:	ee61 7a27 	vmul.f32	s15, s2, s15
 802b3a0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b3a4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802b3a8:	ee16 4a90 	vmov	r4, s13
 802b3ac:	eef0 6a43 	vmov.f32	s13, s6
 802b3b0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802b3b4:	ee12 2a90 	vmov	r2, s5
 802b3b8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802b3bc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b3be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802b3c2:	fb92 f3f3 	sdiv	r3, r2, r3
 802b3c6:	ee13 2a10 	vmov	r2, s6
 802b3ca:	931f      	str	r3, [sp, #124]	@ 0x7c
 802b3cc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b3ce:	ee16 6a90 	vmov	r6, s13
 802b3d2:	fb92 f3f3 	sdiv	r3, r2, r3
 802b3d6:	9320      	str	r3, [sp, #128]	@ 0x80
 802b3d8:	9b07      	ldr	r3, [sp, #28]
 802b3da:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 802b3dc:	3b01      	subs	r3, #1
 802b3de:	9307      	str	r3, [sp, #28]
 802b3e0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 802b3e2:	bf0c      	ite	eq
 802b3e4:	4615      	moveq	r5, r2
 802b3e6:	461d      	movne	r5, r3
 802b3e8:	eeb0 3a67 	vmov.f32	s6, s15
 802b3ec:	eef0 2a47 	vmov.f32	s5, s14
 802b3f0:	e6d4      	b.n	802b19c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 802b3f2:	2900      	cmp	r1, #0
 802b3f4:	f43f af5c 	beq.w	802b2b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b3f8:	eb0a 0003 	add.w	r0, sl, r3
 802b3fc:	0843      	lsrs	r3, r0, #1
 802b3fe:	5cfb      	ldrb	r3, [r7, r3]
 802b400:	07c0      	lsls	r0, r0, #31
 802b402:	bf54      	ite	pl
 802b404:	f003 030f 	andpl.w	r3, r3, #15
 802b408:	111b      	asrmi	r3, r3, #4
 802b40a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802b40e:	b2db      	uxtb	r3, r3
 802b410:	930a      	str	r3, [sp, #40]	@ 0x28
 802b412:	e74d      	b.n	802b2b0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 802b414:	2b00      	cmp	r3, #0
 802b416:	f43f af78 	beq.w	802b30a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b41a:	fa1f fe83 	uxth.w	lr, r3
 802b41e:	43db      	mvns	r3, r3
 802b420:	4a71      	ldr	r2, [pc, #452]	@ (802b5e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802b422:	f8b8 c000 	ldrh.w	ip, [r8]
 802b426:	6810      	ldr	r0, [r2, #0]
 802b428:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b42c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b430:	fb12 f20e 	smulbb	r2, r2, lr
 802b434:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b438:	b2c0      	uxtb	r0, r0
 802b43a:	fb1b fb0e 	smulbb	fp, fp, lr
 802b43e:	fb10 fe0e 	smulbb	lr, r0, lr
 802b442:	b2db      	uxtb	r3, r3
 802b444:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802b448:	fb01 2103 	mla	r1, r1, r3, r2
 802b44c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b450:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b454:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802b458:	fa5f fc8c 	uxtb.w	ip, ip
 802b45c:	fb02 b203 	mla	r2, r2, r3, fp
 802b460:	fb0c e303 	mla	r3, ip, r3, lr
 802b464:	b289      	uxth	r1, r1
 802b466:	1c48      	adds	r0, r1, #1
 802b468:	b292      	uxth	r2, r2
 802b46a:	b29b      	uxth	r3, r3
 802b46c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 802b470:	f401 4078 	and.w	r0, r1, #63488	@ 0xf800
 802b474:	f102 0b01 	add.w	fp, r2, #1
 802b478:	1c59      	adds	r1, r3, #1
 802b47a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802b47e:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b482:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 802b486:	0952      	lsrs	r2, r2, #5
 802b488:	4301      	orrs	r1, r0
 802b48a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b48e:	4311      	orrs	r1, r2
 802b490:	f8a8 1000 	strh.w	r1, [r8]
 802b494:	e739      	b.n	802b30a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b496:	f113 0b01 	adds.w	fp, r3, #1
 802b49a:	f53f af36 	bmi.w	802b30a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b49e:	45dc      	cmp	ip, fp
 802b4a0:	f6ff af33 	blt.w	802b30a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b4a4:	f110 0b01 	adds.w	fp, r0, #1
 802b4a8:	f53f af2f 	bmi.w	802b30a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b4ac:	45de      	cmp	lr, fp
 802b4ae:	f6ff af2c 	blt.w	802b30a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b4b2:	9a08      	ldr	r2, [sp, #32]
 802b4b4:	9302      	str	r3, [sp, #8]
 802b4b6:	fa0f f38e 	sxth.w	r3, lr
 802b4ba:	9301      	str	r3, [sp, #4]
 802b4bc:	fa0f f38c 	sxth.w	r3, ip
 802b4c0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802b4c4:	9105      	str	r1, [sp, #20]
 802b4c6:	9300      	str	r3, [sp, #0]
 802b4c8:	463a      	mov	r2, r7
 802b4ca:	4653      	mov	r3, sl
 802b4cc:	4641      	mov	r1, r8
 802b4ce:	9811      	ldr	r0, [sp, #68]	@ 0x44
 802b4d0:	f7ff fd74 	bl	802afbc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 802b4d4:	e719      	b.n	802b30a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802b4d6:	9906      	ldr	r1, [sp, #24]
 802b4d8:	1422      	asrs	r2, r4, #16
 802b4da:	1433      	asrs	r3, r6, #16
 802b4dc:	fb01 2303 	mla	r3, r1, r3, r2
 802b4e0:	085a      	lsrs	r2, r3, #1
 802b4e2:	5cba      	ldrb	r2, [r7, r2]
 802b4e4:	07d9      	lsls	r1, r3, #31
 802b4e6:	bf54      	ite	pl
 802b4e8:	f002 020f 	andpl.w	r2, r2, #15
 802b4ec:	1112      	asrmi	r2, r2, #4
 802b4ee:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802b4f2:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802b4f6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802b4fa:	b2d2      	uxtb	r2, r2
 802b4fc:	2800      	cmp	r0, #0
 802b4fe:	d062      	beq.n	802b5c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802b500:	f103 0a01 	add.w	sl, r3, #1
 802b504:	ea4f 015a 	mov.w	r1, sl, lsr #1
 802b508:	5c79      	ldrb	r1, [r7, r1]
 802b50a:	f01a 0f01 	tst.w	sl, #1
 802b50e:	bf0c      	ite	eq
 802b510:	f001 010f 	andeq.w	r1, r1, #15
 802b514:	1109      	asrne	r1, r1, #4
 802b516:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b51a:	b2c9      	uxtb	r1, r1
 802b51c:	910f      	str	r1, [sp, #60]	@ 0x3c
 802b51e:	f1bc 0f00 	cmp.w	ip, #0
 802b522:	d019      	beq.n	802b558 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802b524:	9908      	ldr	r1, [sp, #32]
 802b526:	440b      	add	r3, r1
 802b528:	0859      	lsrs	r1, r3, #1
 802b52a:	5c79      	ldrb	r1, [r7, r1]
 802b52c:	f013 0f01 	tst.w	r3, #1
 802b530:	bf0c      	ite	eq
 802b532:	f001 010f 	andeq.w	r1, r1, #15
 802b536:	1109      	asrne	r1, r1, #4
 802b538:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b53c:	b2c9      	uxtb	r1, r1
 802b53e:	3301      	adds	r3, #1
 802b540:	910b      	str	r1, [sp, #44]	@ 0x2c
 802b542:	0859      	lsrs	r1, r3, #1
 802b544:	5c79      	ldrb	r1, [r7, r1]
 802b546:	07db      	lsls	r3, r3, #31
 802b548:	bf54      	ite	pl
 802b54a:	f001 010f 	andpl.w	r1, r1, #15
 802b54e:	1109      	asrmi	r1, r1, #4
 802b550:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b554:	b2c9      	uxtb	r1, r1
 802b556:	9110      	str	r1, [sp, #64]	@ 0x40
 802b558:	b280      	uxth	r0, r0
 802b55a:	fa1f fc8c 	uxth.w	ip, ip
 802b55e:	fb00 f30c 	mul.w	r3, r0, ip
 802b562:	0100      	lsls	r0, r0, #4
 802b564:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 802b568:	fa1f fc8c 	uxth.w	ip, ip
 802b56c:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 802b570:	eba1 010c 	sub.w	r1, r1, ip
 802b574:	fa1f fa81 	uxth.w	sl, r1
 802b578:	1ac0      	subs	r0, r0, r3
 802b57a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802b57c:	b280      	uxth	r0, r0
 802b57e:	4348      	muls	r0, r1
 802b580:	fb02 020a 	mla	r2, r2, sl, r0
 802b584:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802b586:	fb0c 2c01 	mla	ip, ip, r1, r2
 802b58a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 802b58c:	fb03 c302 	mla	r3, r3, r2, ip
 802b590:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802b594:	2bff      	cmp	r3, #255	@ 0xff
 802b596:	d12b      	bne.n	802b5f0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 802b598:	4b13      	ldr	r3, [pc, #76]	@ (802b5e8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 802b59a:	681a      	ldr	r2, [r3, #0]
 802b59c:	4b13      	ldr	r3, [pc, #76]	@ (802b5ec <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802b59e:	0951      	lsrs	r1, r2, #5
 802b5a0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802b5a4:	f401 61fc 	and.w	r1, r1, #2016	@ 0x7e0
 802b5a8:	430b      	orrs	r3, r1
 802b5aa:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802b5ae:	4313      	orrs	r3, r2
 802b5b0:	f8ae 3000 	strh.w	r3, [lr]
 802b5b4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 802b5b6:	f10e 0e02 	add.w	lr, lr, #2
 802b5ba:	441c      	add	r4, r3
 802b5bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802b5be:	f108 38ff 	add.w	r8, r8, #4294967295
 802b5c2:	441e      	add	r6, r3
 802b5c4:	e6ce      	b.n	802b364 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 802b5c6:	f1bc 0f00 	cmp.w	ip, #0
 802b5ca:	d0c5      	beq.n	802b558 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802b5cc:	9908      	ldr	r1, [sp, #32]
 802b5ce:	440b      	add	r3, r1
 802b5d0:	0859      	lsrs	r1, r3, #1
 802b5d2:	5c79      	ldrb	r1, [r7, r1]
 802b5d4:	07db      	lsls	r3, r3, #31
 802b5d6:	bf54      	ite	pl
 802b5d8:	f001 010f 	andpl.w	r1, r1, #15
 802b5dc:	1109      	asrmi	r1, r1, #4
 802b5de:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802b5e2:	b2c9      	uxtb	r1, r1
 802b5e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 802b5e6:	e7b7      	b.n	802b558 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 802b5e8:	20012114 	.word	0x20012114
 802b5ec:	fffff800 	.word	0xfffff800
 802b5f0:	2b00      	cmp	r3, #0
 802b5f2:	d0df      	beq.n	802b5b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802b5f4:	fa1f fa83 	uxth.w	sl, r3
 802b5f8:	43db      	mvns	r3, r3
 802b5fa:	4a20      	ldr	r2, [pc, #128]	@ (802b67c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802b5fc:	f8be c000 	ldrh.w	ip, [lr]
 802b600:	6810      	ldr	r0, [r2, #0]
 802b602:	ea4f 212c 	mov.w	r1, ip, asr #8
 802b606:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802b60a:	fb12 f20a 	smulbb	r2, r2, sl
 802b60e:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 802b612:	b2c0      	uxtb	r0, r0
 802b614:	fb10 f00a 	smulbb	r0, r0, sl
 802b618:	b2db      	uxtb	r3, r3
 802b61a:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 802b61e:	fb01 2103 	mla	r1, r1, r3, r2
 802b622:	ea4f 02ec 	mov.w	r2, ip, asr #3
 802b626:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802b62a:	fb1b fb0a 	smulbb	fp, fp, sl
 802b62e:	fa5f fc8c 	uxtb.w	ip, ip
 802b632:	fb0c 0003 	mla	r0, ip, r3, r0
 802b636:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 802b63a:	fb02 b203 	mla	r2, r2, r3, fp
 802b63e:	b289      	uxth	r1, r1
 802b640:	b280      	uxth	r0, r0
 802b642:	1c4b      	adds	r3, r1, #1
 802b644:	f100 0b01 	add.w	fp, r0, #1
 802b648:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802b64c:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 802b650:	b292      	uxth	r2, r2
 802b652:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 802b656:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 802b65a:	ea4b 0101 	orr.w	r1, fp, r1
 802b65e:	f102 0b01 	add.w	fp, r2, #1
 802b662:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 802b666:	0952      	lsrs	r2, r2, #5
 802b668:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802b66c:	4311      	orrs	r1, r2
 802b66e:	f8ae 1000 	strh.w	r1, [lr]
 802b672:	e79f      	b.n	802b5b4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802b674:	b013      	add	sp, #76	@ 0x4c
 802b676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b67a:	bf00      	nop
 802b67c:	20012114 	.word	0x20012114

0802b680 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 802b680:	b570      	push	{r4, r5, r6, lr}
 802b682:	1208      	asrs	r0, r1, #8
 802b684:	b29e      	uxth	r6, r3
 802b686:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 802b68a:	1213      	asrs	r3, r2, #8
 802b68c:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 802b690:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 802b694:	fb13 f305 	smulbb	r3, r3, r5
 802b698:	fb10 f006 	smulbb	r0, r0, r6
 802b69c:	10cc      	asrs	r4, r1, #3
 802b69e:	4418      	add	r0, r3
 802b6a0:	10d3      	asrs	r3, r2, #3
 802b6a2:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 802b6a6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 802b6aa:	fb13 f305 	smulbb	r3, r3, r5
 802b6ae:	fb14 f406 	smulbb	r4, r4, r6
 802b6b2:	00c9      	lsls	r1, r1, #3
 802b6b4:	00d2      	lsls	r2, r2, #3
 802b6b6:	441c      	add	r4, r3
 802b6b8:	b2d2      	uxtb	r2, r2
 802b6ba:	b2cb      	uxtb	r3, r1
 802b6bc:	fb12 f205 	smulbb	r2, r2, r5
 802b6c0:	fb13 f306 	smulbb	r3, r3, r6
 802b6c4:	b280      	uxth	r0, r0
 802b6c6:	4413      	add	r3, r2
 802b6c8:	1c42      	adds	r2, r0, #1
 802b6ca:	b29b      	uxth	r3, r3
 802b6cc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 802b6d0:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 802b6d4:	1c58      	adds	r0, r3, #1
 802b6d6:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802b6da:	b2a4      	uxth	r4, r4
 802b6dc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b6e0:	4310      	orrs	r0, r2
 802b6e2:	1c62      	adds	r2, r4, #1
 802b6e4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802b6e8:	0964      	lsrs	r4, r4, #5
 802b6ea:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802b6ee:	4320      	orrs	r0, r4
 802b6f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0802b6f4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 802b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6f8:	b08f      	sub	sp, #60	@ 0x3c
 802b6fa:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802b6fe:	461c      	mov	r4, r3
 802b700:	9004      	str	r0, [sp, #16]
 802b702:	460d      	mov	r5, r1
 802b704:	4616      	mov	r6, r2
 802b706:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802b708:	2f00      	cmp	r7, #0
 802b70a:	f000 80f5 	beq.w	802b8f8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x204>
 802b70e:	f04f 0802 	mov.w	r8, #2
 802b712:	6820      	ldr	r0, [r4, #0]
 802b714:	6861      	ldr	r1, [r4, #4]
 802b716:	aa0a      	add	r2, sp, #40	@ 0x28
 802b718:	c203      	stmia	r2!, {r0, r1}
 802b71a:	6818      	ldr	r0, [r3, #0]
 802b71c:	6859      	ldr	r1, [r3, #4]
 802b71e:	aa0c      	add	r2, sp, #48	@ 0x30
 802b720:	c203      	stmia	r2!, {r0, r1}
 802b722:	a80a      	add	r0, sp, #40	@ 0x28
 802b724:	f7ee ff74 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b728:	4621      	mov	r1, r4
 802b72a:	a80c      	add	r0, sp, #48	@ 0x30
 802b72c:	f7ee ff98 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b730:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802b734:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802b738:	f002 0301 	and.w	r3, r2, #1
 802b73c:	9306      	str	r3, [sp, #24]
 802b73e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802b742:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 802b746:	f003 0101 	and.w	r1, r3, #1
 802b74a:	9105      	str	r1, [sp, #20]
 802b74c:	9805      	ldr	r0, [sp, #20]
 802b74e:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802b752:	4403      	add	r3, r0
 802b754:	fb01 2303 	mla	r3, r1, r3, r2
 802b758:	fb93 f3f8 	sdiv	r3, r3, r8
 802b75c:	441d      	add	r5, r3
 802b75e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802b762:	3604      	adds	r6, #4
 802b764:	441a      	add	r2, r3
 802b766:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802b76a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802b76e:	4419      	add	r1, r3
 802b770:	4b63      	ldr	r3, [pc, #396]	@ (802b900 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802b772:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802b776:	6818      	ldr	r0, [r3, #0]
 802b778:	6803      	ldr	r3, [r0, #0]
 802b77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802b77c:	4798      	blx	r3
 802b77e:	4a61      	ldr	r2, [pc, #388]	@ (802b904 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 802b780:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802b784:	8813      	ldrh	r3, [r2, #0]
 802b786:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 802b78a:	2fff      	cmp	r7, #255	@ 0xff
 802b78c:	fb03 a404 	mla	r4, r3, r4, sl
 802b790:	4611      	mov	r1, r2
 802b792:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802b796:	fb03 fb0b 	mul.w	fp, r3, fp
 802b79a:	d06b      	beq.n	802b874 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x180>
 802b79c:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 802b7a0:	9303      	str	r3, [sp, #12]
 802b7a2:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 802b7a6:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802b7aa:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802b7ae:	9b07      	ldr	r3, [sp, #28]
 802b7b0:	42a3      	cmp	r3, r4
 802b7b2:	f240 809c 	bls.w	802b8ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802b7b6:	9b06      	ldr	r3, [sp, #24]
 802b7b8:	2b00      	cmp	r3, #0
 802b7ba:	d039      	beq.n	802b830 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13c>
 802b7bc:	782b      	ldrb	r3, [r5, #0]
 802b7be:	8822      	ldrh	r2, [r4, #0]
 802b7c0:	f003 030f 	and.w	r3, r3, #15
 802b7c4:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802b7c8:	9b03      	ldr	r3, [sp, #12]
 802b7ca:	9804      	ldr	r0, [sp, #16]
 802b7cc:	9300      	str	r3, [sp, #0]
 802b7ce:	463b      	mov	r3, r7
 802b7d0:	f7ff ff56 	bl	802b680 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802b7d4:	f105 0801 	add.w	r8, r5, #1
 802b7d8:	f824 0b02 	strh.w	r0, [r4], #2
 802b7dc:	f109 3bff 	add.w	fp, r9, #4294967295
 802b7e0:	f1bb 0f01 	cmp.w	fp, #1
 802b7e4:	46a2      	mov	sl, r4
 802b7e6:	f104 0404 	add.w	r4, r4, #4
 802b7ea:	dd24      	ble.n	802b836 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x142>
 802b7ec:	f898 3000 	ldrb.w	r3, [r8]
 802b7f0:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802b7f4:	091b      	lsrs	r3, r3, #4
 802b7f6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802b7fa:	9b03      	ldr	r3, [sp, #12]
 802b7fc:	9804      	ldr	r0, [sp, #16]
 802b7fe:	9300      	str	r3, [sp, #0]
 802b800:	463b      	mov	r3, r7
 802b802:	f7ff ff3d 	bl	802b680 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802b806:	f824 0c04 	strh.w	r0, [r4, #-4]
 802b80a:	f818 3b01 	ldrb.w	r3, [r8], #1
 802b80e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802b812:	f003 030f 	and.w	r3, r3, #15
 802b816:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802b81a:	9b03      	ldr	r3, [sp, #12]
 802b81c:	9804      	ldr	r0, [sp, #16]
 802b81e:	9300      	str	r3, [sp, #0]
 802b820:	463b      	mov	r3, r7
 802b822:	f7ff ff2d 	bl	802b680 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802b826:	f1ab 0b02 	sub.w	fp, fp, #2
 802b82a:	f824 0c02 	strh.w	r0, [r4, #-2]
 802b82e:	e7d7      	b.n	802b7e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802b830:	46a8      	mov	r8, r5
 802b832:	46cb      	mov	fp, r9
 802b834:	e7d4      	b.n	802b7e0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xec>
 802b836:	d10e      	bne.n	802b856 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x162>
 802b838:	f898 3000 	ldrb.w	r3, [r8]
 802b83c:	f8ba 2000 	ldrh.w	r2, [sl]
 802b840:	091b      	lsrs	r3, r3, #4
 802b842:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 802b846:	9b03      	ldr	r3, [sp, #12]
 802b848:	9804      	ldr	r0, [sp, #16]
 802b84a:	9300      	str	r3, [sp, #0]
 802b84c:	463b      	mov	r3, r7
 802b84e:	f7ff ff17 	bl	802b680 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 802b852:	f82a 0b02 	strh.w	r0, [sl], #2
 802b856:	9b08      	ldr	r3, [sp, #32]
 802b858:	9a05      	ldr	r2, [sp, #20]
 802b85a:	881c      	ldrh	r4, [r3, #0]
 802b85c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802b860:	eba4 0409 	sub.w	r4, r4, r9
 802b864:	4413      	add	r3, r2
 802b866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802b868:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 802b86c:	fb93 f3f2 	sdiv	r3, r3, r2
 802b870:	441d      	add	r5, r3
 802b872:	e79c      	b.n	802b7ae <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xba>
 802b874:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 802b878:	45a3      	cmp	fp, r4
 802b87a:	d938      	bls.n	802b8ee <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fa>
 802b87c:	9b06      	ldr	r3, [sp, #24]
 802b87e:	b1f3      	cbz	r3, 802b8be <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1ca>
 802b880:	782b      	ldrb	r3, [r5, #0]
 802b882:	1c6a      	adds	r2, r5, #1
 802b884:	f003 030f 	and.w	r3, r3, #15
 802b888:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802b88c:	f109 30ff 	add.w	r0, r9, #4294967295
 802b890:	8023      	strh	r3, [r4, #0]
 802b892:	3402      	adds	r4, #2
 802b894:	2801      	cmp	r0, #1
 802b896:	4623      	mov	r3, r4
 802b898:	f104 0404 	add.w	r4, r4, #4
 802b89c:	dd12      	ble.n	802b8c4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d0>
 802b89e:	7813      	ldrb	r3, [r2, #0]
 802b8a0:	3802      	subs	r0, #2
 802b8a2:	091b      	lsrs	r3, r3, #4
 802b8a4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802b8a8:	f824 3c04 	strh.w	r3, [r4, #-4]
 802b8ac:	f812 3b01 	ldrb.w	r3, [r2], #1
 802b8b0:	f003 030f 	and.w	r3, r3, #15
 802b8b4:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 802b8b8:	f824 3c02 	strh.w	r3, [r4, #-2]
 802b8bc:	e7ea      	b.n	802b894 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802b8be:	462a      	mov	r2, r5
 802b8c0:	4648      	mov	r0, r9
 802b8c2:	e7e7      	b.n	802b894 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a0>
 802b8c4:	d106      	bne.n	802b8d4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e0>
 802b8c6:	7812      	ldrb	r2, [r2, #0]
 802b8c8:	3302      	adds	r3, #2
 802b8ca:	0912      	lsrs	r2, r2, #4
 802b8cc:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 802b8d0:	f823 2c02 	strh.w	r2, [r3, #-2]
 802b8d4:	880c      	ldrh	r4, [r1, #0]
 802b8d6:	9a05      	ldr	r2, [sp, #20]
 802b8d8:	eba4 0409 	sub.w	r4, r4, r9
 802b8dc:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 802b8e0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802b8e4:	4413      	add	r3, r2
 802b8e6:	fb93 f3f8 	sdiv	r3, r3, r8
 802b8ea:	441d      	add	r5, r3
 802b8ec:	e7c4      	b.n	802b878 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x184>
 802b8ee:	4b04      	ldr	r3, [pc, #16]	@ (802b900 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 802b8f0:	6818      	ldr	r0, [r3, #0]
 802b8f2:	6803      	ldr	r3, [r0, #0]
 802b8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802b8f6:	4798      	blx	r3
 802b8f8:	b00f      	add	sp, #60	@ 0x3c
 802b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b8fe:	bf00      	nop
 802b900:	20012104 	.word	0x20012104
 802b904:	200120fe 	.word	0x200120fe

0802b908 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 802b908:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b90a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 802b90e:	0a0f      	lsrs	r7, r1, #8
 802b910:	2dff      	cmp	r5, #255	@ 0xff
 802b912:	d10c      	bne.n	802b92e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802b914:	2bff      	cmp	r3, #255	@ 0xff
 802b916:	d10a      	bne.n	802b92e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 802b918:	4b25      	ldr	r3, [pc, #148]	@ (802b9b0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 802b91a:	0948      	lsrs	r0, r1, #5
 802b91c:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 802b920:	403b      	ands	r3, r7
 802b922:	4318      	orrs	r0, r3
 802b924:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 802b928:	4308      	orrs	r0, r1
 802b92a:	b280      	uxth	r0, r0
 802b92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b92e:	fb15 f503 	smulbb	r5, r5, r3
 802b932:	b2ab      	uxth	r3, r5
 802b934:	1c5d      	adds	r5, r3, #1
 802b936:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 802b93a:	f3c5 2507 	ubfx	r5, r5, #8, #8
 802b93e:	fa1f fc85 	uxth.w	ip, r5
 802b942:	43ed      	mvns	r5, r5
 802b944:	1214      	asrs	r4, r2, #8
 802b946:	10d6      	asrs	r6, r2, #3
 802b948:	00d0      	lsls	r0, r2, #3
 802b94a:	f3c1 4207 	ubfx	r2, r1, #16, #8
 802b94e:	fb12 f20c 	smulbb	r2, r2, ip
 802b952:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802b956:	b2eb      	uxtb	r3, r5
 802b958:	b2c0      	uxtb	r0, r0
 802b95a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802b95e:	fb04 2403 	mla	r4, r4, r3, r2
 802b962:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 802b966:	b2c8      	uxtb	r0, r1
 802b968:	b2fd      	uxtb	r5, r7
 802b96a:	fb10 f00c 	smulbb	r0, r0, ip
 802b96e:	fb15 f50c 	smulbb	r5, r5, ip
 802b972:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 802b976:	fb02 0003 	mla	r0, r2, r3, r0
 802b97a:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 802b97e:	fb06 5503 	mla	r5, r6, r3, r5
 802b982:	b2a4      	uxth	r4, r4
 802b984:	b283      	uxth	r3, r0
 802b986:	1c60      	adds	r0, r4, #1
 802b988:	b2ad      	uxth	r5, r5
 802b98a:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 802b98e:	1c58      	adds	r0, r3, #1
 802b990:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802b994:	1c6b      	adds	r3, r5, #1
 802b996:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 802b99a:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 802b99e:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802b9a2:	096d      	lsrs	r5, r5, #5
 802b9a4:	4320      	orrs	r0, r4
 802b9a6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 802b9aa:	4328      	orrs	r0, r5
 802b9ac:	e7be      	b.n	802b92c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x24>
 802b9ae:	bf00      	nop
 802b9b0:	00fff800 	.word	0x00fff800

0802b9b4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 802b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b9b8:	461c      	mov	r4, r3
 802b9ba:	f04f 0a02 	mov.w	sl, #2
 802b9be:	b08d      	sub	sp, #52	@ 0x34
 802b9c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802b9c2:	460d      	mov	r5, r1
 802b9c4:	4680      	mov	r8, r0
 802b9c6:	6861      	ldr	r1, [r4, #4]
 802b9c8:	6820      	ldr	r0, [r4, #0]
 802b9ca:	4616      	mov	r6, r2
 802b9cc:	aa08      	add	r2, sp, #32
 802b9ce:	c203      	stmia	r2!, {r0, r1}
 802b9d0:	6818      	ldr	r0, [r3, #0]
 802b9d2:	6859      	ldr	r1, [r3, #4]
 802b9d4:	aa0a      	add	r2, sp, #40	@ 0x28
 802b9d6:	c203      	stmia	r2!, {r0, r1}
 802b9d8:	a808      	add	r0, sp, #32
 802b9da:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 802b9de:	f7ee fe17 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802b9e2:	4621      	mov	r1, r4
 802b9e4:	a80a      	add	r0, sp, #40	@ 0x28
 802b9e6:	f7ee fe3b 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802b9ea:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 802b9ee:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 802b9f2:	f002 0301 	and.w	r3, r2, #1
 802b9f6:	9303      	str	r3, [sp, #12]
 802b9f8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802b9fc:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 802ba00:	f003 0101 	and.w	r1, r3, #1
 802ba04:	9102      	str	r1, [sp, #8]
 802ba06:	9802      	ldr	r0, [sp, #8]
 802ba08:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 802ba0c:	4403      	add	r3, r0
 802ba0e:	fb01 2303 	mla	r3, r1, r3, r2
 802ba12:	fb93 f3fa 	sdiv	r3, r3, sl
 802ba16:	441d      	add	r5, r3
 802ba18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ba1c:	3604      	adds	r6, #4
 802ba1e:	441a      	add	r2, r3
 802ba20:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 802ba24:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 802ba28:	4a3e      	ldr	r2, [pc, #248]	@ (802bb24 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 802ba2a:	4419      	add	r1, r3
 802ba2c:	6810      	ldr	r0, [r2, #0]
 802ba2e:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 802ba32:	6803      	ldr	r3, [r0, #0]
 802ba34:	9205      	str	r2, [sp, #20]
 802ba36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802ba38:	4798      	blx	r3
 802ba3a:	4b3b      	ldr	r3, [pc, #236]	@ (802bb28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 802ba3c:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 802ba40:	8819      	ldrh	r1, [r3, #0]
 802ba42:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 802ba46:	434f      	muls	r7, r1
 802ba48:	fb01 c404 	mla	r4, r1, r4, ip
 802ba4c:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 802ba50:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802ba54:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 802ba58:	9204      	str	r2, [sp, #16]
 802ba5a:	9b04      	ldr	r3, [sp, #16]
 802ba5c:	429c      	cmp	r4, r3
 802ba5e:	d258      	bcs.n	802bb12 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 802ba60:	9b03      	ldr	r3, [sp, #12]
 802ba62:	2b00      	cmp	r3, #0
 802ba64:	d034      	beq.n	802bad0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 802ba66:	782b      	ldrb	r3, [r5, #0]
 802ba68:	1c6f      	adds	r7, r5, #1
 802ba6a:	f003 030f 	and.w	r3, r3, #15
 802ba6e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ba72:	0e0b      	lsrs	r3, r1, #24
 802ba74:	d006      	beq.n	802ba84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 802ba76:	8822      	ldrh	r2, [r4, #0]
 802ba78:	4640      	mov	r0, r8
 802ba7a:	9300      	str	r3, [sp, #0]
 802ba7c:	464b      	mov	r3, r9
 802ba7e:	f7ff ff43 	bl	802b908 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802ba82:	8020      	strh	r0, [r4, #0]
 802ba84:	3402      	adds	r4, #2
 802ba86:	f10b 3aff 	add.w	sl, fp, #4294967295
 802ba8a:	f1ba 0f01 	cmp.w	sl, #1
 802ba8e:	dd22      	ble.n	802bad6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 802ba90:	783b      	ldrb	r3, [r7, #0]
 802ba92:	091b      	lsrs	r3, r3, #4
 802ba94:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802ba98:	0e0b      	lsrs	r3, r1, #24
 802ba9a:	d006      	beq.n	802baaa <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 802ba9c:	8822      	ldrh	r2, [r4, #0]
 802ba9e:	4640      	mov	r0, r8
 802baa0:	9300      	str	r3, [sp, #0]
 802baa2:	464b      	mov	r3, r9
 802baa4:	f7ff ff30 	bl	802b908 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802baa8:	8020      	strh	r0, [r4, #0]
 802baaa:	f817 3b01 	ldrb.w	r3, [r7], #1
 802baae:	f003 030f 	and.w	r3, r3, #15
 802bab2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bab6:	0e0b      	lsrs	r3, r1, #24
 802bab8:	d006      	beq.n	802bac8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 802baba:	8862      	ldrh	r2, [r4, #2]
 802babc:	4640      	mov	r0, r8
 802babe:	9300      	str	r3, [sp, #0]
 802bac0:	464b      	mov	r3, r9
 802bac2:	f7ff ff21 	bl	802b908 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802bac6:	8060      	strh	r0, [r4, #2]
 802bac8:	3404      	adds	r4, #4
 802baca:	f1aa 0a02 	sub.w	sl, sl, #2
 802bace:	e7dc      	b.n	802ba8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802bad0:	462f      	mov	r7, r5
 802bad2:	46da      	mov	sl, fp
 802bad4:	e7d9      	b.n	802ba8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 802bad6:	d10d      	bne.n	802baf4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 802bad8:	783b      	ldrb	r3, [r7, #0]
 802bada:	091b      	lsrs	r3, r3, #4
 802badc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802bae0:	0e0b      	lsrs	r3, r1, #24
 802bae2:	d006      	beq.n	802baf2 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 802bae4:	8822      	ldrh	r2, [r4, #0]
 802bae6:	4640      	mov	r0, r8
 802bae8:	9300      	str	r3, [sp, #0]
 802baea:	464b      	mov	r3, r9
 802baec:	f7ff ff0c 	bl	802b908 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 802baf0:	8020      	strh	r0, [r4, #0]
 802baf2:	3402      	adds	r4, #2
 802baf4:	9b06      	ldr	r3, [sp, #24]
 802baf6:	9a02      	ldr	r2, [sp, #8]
 802baf8:	881b      	ldrh	r3, [r3, #0]
 802bafa:	eba3 030b 	sub.w	r3, r3, fp
 802bafe:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802bb02:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 802bb06:	4413      	add	r3, r2
 802bb08:	9a07      	ldr	r2, [sp, #28]
 802bb0a:	fb93 f3f2 	sdiv	r3, r3, r2
 802bb0e:	441d      	add	r5, r3
 802bb10:	e7a3      	b.n	802ba5a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 802bb12:	9b05      	ldr	r3, [sp, #20]
 802bb14:	6818      	ldr	r0, [r3, #0]
 802bb16:	6803      	ldr	r3, [r0, #0]
 802bb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802bb1a:	4798      	blx	r3
 802bb1c:	b00d      	add	sp, #52	@ 0x34
 802bb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bb22:	bf00      	nop
 802bb24:	20012104 	.word	0x20012104
 802bb28:	200120fe 	.word	0x200120fe

0802bb2c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 802bb2c:	b570      	push	{r4, r5, r6, lr}
 802bb2e:	788d      	ldrb	r5, [r1, #2]
 802bb30:	1214      	asrs	r4, r2, #8
 802bb32:	fb15 f503 	smulbb	r5, r5, r3
 802bb36:	f89d 6010 	ldrb.w	r6, [sp, #16]
 802bb3a:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 802bb3e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 802bb42:	fb04 5506 	mla	r5, r4, r6, r5
 802bb46:	784c      	ldrb	r4, [r1, #1]
 802bb48:	7809      	ldrb	r1, [r1, #0]
 802bb4a:	fb14 f403 	smulbb	r4, r4, r3
 802bb4e:	fb11 f303 	smulbb	r3, r1, r3
 802bb52:	10d0      	asrs	r0, r2, #3
 802bb54:	00d2      	lsls	r2, r2, #3
 802bb56:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 802bb5a:	b2d2      	uxtb	r2, r2
 802bb5c:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802bb60:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802bb64:	fb00 4406 	mla	r4, r0, r6, r4
 802bb68:	fb02 3306 	mla	r3, r2, r6, r3
 802bb6c:	b2ad      	uxth	r5, r5
 802bb6e:	b29b      	uxth	r3, r3
 802bb70:	b2a4      	uxth	r4, r4
 802bb72:	1c68      	adds	r0, r5, #1
 802bb74:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 802bb78:	1c62      	adds	r2, r4, #1
 802bb7a:	1c58      	adds	r0, r3, #1
 802bb7c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802bb80:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 802bb84:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 802bb88:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 802bb8c:	0964      	lsrs	r4, r4, #5
 802bb8e:	4328      	orrs	r0, r5
 802bb90:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802bb94:	4320      	orrs	r0, r4
 802bb96:	bd70      	pop	{r4, r5, r6, pc}

0802bb98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 802bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802bb9c:	b08f      	sub	sp, #60	@ 0x3c
 802bb9e:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 802bba2:	461c      	mov	r4, r3
 802bba4:	4682      	mov	sl, r0
 802bba6:	460e      	mov	r6, r1
 802bba8:	4615      	mov	r5, r2
 802bbaa:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802bbac:	2f00      	cmp	r7, #0
 802bbae:	f000 8141 	beq.w	802be34 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29c>
 802bbb2:	f04f 0802 	mov.w	r8, #2
 802bbb6:	6820      	ldr	r0, [r4, #0]
 802bbb8:	6861      	ldr	r1, [r4, #4]
 802bbba:	aa0a      	add	r2, sp, #40	@ 0x28
 802bbbc:	c203      	stmia	r2!, {r0, r1}
 802bbbe:	6818      	ldr	r0, [r3, #0]
 802bbc0:	6859      	ldr	r1, [r3, #4]
 802bbc2:	aa0c      	add	r2, sp, #48	@ 0x30
 802bbc4:	c203      	stmia	r2!, {r0, r1}
 802bbc6:	a80a      	add	r0, sp, #40	@ 0x28
 802bbc8:	f7ee fd22 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802bbcc:	4621      	mov	r1, r4
 802bbce:	a80c      	add	r0, sp, #48	@ 0x30
 802bbd0:	f7ee fd46 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802bbd4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 802bbd8:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 802bbdc:	f002 0301 	and.w	r3, r2, #1
 802bbe0:	9306      	str	r3, [sp, #24]
 802bbe2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802bbe6:	3504      	adds	r5, #4
 802bbe8:	f003 0101 	and.w	r1, r3, #1
 802bbec:	9105      	str	r1, [sp, #20]
 802bbee:	9805      	ldr	r0, [sp, #20]
 802bbf0:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802bbf4:	4403      	add	r3, r0
 802bbf6:	fb01 2303 	mla	r3, r1, r3, r2
 802bbfa:	fb93 f3f8 	sdiv	r3, r3, r8
 802bbfe:	441e      	add	r6, r3
 802bc00:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802bc04:	441a      	add	r2, r3
 802bc06:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802bc0a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 802bc0e:	4419      	add	r1, r3
 802bc10:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 802bc14:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802bc18:	9303      	str	r3, [sp, #12]
 802bc1a:	4b88      	ldr	r3, [pc, #544]	@ (802be3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802bc1c:	6818      	ldr	r0, [r3, #0]
 802bc1e:	6803      	ldr	r3, [r0, #0]
 802bc20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802bc22:	4798      	blx	r3
 802bc24:	4a86      	ldr	r2, [pc, #536]	@ (802be40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 802bc26:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 802bc2a:	8813      	ldrh	r3, [r2, #0]
 802bc2c:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 802bc30:	2fff      	cmp	r7, #255	@ 0xff
 802bc32:	fb03 9404 	mla	r4, r3, r4, r9
 802bc36:	4694      	mov	ip, r2
 802bc38:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802bc3c:	fb03 f30b 	mul.w	r3, r3, fp
 802bc40:	d071      	beq.n	802bd26 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x18e>
 802bc42:	43f9      	mvns	r1, r7
 802bc44:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802bc48:	e9cd 3207 	strd	r3, r2, [sp, #28]
 802bc4c:	b2c9      	uxtb	r1, r1
 802bc4e:	9104      	str	r1, [sp, #16]
 802bc50:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 802bc54:	9b07      	ldr	r3, [sp, #28]
 802bc56:	42a3      	cmp	r3, r4
 802bc58:	f240 80e7 	bls.w	802be2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802bc5c:	9b06      	ldr	r3, [sp, #24]
 802bc5e:	2b00      	cmp	r3, #0
 802bc60:	d03d      	beq.n	802bcde <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x146>
 802bc62:	7831      	ldrb	r1, [r6, #0]
 802bc64:	9b04      	ldr	r3, [sp, #16]
 802bc66:	f001 010f 	and.w	r1, r1, #15
 802bc6a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802bc6e:	8822      	ldrh	r2, [r4, #0]
 802bc70:	4429      	add	r1, r5
 802bc72:	9300      	str	r3, [sp, #0]
 802bc74:	4650      	mov	r0, sl
 802bc76:	463b      	mov	r3, r7
 802bc78:	f7ff ff58 	bl	802bb2c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802bc7c:	9b03      	ldr	r3, [sp, #12]
 802bc7e:	f106 0801 	add.w	r8, r6, #1
 802bc82:	f824 0b02 	strh.w	r0, [r4], #2
 802bc86:	f103 3bff 	add.w	fp, r3, #4294967295
 802bc8a:	f1bb 0f01 	cmp.w	fp, #1
 802bc8e:	46a1      	mov	r9, r4
 802bc90:	f104 0404 	add.w	r4, r4, #4
 802bc94:	dd27      	ble.n	802bce6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x14e>
 802bc96:	f898 1000 	ldrb.w	r1, [r8]
 802bc9a:	9b04      	ldr	r3, [sp, #16]
 802bc9c:	0909      	lsrs	r1, r1, #4
 802bc9e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802bca2:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 802bca6:	4429      	add	r1, r5
 802bca8:	9300      	str	r3, [sp, #0]
 802bcaa:	4650      	mov	r0, sl
 802bcac:	463b      	mov	r3, r7
 802bcae:	f7ff ff3d 	bl	802bb2c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802bcb2:	f824 0c04 	strh.w	r0, [r4, #-4]
 802bcb6:	f818 1b01 	ldrb.w	r1, [r8], #1
 802bcba:	9b04      	ldr	r3, [sp, #16]
 802bcbc:	f001 010f 	and.w	r1, r1, #15
 802bcc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802bcc4:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 802bcc8:	4429      	add	r1, r5
 802bcca:	9300      	str	r3, [sp, #0]
 802bccc:	4650      	mov	r0, sl
 802bcce:	463b      	mov	r3, r7
 802bcd0:	f7ff ff2c 	bl	802bb2c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802bcd4:	f1ab 0b02 	sub.w	fp, fp, #2
 802bcd8:	f824 0c02 	strh.w	r0, [r4, #-2]
 802bcdc:	e7d5      	b.n	802bc8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802bcde:	46b0      	mov	r8, r6
 802bce0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802bce4:	e7d1      	b.n	802bc8a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf2>
 802bce6:	d10f      	bne.n	802bd08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x170>
 802bce8:	f898 1000 	ldrb.w	r1, [r8]
 802bcec:	9b04      	ldr	r3, [sp, #16]
 802bcee:	0909      	lsrs	r1, r1, #4
 802bcf0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802bcf4:	f8b9 2000 	ldrh.w	r2, [r9]
 802bcf8:	4429      	add	r1, r5
 802bcfa:	9300      	str	r3, [sp, #0]
 802bcfc:	4650      	mov	r0, sl
 802bcfe:	463b      	mov	r3, r7
 802bd00:	f7ff ff14 	bl	802bb2c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 802bd04:	f829 0b02 	strh.w	r0, [r9], #2
 802bd08:	9b08      	ldr	r3, [sp, #32]
 802bd0a:	9a05      	ldr	r2, [sp, #20]
 802bd0c:	881c      	ldrh	r4, [r3, #0]
 802bd0e:	9b03      	ldr	r3, [sp, #12]
 802bd10:	1ae4      	subs	r4, r4, r3
 802bd12:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802bd16:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 802bd1a:	4413      	add	r3, r2
 802bd1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802bd1e:	fb93 f3f2 	sdiv	r3, r3, r2
 802bd22:	441e      	add	r6, r3
 802bd24:	e796      	b.n	802bc54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbc>
 802bd26:	4f47      	ldr	r7, [pc, #284]	@ (802be44 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 802bd28:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 802bd2c:	42a3      	cmp	r3, r4
 802bd2e:	d97c      	bls.n	802be2a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x292>
 802bd30:	9a06      	ldr	r2, [sp, #24]
 802bd32:	2a00      	cmp	r2, #0
 802bd34:	d054      	beq.n	802bde0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x248>
 802bd36:	7830      	ldrb	r0, [r6, #0]
 802bd38:	1c71      	adds	r1, r6, #1
 802bd3a:	f000 000f 	and.w	r0, r0, #15
 802bd3e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802bd42:	eb05 0e00 	add.w	lr, r5, r0
 802bd46:	f89e 2002 	ldrb.w	r2, [lr, #2]
 802bd4a:	f89e e001 	ldrb.w	lr, [lr, #1]
 802bd4e:	5c28      	ldrb	r0, [r5, r0]
 802bd50:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802bd54:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 802bd58:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802bd5c:	ea42 020e 	orr.w	r2, r2, lr
 802bd60:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 802bd64:	f824 2b02 	strh.w	r2, [r4], #2
 802bd68:	9a03      	ldr	r2, [sp, #12]
 802bd6a:	f102 3eff 	add.w	lr, r2, #4294967295
 802bd6e:	f1be 0f01 	cmp.w	lr, #1
 802bd72:	4620      	mov	r0, r4
 802bd74:	f104 0404 	add.w	r4, r4, #4
 802bd78:	dd36      	ble.n	802bde8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x250>
 802bd7a:	7808      	ldrb	r0, [r1, #0]
 802bd7c:	f1ae 0e02 	sub.w	lr, lr, #2
 802bd80:	0900      	lsrs	r0, r0, #4
 802bd82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802bd86:	eb05 0a00 	add.w	sl, r5, r0
 802bd8a:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802bd8e:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802bd92:	00d2      	lsls	r2, r2, #3
 802bd94:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802bd98:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802bd9c:	ea49 0202 	orr.w	r2, r9, r2
 802bda0:	f815 9000 	ldrb.w	r9, [r5, r0]
 802bda4:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802bda8:	f824 2c04 	strh.w	r2, [r4, #-4]
 802bdac:	f811 0b01 	ldrb.w	r0, [r1], #1
 802bdb0:	f000 000f 	and.w	r0, r0, #15
 802bdb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802bdb8:	eb05 0a00 	add.w	sl, r5, r0
 802bdbc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 802bdc0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 802bdc4:	00d2      	lsls	r2, r2, #3
 802bdc6:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 802bdca:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 802bdce:	ea49 0202 	orr.w	r2, r9, r2
 802bdd2:	f815 9000 	ldrb.w	r9, [r5, r0]
 802bdd6:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 802bdda:	f824 2c02 	strh.w	r2, [r4, #-2]
 802bdde:	e7c6      	b.n	802bd6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802bde0:	4631      	mov	r1, r6
 802bde2:	f8dd e00c 	ldr.w	lr, [sp, #12]
 802bde6:	e7c2      	b.n	802bd6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d6>
 802bde8:	d111      	bne.n	802be0e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x276>
 802bdea:	7809      	ldrb	r1, [r1, #0]
 802bdec:	0909      	lsrs	r1, r1, #4
 802bdee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802bdf2:	186c      	adds	r4, r5, r1
 802bdf4:	78a2      	ldrb	r2, [r4, #2]
 802bdf6:	7864      	ldrb	r4, [r4, #1]
 802bdf8:	5c69      	ldrb	r1, [r5, r1]
 802bdfa:	00e4      	lsls	r4, r4, #3
 802bdfc:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 802be00:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 802be04:	4322      	orrs	r2, r4
 802be06:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 802be0a:	f820 2b02 	strh.w	r2, [r0], #2
 802be0e:	9a03      	ldr	r2, [sp, #12]
 802be10:	f8bc 4000 	ldrh.w	r4, [ip]
 802be14:	9905      	ldr	r1, [sp, #20]
 802be16:	1aa4      	subs	r4, r4, r2
 802be18:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 802be1c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802be20:	440a      	add	r2, r1
 802be22:	fb92 f2f8 	sdiv	r2, r2, r8
 802be26:	4416      	add	r6, r2
 802be28:	e780      	b.n	802bd2c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x194>
 802be2a:	4b04      	ldr	r3, [pc, #16]	@ (802be3c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 802be2c:	6818      	ldr	r0, [r3, #0]
 802be2e:	6803      	ldr	r3, [r0, #0]
 802be30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802be32:	4798      	blx	r3
 802be34:	b00f      	add	sp, #60	@ 0x3c
 802be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802be3a:	bf00      	nop
 802be3c:	20012104 	.word	0x20012104
 802be40:	200120fe 	.word	0x200120fe
 802be44:	fffff800 	.word	0xfffff800

0802be48 <CRC_Lock>:
 802be48:	b530      	push	{r4, r5, lr}
 802be4a:	4a2d      	ldr	r2, [pc, #180]	@ (802bf00 <CRC_Lock+0xb8>)
 802be4c:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802be50:	6813      	ldr	r3, [r2, #0]
 802be52:	f023 0301 	bic.w	r3, r3, #1
 802be56:	6013      	str	r3, [r2, #0]
 802be58:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 802be5c:	4b29      	ldr	r3, [pc, #164]	@ (802bf04 <CRC_Lock+0xbc>)
 802be5e:	681c      	ldr	r4, [r3, #0]
 802be60:	4014      	ands	r4, r2
 802be62:	42ac      	cmp	r4, r5
 802be64:	d005      	beq.n	802be72 <CRC_Lock+0x2a>
 802be66:	f24c 2570 	movw	r5, #49776	@ 0xc270
 802be6a:	681c      	ldr	r4, [r3, #0]
 802be6c:	4014      	ands	r4, r2
 802be6e:	42ac      	cmp	r4, r5
 802be70:	d125      	bne.n	802bebe <CRC_Lock+0x76>
 802be72:	4b25      	ldr	r3, [pc, #148]	@ (802bf08 <CRC_Lock+0xc0>)
 802be74:	681b      	ldr	r3, [r3, #0]
 802be76:	2b00      	cmp	r3, #0
 802be78:	d139      	bne.n	802beee <CRC_Lock+0xa6>
 802be7a:	4b24      	ldr	r3, [pc, #144]	@ (802bf0c <CRC_Lock+0xc4>)
 802be7c:	681a      	ldr	r2, [r3, #0]
 802be7e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802be82:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802be86:	d00d      	beq.n	802bea4 <CRC_Lock+0x5c>
 802be88:	f240 4483 	movw	r4, #1155	@ 0x483
 802be8c:	681a      	ldr	r2, [r3, #0]
 802be8e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802be92:	42a2      	cmp	r2, r4
 802be94:	d006      	beq.n	802bea4 <CRC_Lock+0x5c>
 802be96:	f240 4285 	movw	r2, #1157	@ 0x485
 802be9a:	681b      	ldr	r3, [r3, #0]
 802be9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802bea0:	4293      	cmp	r3, r2
 802bea2:	d124      	bne.n	802beee <CRC_Lock+0xa6>
 802bea4:	2201      	movs	r2, #1
 802bea6:	4b1a      	ldr	r3, [pc, #104]	@ (802bf10 <CRC_Lock+0xc8>)
 802bea8:	601a      	str	r2, [r3, #0]
 802beaa:	681a      	ldr	r2, [r3, #0]
 802beac:	2a00      	cmp	r2, #0
 802beae:	d1fc      	bne.n	802beaa <CRC_Lock+0x62>
 802beb0:	4b18      	ldr	r3, [pc, #96]	@ (802bf14 <CRC_Lock+0xcc>)
 802beb2:	6018      	str	r0, [r3, #0]
 802beb4:	6818      	ldr	r0, [r3, #0]
 802beb6:	1a43      	subs	r3, r0, r1
 802beb8:	4258      	negs	r0, r3
 802beba:	4158      	adcs	r0, r3
 802bebc:	e00e      	b.n	802bedc <CRC_Lock+0x94>
 802bebe:	681b      	ldr	r3, [r3, #0]
 802bec0:	4013      	ands	r3, r2
 802bec2:	f24d 2220 	movw	r2, #53792	@ 0xd220
 802bec6:	4293      	cmp	r3, r2
 802bec8:	d111      	bne.n	802beee <CRC_Lock+0xa6>
 802beca:	f240 4286 	movw	r2, #1158	@ 0x486
 802bece:	4b12      	ldr	r3, [pc, #72]	@ (802bf18 <CRC_Lock+0xd0>)
 802bed0:	681b      	ldr	r3, [r3, #0]
 802bed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802bed6:	4293      	cmp	r3, r2
 802bed8:	d001      	beq.n	802bede <CRC_Lock+0x96>
 802beda:	2000      	movs	r0, #0
 802bedc:	bd30      	pop	{r4, r5, pc}
 802bede:	2201      	movs	r2, #1
 802bee0:	4b0e      	ldr	r3, [pc, #56]	@ (802bf1c <CRC_Lock+0xd4>)
 802bee2:	601a      	str	r2, [r3, #0]
 802bee4:	681a      	ldr	r2, [r3, #0]
 802bee6:	2a00      	cmp	r2, #0
 802bee8:	d1fc      	bne.n	802bee4 <CRC_Lock+0x9c>
 802beea:	4b0d      	ldr	r3, [pc, #52]	@ (802bf20 <CRC_Lock+0xd8>)
 802beec:	e7e1      	b.n	802beb2 <CRC_Lock+0x6a>
 802beee:	2201      	movs	r2, #1
 802bef0:	4b0c      	ldr	r3, [pc, #48]	@ (802bf24 <CRC_Lock+0xdc>)
 802bef2:	601a      	str	r2, [r3, #0]
 802bef4:	681a      	ldr	r2, [r3, #0]
 802bef6:	2a00      	cmp	r2, #0
 802bef8:	d1fc      	bne.n	802bef4 <CRC_Lock+0xac>
 802befa:	4b0b      	ldr	r3, [pc, #44]	@ (802bf28 <CRC_Lock+0xe0>)
 802befc:	e7d9      	b.n	802beb2 <CRC_Lock+0x6a>
 802befe:	bf00      	nop
 802bf00:	e0002000 	.word	0xe0002000
 802bf04:	e000ed00 	.word	0xe000ed00
 802bf08:	e0042000 	.word	0xe0042000
 802bf0c:	5c001000 	.word	0x5c001000
 802bf10:	58024c08 	.word	0x58024c08
 802bf14:	58024c00 	.word	0x58024c00
 802bf18:	46008ff0 	.word	0x46008ff0
 802bf1c:	46024c08 	.word	0x46024c08
 802bf20:	46024c00 	.word	0x46024c00
 802bf24:	40023008 	.word	0x40023008
 802bf28:	40023000 	.word	0x40023000

0802bf2c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 802bf2c:	6101      	str	r1, [r0, #16]
 802bf2e:	4770      	bx	lr

0802bf30 <_ZN8touchgfx8Gestures4tickEv>:
 802bf30:	7b83      	ldrb	r3, [r0, #14]
 802bf32:	b14b      	cbz	r3, 802bf48 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802bf34:	8903      	ldrh	r3, [r0, #8]
 802bf36:	3301      	adds	r3, #1
 802bf38:	b29b      	uxth	r3, r3
 802bf3a:	2b07      	cmp	r3, #7
 802bf3c:	8103      	strh	r3, [r0, #8]
 802bf3e:	bf81      	itttt	hi
 802bf40:	2300      	movhi	r3, #0
 802bf42:	8143      	strhhi	r3, [r0, #10]
 802bf44:	8183      	strhhi	r3, [r0, #12]
 802bf46:	7383      	strbhi	r3, [r0, #14]
 802bf48:	4770      	bx	lr
	...

0802bf4c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 802bf4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802bf50:	4698      	mov	r8, r3
 802bf52:	4604      	mov	r4, r0
 802bf54:	8883      	ldrh	r3, [r0, #4]
 802bf56:	460e      	mov	r6, r1
 802bf58:	88c1      	ldrh	r1, [r0, #6]
 802bf5a:	2000      	movs	r0, #0
 802bf5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 802bf60:	eba8 0303 	sub.w	r3, r8, r3
 802bf64:	b21b      	sxth	r3, r3
 802bf66:	4617      	mov	r7, r2
 802bf68:	4a17      	ldr	r2, [pc, #92]	@ (802bfc8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802bf6a:	2b00      	cmp	r3, #0
 802bf6c:	bfb8      	it	lt
 802bf6e:	425b      	neglt	r3, r3
 802bf70:	9200      	str	r2, [sp, #0]
 802bf72:	8aa2      	ldrh	r2, [r4, #20]
 802bf74:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802bf78:	b21b      	sxth	r3, r3
 802bf7a:	4293      	cmp	r3, r2
 802bf7c:	f88d 0004 	strb.w	r0, [sp, #4]
 802bf80:	f8ad 1008 	strh.w	r1, [sp, #8]
 802bf84:	f8ad 800a 	strh.w	r8, [sp, #10]
 802bf88:	f8ad 500c 	strh.w	r5, [sp, #12]
 802bf8c:	dc07      	bgt.n	802bf9e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802bf8e:	1a69      	subs	r1, r5, r1
 802bf90:	b209      	sxth	r1, r1
 802bf92:	2900      	cmp	r1, #0
 802bf94:	bfb8      	it	lt
 802bf96:	4249      	neglt	r1, r1
 802bf98:	b209      	sxth	r1, r1
 802bf9a:	428a      	cmp	r2, r1
 802bf9c:	da10      	bge.n	802bfc0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802bf9e:	6920      	ldr	r0, [r4, #16]
 802bfa0:	4669      	mov	r1, sp
 802bfa2:	6803      	ldr	r3, [r0, #0]
 802bfa4:	eba8 0606 	sub.w	r6, r8, r6
 802bfa8:	685b      	ldr	r3, [r3, #4]
 802bfaa:	4798      	blx	r3
 802bfac:	2300      	movs	r3, #0
 802bfae:	2001      	movs	r0, #1
 802bfb0:	1bef      	subs	r7, r5, r7
 802bfb2:	8123      	strh	r3, [r4, #8]
 802bfb4:	8166      	strh	r6, [r4, #10]
 802bfb6:	81a7      	strh	r7, [r4, #12]
 802bfb8:	f8a4 8004 	strh.w	r8, [r4, #4]
 802bfbc:	80e5      	strh	r5, [r4, #6]
 802bfbe:	73a0      	strb	r0, [r4, #14]
 802bfc0:	b004      	add	sp, #16
 802bfc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bfc6:	bf00      	nop
 802bfc8:	08030554 	.word	0x08030554

0802bfcc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802bfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bfce:	461e      	mov	r6, r3
 802bfd0:	1e4b      	subs	r3, r1, #1
 802bfd2:	2b01      	cmp	r3, #1
 802bfd4:	b085      	sub	sp, #20
 802bfd6:	4604      	mov	r4, r0
 802bfd8:	460d      	mov	r5, r1
 802bfda:	4617      	mov	r7, r2
 802bfdc:	d84b      	bhi.n	802c076 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 802bfde:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802bfe2:	1cd3      	adds	r3, r2, #3
 802bfe4:	b29b      	uxth	r3, r3
 802bfe6:	2b06      	cmp	r3, #6
 802bfe8:	d916      	bls.n	802c018 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802bfea:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 802c08c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802bfee:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802bff2:	f8cd c004 	str.w	ip, [sp, #4]
 802bff6:	f04f 0c00 	mov.w	ip, #0
 802bffa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802bffe:	6900      	ldr	r0, [r0, #16]
 802c000:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c004:	f88d c008 	strb.w	ip, [sp, #8]
 802c008:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c00c:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c010:	6803      	ldr	r3, [r0, #0]
 802c012:	a901      	add	r1, sp, #4
 802c014:	689b      	ldr	r3, [r3, #8]
 802c016:	4798      	blx	r3
 802c018:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c01c:	1cd3      	adds	r3, r2, #3
 802c01e:	b29b      	uxth	r3, r3
 802c020:	2b06      	cmp	r3, #6
 802c022:	d916      	bls.n	802c052 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c024:	f8df c064 	ldr.w	ip, [pc, #100]	@ 802c08c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802c028:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802c02c:	f8cd c004 	str.w	ip, [sp, #4]
 802c030:	f04f 0c01 	mov.w	ip, #1
 802c034:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802c038:	6920      	ldr	r0, [r4, #16]
 802c03a:	f8ad 100c 	strh.w	r1, [sp, #12]
 802c03e:	f88d c008 	strb.w	ip, [sp, #8]
 802c042:	f8ad 200a 	strh.w	r2, [sp, #10]
 802c046:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c04a:	6803      	ldr	r3, [r0, #0]
 802c04c:	a901      	add	r1, sp, #4
 802c04e:	689b      	ldr	r3, [r3, #8]
 802c050:	4798      	blx	r3
 802c052:	4b0d      	ldr	r3, [pc, #52]	@ (802c088 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802c054:	6920      	ldr	r0, [r4, #16]
 802c056:	9301      	str	r3, [sp, #4]
 802c058:	2300      	movs	r3, #0
 802c05a:	f88d 5008 	strb.w	r5, [sp, #8]
 802c05e:	f8ad 700a 	strh.w	r7, [sp, #10]
 802c062:	f8ad 600c 	strh.w	r6, [sp, #12]
 802c066:	f8ad 300e 	strh.w	r3, [sp, #14]
 802c06a:	6803      	ldr	r3, [r0, #0]
 802c06c:	a901      	add	r1, sp, #4
 802c06e:	681b      	ldr	r3, [r3, #0]
 802c070:	4798      	blx	r3
 802c072:	b005      	add	sp, #20
 802c074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c076:	2900      	cmp	r1, #0
 802c078:	d1eb      	bne.n	802c052 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c07a:	80a2      	strh	r2, [r4, #4]
 802c07c:	80c6      	strh	r6, [r0, #6]
 802c07e:	60a1      	str	r1, [r4, #8]
 802c080:	81a1      	strh	r1, [r4, #12]
 802c082:	73a1      	strb	r1, [r4, #14]
 802c084:	e7e5      	b.n	802c052 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802c086:	bf00      	nop
 802c088:	08030540 	.word	0x08030540
 802c08c:	08030568 	.word	0x08030568

0802c090 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802c090:	10c9      	asrs	r1, r1, #3
 802c092:	2900      	cmp	r1, #0
 802c094:	bfb8      	it	lt
 802c096:	4249      	neglt	r1, r1
 802c098:	2801      	cmp	r0, #1
 802c09a:	d108      	bne.n	802c0ae <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802c09c:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802c0a0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 802c0a4:	4601      	mov	r1, r0
 802c0a6:	dd02      	ble.n	802c0ae <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 802c0a8:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 802c0ac:	4770      	bx	lr
 802c0ae:	29ff      	cmp	r1, #255	@ 0xff
 802c0b0:	bfa8      	it	ge
 802c0b2:	21ff      	movge	r1, #255	@ 0xff
 802c0b4:	4608      	mov	r0, r1
 802c0b6:	4770      	bx	lr

0802c0b8 <_ZN8touchgfx10Rasterizer6lineToEii>:
 802c0b8:	b410      	push	{r4}
 802c0ba:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802c0be:	429c      	cmp	r4, r3
 802c0c0:	d803      	bhi.n	802c0ca <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802c0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c0c6:	f7ec bd99 	b.w	8018bfc <_ZN8touchgfx7Outline6lineToEii>
 802c0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c0ce:	4770      	bx	lr

0802c0d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c0d4:	b08b      	sub	sp, #44	@ 0x2c
 802c0d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802c0da:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802c0de:	4606      	mov	r6, r0
 802c0e0:	9308      	str	r3, [sp, #32]
 802c0e2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 802c0e6:	468a      	mov	sl, r1
 802c0e8:	9309      	str	r3, [sp, #36]	@ 0x24
 802c0ea:	f7ec fef3 	bl	8018ed4 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802c0ee:	68b5      	ldr	r5, [r6, #8]
 802c0f0:	4604      	mov	r4, r0
 802c0f2:	2d00      	cmp	r5, #0
 802c0f4:	d044      	beq.n	802c180 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c0f6:	6873      	ldr	r3, [r6, #4]
 802c0f8:	42ab      	cmp	r3, r5
 802c0fa:	d33d      	bcc.n	802c178 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 802c0fc:	f04f 0800 	mov.w	r8, #0
 802c100:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802c104:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 802c108:	eb02 0b03 	add.w	fp, r2, r3
 802c10c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802c110:	fb02 1203 	mla	r2, r2, r3, r1
 802c114:	9205      	str	r2, [sp, #20]
 802c116:	1e6a      	subs	r2, r5, #1
 802c118:	9204      	str	r2, [sp, #16]
 802c11a:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802c11e:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c122:	454b      	cmp	r3, r9
 802c124:	463a      	mov	r2, r7
 802c126:	d008      	beq.n	802c13a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802c128:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 802c12c:	eb03 0b09 	add.w	fp, r3, r9
 802c130:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 802c134:	fb03 1309 	mla	r3, r3, r9, r1
 802c138:	9305      	str	r3, [sp, #20]
 802c13a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802c13e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802c142:	4498      	add	r8, r3
 802c144:	9b04      	ldr	r3, [sp, #16]
 802c146:	3b01      	subs	r3, #1
 802c148:	9304      	str	r3, [sp, #16]
 802c14a:	9b04      	ldr	r3, [sp, #16]
 802c14c:	3301      	adds	r3, #1
 802c14e:	d015      	beq.n	802c17c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802c150:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 802c154:	42bb      	cmp	r3, r7
 802c156:	d117      	bne.n	802c188 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802c158:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 802c15c:	9b04      	ldr	r3, [sp, #16]
 802c15e:	4548      	cmp	r0, r9
 802c160:	f103 33ff 	add.w	r3, r3, #4294967295
 802c164:	d17d      	bne.n	802c262 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802c166:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802c16a:	4401      	add	r1, r0
 802c16c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802c170:	4480      	add	r8, r0
 802c172:	e7e9      	b.n	802c148 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 802c174:	461f      	mov	r7, r3
 802c176:	e042      	b.n	802c1fe <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802c178:	2000      	movs	r0, #0
 802c17a:	e002      	b.n	802c182 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 802c17c:	2900      	cmp	r1, #0
 802c17e:	d16d      	bne.n	802c25c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802c180:	2001      	movs	r0, #1
 802c182:	b00b      	add	sp, #44	@ 0x2c
 802c184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c188:	b379      	cbz	r1, 802c1ea <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802c18a:	2f00      	cmp	r7, #0
 802c18c:	db29      	blt.n	802c1e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c18e:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802c192:	42bb      	cmp	r3, r7
 802c194:	dd25      	ble.n	802c1e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c196:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802c19a:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802c19e:	f7ff ff77 	bl	802c090 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802c1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c1a4:	fb10 f003 	smulbb	r0, r0, r3
 802c1a8:	b280      	uxth	r0, r0
 802c1aa:	1c41      	adds	r1, r0, #1
 802c1ac:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c1b0:	1209      	asrs	r1, r1, #8
 802c1b2:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802c1b6:	d014      	beq.n	802c1e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802c1b8:	b2c9      	uxtb	r1, r1
 802c1ba:	9102      	str	r1, [sp, #8]
 802c1bc:	2101      	movs	r1, #1
 802c1be:	9808      	ldr	r0, [sp, #32]
 802c1c0:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802c1c2:	b2ba      	uxth	r2, r7
 802c1c4:	4413      	add	r3, r2
 802c1c6:	9101      	str	r1, [sp, #4]
 802c1c8:	4402      	add	r2, r0
 802c1ca:	fa0f f18b 	sxth.w	r1, fp
 802c1ce:	f8da 0000 	ldr.w	r0, [sl]
 802c1d2:	9100      	str	r1, [sp, #0]
 802c1d4:	6941      	ldr	r1, [r0, #20]
 802c1d6:	b21b      	sxth	r3, r3
 802c1d8:	460d      	mov	r5, r1
 802c1da:	b212      	sxth	r2, r2
 802c1dc:	9905      	ldr	r1, [sp, #20]
 802c1de:	4650      	mov	r0, sl
 802c1e0:	47a8      	blx	r5
 802c1e2:	9b04      	ldr	r3, [sp, #16]
 802c1e4:	1c7a      	adds	r2, r7, #1
 802c1e6:	3301      	adds	r3, #1
 802c1e8:	d0ca      	beq.n	802c180 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c1ea:	f9b4 7000 	ldrsh.w	r7, [r4]
 802c1ee:	1abb      	subs	r3, r7, r2
 802c1f0:	2b00      	cmp	r3, #0
 802c1f2:	dd31      	ble.n	802c258 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c1f4:	2a00      	cmp	r2, #0
 802c1f6:	dabd      	bge.n	802c174 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802c1f8:	2f00      	cmp	r7, #0
 802c1fa:	dd2d      	ble.n	802c258 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c1fc:	2200      	movs	r2, #0
 802c1fe:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802c202:	19d1      	adds	r1, r2, r7
 802c204:	4299      	cmp	r1, r3
 802c206:	db02      	blt.n	802c20e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802c208:	1a9f      	subs	r7, r3, r2
 802c20a:	2f00      	cmp	r7, #0
 802c20c:	dd24      	ble.n	802c258 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c20e:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802c212:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802c216:	f7ff ff3b 	bl	802c090 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802c21a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802c21c:	fb10 f003 	smulbb	r0, r0, r3
 802c220:	b280      	uxth	r0, r0
 802c222:	1c41      	adds	r1, r0, #1
 802c224:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802c228:	1209      	asrs	r1, r1, #8
 802c22a:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802c22e:	d013      	beq.n	802c258 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c230:	9808      	ldr	r0, [sp, #32]
 802c232:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802c234:	b292      	uxth	r2, r2
 802c236:	b2c9      	uxtb	r1, r1
 802c238:	4413      	add	r3, r2
 802c23a:	9102      	str	r1, [sp, #8]
 802c23c:	4402      	add	r2, r0
 802c23e:	b23f      	sxth	r7, r7
 802c240:	f8da 0000 	ldr.w	r0, [sl]
 802c244:	fa0f f18b 	sxth.w	r1, fp
 802c248:	9100      	str	r1, [sp, #0]
 802c24a:	9701      	str	r7, [sp, #4]
 802c24c:	6947      	ldr	r7, [r0, #20]
 802c24e:	b21b      	sxth	r3, r3
 802c250:	b212      	sxth	r2, r2
 802c252:	9905      	ldr	r1, [sp, #20]
 802c254:	4650      	mov	r0, sl
 802c256:	47b8      	blx	r7
 802c258:	464b      	mov	r3, r9
 802c25a:	e75e      	b.n	802c11a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 802c25c:	2f00      	cmp	r7, #0
 802c25e:	da96      	bge.n	802c18e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802c260:	e78e      	b.n	802c180 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802c262:	2900      	cmp	r1, #0
 802c264:	d0f8      	beq.n	802c258 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802c266:	e790      	b.n	802c18a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802c268 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 802c268:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802c26c:	2500      	movs	r5, #0
 802c26e:	461e      	mov	r6, r3
 802c270:	4b35      	ldr	r3, [pc, #212]	@ (802c348 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802c272:	4604      	mov	r4, r0
 802c274:	e9c0 3100 	strd	r3, r1, [r0]
 802c278:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802c27c:	f100 0814 	add.w	r8, r0, #20
 802c280:	8103      	strh	r3, [r0, #8]
 802c282:	f89d 3020 	ldrb.w	r3, [sp, #32]
 802c286:	8185      	strh	r5, [r0, #12]
 802c288:	7283      	strb	r3, [r0, #10]
 802c28a:	81c5      	strh	r5, [r0, #14]
 802c28c:	8205      	strh	r5, [r0, #16]
 802c28e:	8245      	strh	r5, [r0, #18]
 802c290:	4640      	mov	r0, r8
 802c292:	4617      	mov	r7, r2
 802c294:	f7eb ffea 	bl	801826c <_ZN8touchgfx7OutlineC1Ev>
 802c298:	466b      	mov	r3, sp
 802c29a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 802c29e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802c2a2:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802c2a6:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 802c2aa:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 802c2ae:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802c2b2:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 802c2b6:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 802c2ba:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802c2be:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802c2c2:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 802c2c6:	6830      	ldr	r0, [r6, #0]
 802c2c8:	6871      	ldr	r1, [r6, #4]
 802c2ca:	8872      	ldrh	r2, [r6, #2]
 802c2cc:	c303      	stmia	r3!, {r0, r1}
 802c2ce:	887b      	ldrh	r3, [r7, #2]
 802c2d0:	8835      	ldrh	r5, [r6, #0]
 802c2d2:	4413      	add	r3, r2
 802c2d4:	883a      	ldrh	r2, [r7, #0]
 802c2d6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 802c2da:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802c2de:	442a      	add	r2, r5
 802c2e0:	81a2      	strh	r2, [r4, #12]
 802c2e2:	81e3      	strh	r3, [r4, #14]
 802c2e4:	8220      	strh	r0, [r4, #16]
 802c2e6:	8261      	strh	r1, [r4, #18]
 802c2e8:	4668      	mov	r0, sp
 802c2ea:	4639      	mov	r1, r7
 802c2ec:	f7ee f9b8 	bl	801a660 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802c2f0:	f104 000c 	add.w	r0, r4, #12
 802c2f4:	f7ee f98c 	bl	801a610 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802c2f8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802c2fc:	f8bd 2000 	ldrh.w	r2, [sp]
 802c300:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 802c304:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 802c308:	4640      	mov	r0, r8
 802c30a:	f7eb ff93 	bl	8018234 <_ZN8touchgfx7Outline5resetEv>
 802c30e:	4620      	mov	r0, r4
 802c310:	f9bd 3000 	ldrsh.w	r3, [sp]
 802c314:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 802c318:	015b      	lsls	r3, r3, #5
 802c31a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 802c31c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802c320:	015b      	lsls	r3, r3, #5
 802c322:	6523      	str	r3, [r4, #80]	@ 0x50
 802c324:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802c328:	015b      	lsls	r3, r3, #5
 802c32a:	6563      	str	r3, [r4, #84]	@ 0x54
 802c32c:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802c330:	015b      	lsls	r3, r3, #5
 802c332:	65a3      	str	r3, [r4, #88]	@ 0x58
 802c334:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 802c338:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 802c33c:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802c340:	b002      	add	sp, #8
 802c342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c346:	bf00      	nop
 802c348:	080308a4 	.word	0x080308a4

0802c34c <_ZN8touchgfx6Canvas5closeEv>:
 802c34c:	b538      	push	{r3, r4, r5, lr}
 802c34e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802c352:	4604      	mov	r4, r0
 802c354:	b193      	cbz	r3, 802c37c <_ZN8touchgfx6Canvas5closeEv+0x30>
 802c356:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 802c35a:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802c35e:	4213      	tst	r3, r2
 802c360:	d10c      	bne.n	802c37c <_ZN8touchgfx6Canvas5closeEv+0x30>
 802c362:	f100 0514 	add.w	r5, r0, #20
 802c366:	b123      	cbz	r3, 802c372 <_ZN8touchgfx6Canvas5closeEv+0x26>
 802c368:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 802c36c:	4628      	mov	r0, r5
 802c36e:	f7ff fea3 	bl	802c0b8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c372:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 802c376:	4628      	mov	r0, r5
 802c378:	f7ff fe9e 	bl	802c0b8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c37c:	2300      	movs	r3, #0
 802c37e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802c382:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 802c386:	4298      	cmp	r0, r3
 802c388:	bf34      	ite	cc
 802c38a:	2000      	movcc	r0, #0
 802c38c:	2001      	movcs	r0, #1
 802c38e:	bd38      	pop	{r3, r4, r5, pc}

0802c390 <_ZN8touchgfx6Canvas6renderEh>:
 802c390:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802c394:	7a85      	ldrb	r5, [r0, #10]
 802c396:	4604      	mov	r4, r0
 802c398:	4369      	muls	r1, r5
 802c39a:	1c4d      	adds	r5, r1, #1
 802c39c:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802c3a0:	122d      	asrs	r5, r5, #8
 802c3a2:	f000 8098 	beq.w	802c4d6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802c3a6:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 802c3aa:	2b00      	cmp	r3, #0
 802c3ac:	f000 8093 	beq.w	802c4d6 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802c3b0:	f7ff ffcc 	bl	802c34c <_ZN8touchgfx6Canvas5closeEv>
 802c3b4:	4607      	mov	r7, r0
 802c3b6:	2800      	cmp	r0, #0
 802c3b8:	d045      	beq.n	802c446 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802c3ba:	6860      	ldr	r0, [r4, #4]
 802c3bc:	4e47      	ldr	r6, [pc, #284]	@ (802c4dc <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802c3be:	6803      	ldr	r3, [r0, #0]
 802c3c0:	6837      	ldr	r7, [r6, #0]
 802c3c2:	689b      	ldr	r3, [r3, #8]
 802c3c4:	4798      	blx	r3
 802c3c6:	4601      	mov	r1, r0
 802c3c8:	4638      	mov	r0, r7
 802c3ca:	f7e9 ffed 	bl	80163a8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802c3ce:	4607      	mov	r7, r0
 802c3d0:	f7e2 f908 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 802c3d4:	6803      	ldr	r3, [r0, #0]
 802c3d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802c3d8:	4798      	blx	r3
 802c3da:	4680      	mov	r8, r0
 802c3dc:	f7e2 f902 	bl	800e5e4 <_ZN8touchgfx3HAL3lcdEv>
 802c3e0:	6803      	ldr	r3, [r0, #0]
 802c3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c3e4:	4798      	blx	r3
 802c3e6:	280b      	cmp	r0, #11
 802c3e8:	d85a      	bhi.n	802c4a0 <_ZN8touchgfx6Canvas6renderEh+0x110>
 802c3ea:	e8df f000 	tbb	[pc, r0]
 802c3ee:	5b50      	.short	0x5b50
 802c3f0:	3059066b 	.word	0x3059066b
 802c3f4:	64646440 	.word	0x64646440
 802c3f8:	6464      	.short	0x6464
 802c3fa:	2208      	movs	r2, #8
 802c3fc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802c400:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c404:	fb91 f2f2 	sdiv	r2, r1, r2
 802c408:	fb08 2303 	mla	r3, r8, r3, r2
 802c40c:	441f      	add	r7, r3
 802c40e:	424b      	negs	r3, r1
 802c410:	f003 0307 	and.w	r3, r3, #7
 802c414:	f001 0107 	and.w	r1, r1, #7
 802c418:	bf58      	it	pl
 802c41a:	4259      	negpl	r1, r3
 802c41c:	b2c9      	uxtb	r1, r1
 802c41e:	b2ed      	uxtb	r5, r5
 802c420:	463a      	mov	r2, r7
 802c422:	e9cd 1500 	strd	r1, r5, [sp]
 802c426:	fa0f f388 	sxth.w	r3, r8
 802c42a:	6861      	ldr	r1, [r4, #4]
 802c42c:	f104 0014 	add.w	r0, r4, #20
 802c430:	f7ff fe4e 	bl	802c0d0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 802c434:	4607      	mov	r7, r0
 802c436:	6860      	ldr	r0, [r4, #4]
 802c438:	6803      	ldr	r3, [r0, #0]
 802c43a:	691b      	ldr	r3, [r3, #16]
 802c43c:	4798      	blx	r3
 802c43e:	6830      	ldr	r0, [r6, #0]
 802c440:	6803      	ldr	r3, [r0, #0]
 802c442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802c444:	4798      	blx	r3
 802c446:	4638      	mov	r0, r7
 802c448:	b002      	add	sp, #8
 802c44a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c44e:	2204      	movs	r2, #4
 802c450:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802c454:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c458:	fb91 f2f2 	sdiv	r2, r1, r2
 802c45c:	fb08 2303 	mla	r3, r8, r3, r2
 802c460:	441f      	add	r7, r3
 802c462:	424b      	negs	r3, r1
 802c464:	f003 0303 	and.w	r3, r3, #3
 802c468:	f001 0103 	and.w	r1, r1, #3
 802c46c:	e7d4      	b.n	802c418 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802c46e:	2202      	movs	r2, #2
 802c470:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802c474:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c478:	fb91 f2f2 	sdiv	r2, r1, r2
 802c47c:	fb08 2303 	mla	r3, r8, r3, r2
 802c480:	2900      	cmp	r1, #0
 802c482:	f001 0101 	and.w	r1, r1, #1
 802c486:	441f      	add	r7, r3
 802c488:	bfb8      	it	lt
 802c48a:	4249      	neglt	r1, r1
 802c48c:	e7c6      	b.n	802c41c <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802c48e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c492:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c496:	fb08 f303 	mul.w	r3, r8, r3
 802c49a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802c49e:	441f      	add	r7, r3
 802c4a0:	2100      	movs	r1, #0
 802c4a2:	e7bc      	b.n	802c41e <_ZN8touchgfx6Canvas6renderEh+0x8e>
 802c4a4:	2103      	movs	r1, #3
 802c4a6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c4aa:	fb08 f203 	mul.w	r2, r8, r3
 802c4ae:	89a3      	ldrh	r3, [r4, #12]
 802c4b0:	fb13 2301 	smlabb	r3, r3, r1, r2
 802c4b4:	e7f3      	b.n	802c49e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802c4b6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c4ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c4be:	fb08 2303 	mla	r3, r8, r3, r2
 802c4c2:	e7ec      	b.n	802c49e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802c4c4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802c4c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802c4cc:	fb08 f303 	mul.w	r3, r8, r3
 802c4d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802c4d4:	e7e3      	b.n	802c49e <_ZN8touchgfx6Canvas6renderEh+0x10e>
 802c4d6:	2701      	movs	r7, #1
 802c4d8:	e7b5      	b.n	802c446 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 802c4da:	bf00      	nop
 802c4dc:	20012104 	.word	0x20012104

0802c4e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802c4e0:	b510      	push	{r4, lr}
 802c4e2:	4b06      	ldr	r3, [pc, #24]	@ (802c4fc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802c4e4:	781b      	ldrb	r3, [r3, #0]
 802c4e6:	2b01      	cmp	r3, #1
 802c4e8:	d107      	bne.n	802c4fa <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 802c4ea:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802c4ee:	680b      	ldr	r3, [r1, #0]
 802c4f0:	6814      	ldr	r4, [r2, #0]
 802c4f2:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 802c4f6:	6013      	str	r3, [r2, #0]
 802c4f8:	600c      	str	r4, [r1, #0]
 802c4fa:	bd10      	pop	{r4, pc}
 802c4fc:	200120fc 	.word	0x200120fc

0802c500 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 802c500:	b513      	push	{r0, r1, r4, lr}
 802c502:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802c506:	4604      	mov	r4, r0
 802c508:	e9cd 2100 	strd	r2, r1, [sp]
 802c50c:	b9a3      	cbnz	r3, 802c538 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 802c50e:	466a      	mov	r2, sp
 802c510:	a901      	add	r1, sp, #4
 802c512:	4620      	mov	r0, r4
 802c514:	f7ff ffe4 	bl	802c4e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802c518:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802c51a:	9901      	ldr	r1, [sp, #4]
 802c51c:	9a00      	ldr	r2, [sp, #0]
 802c51e:	1ac9      	subs	r1, r1, r3
 802c520:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802c522:	9101      	str	r1, [sp, #4]
 802c524:	1ad2      	subs	r2, r2, r3
 802c526:	2a00      	cmp	r2, #0
 802c528:	9200      	str	r2, [sp, #0]
 802c52a:	da0b      	bge.n	802c544 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 802c52c:	2301      	movs	r3, #1
 802c52e:	2900      	cmp	r1, #0
 802c530:	da0e      	bge.n	802c550 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 802c532:	f043 0304 	orr.w	r3, r3, #4
 802c536:	e013      	b.n	802c560 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 802c538:	f7ff ff08 	bl	802c34c <_ZN8touchgfx6Canvas5closeEv>
 802c53c:	2800      	cmp	r0, #0
 802c53e:	d1e6      	bne.n	802c50e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 802c540:	b002      	add	sp, #8
 802c542:	bd10      	pop	{r4, pc}
 802c544:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802c546:	429a      	cmp	r2, r3
 802c548:	bfac      	ite	ge
 802c54a:	2302      	movge	r3, #2
 802c54c:	2300      	movlt	r3, #0
 802c54e:	e7ee      	b.n	802c52e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 802c550:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 802c552:	4281      	cmp	r1, r0
 802c554:	bfac      	ite	ge
 802c556:	2008      	movge	r0, #8
 802c558:	2000      	movlt	r0, #0
 802c55a:	4318      	orrs	r0, r3
 802c55c:	b2c3      	uxtb	r3, r0
 802c55e:	b158      	cbz	r0, 802c578 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 802c560:	2200      	movs	r2, #0
 802c562:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 802c566:	9901      	ldr	r1, [sp, #4]
 802c568:	9a00      	ldr	r2, [sp, #0]
 802c56a:	66e1      	str	r1, [r4, #108]	@ 0x6c
 802c56c:	6722      	str	r2, [r4, #112]	@ 0x70
 802c56e:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 802c572:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 802c576:	e7e3      	b.n	802c540 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 802c578:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802c57c:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802c580:	4298      	cmp	r0, r3
 802c582:	d803      	bhi.n	802c58c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 802c584:	f104 0014 	add.w	r0, r4, #20
 802c588:	f7ec fb52 	bl	8018c30 <_ZN8touchgfx7Outline6moveToEii>
 802c58c:	2301      	movs	r3, #1
 802c58e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802c592:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802c596:	2300      	movs	r3, #0
 802c598:	e7e5      	b.n	802c566 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0802c59a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 802c59a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c59c:	4604      	mov	r4, r0
 802c59e:	ab02      	add	r3, sp, #8
 802c5a0:	f843 2d08 	str.w	r2, [r3, #-8]!
 802c5a4:	461a      	mov	r2, r3
 802c5a6:	9101      	str	r1, [sp, #4]
 802c5a8:	a901      	add	r1, sp, #4
 802c5aa:	f7ff ff99 	bl	802c4e0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802c5ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 802c5b0:	9901      	ldr	r1, [sp, #4]
 802c5b2:	9a00      	ldr	r2, [sp, #0]
 802c5b4:	1ac9      	subs	r1, r1, r3
 802c5b6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 802c5b8:	9101      	str	r1, [sp, #4]
 802c5ba:	1ad2      	subs	r2, r2, r3
 802c5bc:	2a00      	cmp	r2, #0
 802c5be:	9200      	str	r2, [sp, #0]
 802c5c0:	db1c      	blt.n	802c5fc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 802c5c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 802c5c4:	429a      	cmp	r2, r3
 802c5c6:	bfac      	ite	ge
 802c5c8:	2002      	movge	r0, #2
 802c5ca:	2000      	movlt	r0, #0
 802c5cc:	2900      	cmp	r1, #0
 802c5ce:	db17      	blt.n	802c600 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802c5d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 802c5d2:	4299      	cmp	r1, r3
 802c5d4:	bfac      	ite	ge
 802c5d6:	2308      	movge	r3, #8
 802c5d8:	2300      	movlt	r3, #0
 802c5da:	4303      	orrs	r3, r0
 802c5dc:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 802c5e0:	b2dd      	uxtb	r5, r3
 802c5e2:	b978      	cbnz	r0, 802c604 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 802c5e4:	f104 0014 	add.w	r0, r4, #20
 802c5e8:	f7ff fd66 	bl	802c0b8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c5ec:	9b01      	ldr	r3, [sp, #4]
 802c5ee:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 802c5f2:	6623      	str	r3, [r4, #96]	@ 0x60
 802c5f4:	9b00      	ldr	r3, [sp, #0]
 802c5f6:	6663      	str	r3, [r4, #100]	@ 0x64
 802c5f8:	b002      	add	sp, #8
 802c5fa:	bd70      	pop	{r4, r5, r6, pc}
 802c5fc:	2001      	movs	r0, #1
 802c5fe:	e7e5      	b.n	802c5cc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802c600:	2304      	movs	r3, #4
 802c602:	e7ea      	b.n	802c5da <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 802c604:	b113      	cbz	r3, 802c60c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 802c606:	ea10 0305 	ands.w	r3, r0, r5
 802c60a:	d11c      	bne.n	802c646 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 802c60c:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 802c610:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 802c614:	f104 0614 	add.w	r6, r4, #20
 802c618:	b98b      	cbnz	r3, 802c63e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 802c61a:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 802c61e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 802c622:	4298      	cmp	r0, r3
 802c624:	d802      	bhi.n	802c62c <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 802c626:	4630      	mov	r0, r6
 802c628:	f7ec fb02 	bl	8018c30 <_ZN8touchgfx7Outline6moveToEii>
 802c62c:	2301      	movs	r3, #1
 802c62e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802c632:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 802c636:	e9dd 2100 	ldrd	r2, r1, [sp]
 802c63a:	4630      	mov	r0, r6
 802c63c:	e7d4      	b.n	802c5e8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 802c63e:	4630      	mov	r0, r6
 802c640:	f7ff fd3a 	bl	802c0b8 <_ZN8touchgfx10Rasterizer6lineToEii>
 802c644:	e7f7      	b.n	802c636 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 802c646:	461d      	mov	r5, r3
 802c648:	e7d0      	b.n	802c5ec <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0802c64c <_ZN8touchgfx6CanvasD1Ev>:
 802c64c:	b510      	push	{r4, lr}
 802c64e:	4604      	mov	r4, r0
 802c650:	4b03      	ldr	r3, [pc, #12]	@ (802c660 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 802c652:	f840 3b14 	str.w	r3, [r0], #20
 802c656:	f7eb fde5 	bl	8018224 <_ZN8touchgfx7OutlineD1Ev>
 802c65a:	4620      	mov	r0, r4
 802c65c:	bd10      	pop	{r4, pc}
 802c65e:	bf00      	nop
 802c660:	080308a4 	.word	0x080308a4

0802c664 <_ZN8touchgfx6CanvasD0Ev>:
 802c664:	b510      	push	{r4, lr}
 802c666:	4604      	mov	r4, r0
 802c668:	f7ff fff0 	bl	802c64c <_ZN8touchgfx6CanvasD1Ev>
 802c66c:	4620      	mov	r0, r4
 802c66e:	2174      	movs	r1, #116	@ 0x74
 802c670:	f000 f807 	bl	802c682 <_ZdlPvj>
 802c674:	4620      	mov	r0, r4
 802c676:	bd10      	pop	{r4, pc}

0802c678 <__aeabi_atexit>:
 802c678:	460b      	mov	r3, r1
 802c67a:	4601      	mov	r1, r0
 802c67c:	4618      	mov	r0, r3
 802c67e:	f000 b90f 	b.w	802c8a0 <__cxa_atexit>

0802c682 <_ZdlPvj>:
 802c682:	f000 b812 	b.w	802c6aa <_ZdlPv>

0802c686 <__cxa_guard_acquire>:
 802c686:	6802      	ldr	r2, [r0, #0]
 802c688:	4603      	mov	r3, r0
 802c68a:	07d2      	lsls	r2, r2, #31
 802c68c:	d405      	bmi.n	802c69a <__cxa_guard_acquire+0x14>
 802c68e:	7842      	ldrb	r2, [r0, #1]
 802c690:	b102      	cbz	r2, 802c694 <__cxa_guard_acquire+0xe>
 802c692:	deff      	udf	#255	@ 0xff
 802c694:	2001      	movs	r0, #1
 802c696:	7058      	strb	r0, [r3, #1]
 802c698:	4770      	bx	lr
 802c69a:	2000      	movs	r0, #0
 802c69c:	4770      	bx	lr

0802c69e <__cxa_guard_release>:
 802c69e:	2301      	movs	r3, #1
 802c6a0:	6003      	str	r3, [r0, #0]
 802c6a2:	4770      	bx	lr

0802c6a4 <__cxa_pure_virtual>:
 802c6a4:	b508      	push	{r3, lr}
 802c6a6:	f000 f80d 	bl	802c6c4 <_ZSt9terminatev>

0802c6aa <_ZdlPv>:
 802c6aa:	f000 b843 	b.w	802c734 <free>

0802c6ae <_ZN10__cxxabiv111__terminateEPFvvE>:
 802c6ae:	b508      	push	{r3, lr}
 802c6b0:	4780      	blx	r0
 802c6b2:	f000 f80c 	bl	802c6ce <abort>
	...

0802c6b8 <_ZSt13get_terminatev>:
 802c6b8:	4b01      	ldr	r3, [pc, #4]	@ (802c6c0 <_ZSt13get_terminatev+0x8>)
 802c6ba:	e8d3 0faf 	lda	r0, [r3]
 802c6be:	4770      	bx	lr
 802c6c0:	200000a4 	.word	0x200000a4

0802c6c4 <_ZSt9terminatev>:
 802c6c4:	b508      	push	{r3, lr}
 802c6c6:	f7ff fff7 	bl	802c6b8 <_ZSt13get_terminatev>
 802c6ca:	f7ff fff0 	bl	802c6ae <_ZN10__cxxabiv111__terminateEPFvvE>

0802c6ce <abort>:
 802c6ce:	2006      	movs	r0, #6
 802c6d0:	b508      	push	{r3, lr}
 802c6d2:	f000 fa3b 	bl	802cb4c <raise>
 802c6d6:	2001      	movs	r0, #1
 802c6d8:	f7d4 fde4 	bl	80012a4 <_exit>

0802c6dc <__assert_func>:
 802c6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c6de:	4614      	mov	r4, r2
 802c6e0:	461a      	mov	r2, r3
 802c6e2:	4b09      	ldr	r3, [pc, #36]	@ (802c708 <__assert_func+0x2c>)
 802c6e4:	4605      	mov	r5, r0
 802c6e6:	681b      	ldr	r3, [r3, #0]
 802c6e8:	68d8      	ldr	r0, [r3, #12]
 802c6ea:	b954      	cbnz	r4, 802c702 <__assert_func+0x26>
 802c6ec:	4b07      	ldr	r3, [pc, #28]	@ (802c70c <__assert_func+0x30>)
 802c6ee:	461c      	mov	r4, r3
 802c6f0:	9100      	str	r1, [sp, #0]
 802c6f2:	4907      	ldr	r1, [pc, #28]	@ (802c710 <__assert_func+0x34>)
 802c6f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c6f8:	462b      	mov	r3, r5
 802c6fa:	f000 f983 	bl	802ca04 <fiprintf>
 802c6fe:	f7ff ffe6 	bl	802c6ce <abort>
 802c702:	4b04      	ldr	r3, [pc, #16]	@ (802c714 <__assert_func+0x38>)
 802c704:	e7f4      	b.n	802c6f0 <__assert_func+0x14>
 802c706:	bf00      	nop
 802c708:	200000b4 	.word	0x200000b4
 802c70c:	080308eb 	.word	0x080308eb
 802c710:	080308bd 	.word	0x080308bd
 802c714:	080308b0 	.word	0x080308b0

0802c718 <atexit>:
 802c718:	2300      	movs	r3, #0
 802c71a:	4601      	mov	r1, r0
 802c71c:	461a      	mov	r2, r3
 802c71e:	4618      	mov	r0, r3
 802c720:	f000 bb16 	b.w	802cd50 <__register_exitproc>

0802c724 <malloc>:
 802c724:	4b02      	ldr	r3, [pc, #8]	@ (802c730 <malloc+0xc>)
 802c726:	4601      	mov	r1, r0
 802c728:	6818      	ldr	r0, [r3, #0]
 802c72a:	f000 b82d 	b.w	802c788 <_malloc_r>
 802c72e:	bf00      	nop
 802c730:	200000b4 	.word	0x200000b4

0802c734 <free>:
 802c734:	4b02      	ldr	r3, [pc, #8]	@ (802c740 <free+0xc>)
 802c736:	4601      	mov	r1, r0
 802c738:	6818      	ldr	r0, [r3, #0]
 802c73a:	f000 bb67 	b.w	802ce0c <_free_r>
 802c73e:	bf00      	nop
 802c740:	200000b4 	.word	0x200000b4

0802c744 <sbrk_aligned>:
 802c744:	b570      	push	{r4, r5, r6, lr}
 802c746:	4e0f      	ldr	r6, [pc, #60]	@ (802c784 <sbrk_aligned+0x40>)
 802c748:	460c      	mov	r4, r1
 802c74a:	4605      	mov	r5, r0
 802c74c:	6831      	ldr	r1, [r6, #0]
 802c74e:	b911      	cbnz	r1, 802c756 <sbrk_aligned+0x12>
 802c750:	f000 faa2 	bl	802cc98 <_sbrk_r>
 802c754:	6030      	str	r0, [r6, #0]
 802c756:	4621      	mov	r1, r4
 802c758:	4628      	mov	r0, r5
 802c75a:	f000 fa9d 	bl	802cc98 <_sbrk_r>
 802c75e:	1c43      	adds	r3, r0, #1
 802c760:	d103      	bne.n	802c76a <sbrk_aligned+0x26>
 802c762:	f04f 34ff 	mov.w	r4, #4294967295
 802c766:	4620      	mov	r0, r4
 802c768:	bd70      	pop	{r4, r5, r6, pc}
 802c76a:	1cc4      	adds	r4, r0, #3
 802c76c:	f024 0403 	bic.w	r4, r4, #3
 802c770:	42a0      	cmp	r0, r4
 802c772:	d0f8      	beq.n	802c766 <sbrk_aligned+0x22>
 802c774:	1a21      	subs	r1, r4, r0
 802c776:	4628      	mov	r0, r5
 802c778:	f000 fa8e 	bl	802cc98 <_sbrk_r>
 802c77c:	3001      	adds	r0, #1
 802c77e:	d1f2      	bne.n	802c766 <sbrk_aligned+0x22>
 802c780:	e7ef      	b.n	802c762 <sbrk_aligned+0x1e>
 802c782:	bf00      	nop
 802c784:	20012b60 	.word	0x20012b60

0802c788 <_malloc_r>:
 802c788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c78c:	1ccd      	adds	r5, r1, #3
 802c78e:	4606      	mov	r6, r0
 802c790:	f025 0503 	bic.w	r5, r5, #3
 802c794:	3508      	adds	r5, #8
 802c796:	2d0c      	cmp	r5, #12
 802c798:	bf38      	it	cc
 802c79a:	250c      	movcc	r5, #12
 802c79c:	2d00      	cmp	r5, #0
 802c79e:	db01      	blt.n	802c7a4 <_malloc_r+0x1c>
 802c7a0:	42a9      	cmp	r1, r5
 802c7a2:	d904      	bls.n	802c7ae <_malloc_r+0x26>
 802c7a4:	230c      	movs	r3, #12
 802c7a6:	6033      	str	r3, [r6, #0]
 802c7a8:	2000      	movs	r0, #0
 802c7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c7ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802c884 <_malloc_r+0xfc>
 802c7b2:	f000 f869 	bl	802c888 <__malloc_lock>
 802c7b6:	f8d8 3000 	ldr.w	r3, [r8]
 802c7ba:	461c      	mov	r4, r3
 802c7bc:	bb44      	cbnz	r4, 802c810 <_malloc_r+0x88>
 802c7be:	4629      	mov	r1, r5
 802c7c0:	4630      	mov	r0, r6
 802c7c2:	f7ff ffbf 	bl	802c744 <sbrk_aligned>
 802c7c6:	1c43      	adds	r3, r0, #1
 802c7c8:	4604      	mov	r4, r0
 802c7ca:	d158      	bne.n	802c87e <_malloc_r+0xf6>
 802c7cc:	f8d8 4000 	ldr.w	r4, [r8]
 802c7d0:	4627      	mov	r7, r4
 802c7d2:	2f00      	cmp	r7, #0
 802c7d4:	d143      	bne.n	802c85e <_malloc_r+0xd6>
 802c7d6:	2c00      	cmp	r4, #0
 802c7d8:	d04b      	beq.n	802c872 <_malloc_r+0xea>
 802c7da:	6823      	ldr	r3, [r4, #0]
 802c7dc:	4639      	mov	r1, r7
 802c7de:	4630      	mov	r0, r6
 802c7e0:	eb04 0903 	add.w	r9, r4, r3
 802c7e4:	f000 fa58 	bl	802cc98 <_sbrk_r>
 802c7e8:	4581      	cmp	r9, r0
 802c7ea:	d142      	bne.n	802c872 <_malloc_r+0xea>
 802c7ec:	6821      	ldr	r1, [r4, #0]
 802c7ee:	4630      	mov	r0, r6
 802c7f0:	1a6d      	subs	r5, r5, r1
 802c7f2:	4629      	mov	r1, r5
 802c7f4:	f7ff ffa6 	bl	802c744 <sbrk_aligned>
 802c7f8:	3001      	adds	r0, #1
 802c7fa:	d03a      	beq.n	802c872 <_malloc_r+0xea>
 802c7fc:	6823      	ldr	r3, [r4, #0]
 802c7fe:	442b      	add	r3, r5
 802c800:	6023      	str	r3, [r4, #0]
 802c802:	f8d8 3000 	ldr.w	r3, [r8]
 802c806:	685a      	ldr	r2, [r3, #4]
 802c808:	bb62      	cbnz	r2, 802c864 <_malloc_r+0xdc>
 802c80a:	f8c8 7000 	str.w	r7, [r8]
 802c80e:	e00f      	b.n	802c830 <_malloc_r+0xa8>
 802c810:	6822      	ldr	r2, [r4, #0]
 802c812:	1b52      	subs	r2, r2, r5
 802c814:	d420      	bmi.n	802c858 <_malloc_r+0xd0>
 802c816:	2a0b      	cmp	r2, #11
 802c818:	d917      	bls.n	802c84a <_malloc_r+0xc2>
 802c81a:	1961      	adds	r1, r4, r5
 802c81c:	42a3      	cmp	r3, r4
 802c81e:	6025      	str	r5, [r4, #0]
 802c820:	bf18      	it	ne
 802c822:	6059      	strne	r1, [r3, #4]
 802c824:	6863      	ldr	r3, [r4, #4]
 802c826:	bf08      	it	eq
 802c828:	f8c8 1000 	streq.w	r1, [r8]
 802c82c:	5162      	str	r2, [r4, r5]
 802c82e:	604b      	str	r3, [r1, #4]
 802c830:	4630      	mov	r0, r6
 802c832:	f000 f82f 	bl	802c894 <__malloc_unlock>
 802c836:	f104 000b 	add.w	r0, r4, #11
 802c83a:	1d23      	adds	r3, r4, #4
 802c83c:	f020 0007 	bic.w	r0, r0, #7
 802c840:	1ac2      	subs	r2, r0, r3
 802c842:	bf1c      	itt	ne
 802c844:	1a1b      	subne	r3, r3, r0
 802c846:	50a3      	strne	r3, [r4, r2]
 802c848:	e7af      	b.n	802c7aa <_malloc_r+0x22>
 802c84a:	6862      	ldr	r2, [r4, #4]
 802c84c:	42a3      	cmp	r3, r4
 802c84e:	bf0c      	ite	eq
 802c850:	f8c8 2000 	streq.w	r2, [r8]
 802c854:	605a      	strne	r2, [r3, #4]
 802c856:	e7eb      	b.n	802c830 <_malloc_r+0xa8>
 802c858:	4623      	mov	r3, r4
 802c85a:	6864      	ldr	r4, [r4, #4]
 802c85c:	e7ae      	b.n	802c7bc <_malloc_r+0x34>
 802c85e:	463c      	mov	r4, r7
 802c860:	687f      	ldr	r7, [r7, #4]
 802c862:	e7b6      	b.n	802c7d2 <_malloc_r+0x4a>
 802c864:	461a      	mov	r2, r3
 802c866:	685b      	ldr	r3, [r3, #4]
 802c868:	42a3      	cmp	r3, r4
 802c86a:	d1fb      	bne.n	802c864 <_malloc_r+0xdc>
 802c86c:	2300      	movs	r3, #0
 802c86e:	6053      	str	r3, [r2, #4]
 802c870:	e7de      	b.n	802c830 <_malloc_r+0xa8>
 802c872:	230c      	movs	r3, #12
 802c874:	4630      	mov	r0, r6
 802c876:	6033      	str	r3, [r6, #0]
 802c878:	f000 f80c 	bl	802c894 <__malloc_unlock>
 802c87c:	e794      	b.n	802c7a8 <_malloc_r+0x20>
 802c87e:	6005      	str	r5, [r0, #0]
 802c880:	e7d6      	b.n	802c830 <_malloc_r+0xa8>
 802c882:	bf00      	nop
 802c884:	20012b64 	.word	0x20012b64

0802c888 <__malloc_lock>:
 802c888:	4801      	ldr	r0, [pc, #4]	@ (802c890 <__malloc_lock+0x8>)
 802c88a:	f000 ba52 	b.w	802cd32 <__retarget_lock_acquire_recursive>
 802c88e:	bf00      	nop
 802c890:	20012ca8 	.word	0x20012ca8

0802c894 <__malloc_unlock>:
 802c894:	4801      	ldr	r0, [pc, #4]	@ (802c89c <__malloc_unlock+0x8>)
 802c896:	f000 ba4d 	b.w	802cd34 <__retarget_lock_release_recursive>
 802c89a:	bf00      	nop
 802c89c:	20012ca8 	.word	0x20012ca8

0802c8a0 <__cxa_atexit>:
 802c8a0:	b510      	push	{r4, lr}
 802c8a2:	4604      	mov	r4, r0
 802c8a4:	4804      	ldr	r0, [pc, #16]	@ (802c8b8 <__cxa_atexit+0x18>)
 802c8a6:	4613      	mov	r3, r2
 802c8a8:	b120      	cbz	r0, 802c8b4 <__cxa_atexit+0x14>
 802c8aa:	460a      	mov	r2, r1
 802c8ac:	2002      	movs	r0, #2
 802c8ae:	4621      	mov	r1, r4
 802c8b0:	f000 fa4e 	bl	802cd50 <__register_exitproc>
 802c8b4:	bd10      	pop	{r4, pc}
 802c8b6:	bf00      	nop
 802c8b8:	0802cd51 	.word	0x0802cd51

0802c8bc <std>:
 802c8bc:	2300      	movs	r3, #0
 802c8be:	b510      	push	{r4, lr}
 802c8c0:	4604      	mov	r4, r0
 802c8c2:	6083      	str	r3, [r0, #8]
 802c8c4:	8181      	strh	r1, [r0, #12]
 802c8c6:	4619      	mov	r1, r3
 802c8c8:	6643      	str	r3, [r0, #100]	@ 0x64
 802c8ca:	81c2      	strh	r2, [r0, #14]
 802c8cc:	2208      	movs	r2, #8
 802c8ce:	6183      	str	r3, [r0, #24]
 802c8d0:	e9c0 3300 	strd	r3, r3, [r0]
 802c8d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802c8d8:	305c      	adds	r0, #92	@ 0x5c
 802c8da:	f000 f906 	bl	802caea <memset>
 802c8de:	4b0d      	ldr	r3, [pc, #52]	@ (802c914 <std+0x58>)
 802c8e0:	6224      	str	r4, [r4, #32]
 802c8e2:	6263      	str	r3, [r4, #36]	@ 0x24
 802c8e4:	4b0c      	ldr	r3, [pc, #48]	@ (802c918 <std+0x5c>)
 802c8e6:	62a3      	str	r3, [r4, #40]	@ 0x28
 802c8e8:	4b0c      	ldr	r3, [pc, #48]	@ (802c91c <std+0x60>)
 802c8ea:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802c8ec:	4b0c      	ldr	r3, [pc, #48]	@ (802c920 <std+0x64>)
 802c8ee:	6323      	str	r3, [r4, #48]	@ 0x30
 802c8f0:	4b0c      	ldr	r3, [pc, #48]	@ (802c924 <std+0x68>)
 802c8f2:	429c      	cmp	r4, r3
 802c8f4:	d006      	beq.n	802c904 <std+0x48>
 802c8f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802c8fa:	4294      	cmp	r4, r2
 802c8fc:	d002      	beq.n	802c904 <std+0x48>
 802c8fe:	33d0      	adds	r3, #208	@ 0xd0
 802c900:	429c      	cmp	r4, r3
 802c902:	d105      	bne.n	802c910 <std+0x54>
 802c904:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802c908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c90c:	f000 ba10 	b.w	802cd30 <__retarget_lock_init_recursive>
 802c910:	bd10      	pop	{r4, pc}
 802c912:	bf00      	nop
 802c914:	0802ca65 	.word	0x0802ca65
 802c918:	0802ca87 	.word	0x0802ca87
 802c91c:	0802cabf 	.word	0x0802cabf
 802c920:	0802cae3 	.word	0x0802cae3
 802c924:	20012b68 	.word	0x20012b68

0802c928 <stdio_exit_handler>:
 802c928:	4a02      	ldr	r2, [pc, #8]	@ (802c934 <stdio_exit_handler+0xc>)
 802c92a:	4903      	ldr	r1, [pc, #12]	@ (802c938 <stdio_exit_handler+0x10>)
 802c92c:	4803      	ldr	r0, [pc, #12]	@ (802c93c <stdio_exit_handler+0x14>)
 802c92e:	f000 b87b 	b.w	802ca28 <_fwalk_sglue>
 802c932:	bf00      	nop
 802c934:	200000a8 	.word	0x200000a8
 802c938:	0802d551 	.word	0x0802d551
 802c93c:	200000b8 	.word	0x200000b8

0802c940 <cleanup_stdio>:
 802c940:	6841      	ldr	r1, [r0, #4]
 802c942:	4b0c      	ldr	r3, [pc, #48]	@ (802c974 <cleanup_stdio+0x34>)
 802c944:	4299      	cmp	r1, r3
 802c946:	b510      	push	{r4, lr}
 802c948:	4604      	mov	r4, r0
 802c94a:	d001      	beq.n	802c950 <cleanup_stdio+0x10>
 802c94c:	f000 fe00 	bl	802d550 <_fflush_r>
 802c950:	68a1      	ldr	r1, [r4, #8]
 802c952:	4b09      	ldr	r3, [pc, #36]	@ (802c978 <cleanup_stdio+0x38>)
 802c954:	4299      	cmp	r1, r3
 802c956:	d002      	beq.n	802c95e <cleanup_stdio+0x1e>
 802c958:	4620      	mov	r0, r4
 802c95a:	f000 fdf9 	bl	802d550 <_fflush_r>
 802c95e:	68e1      	ldr	r1, [r4, #12]
 802c960:	4b06      	ldr	r3, [pc, #24]	@ (802c97c <cleanup_stdio+0x3c>)
 802c962:	4299      	cmp	r1, r3
 802c964:	d004      	beq.n	802c970 <cleanup_stdio+0x30>
 802c966:	4620      	mov	r0, r4
 802c968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c96c:	f000 bdf0 	b.w	802d550 <_fflush_r>
 802c970:	bd10      	pop	{r4, pc}
 802c972:	bf00      	nop
 802c974:	20012b68 	.word	0x20012b68
 802c978:	20012bd0 	.word	0x20012bd0
 802c97c:	20012c38 	.word	0x20012c38

0802c980 <global_stdio_init.part.0>:
 802c980:	b510      	push	{r4, lr}
 802c982:	4b0b      	ldr	r3, [pc, #44]	@ (802c9b0 <global_stdio_init.part.0+0x30>)
 802c984:	2104      	movs	r1, #4
 802c986:	4c0b      	ldr	r4, [pc, #44]	@ (802c9b4 <global_stdio_init.part.0+0x34>)
 802c988:	4a0b      	ldr	r2, [pc, #44]	@ (802c9b8 <global_stdio_init.part.0+0x38>)
 802c98a:	4620      	mov	r0, r4
 802c98c:	601a      	str	r2, [r3, #0]
 802c98e:	2200      	movs	r2, #0
 802c990:	f7ff ff94 	bl	802c8bc <std>
 802c994:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802c998:	2201      	movs	r2, #1
 802c99a:	2109      	movs	r1, #9
 802c99c:	f7ff ff8e 	bl	802c8bc <std>
 802c9a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802c9a4:	2202      	movs	r2, #2
 802c9a6:	2112      	movs	r1, #18
 802c9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c9ac:	f7ff bf86 	b.w	802c8bc <std>
 802c9b0:	20012ca0 	.word	0x20012ca0
 802c9b4:	20012b68 	.word	0x20012b68
 802c9b8:	0802c929 	.word	0x0802c929

0802c9bc <__sfp_lock_acquire>:
 802c9bc:	4801      	ldr	r0, [pc, #4]	@ (802c9c4 <__sfp_lock_acquire+0x8>)
 802c9be:	f000 b9b8 	b.w	802cd32 <__retarget_lock_acquire_recursive>
 802c9c2:	bf00      	nop
 802c9c4:	20012caa 	.word	0x20012caa

0802c9c8 <__sfp_lock_release>:
 802c9c8:	4801      	ldr	r0, [pc, #4]	@ (802c9d0 <__sfp_lock_release+0x8>)
 802c9ca:	f000 b9b3 	b.w	802cd34 <__retarget_lock_release_recursive>
 802c9ce:	bf00      	nop
 802c9d0:	20012caa 	.word	0x20012caa

0802c9d4 <__sinit>:
 802c9d4:	b510      	push	{r4, lr}
 802c9d6:	4604      	mov	r4, r0
 802c9d8:	f7ff fff0 	bl	802c9bc <__sfp_lock_acquire>
 802c9dc:	6a23      	ldr	r3, [r4, #32]
 802c9de:	b11b      	cbz	r3, 802c9e8 <__sinit+0x14>
 802c9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802c9e4:	f7ff bff0 	b.w	802c9c8 <__sfp_lock_release>
 802c9e8:	4b04      	ldr	r3, [pc, #16]	@ (802c9fc <__sinit+0x28>)
 802c9ea:	6223      	str	r3, [r4, #32]
 802c9ec:	4b04      	ldr	r3, [pc, #16]	@ (802ca00 <__sinit+0x2c>)
 802c9ee:	681b      	ldr	r3, [r3, #0]
 802c9f0:	2b00      	cmp	r3, #0
 802c9f2:	d1f5      	bne.n	802c9e0 <__sinit+0xc>
 802c9f4:	f7ff ffc4 	bl	802c980 <global_stdio_init.part.0>
 802c9f8:	e7f2      	b.n	802c9e0 <__sinit+0xc>
 802c9fa:	bf00      	nop
 802c9fc:	0802c941 	.word	0x0802c941
 802ca00:	20012ca0 	.word	0x20012ca0

0802ca04 <fiprintf>:
 802ca04:	b40e      	push	{r1, r2, r3}
 802ca06:	b503      	push	{r0, r1, lr}
 802ca08:	ab03      	add	r3, sp, #12
 802ca0a:	4601      	mov	r1, r0
 802ca0c:	4805      	ldr	r0, [pc, #20]	@ (802ca24 <fiprintf+0x20>)
 802ca0e:	f853 2b04 	ldr.w	r2, [r3], #4
 802ca12:	6800      	ldr	r0, [r0, #0]
 802ca14:	9301      	str	r3, [sp, #4]
 802ca16:	f000 fa6d 	bl	802cef4 <_vfiprintf_r>
 802ca1a:	b002      	add	sp, #8
 802ca1c:	f85d eb04 	ldr.w	lr, [sp], #4
 802ca20:	b003      	add	sp, #12
 802ca22:	4770      	bx	lr
 802ca24:	200000b4 	.word	0x200000b4

0802ca28 <_fwalk_sglue>:
 802ca28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ca2c:	4607      	mov	r7, r0
 802ca2e:	4688      	mov	r8, r1
 802ca30:	4614      	mov	r4, r2
 802ca32:	2600      	movs	r6, #0
 802ca34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802ca38:	f1b9 0901 	subs.w	r9, r9, #1
 802ca3c:	d505      	bpl.n	802ca4a <_fwalk_sglue+0x22>
 802ca3e:	6824      	ldr	r4, [r4, #0]
 802ca40:	2c00      	cmp	r4, #0
 802ca42:	d1f7      	bne.n	802ca34 <_fwalk_sglue+0xc>
 802ca44:	4630      	mov	r0, r6
 802ca46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ca4a:	89ab      	ldrh	r3, [r5, #12]
 802ca4c:	2b01      	cmp	r3, #1
 802ca4e:	d907      	bls.n	802ca60 <_fwalk_sglue+0x38>
 802ca50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802ca54:	3301      	adds	r3, #1
 802ca56:	d003      	beq.n	802ca60 <_fwalk_sglue+0x38>
 802ca58:	4629      	mov	r1, r5
 802ca5a:	4638      	mov	r0, r7
 802ca5c:	47c0      	blx	r8
 802ca5e:	4306      	orrs	r6, r0
 802ca60:	3568      	adds	r5, #104	@ 0x68
 802ca62:	e7e9      	b.n	802ca38 <_fwalk_sglue+0x10>

0802ca64 <__sread>:
 802ca64:	b510      	push	{r4, lr}
 802ca66:	460c      	mov	r4, r1
 802ca68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ca6c:	f000 f8ee 	bl	802cc4c <_read_r>
 802ca70:	2800      	cmp	r0, #0
 802ca72:	bfab      	itete	ge
 802ca74:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802ca76:	89a3      	ldrhlt	r3, [r4, #12]
 802ca78:	181b      	addge	r3, r3, r0
 802ca7a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802ca7e:	bfac      	ite	ge
 802ca80:	6563      	strge	r3, [r4, #84]	@ 0x54
 802ca82:	81a3      	strhlt	r3, [r4, #12]
 802ca84:	bd10      	pop	{r4, pc}

0802ca86 <__swrite>:
 802ca86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ca8a:	461f      	mov	r7, r3
 802ca8c:	898b      	ldrh	r3, [r1, #12]
 802ca8e:	4605      	mov	r5, r0
 802ca90:	460c      	mov	r4, r1
 802ca92:	05db      	lsls	r3, r3, #23
 802ca94:	4616      	mov	r6, r2
 802ca96:	d505      	bpl.n	802caa4 <__swrite+0x1e>
 802ca98:	2302      	movs	r3, #2
 802ca9a:	2200      	movs	r2, #0
 802ca9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802caa0:	f000 f8c2 	bl	802cc28 <_lseek_r>
 802caa4:	89a3      	ldrh	r3, [r4, #12]
 802caa6:	4632      	mov	r2, r6
 802caa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802caac:	4628      	mov	r0, r5
 802caae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802cab2:	81a3      	strh	r3, [r4, #12]
 802cab4:	463b      	mov	r3, r7
 802cab6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802caba:	f000 b8fd 	b.w	802ccb8 <_write_r>

0802cabe <__sseek>:
 802cabe:	b510      	push	{r4, lr}
 802cac0:	460c      	mov	r4, r1
 802cac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cac6:	f000 f8af 	bl	802cc28 <_lseek_r>
 802caca:	1c43      	adds	r3, r0, #1
 802cacc:	89a3      	ldrh	r3, [r4, #12]
 802cace:	bf15      	itete	ne
 802cad0:	6560      	strne	r0, [r4, #84]	@ 0x54
 802cad2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802cad6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802cada:	81a3      	strheq	r3, [r4, #12]
 802cadc:	bf18      	it	ne
 802cade:	81a3      	strhne	r3, [r4, #12]
 802cae0:	bd10      	pop	{r4, pc}

0802cae2 <__sclose>:
 802cae2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802cae6:	f000 b839 	b.w	802cb5c <_close_r>

0802caea <memset>:
 802caea:	4402      	add	r2, r0
 802caec:	4603      	mov	r3, r0
 802caee:	4293      	cmp	r3, r2
 802caf0:	d100      	bne.n	802caf4 <memset+0xa>
 802caf2:	4770      	bx	lr
 802caf4:	f803 1b01 	strb.w	r1, [r3], #1
 802caf8:	e7f9      	b.n	802caee <memset+0x4>

0802cafa <_raise_r>:
 802cafa:	291f      	cmp	r1, #31
 802cafc:	b538      	push	{r3, r4, r5, lr}
 802cafe:	4605      	mov	r5, r0
 802cb00:	460c      	mov	r4, r1
 802cb02:	d904      	bls.n	802cb0e <_raise_r+0x14>
 802cb04:	2316      	movs	r3, #22
 802cb06:	6003      	str	r3, [r0, #0]
 802cb08:	f04f 30ff 	mov.w	r0, #4294967295
 802cb0c:	bd38      	pop	{r3, r4, r5, pc}
 802cb0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802cb10:	b112      	cbz	r2, 802cb18 <_raise_r+0x1e>
 802cb12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802cb16:	b94b      	cbnz	r3, 802cb2c <_raise_r+0x32>
 802cb18:	4628      	mov	r0, r5
 802cb1a:	f000 f8bb 	bl	802cc94 <_getpid_r>
 802cb1e:	4622      	mov	r2, r4
 802cb20:	4601      	mov	r1, r0
 802cb22:	4628      	mov	r0, r5
 802cb24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802cb28:	f000 b8a2 	b.w	802cc70 <_kill_r>
 802cb2c:	2b01      	cmp	r3, #1
 802cb2e:	d00a      	beq.n	802cb46 <_raise_r+0x4c>
 802cb30:	1c59      	adds	r1, r3, #1
 802cb32:	d103      	bne.n	802cb3c <_raise_r+0x42>
 802cb34:	2316      	movs	r3, #22
 802cb36:	6003      	str	r3, [r0, #0]
 802cb38:	2001      	movs	r0, #1
 802cb3a:	e7e7      	b.n	802cb0c <_raise_r+0x12>
 802cb3c:	2100      	movs	r1, #0
 802cb3e:	4620      	mov	r0, r4
 802cb40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802cb44:	4798      	blx	r3
 802cb46:	2000      	movs	r0, #0
 802cb48:	e7e0      	b.n	802cb0c <_raise_r+0x12>
	...

0802cb4c <raise>:
 802cb4c:	4b02      	ldr	r3, [pc, #8]	@ (802cb58 <raise+0xc>)
 802cb4e:	4601      	mov	r1, r0
 802cb50:	6818      	ldr	r0, [r3, #0]
 802cb52:	f7ff bfd2 	b.w	802cafa <_raise_r>
 802cb56:	bf00      	nop
 802cb58:	200000b4 	.word	0x200000b4

0802cb5c <_close_r>:
 802cb5c:	b538      	push	{r3, r4, r5, lr}
 802cb5e:	2300      	movs	r3, #0
 802cb60:	4d05      	ldr	r5, [pc, #20]	@ (802cb78 <_close_r+0x1c>)
 802cb62:	4604      	mov	r4, r0
 802cb64:	4608      	mov	r0, r1
 802cb66:	602b      	str	r3, [r5, #0]
 802cb68:	f7d4 fbe0 	bl	800132c <_close>
 802cb6c:	1c43      	adds	r3, r0, #1
 802cb6e:	d102      	bne.n	802cb76 <_close_r+0x1a>
 802cb70:	682b      	ldr	r3, [r5, #0]
 802cb72:	b103      	cbz	r3, 802cb76 <_close_r+0x1a>
 802cb74:	6023      	str	r3, [r4, #0]
 802cb76:	bd38      	pop	{r3, r4, r5, pc}
 802cb78:	20012ca4 	.word	0x20012ca4

0802cb7c <_reclaim_reent>:
 802cb7c:	4b29      	ldr	r3, [pc, #164]	@ (802cc24 <_reclaim_reent+0xa8>)
 802cb7e:	681b      	ldr	r3, [r3, #0]
 802cb80:	4283      	cmp	r3, r0
 802cb82:	b570      	push	{r4, r5, r6, lr}
 802cb84:	4604      	mov	r4, r0
 802cb86:	d04b      	beq.n	802cc20 <_reclaim_reent+0xa4>
 802cb88:	69c3      	ldr	r3, [r0, #28]
 802cb8a:	b1ab      	cbz	r3, 802cbb8 <_reclaim_reent+0x3c>
 802cb8c:	68db      	ldr	r3, [r3, #12]
 802cb8e:	b16b      	cbz	r3, 802cbac <_reclaim_reent+0x30>
 802cb90:	2500      	movs	r5, #0
 802cb92:	69e3      	ldr	r3, [r4, #28]
 802cb94:	68db      	ldr	r3, [r3, #12]
 802cb96:	5959      	ldr	r1, [r3, r5]
 802cb98:	2900      	cmp	r1, #0
 802cb9a:	d13b      	bne.n	802cc14 <_reclaim_reent+0x98>
 802cb9c:	3504      	adds	r5, #4
 802cb9e:	2d80      	cmp	r5, #128	@ 0x80
 802cba0:	d1f7      	bne.n	802cb92 <_reclaim_reent+0x16>
 802cba2:	69e3      	ldr	r3, [r4, #28]
 802cba4:	4620      	mov	r0, r4
 802cba6:	68d9      	ldr	r1, [r3, #12]
 802cba8:	f000 f930 	bl	802ce0c <_free_r>
 802cbac:	69e3      	ldr	r3, [r4, #28]
 802cbae:	6819      	ldr	r1, [r3, #0]
 802cbb0:	b111      	cbz	r1, 802cbb8 <_reclaim_reent+0x3c>
 802cbb2:	4620      	mov	r0, r4
 802cbb4:	f000 f92a 	bl	802ce0c <_free_r>
 802cbb8:	6961      	ldr	r1, [r4, #20]
 802cbba:	b111      	cbz	r1, 802cbc2 <_reclaim_reent+0x46>
 802cbbc:	4620      	mov	r0, r4
 802cbbe:	f000 f925 	bl	802ce0c <_free_r>
 802cbc2:	69e1      	ldr	r1, [r4, #28]
 802cbc4:	b111      	cbz	r1, 802cbcc <_reclaim_reent+0x50>
 802cbc6:	4620      	mov	r0, r4
 802cbc8:	f000 f920 	bl	802ce0c <_free_r>
 802cbcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802cbce:	b111      	cbz	r1, 802cbd6 <_reclaim_reent+0x5a>
 802cbd0:	4620      	mov	r0, r4
 802cbd2:	f000 f91b 	bl	802ce0c <_free_r>
 802cbd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802cbd8:	b111      	cbz	r1, 802cbe0 <_reclaim_reent+0x64>
 802cbda:	4620      	mov	r0, r4
 802cbdc:	f000 f916 	bl	802ce0c <_free_r>
 802cbe0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 802cbe2:	b111      	cbz	r1, 802cbea <_reclaim_reent+0x6e>
 802cbe4:	4620      	mov	r0, r4
 802cbe6:	f000 f911 	bl	802ce0c <_free_r>
 802cbea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802cbec:	b111      	cbz	r1, 802cbf4 <_reclaim_reent+0x78>
 802cbee:	4620      	mov	r0, r4
 802cbf0:	f000 f90c 	bl	802ce0c <_free_r>
 802cbf4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802cbf6:	b111      	cbz	r1, 802cbfe <_reclaim_reent+0x82>
 802cbf8:	4620      	mov	r0, r4
 802cbfa:	f000 f907 	bl	802ce0c <_free_r>
 802cbfe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802cc00:	b111      	cbz	r1, 802cc08 <_reclaim_reent+0x8c>
 802cc02:	4620      	mov	r0, r4
 802cc04:	f000 f902 	bl	802ce0c <_free_r>
 802cc08:	6a23      	ldr	r3, [r4, #32]
 802cc0a:	b14b      	cbz	r3, 802cc20 <_reclaim_reent+0xa4>
 802cc0c:	4620      	mov	r0, r4
 802cc0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802cc12:	4718      	bx	r3
 802cc14:	680e      	ldr	r6, [r1, #0]
 802cc16:	4620      	mov	r0, r4
 802cc18:	f000 f8f8 	bl	802ce0c <_free_r>
 802cc1c:	4631      	mov	r1, r6
 802cc1e:	e7bb      	b.n	802cb98 <_reclaim_reent+0x1c>
 802cc20:	bd70      	pop	{r4, r5, r6, pc}
 802cc22:	bf00      	nop
 802cc24:	200000b4 	.word	0x200000b4

0802cc28 <_lseek_r>:
 802cc28:	b538      	push	{r3, r4, r5, lr}
 802cc2a:	4604      	mov	r4, r0
 802cc2c:	4d06      	ldr	r5, [pc, #24]	@ (802cc48 <_lseek_r+0x20>)
 802cc2e:	4608      	mov	r0, r1
 802cc30:	4611      	mov	r1, r2
 802cc32:	2200      	movs	r2, #0
 802cc34:	602a      	str	r2, [r5, #0]
 802cc36:	461a      	mov	r2, r3
 802cc38:	f7d4 fb9f 	bl	800137a <_lseek>
 802cc3c:	1c43      	adds	r3, r0, #1
 802cc3e:	d102      	bne.n	802cc46 <_lseek_r+0x1e>
 802cc40:	682b      	ldr	r3, [r5, #0]
 802cc42:	b103      	cbz	r3, 802cc46 <_lseek_r+0x1e>
 802cc44:	6023      	str	r3, [r4, #0]
 802cc46:	bd38      	pop	{r3, r4, r5, pc}
 802cc48:	20012ca4 	.word	0x20012ca4

0802cc4c <_read_r>:
 802cc4c:	b538      	push	{r3, r4, r5, lr}
 802cc4e:	4604      	mov	r4, r0
 802cc50:	4d06      	ldr	r5, [pc, #24]	@ (802cc6c <_read_r+0x20>)
 802cc52:	4608      	mov	r0, r1
 802cc54:	4611      	mov	r1, r2
 802cc56:	2200      	movs	r2, #0
 802cc58:	602a      	str	r2, [r5, #0]
 802cc5a:	461a      	mov	r2, r3
 802cc5c:	f7d4 fb2d 	bl	80012ba <_read>
 802cc60:	1c43      	adds	r3, r0, #1
 802cc62:	d102      	bne.n	802cc6a <_read_r+0x1e>
 802cc64:	682b      	ldr	r3, [r5, #0]
 802cc66:	b103      	cbz	r3, 802cc6a <_read_r+0x1e>
 802cc68:	6023      	str	r3, [r4, #0]
 802cc6a:	bd38      	pop	{r3, r4, r5, pc}
 802cc6c:	20012ca4 	.word	0x20012ca4

0802cc70 <_kill_r>:
 802cc70:	b538      	push	{r3, r4, r5, lr}
 802cc72:	2300      	movs	r3, #0
 802cc74:	4d06      	ldr	r5, [pc, #24]	@ (802cc90 <_kill_r+0x20>)
 802cc76:	4604      	mov	r4, r0
 802cc78:	4608      	mov	r0, r1
 802cc7a:	4611      	mov	r1, r2
 802cc7c:	602b      	str	r3, [r5, #0]
 802cc7e:	f7d4 fb01 	bl	8001284 <_kill>
 802cc82:	1c43      	adds	r3, r0, #1
 802cc84:	d102      	bne.n	802cc8c <_kill_r+0x1c>
 802cc86:	682b      	ldr	r3, [r5, #0]
 802cc88:	b103      	cbz	r3, 802cc8c <_kill_r+0x1c>
 802cc8a:	6023      	str	r3, [r4, #0]
 802cc8c:	bd38      	pop	{r3, r4, r5, pc}
 802cc8e:	bf00      	nop
 802cc90:	20012ca4 	.word	0x20012ca4

0802cc94 <_getpid_r>:
 802cc94:	f7d4 baee 	b.w	8001274 <_getpid>

0802cc98 <_sbrk_r>:
 802cc98:	b538      	push	{r3, r4, r5, lr}
 802cc9a:	2300      	movs	r3, #0
 802cc9c:	4d05      	ldr	r5, [pc, #20]	@ (802ccb4 <_sbrk_r+0x1c>)
 802cc9e:	4604      	mov	r4, r0
 802cca0:	4608      	mov	r0, r1
 802cca2:	602b      	str	r3, [r5, #0]
 802cca4:	f7d4 fb76 	bl	8001394 <_sbrk>
 802cca8:	1c43      	adds	r3, r0, #1
 802ccaa:	d102      	bne.n	802ccb2 <_sbrk_r+0x1a>
 802ccac:	682b      	ldr	r3, [r5, #0]
 802ccae:	b103      	cbz	r3, 802ccb2 <_sbrk_r+0x1a>
 802ccb0:	6023      	str	r3, [r4, #0]
 802ccb2:	bd38      	pop	{r3, r4, r5, pc}
 802ccb4:	20012ca4 	.word	0x20012ca4

0802ccb8 <_write_r>:
 802ccb8:	b538      	push	{r3, r4, r5, lr}
 802ccba:	4604      	mov	r4, r0
 802ccbc:	4d06      	ldr	r5, [pc, #24]	@ (802ccd8 <_write_r+0x20>)
 802ccbe:	4608      	mov	r0, r1
 802ccc0:	4611      	mov	r1, r2
 802ccc2:	2200      	movs	r2, #0
 802ccc4:	602a      	str	r2, [r5, #0]
 802ccc6:	461a      	mov	r2, r3
 802ccc8:	f7d4 fb14 	bl	80012f4 <_write>
 802cccc:	1c43      	adds	r3, r0, #1
 802ccce:	d102      	bne.n	802ccd6 <_write_r+0x1e>
 802ccd0:	682b      	ldr	r3, [r5, #0]
 802ccd2:	b103      	cbz	r3, 802ccd6 <_write_r+0x1e>
 802ccd4:	6023      	str	r3, [r4, #0]
 802ccd6:	bd38      	pop	{r3, r4, r5, pc}
 802ccd8:	20012ca4 	.word	0x20012ca4

0802ccdc <__errno>:
 802ccdc:	4b01      	ldr	r3, [pc, #4]	@ (802cce4 <__errno+0x8>)
 802ccde:	6818      	ldr	r0, [r3, #0]
 802cce0:	4770      	bx	lr
 802cce2:	bf00      	nop
 802cce4:	200000b4 	.word	0x200000b4

0802cce8 <__libc_init_array>:
 802cce8:	b570      	push	{r4, r5, r6, lr}
 802ccea:	4d0d      	ldr	r5, [pc, #52]	@ (802cd20 <__libc_init_array+0x38>)
 802ccec:	2600      	movs	r6, #0
 802ccee:	4c0d      	ldr	r4, [pc, #52]	@ (802cd24 <__libc_init_array+0x3c>)
 802ccf0:	1b64      	subs	r4, r4, r5
 802ccf2:	10a4      	asrs	r4, r4, #2
 802ccf4:	42a6      	cmp	r6, r4
 802ccf6:	d109      	bne.n	802cd0c <__libc_init_array+0x24>
 802ccf8:	4d0b      	ldr	r5, [pc, #44]	@ (802cd28 <__libc_init_array+0x40>)
 802ccfa:	2600      	movs	r6, #0
 802ccfc:	4c0b      	ldr	r4, [pc, #44]	@ (802cd2c <__libc_init_array+0x44>)
 802ccfe:	f000 fd75 	bl	802d7ec <_init>
 802cd02:	1b64      	subs	r4, r4, r5
 802cd04:	10a4      	asrs	r4, r4, #2
 802cd06:	42a6      	cmp	r6, r4
 802cd08:	d105      	bne.n	802cd16 <__libc_init_array+0x2e>
 802cd0a:	bd70      	pop	{r4, r5, r6, pc}
 802cd0c:	f855 3b04 	ldr.w	r3, [r5], #4
 802cd10:	3601      	adds	r6, #1
 802cd12:	4798      	blx	r3
 802cd14:	e7ee      	b.n	802ccf4 <__libc_init_array+0xc>
 802cd16:	f855 3b04 	ldr.w	r3, [r5], #4
 802cd1a:	3601      	adds	r6, #1
 802cd1c:	4798      	blx	r3
 802cd1e:	e7f2      	b.n	802cd06 <__libc_init_array+0x1e>
 802cd20:	0803ac1c 	.word	0x0803ac1c
 802cd24:	0803ac1c 	.word	0x0803ac1c
 802cd28:	0803ac1c 	.word	0x0803ac1c
 802cd2c:	0803ac34 	.word	0x0803ac34

0802cd30 <__retarget_lock_init_recursive>:
 802cd30:	4770      	bx	lr

0802cd32 <__retarget_lock_acquire_recursive>:
 802cd32:	4770      	bx	lr

0802cd34 <__retarget_lock_release_recursive>:
 802cd34:	4770      	bx	lr

0802cd36 <memcpy>:
 802cd36:	440a      	add	r2, r1
 802cd38:	1e43      	subs	r3, r0, #1
 802cd3a:	4291      	cmp	r1, r2
 802cd3c:	d100      	bne.n	802cd40 <memcpy+0xa>
 802cd3e:	4770      	bx	lr
 802cd40:	b510      	push	{r4, lr}
 802cd42:	f811 4b01 	ldrb.w	r4, [r1], #1
 802cd46:	4291      	cmp	r1, r2
 802cd48:	f803 4f01 	strb.w	r4, [r3, #1]!
 802cd4c:	d1f9      	bne.n	802cd42 <memcpy+0xc>
 802cd4e:	bd10      	pop	{r4, pc}

0802cd50 <__register_exitproc>:
 802cd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802cd54:	4d28      	ldr	r5, [pc, #160]	@ (802cdf8 <__register_exitproc+0xa8>)
 802cd56:	4607      	mov	r7, r0
 802cd58:	4691      	mov	r9, r2
 802cd5a:	460e      	mov	r6, r1
 802cd5c:	6828      	ldr	r0, [r5, #0]
 802cd5e:	4698      	mov	r8, r3
 802cd60:	f7ff ffe7 	bl	802cd32 <__retarget_lock_acquire_recursive>
 802cd64:	4a25      	ldr	r2, [pc, #148]	@ (802cdfc <__register_exitproc+0xac>)
 802cd66:	6814      	ldr	r4, [r2, #0]
 802cd68:	b93c      	cbnz	r4, 802cd7a <__register_exitproc+0x2a>
 802cd6a:	4b25      	ldr	r3, [pc, #148]	@ (802ce00 <__register_exitproc+0xb0>)
 802cd6c:	6013      	str	r3, [r2, #0]
 802cd6e:	4a25      	ldr	r2, [pc, #148]	@ (802ce04 <__register_exitproc+0xb4>)
 802cd70:	b112      	cbz	r2, 802cd78 <__register_exitproc+0x28>
 802cd72:	6812      	ldr	r2, [r2, #0]
 802cd74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 802cd78:	4c21      	ldr	r4, [pc, #132]	@ (802ce00 <__register_exitproc+0xb0>)
 802cd7a:	6863      	ldr	r3, [r4, #4]
 802cd7c:	2b1f      	cmp	r3, #31
 802cd7e:	dd06      	ble.n	802cd8e <__register_exitproc+0x3e>
 802cd80:	6828      	ldr	r0, [r5, #0]
 802cd82:	f7ff ffd7 	bl	802cd34 <__retarget_lock_release_recursive>
 802cd86:	f04f 30ff 	mov.w	r0, #4294967295
 802cd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802cd8e:	b33f      	cbz	r7, 802cde0 <__register_exitproc+0x90>
 802cd90:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 802cd94:	b968      	cbnz	r0, 802cdb2 <__register_exitproc+0x62>
 802cd96:	4b1c      	ldr	r3, [pc, #112]	@ (802ce08 <__register_exitproc+0xb8>)
 802cd98:	2b00      	cmp	r3, #0
 802cd9a:	d0f1      	beq.n	802cd80 <__register_exitproc+0x30>
 802cd9c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 802cda0:	f7ff fcc0 	bl	802c724 <malloc>
 802cda4:	2800      	cmp	r0, #0
 802cda6:	d0eb      	beq.n	802cd80 <__register_exitproc+0x30>
 802cda8:	2300      	movs	r3, #0
 802cdaa:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802cdae:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 802cdb2:	6863      	ldr	r3, [r4, #4]
 802cdb4:	2201      	movs	r2, #1
 802cdb6:	2f02      	cmp	r7, #2
 802cdb8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802cdbc:	fa02 f203 	lsl.w	r2, r2, r3
 802cdc0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802cdc4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 802cdc8:	ea43 0302 	orr.w	r3, r3, r2
 802cdcc:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802cdd0:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 802cdd4:	bf02      	ittt	eq
 802cdd6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 802cdda:	4313      	orreq	r3, r2
 802cddc:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802cde0:	6863      	ldr	r3, [r4, #4]
 802cde2:	6828      	ldr	r0, [r5, #0]
 802cde4:	1c5a      	adds	r2, r3, #1
 802cde6:	3302      	adds	r3, #2
 802cde8:	6062      	str	r2, [r4, #4]
 802cdea:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802cdee:	f7ff ffa1 	bl	802cd34 <__retarget_lock_release_recursive>
 802cdf2:	2000      	movs	r0, #0
 802cdf4:	e7c9      	b.n	802cd8a <__register_exitproc+0x3a>
 802cdf6:	bf00      	nop
 802cdf8:	20000104 	.word	0x20000104
 802cdfc:	20012d38 	.word	0x20012d38
 802ce00:	20012cac 	.word	0x20012cac
 802ce04:	080308ec 	.word	0x080308ec
 802ce08:	0802c725 	.word	0x0802c725

0802ce0c <_free_r>:
 802ce0c:	b538      	push	{r3, r4, r5, lr}
 802ce0e:	4605      	mov	r5, r0
 802ce10:	2900      	cmp	r1, #0
 802ce12:	d041      	beq.n	802ce98 <_free_r+0x8c>
 802ce14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ce18:	1f0c      	subs	r4, r1, #4
 802ce1a:	2b00      	cmp	r3, #0
 802ce1c:	bfb8      	it	lt
 802ce1e:	18e4      	addlt	r4, r4, r3
 802ce20:	f7ff fd32 	bl	802c888 <__malloc_lock>
 802ce24:	4a1d      	ldr	r2, [pc, #116]	@ (802ce9c <_free_r+0x90>)
 802ce26:	6813      	ldr	r3, [r2, #0]
 802ce28:	b933      	cbnz	r3, 802ce38 <_free_r+0x2c>
 802ce2a:	6063      	str	r3, [r4, #4]
 802ce2c:	6014      	str	r4, [r2, #0]
 802ce2e:	4628      	mov	r0, r5
 802ce30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ce34:	f7ff bd2e 	b.w	802c894 <__malloc_unlock>
 802ce38:	42a3      	cmp	r3, r4
 802ce3a:	d908      	bls.n	802ce4e <_free_r+0x42>
 802ce3c:	6820      	ldr	r0, [r4, #0]
 802ce3e:	1821      	adds	r1, r4, r0
 802ce40:	428b      	cmp	r3, r1
 802ce42:	bf01      	itttt	eq
 802ce44:	6819      	ldreq	r1, [r3, #0]
 802ce46:	685b      	ldreq	r3, [r3, #4]
 802ce48:	1809      	addeq	r1, r1, r0
 802ce4a:	6021      	streq	r1, [r4, #0]
 802ce4c:	e7ed      	b.n	802ce2a <_free_r+0x1e>
 802ce4e:	461a      	mov	r2, r3
 802ce50:	685b      	ldr	r3, [r3, #4]
 802ce52:	b10b      	cbz	r3, 802ce58 <_free_r+0x4c>
 802ce54:	42a3      	cmp	r3, r4
 802ce56:	d9fa      	bls.n	802ce4e <_free_r+0x42>
 802ce58:	6811      	ldr	r1, [r2, #0]
 802ce5a:	1850      	adds	r0, r2, r1
 802ce5c:	42a0      	cmp	r0, r4
 802ce5e:	d10b      	bne.n	802ce78 <_free_r+0x6c>
 802ce60:	6820      	ldr	r0, [r4, #0]
 802ce62:	4401      	add	r1, r0
 802ce64:	1850      	adds	r0, r2, r1
 802ce66:	6011      	str	r1, [r2, #0]
 802ce68:	4283      	cmp	r3, r0
 802ce6a:	d1e0      	bne.n	802ce2e <_free_r+0x22>
 802ce6c:	6818      	ldr	r0, [r3, #0]
 802ce6e:	685b      	ldr	r3, [r3, #4]
 802ce70:	4408      	add	r0, r1
 802ce72:	6053      	str	r3, [r2, #4]
 802ce74:	6010      	str	r0, [r2, #0]
 802ce76:	e7da      	b.n	802ce2e <_free_r+0x22>
 802ce78:	d902      	bls.n	802ce80 <_free_r+0x74>
 802ce7a:	230c      	movs	r3, #12
 802ce7c:	602b      	str	r3, [r5, #0]
 802ce7e:	e7d6      	b.n	802ce2e <_free_r+0x22>
 802ce80:	6820      	ldr	r0, [r4, #0]
 802ce82:	1821      	adds	r1, r4, r0
 802ce84:	428b      	cmp	r3, r1
 802ce86:	bf02      	ittt	eq
 802ce88:	6819      	ldreq	r1, [r3, #0]
 802ce8a:	685b      	ldreq	r3, [r3, #4]
 802ce8c:	1809      	addeq	r1, r1, r0
 802ce8e:	6063      	str	r3, [r4, #4]
 802ce90:	bf08      	it	eq
 802ce92:	6021      	streq	r1, [r4, #0]
 802ce94:	6054      	str	r4, [r2, #4]
 802ce96:	e7ca      	b.n	802ce2e <_free_r+0x22>
 802ce98:	bd38      	pop	{r3, r4, r5, pc}
 802ce9a:	bf00      	nop
 802ce9c:	20012b64 	.word	0x20012b64

0802cea0 <__sfputc_r>:
 802cea0:	6893      	ldr	r3, [r2, #8]
 802cea2:	3b01      	subs	r3, #1
 802cea4:	2b00      	cmp	r3, #0
 802cea6:	6093      	str	r3, [r2, #8]
 802cea8:	b410      	push	{r4}
 802ceaa:	da08      	bge.n	802cebe <__sfputc_r+0x1e>
 802ceac:	6994      	ldr	r4, [r2, #24]
 802ceae:	42a3      	cmp	r3, r4
 802ceb0:	db01      	blt.n	802ceb6 <__sfputc_r+0x16>
 802ceb2:	290a      	cmp	r1, #10
 802ceb4:	d103      	bne.n	802cebe <__sfputc_r+0x1e>
 802ceb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802ceba:	f000 bb71 	b.w	802d5a0 <__swbuf_r>
 802cebe:	6813      	ldr	r3, [r2, #0]
 802cec0:	1c58      	adds	r0, r3, #1
 802cec2:	6010      	str	r0, [r2, #0]
 802cec4:	4608      	mov	r0, r1
 802cec6:	7019      	strb	r1, [r3, #0]
 802cec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802cecc:	4770      	bx	lr

0802cece <__sfputs_r>:
 802cece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ced0:	4606      	mov	r6, r0
 802ced2:	460f      	mov	r7, r1
 802ced4:	4614      	mov	r4, r2
 802ced6:	18d5      	adds	r5, r2, r3
 802ced8:	42ac      	cmp	r4, r5
 802ceda:	d101      	bne.n	802cee0 <__sfputs_r+0x12>
 802cedc:	2000      	movs	r0, #0
 802cede:	e007      	b.n	802cef0 <__sfputs_r+0x22>
 802cee0:	463a      	mov	r2, r7
 802cee2:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cee6:	4630      	mov	r0, r6
 802cee8:	f7ff ffda 	bl	802cea0 <__sfputc_r>
 802ceec:	1c43      	adds	r3, r0, #1
 802ceee:	d1f3      	bne.n	802ced8 <__sfputs_r+0xa>
 802cef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802cef4 <_vfiprintf_r>:
 802cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cef8:	460d      	mov	r5, r1
 802cefa:	b09d      	sub	sp, #116	@ 0x74
 802cefc:	4614      	mov	r4, r2
 802cefe:	4698      	mov	r8, r3
 802cf00:	4606      	mov	r6, r0
 802cf02:	b118      	cbz	r0, 802cf0c <_vfiprintf_r+0x18>
 802cf04:	6a03      	ldr	r3, [r0, #32]
 802cf06:	b90b      	cbnz	r3, 802cf0c <_vfiprintf_r+0x18>
 802cf08:	f7ff fd64 	bl	802c9d4 <__sinit>
 802cf0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802cf0e:	07d9      	lsls	r1, r3, #31
 802cf10:	d405      	bmi.n	802cf1e <_vfiprintf_r+0x2a>
 802cf12:	89ab      	ldrh	r3, [r5, #12]
 802cf14:	059a      	lsls	r2, r3, #22
 802cf16:	d402      	bmi.n	802cf1e <_vfiprintf_r+0x2a>
 802cf18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802cf1a:	f7ff ff0a 	bl	802cd32 <__retarget_lock_acquire_recursive>
 802cf1e:	89ab      	ldrh	r3, [r5, #12]
 802cf20:	071b      	lsls	r3, r3, #28
 802cf22:	d501      	bpl.n	802cf28 <_vfiprintf_r+0x34>
 802cf24:	692b      	ldr	r3, [r5, #16]
 802cf26:	b99b      	cbnz	r3, 802cf50 <_vfiprintf_r+0x5c>
 802cf28:	4629      	mov	r1, r5
 802cf2a:	4630      	mov	r0, r6
 802cf2c:	f000 fb76 	bl	802d61c <__swsetup_r>
 802cf30:	b170      	cbz	r0, 802cf50 <_vfiprintf_r+0x5c>
 802cf32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802cf34:	07dc      	lsls	r4, r3, #31
 802cf36:	d504      	bpl.n	802cf42 <_vfiprintf_r+0x4e>
 802cf38:	f04f 30ff 	mov.w	r0, #4294967295
 802cf3c:	b01d      	add	sp, #116	@ 0x74
 802cf3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cf42:	89ab      	ldrh	r3, [r5, #12]
 802cf44:	0598      	lsls	r0, r3, #22
 802cf46:	d4f7      	bmi.n	802cf38 <_vfiprintf_r+0x44>
 802cf48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802cf4a:	f7ff fef3 	bl	802cd34 <__retarget_lock_release_recursive>
 802cf4e:	e7f3      	b.n	802cf38 <_vfiprintf_r+0x44>
 802cf50:	2300      	movs	r3, #0
 802cf52:	f8cd 800c 	str.w	r8, [sp, #12]
 802cf56:	f04f 0901 	mov.w	r9, #1
 802cf5a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 802d110 <_vfiprintf_r+0x21c>
 802cf5e:	9309      	str	r3, [sp, #36]	@ 0x24
 802cf60:	2320      	movs	r3, #32
 802cf62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802cf66:	2330      	movs	r3, #48	@ 0x30
 802cf68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802cf6c:	4623      	mov	r3, r4
 802cf6e:	469a      	mov	sl, r3
 802cf70:	f813 2b01 	ldrb.w	r2, [r3], #1
 802cf74:	b10a      	cbz	r2, 802cf7a <_vfiprintf_r+0x86>
 802cf76:	2a25      	cmp	r2, #37	@ 0x25
 802cf78:	d1f9      	bne.n	802cf6e <_vfiprintf_r+0x7a>
 802cf7a:	ebba 0b04 	subs.w	fp, sl, r4
 802cf7e:	d00b      	beq.n	802cf98 <_vfiprintf_r+0xa4>
 802cf80:	465b      	mov	r3, fp
 802cf82:	4622      	mov	r2, r4
 802cf84:	4629      	mov	r1, r5
 802cf86:	4630      	mov	r0, r6
 802cf88:	f7ff ffa1 	bl	802cece <__sfputs_r>
 802cf8c:	3001      	adds	r0, #1
 802cf8e:	f000 80a7 	beq.w	802d0e0 <_vfiprintf_r+0x1ec>
 802cf92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802cf94:	445a      	add	r2, fp
 802cf96:	9209      	str	r2, [sp, #36]	@ 0x24
 802cf98:	f89a 3000 	ldrb.w	r3, [sl]
 802cf9c:	2b00      	cmp	r3, #0
 802cf9e:	f000 809f 	beq.w	802d0e0 <_vfiprintf_r+0x1ec>
 802cfa2:	2300      	movs	r3, #0
 802cfa4:	f04f 32ff 	mov.w	r2, #4294967295
 802cfa8:	f10a 0a01 	add.w	sl, sl, #1
 802cfac:	9304      	str	r3, [sp, #16]
 802cfae:	9307      	str	r3, [sp, #28]
 802cfb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802cfb4:	931a      	str	r3, [sp, #104]	@ 0x68
 802cfb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802cfba:	4654      	mov	r4, sl
 802cfbc:	2205      	movs	r2, #5
 802cfbe:	4854      	ldr	r0, [pc, #336]	@ (802d110 <_vfiprintf_r+0x21c>)
 802cfc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802cfc4:	f000 fb80 	bl	802d6c8 <memchr>
 802cfc8:	9a04      	ldr	r2, [sp, #16]
 802cfca:	b9d8      	cbnz	r0, 802d004 <_vfiprintf_r+0x110>
 802cfcc:	06d1      	lsls	r1, r2, #27
 802cfce:	bf44      	itt	mi
 802cfd0:	2320      	movmi	r3, #32
 802cfd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802cfd6:	0713      	lsls	r3, r2, #28
 802cfd8:	bf44      	itt	mi
 802cfda:	232b      	movmi	r3, #43	@ 0x2b
 802cfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802cfe0:	f89a 3000 	ldrb.w	r3, [sl]
 802cfe4:	2b2a      	cmp	r3, #42	@ 0x2a
 802cfe6:	d015      	beq.n	802d014 <_vfiprintf_r+0x120>
 802cfe8:	9a07      	ldr	r2, [sp, #28]
 802cfea:	4654      	mov	r4, sl
 802cfec:	2000      	movs	r0, #0
 802cfee:	f04f 0c0a 	mov.w	ip, #10
 802cff2:	4621      	mov	r1, r4
 802cff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802cff8:	3b30      	subs	r3, #48	@ 0x30
 802cffa:	2b09      	cmp	r3, #9
 802cffc:	d94b      	bls.n	802d096 <_vfiprintf_r+0x1a2>
 802cffe:	b1b0      	cbz	r0, 802d02e <_vfiprintf_r+0x13a>
 802d000:	9207      	str	r2, [sp, #28]
 802d002:	e014      	b.n	802d02e <_vfiprintf_r+0x13a>
 802d004:	eba0 0308 	sub.w	r3, r0, r8
 802d008:	46a2      	mov	sl, r4
 802d00a:	fa09 f303 	lsl.w	r3, r9, r3
 802d00e:	4313      	orrs	r3, r2
 802d010:	9304      	str	r3, [sp, #16]
 802d012:	e7d2      	b.n	802cfba <_vfiprintf_r+0xc6>
 802d014:	9b03      	ldr	r3, [sp, #12]
 802d016:	1d19      	adds	r1, r3, #4
 802d018:	681b      	ldr	r3, [r3, #0]
 802d01a:	2b00      	cmp	r3, #0
 802d01c:	9103      	str	r1, [sp, #12]
 802d01e:	bfbb      	ittet	lt
 802d020:	425b      	neglt	r3, r3
 802d022:	f042 0202 	orrlt.w	r2, r2, #2
 802d026:	9307      	strge	r3, [sp, #28]
 802d028:	9307      	strlt	r3, [sp, #28]
 802d02a:	bfb8      	it	lt
 802d02c:	9204      	strlt	r2, [sp, #16]
 802d02e:	7823      	ldrb	r3, [r4, #0]
 802d030:	2b2e      	cmp	r3, #46	@ 0x2e
 802d032:	d10a      	bne.n	802d04a <_vfiprintf_r+0x156>
 802d034:	7863      	ldrb	r3, [r4, #1]
 802d036:	2b2a      	cmp	r3, #42	@ 0x2a
 802d038:	d132      	bne.n	802d0a0 <_vfiprintf_r+0x1ac>
 802d03a:	9b03      	ldr	r3, [sp, #12]
 802d03c:	3402      	adds	r4, #2
 802d03e:	1d1a      	adds	r2, r3, #4
 802d040:	681b      	ldr	r3, [r3, #0]
 802d042:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802d046:	9203      	str	r2, [sp, #12]
 802d048:	9305      	str	r3, [sp, #20]
 802d04a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802d120 <_vfiprintf_r+0x22c>
 802d04e:	2203      	movs	r2, #3
 802d050:	7821      	ldrb	r1, [r4, #0]
 802d052:	4650      	mov	r0, sl
 802d054:	f000 fb38 	bl	802d6c8 <memchr>
 802d058:	b138      	cbz	r0, 802d06a <_vfiprintf_r+0x176>
 802d05a:	eba0 000a 	sub.w	r0, r0, sl
 802d05e:	2240      	movs	r2, #64	@ 0x40
 802d060:	9b04      	ldr	r3, [sp, #16]
 802d062:	3401      	adds	r4, #1
 802d064:	4082      	lsls	r2, r0
 802d066:	4313      	orrs	r3, r2
 802d068:	9304      	str	r3, [sp, #16]
 802d06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802d06e:	2206      	movs	r2, #6
 802d070:	4828      	ldr	r0, [pc, #160]	@ (802d114 <_vfiprintf_r+0x220>)
 802d072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802d076:	f000 fb27 	bl	802d6c8 <memchr>
 802d07a:	2800      	cmp	r0, #0
 802d07c:	d03f      	beq.n	802d0fe <_vfiprintf_r+0x20a>
 802d07e:	4b26      	ldr	r3, [pc, #152]	@ (802d118 <_vfiprintf_r+0x224>)
 802d080:	bb1b      	cbnz	r3, 802d0ca <_vfiprintf_r+0x1d6>
 802d082:	9b03      	ldr	r3, [sp, #12]
 802d084:	3307      	adds	r3, #7
 802d086:	f023 0307 	bic.w	r3, r3, #7
 802d08a:	3308      	adds	r3, #8
 802d08c:	9303      	str	r3, [sp, #12]
 802d08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802d090:	443b      	add	r3, r7
 802d092:	9309      	str	r3, [sp, #36]	@ 0x24
 802d094:	e76a      	b.n	802cf6c <_vfiprintf_r+0x78>
 802d096:	fb0c 3202 	mla	r2, ip, r2, r3
 802d09a:	460c      	mov	r4, r1
 802d09c:	2001      	movs	r0, #1
 802d09e:	e7a8      	b.n	802cff2 <_vfiprintf_r+0xfe>
 802d0a0:	2300      	movs	r3, #0
 802d0a2:	3401      	adds	r4, #1
 802d0a4:	f04f 0c0a 	mov.w	ip, #10
 802d0a8:	4619      	mov	r1, r3
 802d0aa:	9305      	str	r3, [sp, #20]
 802d0ac:	4620      	mov	r0, r4
 802d0ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d0b2:	3a30      	subs	r2, #48	@ 0x30
 802d0b4:	2a09      	cmp	r2, #9
 802d0b6:	d903      	bls.n	802d0c0 <_vfiprintf_r+0x1cc>
 802d0b8:	2b00      	cmp	r3, #0
 802d0ba:	d0c6      	beq.n	802d04a <_vfiprintf_r+0x156>
 802d0bc:	9105      	str	r1, [sp, #20]
 802d0be:	e7c4      	b.n	802d04a <_vfiprintf_r+0x156>
 802d0c0:	fb0c 2101 	mla	r1, ip, r1, r2
 802d0c4:	4604      	mov	r4, r0
 802d0c6:	2301      	movs	r3, #1
 802d0c8:	e7f0      	b.n	802d0ac <_vfiprintf_r+0x1b8>
 802d0ca:	ab03      	add	r3, sp, #12
 802d0cc:	462a      	mov	r2, r5
 802d0ce:	a904      	add	r1, sp, #16
 802d0d0:	4630      	mov	r0, r6
 802d0d2:	9300      	str	r3, [sp, #0]
 802d0d4:	4b11      	ldr	r3, [pc, #68]	@ (802d11c <_vfiprintf_r+0x228>)
 802d0d6:	f3af 8000 	nop.w
 802d0da:	4607      	mov	r7, r0
 802d0dc:	1c78      	adds	r0, r7, #1
 802d0de:	d1d6      	bne.n	802d08e <_vfiprintf_r+0x19a>
 802d0e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802d0e2:	07d9      	lsls	r1, r3, #31
 802d0e4:	d405      	bmi.n	802d0f2 <_vfiprintf_r+0x1fe>
 802d0e6:	89ab      	ldrh	r3, [r5, #12]
 802d0e8:	059a      	lsls	r2, r3, #22
 802d0ea:	d402      	bmi.n	802d0f2 <_vfiprintf_r+0x1fe>
 802d0ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802d0ee:	f7ff fe21 	bl	802cd34 <__retarget_lock_release_recursive>
 802d0f2:	89ab      	ldrh	r3, [r5, #12]
 802d0f4:	065b      	lsls	r3, r3, #25
 802d0f6:	f53f af1f 	bmi.w	802cf38 <_vfiprintf_r+0x44>
 802d0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802d0fc:	e71e      	b.n	802cf3c <_vfiprintf_r+0x48>
 802d0fe:	ab03      	add	r3, sp, #12
 802d100:	462a      	mov	r2, r5
 802d102:	a904      	add	r1, sp, #16
 802d104:	4630      	mov	r0, r6
 802d106:	9300      	str	r3, [sp, #0]
 802d108:	4b04      	ldr	r3, [pc, #16]	@ (802d11c <_vfiprintf_r+0x228>)
 802d10a:	f000 f87d 	bl	802d208 <_printf_i>
 802d10e:	e7e4      	b.n	802d0da <_vfiprintf_r+0x1e6>
 802d110:	080308f0 	.word	0x080308f0
 802d114:	080308fa 	.word	0x080308fa
 802d118:	00000000 	.word	0x00000000
 802d11c:	0802cecf 	.word	0x0802cecf
 802d120:	080308f6 	.word	0x080308f6

0802d124 <_printf_common>:
 802d124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802d128:	4616      	mov	r6, r2
 802d12a:	4698      	mov	r8, r3
 802d12c:	688a      	ldr	r2, [r1, #8]
 802d12e:	4607      	mov	r7, r0
 802d130:	690b      	ldr	r3, [r1, #16]
 802d132:	460c      	mov	r4, r1
 802d134:	f8dd 9020 	ldr.w	r9, [sp, #32]
 802d138:	4293      	cmp	r3, r2
 802d13a:	bfb8      	it	lt
 802d13c:	4613      	movlt	r3, r2
 802d13e:	6033      	str	r3, [r6, #0]
 802d140:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802d144:	b10a      	cbz	r2, 802d14a <_printf_common+0x26>
 802d146:	3301      	adds	r3, #1
 802d148:	6033      	str	r3, [r6, #0]
 802d14a:	6823      	ldr	r3, [r4, #0]
 802d14c:	0699      	lsls	r1, r3, #26
 802d14e:	bf42      	ittt	mi
 802d150:	6833      	ldrmi	r3, [r6, #0]
 802d152:	3302      	addmi	r3, #2
 802d154:	6033      	strmi	r3, [r6, #0]
 802d156:	6825      	ldr	r5, [r4, #0]
 802d158:	f015 0506 	ands.w	r5, r5, #6
 802d15c:	d106      	bne.n	802d16c <_printf_common+0x48>
 802d15e:	f104 0a19 	add.w	sl, r4, #25
 802d162:	68e3      	ldr	r3, [r4, #12]
 802d164:	6832      	ldr	r2, [r6, #0]
 802d166:	1a9b      	subs	r3, r3, r2
 802d168:	42ab      	cmp	r3, r5
 802d16a:	dc2b      	bgt.n	802d1c4 <_printf_common+0xa0>
 802d16c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802d170:	6822      	ldr	r2, [r4, #0]
 802d172:	3b00      	subs	r3, #0
 802d174:	bf18      	it	ne
 802d176:	2301      	movne	r3, #1
 802d178:	0692      	lsls	r2, r2, #26
 802d17a:	d430      	bmi.n	802d1de <_printf_common+0xba>
 802d17c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802d180:	4641      	mov	r1, r8
 802d182:	4638      	mov	r0, r7
 802d184:	47c8      	blx	r9
 802d186:	3001      	adds	r0, #1
 802d188:	d023      	beq.n	802d1d2 <_printf_common+0xae>
 802d18a:	6823      	ldr	r3, [r4, #0]
 802d18c:	341a      	adds	r4, #26
 802d18e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 802d192:	f003 0306 	and.w	r3, r3, #6
 802d196:	2b04      	cmp	r3, #4
 802d198:	bf0a      	itet	eq
 802d19a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 802d19e:	2500      	movne	r5, #0
 802d1a0:	6833      	ldreq	r3, [r6, #0]
 802d1a2:	f04f 0600 	mov.w	r6, #0
 802d1a6:	bf08      	it	eq
 802d1a8:	1aed      	subeq	r5, r5, r3
 802d1aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 802d1ae:	bf08      	it	eq
 802d1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802d1b4:	4293      	cmp	r3, r2
 802d1b6:	bfc4      	itt	gt
 802d1b8:	1a9b      	subgt	r3, r3, r2
 802d1ba:	18ed      	addgt	r5, r5, r3
 802d1bc:	42b5      	cmp	r5, r6
 802d1be:	d11a      	bne.n	802d1f6 <_printf_common+0xd2>
 802d1c0:	2000      	movs	r0, #0
 802d1c2:	e008      	b.n	802d1d6 <_printf_common+0xb2>
 802d1c4:	2301      	movs	r3, #1
 802d1c6:	4652      	mov	r2, sl
 802d1c8:	4641      	mov	r1, r8
 802d1ca:	4638      	mov	r0, r7
 802d1cc:	47c8      	blx	r9
 802d1ce:	3001      	adds	r0, #1
 802d1d0:	d103      	bne.n	802d1da <_printf_common+0xb6>
 802d1d2:	f04f 30ff 	mov.w	r0, #4294967295
 802d1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d1da:	3501      	adds	r5, #1
 802d1dc:	e7c1      	b.n	802d162 <_printf_common+0x3e>
 802d1de:	18e1      	adds	r1, r4, r3
 802d1e0:	1c5a      	adds	r2, r3, #1
 802d1e2:	2030      	movs	r0, #48	@ 0x30
 802d1e4:	3302      	adds	r3, #2
 802d1e6:	4422      	add	r2, r4
 802d1e8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802d1ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802d1f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802d1f4:	e7c2      	b.n	802d17c <_printf_common+0x58>
 802d1f6:	2301      	movs	r3, #1
 802d1f8:	4622      	mov	r2, r4
 802d1fa:	4641      	mov	r1, r8
 802d1fc:	4638      	mov	r0, r7
 802d1fe:	47c8      	blx	r9
 802d200:	3001      	adds	r0, #1
 802d202:	d0e6      	beq.n	802d1d2 <_printf_common+0xae>
 802d204:	3601      	adds	r6, #1
 802d206:	e7d9      	b.n	802d1bc <_printf_common+0x98>

0802d208 <_printf_i>:
 802d208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802d20c:	7e0f      	ldrb	r7, [r1, #24]
 802d20e:	4691      	mov	r9, r2
 802d210:	4680      	mov	r8, r0
 802d212:	460c      	mov	r4, r1
 802d214:	2f78      	cmp	r7, #120	@ 0x78
 802d216:	469a      	mov	sl, r3
 802d218:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802d21a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802d21e:	d807      	bhi.n	802d230 <_printf_i+0x28>
 802d220:	2f62      	cmp	r7, #98	@ 0x62
 802d222:	d80a      	bhi.n	802d23a <_printf_i+0x32>
 802d224:	2f00      	cmp	r7, #0
 802d226:	f000 80d2 	beq.w	802d3ce <_printf_i+0x1c6>
 802d22a:	2f58      	cmp	r7, #88	@ 0x58
 802d22c:	f000 80b9 	beq.w	802d3a2 <_printf_i+0x19a>
 802d230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 802d238:	e03a      	b.n	802d2b0 <_printf_i+0xa8>
 802d23a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802d23e:	2b15      	cmp	r3, #21
 802d240:	d8f6      	bhi.n	802d230 <_printf_i+0x28>
 802d242:	a101      	add	r1, pc, #4	@ (adr r1, 802d248 <_printf_i+0x40>)
 802d244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802d248:	0802d2a1 	.word	0x0802d2a1
 802d24c:	0802d2b5 	.word	0x0802d2b5
 802d250:	0802d231 	.word	0x0802d231
 802d254:	0802d231 	.word	0x0802d231
 802d258:	0802d231 	.word	0x0802d231
 802d25c:	0802d231 	.word	0x0802d231
 802d260:	0802d2b5 	.word	0x0802d2b5
 802d264:	0802d231 	.word	0x0802d231
 802d268:	0802d231 	.word	0x0802d231
 802d26c:	0802d231 	.word	0x0802d231
 802d270:	0802d231 	.word	0x0802d231
 802d274:	0802d3b5 	.word	0x0802d3b5
 802d278:	0802d2df 	.word	0x0802d2df
 802d27c:	0802d36f 	.word	0x0802d36f
 802d280:	0802d231 	.word	0x0802d231
 802d284:	0802d231 	.word	0x0802d231
 802d288:	0802d3d7 	.word	0x0802d3d7
 802d28c:	0802d231 	.word	0x0802d231
 802d290:	0802d2df 	.word	0x0802d2df
 802d294:	0802d231 	.word	0x0802d231
 802d298:	0802d231 	.word	0x0802d231
 802d29c:	0802d377 	.word	0x0802d377
 802d2a0:	6833      	ldr	r3, [r6, #0]
 802d2a2:	1d1a      	adds	r2, r3, #4
 802d2a4:	681b      	ldr	r3, [r3, #0]
 802d2a6:	6032      	str	r2, [r6, #0]
 802d2a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802d2ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802d2b0:	2301      	movs	r3, #1
 802d2b2:	e09d      	b.n	802d3f0 <_printf_i+0x1e8>
 802d2b4:	6833      	ldr	r3, [r6, #0]
 802d2b6:	6820      	ldr	r0, [r4, #0]
 802d2b8:	1d19      	adds	r1, r3, #4
 802d2ba:	6031      	str	r1, [r6, #0]
 802d2bc:	0606      	lsls	r6, r0, #24
 802d2be:	d501      	bpl.n	802d2c4 <_printf_i+0xbc>
 802d2c0:	681d      	ldr	r5, [r3, #0]
 802d2c2:	e003      	b.n	802d2cc <_printf_i+0xc4>
 802d2c4:	0645      	lsls	r5, r0, #25
 802d2c6:	d5fb      	bpl.n	802d2c0 <_printf_i+0xb8>
 802d2c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 802d2cc:	2d00      	cmp	r5, #0
 802d2ce:	da03      	bge.n	802d2d8 <_printf_i+0xd0>
 802d2d0:	232d      	movs	r3, #45	@ 0x2d
 802d2d2:	426d      	negs	r5, r5
 802d2d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d2d8:	4859      	ldr	r0, [pc, #356]	@ (802d440 <_printf_i+0x238>)
 802d2da:	230a      	movs	r3, #10
 802d2dc:	e011      	b.n	802d302 <_printf_i+0xfa>
 802d2de:	6821      	ldr	r1, [r4, #0]
 802d2e0:	6833      	ldr	r3, [r6, #0]
 802d2e2:	0608      	lsls	r0, r1, #24
 802d2e4:	f853 5b04 	ldr.w	r5, [r3], #4
 802d2e8:	d402      	bmi.n	802d2f0 <_printf_i+0xe8>
 802d2ea:	0649      	lsls	r1, r1, #25
 802d2ec:	bf48      	it	mi
 802d2ee:	b2ad      	uxthmi	r5, r5
 802d2f0:	2f6f      	cmp	r7, #111	@ 0x6f
 802d2f2:	6033      	str	r3, [r6, #0]
 802d2f4:	4852      	ldr	r0, [pc, #328]	@ (802d440 <_printf_i+0x238>)
 802d2f6:	bf14      	ite	ne
 802d2f8:	230a      	movne	r3, #10
 802d2fa:	2308      	moveq	r3, #8
 802d2fc:	2100      	movs	r1, #0
 802d2fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802d302:	6866      	ldr	r6, [r4, #4]
 802d304:	2e00      	cmp	r6, #0
 802d306:	60a6      	str	r6, [r4, #8]
 802d308:	bfa2      	ittt	ge
 802d30a:	6821      	ldrge	r1, [r4, #0]
 802d30c:	f021 0104 	bicge.w	r1, r1, #4
 802d310:	6021      	strge	r1, [r4, #0]
 802d312:	b90d      	cbnz	r5, 802d318 <_printf_i+0x110>
 802d314:	2e00      	cmp	r6, #0
 802d316:	d04b      	beq.n	802d3b0 <_printf_i+0x1a8>
 802d318:	4616      	mov	r6, r2
 802d31a:	fbb5 f1f3 	udiv	r1, r5, r3
 802d31e:	fb03 5711 	mls	r7, r3, r1, r5
 802d322:	5dc7      	ldrb	r7, [r0, r7]
 802d324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802d328:	462f      	mov	r7, r5
 802d32a:	460d      	mov	r5, r1
 802d32c:	42bb      	cmp	r3, r7
 802d32e:	d9f4      	bls.n	802d31a <_printf_i+0x112>
 802d330:	2b08      	cmp	r3, #8
 802d332:	d10b      	bne.n	802d34c <_printf_i+0x144>
 802d334:	6823      	ldr	r3, [r4, #0]
 802d336:	07df      	lsls	r7, r3, #31
 802d338:	d508      	bpl.n	802d34c <_printf_i+0x144>
 802d33a:	6923      	ldr	r3, [r4, #16]
 802d33c:	6861      	ldr	r1, [r4, #4]
 802d33e:	4299      	cmp	r1, r3
 802d340:	bfde      	ittt	le
 802d342:	2330      	movle	r3, #48	@ 0x30
 802d344:	f806 3c01 	strble.w	r3, [r6, #-1]
 802d348:	f106 36ff 	addle.w	r6, r6, #4294967295
 802d34c:	1b92      	subs	r2, r2, r6
 802d34e:	6122      	str	r2, [r4, #16]
 802d350:	464b      	mov	r3, r9
 802d352:	aa03      	add	r2, sp, #12
 802d354:	4621      	mov	r1, r4
 802d356:	4640      	mov	r0, r8
 802d358:	f8cd a000 	str.w	sl, [sp]
 802d35c:	f7ff fee2 	bl	802d124 <_printf_common>
 802d360:	3001      	adds	r0, #1
 802d362:	d14a      	bne.n	802d3fa <_printf_i+0x1f2>
 802d364:	f04f 30ff 	mov.w	r0, #4294967295
 802d368:	b004      	add	sp, #16
 802d36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d36e:	6823      	ldr	r3, [r4, #0]
 802d370:	f043 0320 	orr.w	r3, r3, #32
 802d374:	6023      	str	r3, [r4, #0]
 802d376:	2778      	movs	r7, #120	@ 0x78
 802d378:	4832      	ldr	r0, [pc, #200]	@ (802d444 <_printf_i+0x23c>)
 802d37a:	6823      	ldr	r3, [r4, #0]
 802d37c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802d380:	061f      	lsls	r7, r3, #24
 802d382:	6831      	ldr	r1, [r6, #0]
 802d384:	f851 5b04 	ldr.w	r5, [r1], #4
 802d388:	d402      	bmi.n	802d390 <_printf_i+0x188>
 802d38a:	065f      	lsls	r7, r3, #25
 802d38c:	bf48      	it	mi
 802d38e:	b2ad      	uxthmi	r5, r5
 802d390:	6031      	str	r1, [r6, #0]
 802d392:	07d9      	lsls	r1, r3, #31
 802d394:	bf44      	itt	mi
 802d396:	f043 0320 	orrmi.w	r3, r3, #32
 802d39a:	6023      	strmi	r3, [r4, #0]
 802d39c:	b11d      	cbz	r5, 802d3a6 <_printf_i+0x19e>
 802d39e:	2310      	movs	r3, #16
 802d3a0:	e7ac      	b.n	802d2fc <_printf_i+0xf4>
 802d3a2:	4827      	ldr	r0, [pc, #156]	@ (802d440 <_printf_i+0x238>)
 802d3a4:	e7e9      	b.n	802d37a <_printf_i+0x172>
 802d3a6:	6823      	ldr	r3, [r4, #0]
 802d3a8:	f023 0320 	bic.w	r3, r3, #32
 802d3ac:	6023      	str	r3, [r4, #0]
 802d3ae:	e7f6      	b.n	802d39e <_printf_i+0x196>
 802d3b0:	4616      	mov	r6, r2
 802d3b2:	e7bd      	b.n	802d330 <_printf_i+0x128>
 802d3b4:	6833      	ldr	r3, [r6, #0]
 802d3b6:	6825      	ldr	r5, [r4, #0]
 802d3b8:	1d18      	adds	r0, r3, #4
 802d3ba:	6961      	ldr	r1, [r4, #20]
 802d3bc:	6030      	str	r0, [r6, #0]
 802d3be:	062e      	lsls	r6, r5, #24
 802d3c0:	681b      	ldr	r3, [r3, #0]
 802d3c2:	d501      	bpl.n	802d3c8 <_printf_i+0x1c0>
 802d3c4:	6019      	str	r1, [r3, #0]
 802d3c6:	e002      	b.n	802d3ce <_printf_i+0x1c6>
 802d3c8:	0668      	lsls	r0, r5, #25
 802d3ca:	d5fb      	bpl.n	802d3c4 <_printf_i+0x1bc>
 802d3cc:	8019      	strh	r1, [r3, #0]
 802d3ce:	2300      	movs	r3, #0
 802d3d0:	4616      	mov	r6, r2
 802d3d2:	6123      	str	r3, [r4, #16]
 802d3d4:	e7bc      	b.n	802d350 <_printf_i+0x148>
 802d3d6:	6833      	ldr	r3, [r6, #0]
 802d3d8:	2100      	movs	r1, #0
 802d3da:	1d1a      	adds	r2, r3, #4
 802d3dc:	6032      	str	r2, [r6, #0]
 802d3de:	681e      	ldr	r6, [r3, #0]
 802d3e0:	6862      	ldr	r2, [r4, #4]
 802d3e2:	4630      	mov	r0, r6
 802d3e4:	f000 f970 	bl	802d6c8 <memchr>
 802d3e8:	b108      	cbz	r0, 802d3ee <_printf_i+0x1e6>
 802d3ea:	1b80      	subs	r0, r0, r6
 802d3ec:	6060      	str	r0, [r4, #4]
 802d3ee:	6863      	ldr	r3, [r4, #4]
 802d3f0:	6123      	str	r3, [r4, #16]
 802d3f2:	2300      	movs	r3, #0
 802d3f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802d3f8:	e7aa      	b.n	802d350 <_printf_i+0x148>
 802d3fa:	6923      	ldr	r3, [r4, #16]
 802d3fc:	4632      	mov	r2, r6
 802d3fe:	4649      	mov	r1, r9
 802d400:	4640      	mov	r0, r8
 802d402:	47d0      	blx	sl
 802d404:	3001      	adds	r0, #1
 802d406:	d0ad      	beq.n	802d364 <_printf_i+0x15c>
 802d408:	6823      	ldr	r3, [r4, #0]
 802d40a:	079b      	lsls	r3, r3, #30
 802d40c:	d413      	bmi.n	802d436 <_printf_i+0x22e>
 802d40e:	68e0      	ldr	r0, [r4, #12]
 802d410:	9b03      	ldr	r3, [sp, #12]
 802d412:	4298      	cmp	r0, r3
 802d414:	bfb8      	it	lt
 802d416:	4618      	movlt	r0, r3
 802d418:	e7a6      	b.n	802d368 <_printf_i+0x160>
 802d41a:	2301      	movs	r3, #1
 802d41c:	4632      	mov	r2, r6
 802d41e:	4649      	mov	r1, r9
 802d420:	4640      	mov	r0, r8
 802d422:	47d0      	blx	sl
 802d424:	3001      	adds	r0, #1
 802d426:	d09d      	beq.n	802d364 <_printf_i+0x15c>
 802d428:	3501      	adds	r5, #1
 802d42a:	68e3      	ldr	r3, [r4, #12]
 802d42c:	9903      	ldr	r1, [sp, #12]
 802d42e:	1a5b      	subs	r3, r3, r1
 802d430:	42ab      	cmp	r3, r5
 802d432:	dcf2      	bgt.n	802d41a <_printf_i+0x212>
 802d434:	e7eb      	b.n	802d40e <_printf_i+0x206>
 802d436:	2500      	movs	r5, #0
 802d438:	f104 0619 	add.w	r6, r4, #25
 802d43c:	e7f5      	b.n	802d42a <_printf_i+0x222>
 802d43e:	bf00      	nop
 802d440:	08030901 	.word	0x08030901
 802d444:	08030912 	.word	0x08030912

0802d448 <__sflush_r>:
 802d448:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802d44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d450:	0716      	lsls	r6, r2, #28
 802d452:	4605      	mov	r5, r0
 802d454:	460c      	mov	r4, r1
 802d456:	d454      	bmi.n	802d502 <__sflush_r+0xba>
 802d458:	684b      	ldr	r3, [r1, #4]
 802d45a:	2b00      	cmp	r3, #0
 802d45c:	dc02      	bgt.n	802d464 <__sflush_r+0x1c>
 802d45e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802d460:	2b00      	cmp	r3, #0
 802d462:	dd48      	ble.n	802d4f6 <__sflush_r+0xae>
 802d464:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d466:	2e00      	cmp	r6, #0
 802d468:	d045      	beq.n	802d4f6 <__sflush_r+0xae>
 802d46a:	2300      	movs	r3, #0
 802d46c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802d470:	682f      	ldr	r7, [r5, #0]
 802d472:	6a21      	ldr	r1, [r4, #32]
 802d474:	602b      	str	r3, [r5, #0]
 802d476:	d030      	beq.n	802d4da <__sflush_r+0x92>
 802d478:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802d47a:	89a3      	ldrh	r3, [r4, #12]
 802d47c:	0759      	lsls	r1, r3, #29
 802d47e:	d505      	bpl.n	802d48c <__sflush_r+0x44>
 802d480:	6863      	ldr	r3, [r4, #4]
 802d482:	1ad2      	subs	r2, r2, r3
 802d484:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802d486:	b10b      	cbz	r3, 802d48c <__sflush_r+0x44>
 802d488:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802d48a:	1ad2      	subs	r2, r2, r3
 802d48c:	2300      	movs	r3, #0
 802d48e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802d490:	6a21      	ldr	r1, [r4, #32]
 802d492:	4628      	mov	r0, r5
 802d494:	47b0      	blx	r6
 802d496:	1c43      	adds	r3, r0, #1
 802d498:	89a3      	ldrh	r3, [r4, #12]
 802d49a:	d106      	bne.n	802d4aa <__sflush_r+0x62>
 802d49c:	6829      	ldr	r1, [r5, #0]
 802d49e:	291d      	cmp	r1, #29
 802d4a0:	d82b      	bhi.n	802d4fa <__sflush_r+0xb2>
 802d4a2:	4a2a      	ldr	r2, [pc, #168]	@ (802d54c <__sflush_r+0x104>)
 802d4a4:	410a      	asrs	r2, r1
 802d4a6:	07d6      	lsls	r6, r2, #31
 802d4a8:	d427      	bmi.n	802d4fa <__sflush_r+0xb2>
 802d4aa:	2200      	movs	r2, #0
 802d4ac:	04d9      	lsls	r1, r3, #19
 802d4ae:	6062      	str	r2, [r4, #4]
 802d4b0:	6922      	ldr	r2, [r4, #16]
 802d4b2:	6022      	str	r2, [r4, #0]
 802d4b4:	d504      	bpl.n	802d4c0 <__sflush_r+0x78>
 802d4b6:	1c42      	adds	r2, r0, #1
 802d4b8:	d101      	bne.n	802d4be <__sflush_r+0x76>
 802d4ba:	682b      	ldr	r3, [r5, #0]
 802d4bc:	b903      	cbnz	r3, 802d4c0 <__sflush_r+0x78>
 802d4be:	6560      	str	r0, [r4, #84]	@ 0x54
 802d4c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802d4c2:	602f      	str	r7, [r5, #0]
 802d4c4:	b1b9      	cbz	r1, 802d4f6 <__sflush_r+0xae>
 802d4c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802d4ca:	4299      	cmp	r1, r3
 802d4cc:	d002      	beq.n	802d4d4 <__sflush_r+0x8c>
 802d4ce:	4628      	mov	r0, r5
 802d4d0:	f7ff fc9c 	bl	802ce0c <_free_r>
 802d4d4:	2300      	movs	r3, #0
 802d4d6:	6363      	str	r3, [r4, #52]	@ 0x34
 802d4d8:	e00d      	b.n	802d4f6 <__sflush_r+0xae>
 802d4da:	2301      	movs	r3, #1
 802d4dc:	4628      	mov	r0, r5
 802d4de:	47b0      	blx	r6
 802d4e0:	4602      	mov	r2, r0
 802d4e2:	1c50      	adds	r0, r2, #1
 802d4e4:	d1c9      	bne.n	802d47a <__sflush_r+0x32>
 802d4e6:	682b      	ldr	r3, [r5, #0]
 802d4e8:	2b00      	cmp	r3, #0
 802d4ea:	d0c6      	beq.n	802d47a <__sflush_r+0x32>
 802d4ec:	2b1d      	cmp	r3, #29
 802d4ee:	d001      	beq.n	802d4f4 <__sflush_r+0xac>
 802d4f0:	2b16      	cmp	r3, #22
 802d4f2:	d11d      	bne.n	802d530 <__sflush_r+0xe8>
 802d4f4:	602f      	str	r7, [r5, #0]
 802d4f6:	2000      	movs	r0, #0
 802d4f8:	e021      	b.n	802d53e <__sflush_r+0xf6>
 802d4fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d4fe:	b21b      	sxth	r3, r3
 802d500:	e01a      	b.n	802d538 <__sflush_r+0xf0>
 802d502:	690f      	ldr	r7, [r1, #16]
 802d504:	2f00      	cmp	r7, #0
 802d506:	d0f6      	beq.n	802d4f6 <__sflush_r+0xae>
 802d508:	0793      	lsls	r3, r2, #30
 802d50a:	680e      	ldr	r6, [r1, #0]
 802d50c:	600f      	str	r7, [r1, #0]
 802d50e:	bf0c      	ite	eq
 802d510:	694b      	ldreq	r3, [r1, #20]
 802d512:	2300      	movne	r3, #0
 802d514:	eba6 0807 	sub.w	r8, r6, r7
 802d518:	608b      	str	r3, [r1, #8]
 802d51a:	f1b8 0f00 	cmp.w	r8, #0
 802d51e:	ddea      	ble.n	802d4f6 <__sflush_r+0xae>
 802d520:	4643      	mov	r3, r8
 802d522:	463a      	mov	r2, r7
 802d524:	6a21      	ldr	r1, [r4, #32]
 802d526:	4628      	mov	r0, r5
 802d528:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802d52a:	47b0      	blx	r6
 802d52c:	2800      	cmp	r0, #0
 802d52e:	dc08      	bgt.n	802d542 <__sflush_r+0xfa>
 802d530:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d538:	f04f 30ff 	mov.w	r0, #4294967295
 802d53c:	81a3      	strh	r3, [r4, #12]
 802d53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802d542:	4407      	add	r7, r0
 802d544:	eba8 0800 	sub.w	r8, r8, r0
 802d548:	e7e7      	b.n	802d51a <__sflush_r+0xd2>
 802d54a:	bf00      	nop
 802d54c:	dfbffffe 	.word	0xdfbffffe

0802d550 <_fflush_r>:
 802d550:	b538      	push	{r3, r4, r5, lr}
 802d552:	690b      	ldr	r3, [r1, #16]
 802d554:	4605      	mov	r5, r0
 802d556:	460c      	mov	r4, r1
 802d558:	b913      	cbnz	r3, 802d560 <_fflush_r+0x10>
 802d55a:	2500      	movs	r5, #0
 802d55c:	4628      	mov	r0, r5
 802d55e:	bd38      	pop	{r3, r4, r5, pc}
 802d560:	b118      	cbz	r0, 802d56a <_fflush_r+0x1a>
 802d562:	6a03      	ldr	r3, [r0, #32]
 802d564:	b90b      	cbnz	r3, 802d56a <_fflush_r+0x1a>
 802d566:	f7ff fa35 	bl	802c9d4 <__sinit>
 802d56a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d56e:	2b00      	cmp	r3, #0
 802d570:	d0f3      	beq.n	802d55a <_fflush_r+0xa>
 802d572:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802d574:	07d0      	lsls	r0, r2, #31
 802d576:	d404      	bmi.n	802d582 <_fflush_r+0x32>
 802d578:	0599      	lsls	r1, r3, #22
 802d57a:	d402      	bmi.n	802d582 <_fflush_r+0x32>
 802d57c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d57e:	f7ff fbd8 	bl	802cd32 <__retarget_lock_acquire_recursive>
 802d582:	4628      	mov	r0, r5
 802d584:	4621      	mov	r1, r4
 802d586:	f7ff ff5f 	bl	802d448 <__sflush_r>
 802d58a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802d58c:	4605      	mov	r5, r0
 802d58e:	07da      	lsls	r2, r3, #31
 802d590:	d4e4      	bmi.n	802d55c <_fflush_r+0xc>
 802d592:	89a3      	ldrh	r3, [r4, #12]
 802d594:	059b      	lsls	r3, r3, #22
 802d596:	d4e1      	bmi.n	802d55c <_fflush_r+0xc>
 802d598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802d59a:	f7ff fbcb 	bl	802cd34 <__retarget_lock_release_recursive>
 802d59e:	e7dd      	b.n	802d55c <_fflush_r+0xc>

0802d5a0 <__swbuf_r>:
 802d5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d5a2:	460e      	mov	r6, r1
 802d5a4:	4614      	mov	r4, r2
 802d5a6:	4605      	mov	r5, r0
 802d5a8:	b118      	cbz	r0, 802d5b2 <__swbuf_r+0x12>
 802d5aa:	6a03      	ldr	r3, [r0, #32]
 802d5ac:	b90b      	cbnz	r3, 802d5b2 <__swbuf_r+0x12>
 802d5ae:	f7ff fa11 	bl	802c9d4 <__sinit>
 802d5b2:	69a3      	ldr	r3, [r4, #24]
 802d5b4:	60a3      	str	r3, [r4, #8]
 802d5b6:	89a3      	ldrh	r3, [r4, #12]
 802d5b8:	071a      	lsls	r2, r3, #28
 802d5ba:	d501      	bpl.n	802d5c0 <__swbuf_r+0x20>
 802d5bc:	6923      	ldr	r3, [r4, #16]
 802d5be:	b943      	cbnz	r3, 802d5d2 <__swbuf_r+0x32>
 802d5c0:	4621      	mov	r1, r4
 802d5c2:	4628      	mov	r0, r5
 802d5c4:	f000 f82a 	bl	802d61c <__swsetup_r>
 802d5c8:	b118      	cbz	r0, 802d5d2 <__swbuf_r+0x32>
 802d5ca:	f04f 37ff 	mov.w	r7, #4294967295
 802d5ce:	4638      	mov	r0, r7
 802d5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d5d2:	6823      	ldr	r3, [r4, #0]
 802d5d4:	b2f6      	uxtb	r6, r6
 802d5d6:	6922      	ldr	r2, [r4, #16]
 802d5d8:	4637      	mov	r7, r6
 802d5da:	1a98      	subs	r0, r3, r2
 802d5dc:	6963      	ldr	r3, [r4, #20]
 802d5de:	4283      	cmp	r3, r0
 802d5e0:	dc05      	bgt.n	802d5ee <__swbuf_r+0x4e>
 802d5e2:	4621      	mov	r1, r4
 802d5e4:	4628      	mov	r0, r5
 802d5e6:	f7ff ffb3 	bl	802d550 <_fflush_r>
 802d5ea:	2800      	cmp	r0, #0
 802d5ec:	d1ed      	bne.n	802d5ca <__swbuf_r+0x2a>
 802d5ee:	68a3      	ldr	r3, [r4, #8]
 802d5f0:	3b01      	subs	r3, #1
 802d5f2:	60a3      	str	r3, [r4, #8]
 802d5f4:	6823      	ldr	r3, [r4, #0]
 802d5f6:	1c5a      	adds	r2, r3, #1
 802d5f8:	6022      	str	r2, [r4, #0]
 802d5fa:	701e      	strb	r6, [r3, #0]
 802d5fc:	1c43      	adds	r3, r0, #1
 802d5fe:	6962      	ldr	r2, [r4, #20]
 802d600:	429a      	cmp	r2, r3
 802d602:	d004      	beq.n	802d60e <__swbuf_r+0x6e>
 802d604:	89a3      	ldrh	r3, [r4, #12]
 802d606:	07db      	lsls	r3, r3, #31
 802d608:	d5e1      	bpl.n	802d5ce <__swbuf_r+0x2e>
 802d60a:	2e0a      	cmp	r6, #10
 802d60c:	d1df      	bne.n	802d5ce <__swbuf_r+0x2e>
 802d60e:	4621      	mov	r1, r4
 802d610:	4628      	mov	r0, r5
 802d612:	f7ff ff9d 	bl	802d550 <_fflush_r>
 802d616:	2800      	cmp	r0, #0
 802d618:	d0d9      	beq.n	802d5ce <__swbuf_r+0x2e>
 802d61a:	e7d6      	b.n	802d5ca <__swbuf_r+0x2a>

0802d61c <__swsetup_r>:
 802d61c:	b538      	push	{r3, r4, r5, lr}
 802d61e:	4b29      	ldr	r3, [pc, #164]	@ (802d6c4 <__swsetup_r+0xa8>)
 802d620:	4605      	mov	r5, r0
 802d622:	460c      	mov	r4, r1
 802d624:	6818      	ldr	r0, [r3, #0]
 802d626:	b118      	cbz	r0, 802d630 <__swsetup_r+0x14>
 802d628:	6a03      	ldr	r3, [r0, #32]
 802d62a:	b90b      	cbnz	r3, 802d630 <__swsetup_r+0x14>
 802d62c:	f7ff f9d2 	bl	802c9d4 <__sinit>
 802d630:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d634:	0719      	lsls	r1, r3, #28
 802d636:	d422      	bmi.n	802d67e <__swsetup_r+0x62>
 802d638:	06da      	lsls	r2, r3, #27
 802d63a:	d407      	bmi.n	802d64c <__swsetup_r+0x30>
 802d63c:	2209      	movs	r2, #9
 802d63e:	602a      	str	r2, [r5, #0]
 802d640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802d644:	f04f 30ff 	mov.w	r0, #4294967295
 802d648:	81a3      	strh	r3, [r4, #12]
 802d64a:	e033      	b.n	802d6b4 <__swsetup_r+0x98>
 802d64c:	0758      	lsls	r0, r3, #29
 802d64e:	d512      	bpl.n	802d676 <__swsetup_r+0x5a>
 802d650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802d652:	b141      	cbz	r1, 802d666 <__swsetup_r+0x4a>
 802d654:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802d658:	4299      	cmp	r1, r3
 802d65a:	d002      	beq.n	802d662 <__swsetup_r+0x46>
 802d65c:	4628      	mov	r0, r5
 802d65e:	f7ff fbd5 	bl	802ce0c <_free_r>
 802d662:	2300      	movs	r3, #0
 802d664:	6363      	str	r3, [r4, #52]	@ 0x34
 802d666:	89a3      	ldrh	r3, [r4, #12]
 802d668:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802d66c:	81a3      	strh	r3, [r4, #12]
 802d66e:	2300      	movs	r3, #0
 802d670:	6063      	str	r3, [r4, #4]
 802d672:	6923      	ldr	r3, [r4, #16]
 802d674:	6023      	str	r3, [r4, #0]
 802d676:	89a3      	ldrh	r3, [r4, #12]
 802d678:	f043 0308 	orr.w	r3, r3, #8
 802d67c:	81a3      	strh	r3, [r4, #12]
 802d67e:	6923      	ldr	r3, [r4, #16]
 802d680:	b94b      	cbnz	r3, 802d696 <__swsetup_r+0x7a>
 802d682:	89a3      	ldrh	r3, [r4, #12]
 802d684:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802d688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802d68c:	d003      	beq.n	802d696 <__swsetup_r+0x7a>
 802d68e:	4621      	mov	r1, r4
 802d690:	4628      	mov	r0, r5
 802d692:	f000 f84c 	bl	802d72e <__smakebuf_r>
 802d696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d69a:	f013 0201 	ands.w	r2, r3, #1
 802d69e:	d00a      	beq.n	802d6b6 <__swsetup_r+0x9a>
 802d6a0:	2200      	movs	r2, #0
 802d6a2:	60a2      	str	r2, [r4, #8]
 802d6a4:	6962      	ldr	r2, [r4, #20]
 802d6a6:	4252      	negs	r2, r2
 802d6a8:	61a2      	str	r2, [r4, #24]
 802d6aa:	6922      	ldr	r2, [r4, #16]
 802d6ac:	b942      	cbnz	r2, 802d6c0 <__swsetup_r+0xa4>
 802d6ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802d6b2:	d1c5      	bne.n	802d640 <__swsetup_r+0x24>
 802d6b4:	bd38      	pop	{r3, r4, r5, pc}
 802d6b6:	0799      	lsls	r1, r3, #30
 802d6b8:	bf58      	it	pl
 802d6ba:	6962      	ldrpl	r2, [r4, #20]
 802d6bc:	60a2      	str	r2, [r4, #8]
 802d6be:	e7f4      	b.n	802d6aa <__swsetup_r+0x8e>
 802d6c0:	2000      	movs	r0, #0
 802d6c2:	e7f7      	b.n	802d6b4 <__swsetup_r+0x98>
 802d6c4:	200000b4 	.word	0x200000b4

0802d6c8 <memchr>:
 802d6c8:	b2c9      	uxtb	r1, r1
 802d6ca:	4603      	mov	r3, r0
 802d6cc:	4402      	add	r2, r0
 802d6ce:	b510      	push	{r4, lr}
 802d6d0:	4293      	cmp	r3, r2
 802d6d2:	4618      	mov	r0, r3
 802d6d4:	d101      	bne.n	802d6da <memchr+0x12>
 802d6d6:	2000      	movs	r0, #0
 802d6d8:	e003      	b.n	802d6e2 <memchr+0x1a>
 802d6da:	7804      	ldrb	r4, [r0, #0]
 802d6dc:	3301      	adds	r3, #1
 802d6de:	428c      	cmp	r4, r1
 802d6e0:	d1f6      	bne.n	802d6d0 <memchr+0x8>
 802d6e2:	bd10      	pop	{r4, pc}

0802d6e4 <__swhatbuf_r>:
 802d6e4:	b570      	push	{r4, r5, r6, lr}
 802d6e6:	460c      	mov	r4, r1
 802d6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d6ec:	b096      	sub	sp, #88	@ 0x58
 802d6ee:	4615      	mov	r5, r2
 802d6f0:	2900      	cmp	r1, #0
 802d6f2:	461e      	mov	r6, r3
 802d6f4:	da0c      	bge.n	802d710 <__swhatbuf_r+0x2c>
 802d6f6:	89a3      	ldrh	r3, [r4, #12]
 802d6f8:	2100      	movs	r1, #0
 802d6fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802d6fe:	bf14      	ite	ne
 802d700:	2340      	movne	r3, #64	@ 0x40
 802d702:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802d706:	2000      	movs	r0, #0
 802d708:	6031      	str	r1, [r6, #0]
 802d70a:	602b      	str	r3, [r5, #0]
 802d70c:	b016      	add	sp, #88	@ 0x58
 802d70e:	bd70      	pop	{r4, r5, r6, pc}
 802d710:	466a      	mov	r2, sp
 802d712:	f000 f849 	bl	802d7a8 <_fstat_r>
 802d716:	2800      	cmp	r0, #0
 802d718:	dbed      	blt.n	802d6f6 <__swhatbuf_r+0x12>
 802d71a:	9901      	ldr	r1, [sp, #4]
 802d71c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802d720:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802d724:	4259      	negs	r1, r3
 802d726:	4159      	adcs	r1, r3
 802d728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802d72c:	e7eb      	b.n	802d706 <__swhatbuf_r+0x22>

0802d72e <__smakebuf_r>:
 802d72e:	898b      	ldrh	r3, [r1, #12]
 802d730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802d732:	079d      	lsls	r5, r3, #30
 802d734:	4606      	mov	r6, r0
 802d736:	460c      	mov	r4, r1
 802d738:	d507      	bpl.n	802d74a <__smakebuf_r+0x1c>
 802d73a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802d73e:	6023      	str	r3, [r4, #0]
 802d740:	6123      	str	r3, [r4, #16]
 802d742:	2301      	movs	r3, #1
 802d744:	6163      	str	r3, [r4, #20]
 802d746:	b003      	add	sp, #12
 802d748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d74a:	ab01      	add	r3, sp, #4
 802d74c:	466a      	mov	r2, sp
 802d74e:	f7ff ffc9 	bl	802d6e4 <__swhatbuf_r>
 802d752:	9f00      	ldr	r7, [sp, #0]
 802d754:	4605      	mov	r5, r0
 802d756:	4630      	mov	r0, r6
 802d758:	4639      	mov	r1, r7
 802d75a:	f7ff f815 	bl	802c788 <_malloc_r>
 802d75e:	b948      	cbnz	r0, 802d774 <__smakebuf_r+0x46>
 802d760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802d764:	059a      	lsls	r2, r3, #22
 802d766:	d4ee      	bmi.n	802d746 <__smakebuf_r+0x18>
 802d768:	f023 0303 	bic.w	r3, r3, #3
 802d76c:	f043 0302 	orr.w	r3, r3, #2
 802d770:	81a3      	strh	r3, [r4, #12]
 802d772:	e7e2      	b.n	802d73a <__smakebuf_r+0xc>
 802d774:	89a3      	ldrh	r3, [r4, #12]
 802d776:	6020      	str	r0, [r4, #0]
 802d778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802d77c:	81a3      	strh	r3, [r4, #12]
 802d77e:	9b01      	ldr	r3, [sp, #4]
 802d780:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802d784:	b15b      	cbz	r3, 802d79e <__smakebuf_r+0x70>
 802d786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d78a:	4630      	mov	r0, r6
 802d78c:	f000 f81e 	bl	802d7cc <_isatty_r>
 802d790:	b128      	cbz	r0, 802d79e <__smakebuf_r+0x70>
 802d792:	89a3      	ldrh	r3, [r4, #12]
 802d794:	f023 0303 	bic.w	r3, r3, #3
 802d798:	f043 0301 	orr.w	r3, r3, #1
 802d79c:	81a3      	strh	r3, [r4, #12]
 802d79e:	89a3      	ldrh	r3, [r4, #12]
 802d7a0:	431d      	orrs	r5, r3
 802d7a2:	81a5      	strh	r5, [r4, #12]
 802d7a4:	e7cf      	b.n	802d746 <__smakebuf_r+0x18>
	...

0802d7a8 <_fstat_r>:
 802d7a8:	b538      	push	{r3, r4, r5, lr}
 802d7aa:	2300      	movs	r3, #0
 802d7ac:	4d06      	ldr	r5, [pc, #24]	@ (802d7c8 <_fstat_r+0x20>)
 802d7ae:	4604      	mov	r4, r0
 802d7b0:	4608      	mov	r0, r1
 802d7b2:	4611      	mov	r1, r2
 802d7b4:	602b      	str	r3, [r5, #0]
 802d7b6:	f7d3 fdc5 	bl	8001344 <_fstat>
 802d7ba:	1c43      	adds	r3, r0, #1
 802d7bc:	d102      	bne.n	802d7c4 <_fstat_r+0x1c>
 802d7be:	682b      	ldr	r3, [r5, #0]
 802d7c0:	b103      	cbz	r3, 802d7c4 <_fstat_r+0x1c>
 802d7c2:	6023      	str	r3, [r4, #0]
 802d7c4:	bd38      	pop	{r3, r4, r5, pc}
 802d7c6:	bf00      	nop
 802d7c8:	20012ca4 	.word	0x20012ca4

0802d7cc <_isatty_r>:
 802d7cc:	b538      	push	{r3, r4, r5, lr}
 802d7ce:	2300      	movs	r3, #0
 802d7d0:	4d05      	ldr	r5, [pc, #20]	@ (802d7e8 <_isatty_r+0x1c>)
 802d7d2:	4604      	mov	r4, r0
 802d7d4:	4608      	mov	r0, r1
 802d7d6:	602b      	str	r3, [r5, #0]
 802d7d8:	f7d3 fdc4 	bl	8001364 <_isatty>
 802d7dc:	1c43      	adds	r3, r0, #1
 802d7de:	d102      	bne.n	802d7e6 <_isatty_r+0x1a>
 802d7e0:	682b      	ldr	r3, [r5, #0]
 802d7e2:	b103      	cbz	r3, 802d7e6 <_isatty_r+0x1a>
 802d7e4:	6023      	str	r3, [r4, #0]
 802d7e6:	bd38      	pop	{r3, r4, r5, pc}
 802d7e8:	20012ca4 	.word	0x20012ca4

0802d7ec <_init>:
 802d7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d7ee:	bf00      	nop
 802d7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d7f2:	bc08      	pop	{r3}
 802d7f4:	469e      	mov	lr, r3
 802d7f6:	4770      	bx	lr

0802d7f8 <_fini>:
 802d7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d7fa:	bf00      	nop
 802d7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802d7fe:	bc08      	pop	{r3}
 802d800:	469e      	mov	lr, r3
 802d802:	4770      	bx	lr
